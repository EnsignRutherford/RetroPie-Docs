{
    "docs": [
        {
            "location": "/", 
            "text": "Latest Version\n\n\n4.1\n\n\nChangelog\n\n\n\n\n\n\n\n\n\n\nWhat is RetroPie?\n\n\nRetroPie allows you to turn your Raspberry Pi or PC into a retro-gaming machine. It builds upon Raspbian, EmulationStation, RetroArch and many other projects to enable you to play your favourite Arcade, home-console, and classic PC games with the minimum set-up. For power users it also provides a large variety of configuration tools to customise the system as you want.\n\n\nRetroPie sits on top of a full OS, you can install it on an existing Raspbian, or start with the RetroPie SD image and add additional software later. It's up to you. \n\n\nWhat Is An Emulator?\n\n\nAn emulator is software that makes a computer behave like another computer, or in the case of RetroPie a computer that behaves like a video game console such as the Super Nintendo. The RetroPie SD image comes pre-installed with many different emulators.\n\n\n\n\nWhat Are ROMs?\n\n\nROMs are digital versions of game cartridges. Loading up a ROM in an emulator is the equivalent of putting a cartridge in a game console. \n\n\nROMs are copyrighted content and as such are not included with RetroPie.\n\n\n\n\nGetting Started\n\n\nSelect your system for installation instructions:\n\n\n\n\n\n\n\n\nRaspberry Pi\n\n\nPC\n\n\nOdroid", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-retropie", 
            "text": "RetroPie allows you to turn your Raspberry Pi or PC into a retro-gaming machine. It builds upon Raspbian, EmulationStation, RetroArch and many other projects to enable you to play your favourite Arcade, home-console, and classic PC games with the minimum set-up. For power users it also provides a large variety of configuration tools to customise the system as you want.  RetroPie sits on top of a full OS, you can install it on an existing Raspbian, or start with the RetroPie SD image and add additional software later. It's up to you.", 
            "title": "What is RetroPie?"
        }, 
        {
            "location": "/#what-is-an-emulator", 
            "text": "An emulator is software that makes a computer behave like another computer, or in the case of RetroPie a computer that behaves like a video game console such as the Super Nintendo. The RetroPie SD image comes pre-installed with many different emulators.", 
            "title": "What Is An Emulator?"
        }, 
        {
            "location": "/#what-are-roms", 
            "text": "ROMs are digital versions of game cartridges. Loading up a ROM in an emulator is the equivalent of putting a cartridge in a game console.   ROMs are copyrighted content and as such are not included with RetroPie.", 
            "title": "What Are ROMs?"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Select your system for installation instructions:     Raspberry Pi  PC  Odroid", 
            "title": "Getting Started"
        }, 
        {
            "location": "/First-Installation/", 
            "text": "Version\n\n\n4.1\n\n\n\n\n\n\n\n\n\n\n\n\nHardware\n\n\nInstallation\n\n\nController Configuration\n\n\nEmulationStation\n\n\nConfigure Wifi\n\n\nInstalling Additional Emulators\n\n\nTransferring Roms\n\n\n\n\nCongratulations! You have discovered the wonderful world of RetroPie- your entire childhood is within reach! RetroPie is a combination of multiple projects including \nRetroArch\n, \nEmulationStation\n, and many others. \n\n\nThis page is for people just getting started on RetroPie. The easiest way to install RetroPie is the SD image which is a ready to go system built upon top of the Raspbian OS - this is the method described in the following guide. Alternatively, advanced users can install RetroPie \nmanually\n. \n\n\nThis guide will give you the very basics to get you up and running from a blank SD card to first boot into EmulationStation.\n\n\nIf you hate reading then see this video. Otherwise read on! \n\n\n\n\nHardware\n\n\n\n\nRaspberry Pi (A, A+, B, B+, 2, Zero, or 3) - for best performance use a \nRaspberry Pi 3 Model B\n\n\nRaspberry Pi Case (optional but recommended)\n\n\nMicroSD Card (see compatible SD card list \nhere\n)\n\n\nMicroSD Card Reader (For installing retropie from your computer)\n\n\nHDMI cable or 4 Pole RCA to 3.5mm Cable (HDMI works best)\n\n\nTelevision or Computer Monitor- really any screen with HDMI or RCA ports\n\n\nWifi Dongle or Ethernet Cable (Wifi is built into the Pi 3- see wifi dongle compatible list \nhere\n)\n\n\n5V 2A Micro USB Power Supply (2.5A for pi 3)\n\n\nUSB Keyboard and Mouse (to get things set up or you can use \nSSH\n)\n\n\nUSB Game Controller of your choice (or you can get the \nControl Block\n to use original SNES controllers)\n\n\n\n\nThe simplest way to get most of these components is through a kit such as the \nCanakit\n. \n\n\nInstallation\n\n\nDownload\n\n\nThere are currently two versions of RetroPie. There is one version for Raspberry Pi 0/1 (Model A, A+, B, B+) and there is a version for Raspberry Pi 2/3. \n\n\nDownload the SD image for your version of Raspberry Pi from the following page:\n\n\nhttps://retropie.org.uk/download/\n\n\nIf you are unsure which version of Raspberry Pi you have just count the raspberries on boot:\n\n\n\n\n\n\n\n\nRaspberry Pi 0/1\n\n\nRaspberry Pi 2/3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you get the error \nIllegal Instruction\n when it boots or if it just boots into the terminal, you picked the wrong SD image or the image was corrupted on download or extraction.\n\n\nExtract\n\n\nOnce you have downloaded your SD card image you need to extract it using a program such as \n7-Zip\n. You will extract the downloaded \n.gz\n file and the extracted file will be a \n.img\n file.\n\n\nTo extract from the command line, you can type the following into a Terminal window, placing X with version you downloaded:\n\n\ngunzip retropie-4.X.X-rpi2_rpi3.img.gz\n\n\nInstall\n\n\nTo install the RetroPie SD image on your MicroSD card. (You may need a MicroSD card reader to plug it into your computer) \n\n\n\n\nFor Windows you can use a program called \nWin32DiskImager\n \n\n\nFor mac you can use \nApple Pi Baker\n \n\n\nFor Linux you can use \ndd\n command or \nEtcher\n\n\n\n\nSee \nthe official Raspberry Pi \"WRITING AN IMAGE TO THE SD CARD\" instructions\n.\n\n\nNote\n RetroPie is built on top of Raspbian (a linux based OS for the Raspberry Pi) and as such the partition on the SD card is EXT4 (a linux filesystem) which is not visible on windows systems, so the card will show up as a smaller size than usual and you wont be able to see everything on the card, but it is all there. You will be able to access the filesystem over the network as described in the transferring roms section below.\n\n\nIf you're updating from a previous version of retropie see \nHERE\n\n\nConfigure Controllers\n\n\nOn first boot your filesystem will be expanded automatically, you will then be welcomed with the following screen- this menu will configure your controls for both Emulationstation and RetroArch Emulators:\n\n\n\n\nHold down any button on your keyboard or gamepad and the name will appear at the bottom and then open up into a configuration menu:\n\n\n\n\nFollow the onscreen instructions to configure your gamepad- if you run out of buttons just hold down a button to skip each unused button. \nWhen you get to OK press the button you have configured as \"A\"\n.\n\n\n\n\nIf you wish to configure more than one controller, you can do so from the start menu of emulationstation. For more details on manual controller configurations see this page \nHere\n.\n\n\nSee the following diagrams for reference:\n\n\n\n\n\n\n\n\nSNES Controller\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nXBox 360 Controller\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPS3 Controller\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHotkeys\n\n\nHotkeys enable you to press a combination of buttons to access functions such as saving, loading, and exiting emulators. The following chart shows the default hotkey combinations. By default, the hotkey is select so that means you hold down select while pressing another button to execute a command. \nNote\n that hotkeys are only specific to the retroarch/libretro based emulators.\n\n\n\n\n\n\n\n\nHotkeys\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nSelect+Start\n\n\nExit\n\n\n\n\n\n\nSelect+Right Shoulder\n\n\nSave\n\n\n\n\n\n\nSelect+Left Shoulder\n\n\nLoad\n\n\n\n\n\n\nSelect+Right\n\n\nInput State Slot Increase\n\n\n\n\n\n\nSelect+Left\n\n\nInput State Slot Decrease\n\n\n\n\n\n\nSelect+X\n\n\nRGUI Menu\n\n\n\n\n\n\nSelect+B\n\n\nReset\n\n\n\n\n\n\n\n\nEmulationStation\n\n\n\n\n\n\n\n\nWhere are the systems?\n\n\n\n\n\n\n\n\n\n\nWhen you first see EmulationStation you may wonder why you don't see systems like the SNES or Game Boy- worry not- they are installed on the system, roms just need to be added to their respective rom folders before they will become visible. Transferring roms are described in the following steps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWifi\n\n\nIf you wish to use wifi to transfer roms over the network rather than a USB stick or Ethernet cable you'll need to setup your wifi- which can also be done from the Retropie menu in emulationstation:\n\n\n\n\n\n\n\n\nConnect to Wifi Network:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose your SSID from a list:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType your Wifi Password (may take a moment to connect)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce configured you will see your IP address\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor more WiFi configuration options see this page \nHERE\n\n\nInstalling additional Emulators\n\n\nOn RetroPie 4.0+, not everything is installed by default. The pre-made images contain the best working emulators for each system supported by the hardware. This should cover everything most users would be doing. Ports like quake and doom and some other emulators like ScummVM can be installed later.\n\n\nSoftware can be installed from the RetroPie-Setup script - which is accessible from the RetroPie menu on EmulationStation. Once there you can navigate to \"Manage Packages\" where you will see various sections. In each section are lists of packages that can be installed (and it will show what is currently installed). Stable additional packages are under the \"Optional\" section, with more unstable packages listed under experimental. The packages are ordered first by type (emulators / libretro cores / ports), then alphabetically. By selecting a package you can choose to install it, or remove it. Some packages also have additional configurations.\n\n\nTransferring Roms\n\n\nDue to the nature/complexity of Copyright/Intellectual Property Rights Law, which differs significantly from Country to Country, ROMs cannot be provided with RetroPie and must be provided by the user. You should only have ROMs of games that you own. \n\n\nThere are three main methods of transferring roms: \n\n\nUSB\n\n\n\n\n(ensure that your USB is formatted to FAT32 or NTFS)\n\n\nfirst create a folder called \nretropie\n on your USB stick\n\n\nplug it into the pi and wait for it to finish blinking\n\n\npull the USB out and plug it into a computer\n\n\nadd the roms to their respective folders (in the \nretropie/roms\n folder)\n\n\nplug it back into the raspberry pi\n\n\nwait for it to finish blinking\n\n\nrefresh emulationstation by choosing restart emulationstation from the start menu\n\n\n\n\nsee this video for reference:\n\n\n\n\nSFTP\n\n\n\n\nWired (needs ethernet cable)\n\n\nWireless (needs wifi dongle)\nThere are many SFTP programs out there, for windows many people use \nWinSCP\n for mac you can use something like \nCyberduck\n\n\n\n\n\n\nDefault username: \npi\n \n\n\nDefault Password: \nraspberry\n\n\nYou can also log in as root if you wish to change more files than just the roms, but you first need to enable the root password which is explained \nhere\n\n\nSamba-Shares\n\n\n\n\nif on windows type \n\\\\retropie\n into the computer folder. You can also replace \nretropie\n with your Raspberry Pi's IP address\n\n\n\n\n\n\n\n\nif on MAC OS X open finder, select \"Go\" menu and \"Connect to Server\". Type \nsmb://retropie\n and hit \"Connect\".\n\n\n\n\nPLAY!\n\n\nAfter you've added your roms you need to restart emulationstation in order for them to show up. You can restart emulationstation from the start menu, or by rebooting your pi with \nsudo reboot\n. \n\n\nSee the rest of the \nwiki\n for more detailed information on individual emulators, advanced settings etc. If you still can't figure it out, the RetroPie community is very helpful on the \nforum\n. \n\n\nThe RetroPie Project is primarily maintained by a few developers who develop the project in their free time. If you have found the RetroPie project useful please consider donating to the project \nhere\n. As you become more familiar with RetroPie, pay it forward by helping others on the forum. The RetroPie Project is what it is today because of the many contributions of the community.\n\n\nTHANK YOU!", 
            "title": "First Installation"
        }, 
        {
            "location": "/First-Installation/#hardware", 
            "text": "Raspberry Pi (A, A+, B, B+, 2, Zero, or 3) - for best performance use a  Raspberry Pi 3 Model B  Raspberry Pi Case (optional but recommended)  MicroSD Card (see compatible SD card list  here )  MicroSD Card Reader (For installing retropie from your computer)  HDMI cable or 4 Pole RCA to 3.5mm Cable (HDMI works best)  Television or Computer Monitor- really any screen with HDMI or RCA ports  Wifi Dongle or Ethernet Cable (Wifi is built into the Pi 3- see wifi dongle compatible list  here )  5V 2A Micro USB Power Supply (2.5A for pi 3)  USB Keyboard and Mouse (to get things set up or you can use  SSH )  USB Game Controller of your choice (or you can get the  Control Block  to use original SNES controllers)   The simplest way to get most of these components is through a kit such as the  Canakit .", 
            "title": "Hardware"
        }, 
        {
            "location": "/First-Installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/First-Installation/#download", 
            "text": "There are currently two versions of RetroPie. There is one version for Raspberry Pi 0/1 (Model A, A+, B, B+) and there is a version for Raspberry Pi 2/3.   Download the SD image for your version of Raspberry Pi from the following page:  https://retropie.org.uk/download/  If you are unsure which version of Raspberry Pi you have just count the raspberries on boot:     Raspberry Pi 0/1  Raspberry Pi 2/3           If you get the error  Illegal Instruction  when it boots or if it just boots into the terminal, you picked the wrong SD image or the image was corrupted on download or extraction.", 
            "title": "Download"
        }, 
        {
            "location": "/First-Installation/#extract", 
            "text": "Once you have downloaded your SD card image you need to extract it using a program such as  7-Zip . You will extract the downloaded  .gz  file and the extracted file will be a  .img  file.  To extract from the command line, you can type the following into a Terminal window, placing X with version you downloaded:  gunzip retropie-4.X.X-rpi2_rpi3.img.gz", 
            "title": "Extract"
        }, 
        {
            "location": "/First-Installation/#install", 
            "text": "To install the RetroPie SD image on your MicroSD card. (You may need a MicroSD card reader to plug it into your computer)    For Windows you can use a program called  Win32DiskImager    For mac you can use  Apple Pi Baker    For Linux you can use  dd  command or  Etcher   See  the official Raspberry Pi \"WRITING AN IMAGE TO THE SD CARD\" instructions .  Note  RetroPie is built on top of Raspbian (a linux based OS for the Raspberry Pi) and as such the partition on the SD card is EXT4 (a linux filesystem) which is not visible on windows systems, so the card will show up as a smaller size than usual and you wont be able to see everything on the card, but it is all there. You will be able to access the filesystem over the network as described in the transferring roms section below.  If you're updating from a previous version of retropie see  HERE", 
            "title": "Install"
        }, 
        {
            "location": "/First-Installation/#configure-controllers", 
            "text": "On first boot your filesystem will be expanded automatically, you will then be welcomed with the following screen- this menu will configure your controls for both Emulationstation and RetroArch Emulators:   Hold down any button on your keyboard or gamepad and the name will appear at the bottom and then open up into a configuration menu:   Follow the onscreen instructions to configure your gamepad- if you run out of buttons just hold down a button to skip each unused button.  When you get to OK press the button you have configured as \"A\" .   If you wish to configure more than one controller, you can do so from the start menu of emulationstation. For more details on manual controller configurations see this page  Here .  See the following diagrams for reference:     SNES Controller             XBox 360 Controller             PS3 Controller", 
            "title": "Configure Controllers"
        }, 
        {
            "location": "/First-Installation/#hotkeys", 
            "text": "Hotkeys enable you to press a combination of buttons to access functions such as saving, loading, and exiting emulators. The following chart shows the default hotkey combinations. By default, the hotkey is select so that means you hold down select while pressing another button to execute a command.  Note  that hotkeys are only specific to the retroarch/libretro based emulators.     Hotkeys  Action      Select+Start  Exit    Select+Right Shoulder  Save    Select+Left Shoulder  Load    Select+Right  Input State Slot Increase    Select+Left  Input State Slot Decrease    Select+X  RGUI Menu    Select+B  Reset", 
            "title": "Hotkeys"
        }, 
        {
            "location": "/First-Installation/#emulationstation", 
            "text": "Where are the systems?      When you first see EmulationStation you may wonder why you don't see systems like the SNES or Game Boy- worry not- they are installed on the system, roms just need to be added to their respective rom folders before they will become visible. Transferring roms are described in the following steps.", 
            "title": "EmulationStation"
        }, 
        {
            "location": "/First-Installation/#wifi", 
            "text": "If you wish to use wifi to transfer roms over the network rather than a USB stick or Ethernet cable you'll need to setup your wifi- which can also be done from the Retropie menu in emulationstation:     Connect to Wifi Network:             Choose your SSID from a list:             Type your Wifi Password (may take a moment to connect)             Once configured you will see your IP address          For more WiFi configuration options see this page  HERE", 
            "title": "Wifi"
        }, 
        {
            "location": "/First-Installation/#installing-additional-emulators", 
            "text": "On RetroPie 4.0+, not everything is installed by default. The pre-made images contain the best working emulators for each system supported by the hardware. This should cover everything most users would be doing. Ports like quake and doom and some other emulators like ScummVM can be installed later.  Software can be installed from the RetroPie-Setup script - which is accessible from the RetroPie menu on EmulationStation. Once there you can navigate to \"Manage Packages\" where you will see various sections. In each section are lists of packages that can be installed (and it will show what is currently installed). Stable additional packages are under the \"Optional\" section, with more unstable packages listed under experimental. The packages are ordered first by type (emulators / libretro cores / ports), then alphabetically. By selecting a package you can choose to install it, or remove it. Some packages also have additional configurations.", 
            "title": "Installing additional Emulators"
        }, 
        {
            "location": "/First-Installation/#transferring-roms", 
            "text": "Due to the nature/complexity of Copyright/Intellectual Property Rights Law, which differs significantly from Country to Country, ROMs cannot be provided with RetroPie and must be provided by the user. You should only have ROMs of games that you own.   There are three main methods of transferring roms:", 
            "title": "Transferring Roms"
        }, 
        {
            "location": "/First-Installation/#usb", 
            "text": "(ensure that your USB is formatted to FAT32 or NTFS)  first create a folder called  retropie  on your USB stick  plug it into the pi and wait for it to finish blinking  pull the USB out and plug it into a computer  add the roms to their respective folders (in the  retropie/roms  folder)  plug it back into the raspberry pi  wait for it to finish blinking  refresh emulationstation by choosing restart emulationstation from the start menu   see this video for reference:", 
            "title": "USB"
        }, 
        {
            "location": "/First-Installation/#sftp", 
            "text": "Wired (needs ethernet cable)  Wireless (needs wifi dongle)\nThere are many SFTP programs out there, for windows many people use  WinSCP  for mac you can use something like  Cyberduck    Default username:  pi    Default Password:  raspberry  You can also log in as root if you wish to change more files than just the roms, but you first need to enable the root password which is explained  here", 
            "title": "SFTP"
        }, 
        {
            "location": "/First-Installation/#samba-shares", 
            "text": "if on windows type  \\\\retropie  into the computer folder. You can also replace  retropie  with your Raspberry Pi's IP address     if on MAC OS X open finder, select \"Go\" menu and \"Connect to Server\". Type  smb://retropie  and hit \"Connect\".", 
            "title": "Samba-Shares"
        }, 
        {
            "location": "/First-Installation/#play", 
            "text": "After you've added your roms you need to restart emulationstation in order for them to show up. You can restart emulationstation from the start menu, or by rebooting your pi with  sudo reboot .   See the rest of the  wiki  for more detailed information on individual emulators, advanced settings etc. If you still can't figure it out, the RetroPie community is very helpful on the  forum .   The RetroPie Project is primarily maintained by a few developers who develop the project in their free time. If you have found the RetroPie project useful please consider donating to the project  here . As you become more familiar with RetroPie, pay it forward by helping others on the forum. The RetroPie Project is what it is today because of the many contributions of the community.  THANK YOU!", 
            "title": "PLAY!"
        }, 
        {
            "location": "/Managing-ROMs/", 
            "text": "Getting Started with Arcade Emulation\n\n\nArcade emulation requires a different planning approach than console systems. Please read this entire page before beginning your RetroPie arcade emulation project.\n\n\nStep One: Choose an arcade emulator\n\n\n\n\n\n\n\n\nSystem\n\n\nRecommended MAME Emulator\n\n\nRecommended FB Alpha Emulator\n\n\n\n\n\n\n\n\n\n\nPi 2 and Pi 3\n\n\nlr-mame2003\n\n\nlr-fbalpha\n\n\n\n\n\n\nPi 1 and Pi Zero\n\n\nmame4all\n  (not \nlr-mame4all\n)\n\n\npi-fba\n\n\n\n\n\n\n\n\nOther [[MAME]]and [[FB Alpha|FinalBurn Alpha]] emulator versions are also available in RetroPie. Please be aware that earlier versions generally run faster than later versions, but also support fewer games.\n\n\nFurther Reading\n\n\n\n\nArcade games and how to play them, A non-technical MAME and FBA tutorial by rbaker\n\n\n[[Instructions for how to set up FB Alpha as a separate Neo Geo system|Neo-Geo]]\n\n\n\n\nStep Two: Use the right ROM Set Version\n\n\nStart with a full Non-Merged ROM collection (not an individual ROM) with the exact MAME or FB Alpha version number for the emulator you wish to use. An incorrect version or missing files will cause most or all games to immediately exit. In other words, lr-mame2003 will only work correctly with a collection of MAME 0.78 ROMs, mame4all will only work with a collection of MAME 0.37b5 ROMs, and so on.\n\n\n\n\n\n\n\n\nEmulator\n\n\nRequired ROM Version\n\n\n# of ROMs\n\n\nDAT File\n\n\nCompatibility List\n\n\n\n\n\n\n\n\n\n\nmame4all\n\n\nMAME 0.37b5\n\n\n2270\n\n\n.DAT\n\n\nList\n\n\n\n\n\n\nlr-mame2003\n\n\nMAME 0.78\n\n\n4705\n\n\n.DAT\n\n\nList\n\n\n\n\n\n\npifba\n\n\nFB Alpha v0.2.96.71\n\n\n684\n\n\n.DAT\n\n\nList\n\n\n\n\n\n\nlr-fbalpha\n\n\nFB Alpha v0.2.97.39\n\n\n4375\n\n\n.DAT\n\n\nList\n\n\n\n\n\n\n\n\nCrash Course in Arcade ROMs\n\n\nArcade Emulator Terminology\n\n\n \nROM, ROM set, and romset\n: Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' files. That is why some resources refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set or romset.\n\n \nROM version or ROM set version\n: Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMs are required by the MAME4ALL emulator, but will not work correctly with the lr-mame2010 emulator, which requires MAME 0.139 ROMs.\n\n \nSample\n: Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. The path where these samples should be copied varies from emulator to emulator.\n\n \nCHD\n: Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHDs files should be copied to subfolders within the folder where the MAME ROM zips have been installed.\n\n\nIn addition to having a version number, arcade ROMs can be formatted three ways:\n\n\n\n\nNon-merged\n: All ROMs can be used standalone because each zip contains all the files needed to run that game, including any files from 'parent ROMs'. This is the recommended format for RetroPie arcade emulators.\n\n\nSplit\n: Some ROMS that are considered clones, translations, or bootlegs also require a \"parent ROM\" to run. The parent ROM is often the first or most common variant of a game. In some cases the parent is not the most popular or best working version of the game, however. For example, in a Split set pacman.zip (a clone), will not work without puckman.zip (its parent).\n\n\nMerged\n: Clones are merged into the parent ROM zip, meaning that more than one game is stored per file. Merged ROM sets are not recommended.\n\n\n\n\nFurther Reading\n\n\n Wiki pages for [[MAME]] and [[FB Alpha|FinalBurn-Alpha]].\n\n \nHow to use MAME with RetroPie Help Guide by Floob\n\n* \nDemystifying MAME ROMs Tutorial by ChoccyHobNob\n.\n\n\nCorrect ROM versions are essential\n\n\nSo how do you tell you have the right ROM if you aren't sure that your set matches the version required by the emulator you chose? What if you don't have the right version?\n\n\nIt is possible to 'rebuild' from one version of an arcade ROM collection to another. If you also have access to a newer ROM collection you can 'roll forward' your ROM version, of if you have access to an older ROM collection or a 'rollback' collection you can rebuild to a lower ROM version. \n\n\nNote: the process of verifying and rebuilding ROMs is complex and requires a substantial investment of time and effort in order to master. If your goal is to have working arcade ROMs, it is almost always simpler to download a full ROM set that has already been verified to match the arcade emulator you chose.\n\n\nVisit the page on [[Validating, Rebuilding, and Filtering ROMs|Validating,-Rebuilding,-and-Filtering-Arcade-ROMs]] to learn more about rebuilding.", 
            "title": "Arcade Quick Start"
        }, 
        {
            "location": "/Managing-ROMs/#getting-started-with-arcade-emulation", 
            "text": "Arcade emulation requires a different planning approach than console systems. Please read this entire page before beginning your RetroPie arcade emulation project.", 
            "title": "Getting Started with Arcade Emulation"
        }, 
        {
            "location": "/Managing-ROMs/#step-one-choose-an-arcade-emulator", 
            "text": "System  Recommended MAME Emulator  Recommended FB Alpha Emulator      Pi 2 and Pi 3  lr-mame2003  lr-fbalpha    Pi 1 and Pi Zero  mame4all   (not  lr-mame4all )  pi-fba     Other [[MAME]]and [[FB Alpha|FinalBurn Alpha]] emulator versions are also available in RetroPie. Please be aware that earlier versions generally run faster than later versions, but also support fewer games.  Further Reading   Arcade games and how to play them, A non-technical MAME and FBA tutorial by rbaker  [[Instructions for how to set up FB Alpha as a separate Neo Geo system|Neo-Geo]]", 
            "title": "Step One: Choose an arcade emulator"
        }, 
        {
            "location": "/Managing-ROMs/#step-two-use-the-right-rom-set-version", 
            "text": "Start with a full Non-Merged ROM collection (not an individual ROM) with the exact MAME or FB Alpha version number for the emulator you wish to use. An incorrect version or missing files will cause most or all games to immediately exit. In other words, lr-mame2003 will only work correctly with a collection of MAME 0.78 ROMs, mame4all will only work with a collection of MAME 0.37b5 ROMs, and so on.     Emulator  Required ROM Version  # of ROMs  DAT File  Compatibility List      mame4all  MAME 0.37b5  2270  .DAT  List    lr-mame2003  MAME 0.78  4705  .DAT  List    pifba  FB Alpha v0.2.96.71  684  .DAT  List    lr-fbalpha  FB Alpha v0.2.97.39  4375  .DAT  List", 
            "title": "Step Two: Use the right ROM Set Version"
        }, 
        {
            "location": "/Managing-ROMs/#crash-course-in-arcade-roms", 
            "text": "Arcade Emulator Terminology    ROM, ROM set, and romset : Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' files. That is why some resources refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set or romset.   ROM version or ROM set version : Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMs are required by the MAME4ALL emulator, but will not work correctly with the lr-mame2010 emulator, which requires MAME 0.139 ROMs.   Sample : Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. The path where these samples should be copied varies from emulator to emulator.   CHD : Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHDs files should be copied to subfolders within the folder where the MAME ROM zips have been installed.  In addition to having a version number, arcade ROMs can be formatted three ways:   Non-merged : All ROMs can be used standalone because each zip contains all the files needed to run that game, including any files from 'parent ROMs'. This is the recommended format for RetroPie arcade emulators.  Split : Some ROMS that are considered clones, translations, or bootlegs also require a \"parent ROM\" to run. The parent ROM is often the first or most common variant of a game. In some cases the parent is not the most popular or best working version of the game, however. For example, in a Split set pacman.zip (a clone), will not work without puckman.zip (its parent).  Merged : Clones are merged into the parent ROM zip, meaning that more than one game is stored per file. Merged ROM sets are not recommended.   Further Reading   Wiki pages for [[MAME]] and [[FB Alpha|FinalBurn-Alpha]].   How to use MAME with RetroPie Help Guide by Floob \n*  Demystifying MAME ROMs Tutorial by ChoccyHobNob .", 
            "title": "Crash Course in Arcade ROMs"
        }, 
        {
            "location": "/Managing-ROMs/#correct-rom-versions-are-essential", 
            "text": "So how do you tell you have the right ROM if you aren't sure that your set matches the version required by the emulator you chose? What if you don't have the right version?  It is possible to 'rebuild' from one version of an arcade ROM collection to another. If you also have access to a newer ROM collection you can 'roll forward' your ROM version, of if you have access to an older ROM collection or a 'rollback' collection you can rebuild to a lower ROM version.   Note: the process of verifying and rebuilding ROMs is complex and requires a substantial investment of time and effort in order to master. If your goal is to have working arcade ROMs, it is almost always simpler to download a full ROM set that has already been verified to match the arcade emulator you chose.  Visit the page on [[Validating, Rebuilding, and Filtering ROMs|Validating,-Rebuilding,-and-Filtering-Arcade-ROMs]] to learn more about rebuilding.", 
            "title": "Correct ROM versions are essential"
        }, 
        {
            "location": "/Transferring-Roms/", 
            "text": "ROMS\n\n\nROMs stand for Read Only Memory. ROMs are essentially digital versions of old game cartridges which allow you to play games on emulators (software that mimics your old gaming consoles.) There are many issues involving Copyrights laws regarding the usage of ROMs, as a result in order to preserve the integrity and longevity of the  RetroPie project, the locations of ROMs will not and cannot be added to the Wiki. That being said, in the search of your childhood - Google is your friend. You should only have ROMs of games that you own. \n\n\nTransferring Roms\n\n\nThere are three main methods of transferring roms: via USB stick, via SFTP, and via Windows (Samba) shares\n\n\nUSB stick\n\n\n\n\n(ensure that your USB is formatted to FAT32)\n\n\nfirst create a folder called \nretropie\n on your USB stick\n\n\nplug it into the pi and wait for it to finish blinking\n\n\npull the USB out and plug it into a computer\n\n\nadd the roms to their respective folders (in the \nretropie/roms\n folder)\n\n\nplug it back into the raspberry pi\n\n\nwait for it to finish blinking\n\n\nrefresh emulationstation by pressing F4, or choosing quit from the start menu\n\n\n\n\nSFTP (needs to be able to establish a connection to your Raspberry Pi, either via internet or internal network)\n\n\n\n\nWired (needs ethernet cable)\n\n\nWireless (needs Pi \n= 3 or wifi dongle for Pi \n= 2 )\n\n\n\n\nThere are many SFTP programs out there, for windows many people use \nWinSCP\n for mac you can use something like \nCyberduck\n\n\n\n\nConnection settings:\n\n\n\n\nProtocol: \nSFTP\n\n\nIP address: To find the IP address of your RetroPie, go into RetroPie options from the main menu, and select    the last option \nShow IP address\n.\n\n\nUsername: \npi\n (default)\n\n\nPassword: \nraspberry\n (default)\n\n\n\n\nWhere to drop the files\n\n\nSimply drop the files in the ~/RetroPie/roms/$CONSOLE folder, where $CONSOLE is the name of the target console, e.g. \nsnes\n or \narcade\n.\n\n\nYou can also log in as root if you wish to change more files than just the roms, but you first need to enable the root password by typing \nsudo passwd root\n into the terminal and choosing a new root password.\n\n\nSamba-Shares (needs an active internet connection)\n\n\n\n\nif on windows type \n\\\\RETROPIE\n into the computer folder. You can also replace RETROPIE with your Raspberry Pi's IP address\n\n\n\n\n\n\n\n\nif on MAC OS X open finder, select \"Go\" menu and \"Connect to Server\". Type \nsmb://retropie\n and hit \"Connect\".\n\n\n\n\nManually copy files from USB-stick\n\n\nFrom RetroPie version 3.0 a file manager is available, it allows you to manually transfer files between USB-stick and Raspberry Pi SD card. File manager can be run from 'RetroPie' Emulationstation menu. Quick file manager (MC) guide can be found \nhere\n. Your USB-stick should be mounted in \n/media/usb\n. The directories for the ROM files are located in \n~/RetroPie/roms/SYSTEMNAME\n, where \nSYSTEMNAME\n is the short name of the corresponding system.", 
            "title": "Transferring Roms"
        }, 
        {
            "location": "/Transferring-Roms/#roms", 
            "text": "ROMs stand for Read Only Memory. ROMs are essentially digital versions of old game cartridges which allow you to play games on emulators (software that mimics your old gaming consoles.) There are many issues involving Copyrights laws regarding the usage of ROMs, as a result in order to preserve the integrity and longevity of the  RetroPie project, the locations of ROMs will not and cannot be added to the Wiki. That being said, in the search of your childhood - Google is your friend. You should only have ROMs of games that you own.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Transferring-Roms/#transferring-roms", 
            "text": "There are three main methods of transferring roms: via USB stick, via SFTP, and via Windows (Samba) shares", 
            "title": "Transferring Roms"
        }, 
        {
            "location": "/Transferring-Roms/#usb-stick", 
            "text": "(ensure that your USB is formatted to FAT32)  first create a folder called  retropie  on your USB stick  plug it into the pi and wait for it to finish blinking  pull the USB out and plug it into a computer  add the roms to their respective folders (in the  retropie/roms  folder)  plug it back into the raspberry pi  wait for it to finish blinking  refresh emulationstation by pressing F4, or choosing quit from the start menu", 
            "title": "USB stick"
        }, 
        {
            "location": "/Transferring-Roms/#sftp-needs-to-be-able-to-establish-a-connection-to-your-raspberry-pi-either-via-internet-or-internal-network", 
            "text": "Wired (needs ethernet cable)  Wireless (needs Pi  = 3 or wifi dongle for Pi  = 2 )   There are many SFTP programs out there, for windows many people use  WinSCP  for mac you can use something like  Cyberduck", 
            "title": "SFTP (needs to be able to establish a connection to your Raspberry Pi, either via internet or internal network)"
        }, 
        {
            "location": "/Transferring-Roms/#connection-settings", 
            "text": "Protocol:  SFTP  IP address: To find the IP address of your RetroPie, go into RetroPie options from the main menu, and select    the last option  Show IP address .  Username:  pi  (default)  Password:  raspberry  (default)", 
            "title": "Connection settings:"
        }, 
        {
            "location": "/Transferring-Roms/#where-to-drop-the-files", 
            "text": "Simply drop the files in the ~/RetroPie/roms/$CONSOLE folder, where $CONSOLE is the name of the target console, e.g.  snes  or  arcade .  You can also log in as root if you wish to change more files than just the roms, but you first need to enable the root password by typing  sudo passwd root  into the terminal and choosing a new root password.", 
            "title": "Where to drop the files"
        }, 
        {
            "location": "/Transferring-Roms/#samba-shares-needs-an-active-internet-connection", 
            "text": "if on windows type  \\\\RETROPIE  into the computer folder. You can also replace RETROPIE with your Raspberry Pi's IP address     if on MAC OS X open finder, select \"Go\" menu and \"Connect to Server\". Type  smb://retropie  and hit \"Connect\".", 
            "title": "Samba-Shares (needs an active internet connection)"
        }, 
        {
            "location": "/Transferring-Roms/#manually-copy-files-from-usb-stick", 
            "text": "From RetroPie version 3.0 a file manager is available, it allows you to manually transfer files between USB-stick and Raspberry Pi SD card. File manager can be run from 'RetroPie' Emulationstation menu. Quick file manager (MC) guide can be found  here . Your USB-stick should be mounted in  /media/usb . The directories for the ROM files are located in  ~/RetroPie/roms/SYSTEMNAME , where  SYSTEMNAME  is the short name of the corresponding system.", 
            "title": "Manually copy files from USB-stick"
        }, 
        {
            "location": "/Scraper/", 
            "text": "Scraping is a way to get metadata and boxart for your games from the internet. The scrapers RetroPie uses pull primarily from thegamesdb.net. If the scraper isn't working either you are not connected to the Internet or thegamesdb.net is down (which happens quite frequently) and in that case you'll just have to wait until it comes back up.\n\n\n\n\nSteven Selph's Scraper\n\n\nSteven Selph's scraper is the simplest and best way of scraping roms (provided that the systems are supported.) It can be installed and used from the setup menu using the following steps:\n\n\n1) Quit EmulationStation (from the start menu or press F4) and type on the command line\n\n\nsudo /home/pi/RetroPie-Setup/retropie_setup.sh\n\n\n\n\n2) In 3.x Choose 'Setup'. In 4.x Choose 'Configuration / Tools'.\n\n\n3) Select Scraper\n\n\n4) Wait for the installation to complete (it may take some time as it has to install various software libraries)\n\n\nNote that if you are remotely running this script you must be logged in with pi otherwise it will confuse the scraper. It may take some time for the xml files to build. This will also only work if your roms are located in the local roms folder and not on an external device.\n\n\nIf your roms are located on another source then the default one you can download the stand alone releases.\n\nsselph's scraper releases\n\nPlease refer to \nSselphs Scraper Advanced Configuration\n when using this method.\n\n\nMake sure to update to the latest version of Retropie-Setup script if you're missing any options mentioned below!\n\n\n\n\n\n\n\n\nScrape All Systems:\n This will scrape all the systems the scraper supports\n\n\n\n\n\n\nScrape Chosen Systems:\n You can choose to only scrape the systems you choose (press the \nspacebar\n to select each system) and select ok to start scraping.\n\n\n\n\n\n\n\n\n\n\n\n\nThumbnails Only:\n When enabled it will load lower resolution images to save space (enabled by default).\n\n\n\n\n\n\nMax Image Width/Height:\n Specify the max image width or height to scrape.\n\n\n\n\n\n\nConsole Source:\n Choose which database to scrape for console games: \n\n\n\n\nthegamesdb.net (default)\n\n\nScreenScraper.fr\n\n\n\n\nOpenVGDB\n\n\n\n\n\n\nArcade Source:\n Choose which database to scrape for arcade/mame games: \n\n\n\n\nmamedb.blu-ferret.co.uk (default)\n\n\n\n\nScreenScraper.fr\n\n\n\n\n\n\nROM Names:\n Choose what name to display:\n\n\n\n\nNo-Intro: Rom Name (USA) (Rev 1)\n\n\ntheGamesDB: Rom Name\n\n\n\n\nFileName: Rom Name [U] [!]\n\n\n\n\n\n\nGamelist:\n Choose to overwrite the existing gamelist.xml or append to it.\n\n\n\n\n\n\nUpdate scraper to the latest version:\n This updates the scraper to the latest version.\n\n\n\n\n\n\nSlow Boot and Shutdown Times\n\n\nYou'll notice after adding lots of ROMs and scraping them that your boot and shutdown time can increase substantially- some solutions to speed up your boot and shutdown times are described \nHERE\n\n\nWhere are my scraped images and metadata saved?\n\n\nOnce your games have been scraped they will be located in two parts: \nDownloaded Images\n and \nGamelists\n\n\n/home/pi/.emulationstation/downloaded_images\nor\n/opt/retropie/configs/all/emulationstation/downloaded_images\n\n\n\n\nand\n\n\n/home/pi/.emulationstation/gamelists\nor\n/opt/retropie/configs/all/emulationstation/gamelists\n\n\n\n\nThey can also be accessed over \nsamba shares\n\n\n\\\\retropie\\configs\\all\\emulationstation\n\n\n\n\nEmulationStation Built-In Scraper:\n\n\nEmulationStation has a built in scraper that pulls from \nthegamesdb\n. It can be accessed from the start menu in emulationstation.\n\n\n\n\n\n\n\n\n \n\n\n\n\nScraper Not Saving Manual Edits\n\n\nIf you are having issues with your metadata changes not being saved, you need to select Quit EmulationStation from the quit menu rather than shutdown or restart system. Then your changes will be saved.\n\n\nNote that this issue was fixed with RetroPie 3.4\n\n\nSselphs Scraper Advanced Configuration:\n\n\nScraping your own images\n\n\nIf you have your own images, you can create XML's with Sselph's scraper:\n\n\nAs a template in my snes folder I had my rom name:\n\n\nSuper Mario World (USA).sfc\n\n\nand an images folder with:\n\n\nSuper Mario World (USA)-image.png\n\n(If you dont want to append the -image part on the filename you can use \n-image_suffix=\n)\n\n\nand I ran \n\n\n/opt/retropie/supplementary/scraper/scraper -img_format=png -add_not_found=true -download_images=false\n\n\nAnd this was the resulting gamelist.xml:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n  \ngameList\n\n      \ngame id=\n136\n source=\ntheGamesDB.net\n\n          \npath\n./Super Mario World (USA).sfc\n/path\n\n          \nname\nSuper Mario World (USA)\n/name\n\n          \ndesc\nMario\n#39;s off on his biggest adventure ever, and this time he\n#39;s brought along a friend.  Yoshi the dinosaur teams up with Mario to battle Bowser, who has kidnapped Princess Toadstool once again.  Guide Mario and Yoshi through nine peril-filled worlds to the final showdown in Bowser\n#39;s castle.\n#xA;\n#xA;Use Mario\n#39;s new powers and Yoshi\n#39;s voracious monster-gobbling appetite as you explore 96 levels filled with dangerous new monsters and traps.  Climb mountains and cross rivers, and descend into subterranean depths.  Destroy the seven Koopa castles and find keys to gain entrance to hidden levels.  Discover more warps and thrilling bonus worlds than ever before!\n#xA;\n#xA;Mario\n#39;s back, and this time he\n#39;s better than ever!\n/desc\n\n          \nimage\n./images/Super Mario World (USA)-image.png\n/image\n\n          \nrating\n0.73704\n/rating\n\n          \nreleasedate\n19901121T000000\n/releasedate\n\n          \ndeveloper\nNintendo\n/developer\n\n          \npublisher\nNintendo\n/publisher\n\n          \ngenre\nPlatform\n/genre\n\n          \nplayers\n2\n/players\n\n      \n/game\n\n  \n/gameList\n\n\n\n\n\nParameter list:\n\n\nUsage of /opt/retropie/supplementary/scraper/scraper:\n  -add_not_found=false: If true, add roms that are not found as an empty gamelist entry.\n  -append=false: If the gamelist file already exist skip files that are already listed and only append new files.\n  -download_images=true: If false, don't download any images, instead see if the expected file is stored locally already.\n  -extra_ext=\n: Comma separated list of extensions to also include in the scraper.\n  -gdb_img=\nb\n: Comma seperated order to prefer images, s=snapshot, b=boxart, f=fanart, a=banner, l=logo.\n  -hash_file=\n: The `file` containing hash information.\n  -image_dir=\nimages\n: The `directory` to place downloaded images to locally.\n  -image_path=\nimages\n: The `path` to use for images in gamelist.xml.\n  -image_suffix=\n-image\n: The `suffix` added after rom name when creating image files.\n  -img_format=\njpg\n: `jpg or png`, the format to write the images.\n  -img_workers=0: Use `N` worker threads to process images. If 0, then use the same value as workers.\n  -mame=false: If true we want to run in MAME mode.\n  -mame_img=\ns,t,m,c\n: Comma separated order to prefer images, s=snap, t=title, m=marquee, c=cabniet.\n  -max_width=400: The max `width` of images. Larger images will be resized.\n  -missing=\n: The `file` where information about ROMs that weren't scraped is added.\n  -nested_img_dir=false: Use a nested img directory structure that matches rom structure.\n  -no_thumb=false: Don't add thumbnails to the gamelist.\n  -output_file=\ngamelist.xml\n: The XML `file` to output to.\n  -overview_len=0: If set it will truncate the overview of roms to `N` characters + ellipsis.\n  -refresh=false: Information will be attempted to be downloaded again but won't remove roms that are not scraped.\n  -retries=2: Retry a rom `N` times on an error.\n  -rom_dir=\n.\n: The `directory` containing the roms file to process.\n  -rom_path=\n.\n: The `path` to use for roms in gamelist.xml.\n  -scrape_all=false: If true, scrape all systems listed in es_systems.cfg. All dir/path flags will be ignored.\n  -skip_check=false: Skip the check if thegamesdb.net is up.\n  -start_pprof=false: If true, start the pprof service used to profile the application.\n  -strip_unicode=true: If true, remove all non-ascii characters.\n  -thumb_only=false: Download the thumbnail for both the image and thumb (faster).\n  -thumb_suffix=\n-thumb\n: The `suffix` added after rom name when creating thumb files.\n  -use_filename=false: If true, use the filename minus the extension as the game title in xml.\n  -use_gdb=true: Use the hash.csv and theGamesDB metadata.\n  -use_nointro_name=true: Use the name in the No-Intro DB instead of the one in the GDB.\n  -use_ovgdb=false: Use the OpenVGDB if the hash isn't in hash.csv.\n  -version=false: Print the release version and exit.\n  -workers=1: Use `N` worker threads to process roms.", 
            "title": "Scraper"
        }, 
        {
            "location": "/Scraper/#steven-selphs-scraper", 
            "text": "Steven Selph's scraper is the simplest and best way of scraping roms (provided that the systems are supported.) It can be installed and used from the setup menu using the following steps:  1) Quit EmulationStation (from the start menu or press F4) and type on the command line  sudo /home/pi/RetroPie-Setup/retropie_setup.sh  2) In 3.x Choose 'Setup'. In 4.x Choose 'Configuration / Tools'.  3) Select Scraper  4) Wait for the installation to complete (it may take some time as it has to install various software libraries)  Note that if you are remotely running this script you must be logged in with pi otherwise it will confuse the scraper. It may take some time for the xml files to build. This will also only work if your roms are located in the local roms folder and not on an external device.  If your roms are located on another source then the default one you can download the stand alone releases. sselph's scraper releases \nPlease refer to  Sselphs Scraper Advanced Configuration  when using this method.  Make sure to update to the latest version of Retropie-Setup script if you're missing any options mentioned below!     Scrape All Systems:  This will scrape all the systems the scraper supports    Scrape Chosen Systems:  You can choose to only scrape the systems you choose (press the  spacebar  to select each system) and select ok to start scraping.       Thumbnails Only:  When enabled it will load lower resolution images to save space (enabled by default).    Max Image Width/Height:  Specify the max image width or height to scrape.    Console Source:  Choose which database to scrape for console games:    thegamesdb.net (default)  ScreenScraper.fr   OpenVGDB    Arcade Source:  Choose which database to scrape for arcade/mame games:    mamedb.blu-ferret.co.uk (default)   ScreenScraper.fr    ROM Names:  Choose what name to display:   No-Intro: Rom Name (USA) (Rev 1)  theGamesDB: Rom Name   FileName: Rom Name [U] [!]    Gamelist:  Choose to overwrite the existing gamelist.xml or append to it.    Update scraper to the latest version:  This updates the scraper to the latest version.", 
            "title": "Steven Selph's Scraper"
        }, 
        {
            "location": "/Scraper/#slow-boot-and-shutdown-times", 
            "text": "You'll notice after adding lots of ROMs and scraping them that your boot and shutdown time can increase substantially- some solutions to speed up your boot and shutdown times are described  HERE", 
            "title": "Slow Boot and Shutdown Times"
        }, 
        {
            "location": "/Scraper/#where-are-my-scraped-images-and-metadata-saved", 
            "text": "Once your games have been scraped they will be located in two parts:  Downloaded Images  and  Gamelists  /home/pi/.emulationstation/downloaded_images\nor\n/opt/retropie/configs/all/emulationstation/downloaded_images  and  /home/pi/.emulationstation/gamelists\nor\n/opt/retropie/configs/all/emulationstation/gamelists  They can also be accessed over  samba shares  \\\\retropie\\configs\\all\\emulationstation", 
            "title": "Where are my scraped images and metadata saved?"
        }, 
        {
            "location": "/Scraper/#emulationstation-built-in-scraper", 
            "text": "EmulationStation has a built in scraper that pulls from  thegamesdb . It can be accessed from the start menu in emulationstation.", 
            "title": "EmulationStation Built-In Scraper:"
        }, 
        {
            "location": "/Scraper/#scraper-not-saving-manual-edits", 
            "text": "If you are having issues with your metadata changes not being saved, you need to select Quit EmulationStation from the quit menu rather than shutdown or restart system. Then your changes will be saved.  Note that this issue was fixed with RetroPie 3.4", 
            "title": "Scraper Not Saving Manual Edits"
        }, 
        {
            "location": "/Scraper/#sselphs-scraper-advanced-configuration", 
            "text": "", 
            "title": "Sselphs Scraper Advanced Configuration:"
        }, 
        {
            "location": "/Scraper/#scraping-your-own-images", 
            "text": "If you have your own images, you can create XML's with Sselph's scraper:  As a template in my snes folder I had my rom name:  Super Mario World (USA).sfc  and an images folder with:  Super Mario World (USA)-image.png \n(If you dont want to append the -image part on the filename you can use  -image_suffix= )  and I ran   /opt/retropie/supplementary/scraper/scraper -img_format=png -add_not_found=true -download_images=false  And this was the resulting gamelist.xml:  ?xml version= 1.0  encoding= UTF-8 ? \n   gameList \n       game id= 136  source= theGamesDB.net \n           path ./Super Mario World (USA).sfc /path \n           name Super Mario World (USA) /name \n           desc Mario #39;s off on his biggest adventure ever, and this time he #39;s brought along a friend.  Yoshi the dinosaur teams up with Mario to battle Bowser, who has kidnapped Princess Toadstool once again.  Guide Mario and Yoshi through nine peril-filled worlds to the final showdown in Bowser #39;s castle. #xA; #xA;Use Mario #39;s new powers and Yoshi #39;s voracious monster-gobbling appetite as you explore 96 levels filled with dangerous new monsters and traps.  Climb mountains and cross rivers, and descend into subterranean depths.  Destroy the seven Koopa castles and find keys to gain entrance to hidden levels.  Discover more warps and thrilling bonus worlds than ever before! #xA; #xA;Mario #39;s back, and this time he #39;s better than ever! /desc \n           image ./images/Super Mario World (USA)-image.png /image \n           rating 0.73704 /rating \n           releasedate 19901121T000000 /releasedate \n           developer Nintendo /developer \n           publisher Nintendo /publisher \n           genre Platform /genre \n           players 2 /players \n       /game \n   /gameList", 
            "title": "Scraping your own images"
        }, 
        {
            "location": "/Scraper/#parameter-list", 
            "text": "Usage of /opt/retropie/supplementary/scraper/scraper:\n  -add_not_found=false: If true, add roms that are not found as an empty gamelist entry.\n  -append=false: If the gamelist file already exist skip files that are already listed and only append new files.\n  -download_images=true: If false, don't download any images, instead see if the expected file is stored locally already.\n  -extra_ext= : Comma separated list of extensions to also include in the scraper.\n  -gdb_img= b : Comma seperated order to prefer images, s=snapshot, b=boxart, f=fanart, a=banner, l=logo.\n  -hash_file= : The `file` containing hash information.\n  -image_dir= images : The `directory` to place downloaded images to locally.\n  -image_path= images : The `path` to use for images in gamelist.xml.\n  -image_suffix= -image : The `suffix` added after rom name when creating image files.\n  -img_format= jpg : `jpg or png`, the format to write the images.\n  -img_workers=0: Use `N` worker threads to process images. If 0, then use the same value as workers.\n  -mame=false: If true we want to run in MAME mode.\n  -mame_img= s,t,m,c : Comma separated order to prefer images, s=snap, t=title, m=marquee, c=cabniet.\n  -max_width=400: The max `width` of images. Larger images will be resized.\n  -missing= : The `file` where information about ROMs that weren't scraped is added.\n  -nested_img_dir=false: Use a nested img directory structure that matches rom structure.\n  -no_thumb=false: Don't add thumbnails to the gamelist.\n  -output_file= gamelist.xml : The XML `file` to output to.\n  -overview_len=0: If set it will truncate the overview of roms to `N` characters + ellipsis.\n  -refresh=false: Information will be attempted to be downloaded again but won't remove roms that are not scraped.\n  -retries=2: Retry a rom `N` times on an error.\n  -rom_dir= . : The `directory` containing the roms file to process.\n  -rom_path= . : The `path` to use for roms in gamelist.xml.\n  -scrape_all=false: If true, scrape all systems listed in es_systems.cfg. All dir/path flags will be ignored.\n  -skip_check=false: Skip the check if thegamesdb.net is up.\n  -start_pprof=false: If true, start the pprof service used to profile the application.\n  -strip_unicode=true: If true, remove all non-ascii characters.\n  -thumb_only=false: Download the thumbnail for both the image and thumb (faster).\n  -thumb_suffix= -thumb : The `suffix` added after rom name when creating thumb files.\n  -use_filename=false: If true, use the filename minus the extension as the game title in xml.\n  -use_gdb=true: Use the hash.csv and theGamesDB metadata.\n  -use_nointro_name=true: Use the name in the No-Intro DB instead of the one in the GDB.\n  -use_ovgdb=false: Use the OpenVGDB if the hash isn't in hash.csv.\n  -version=false: Print the release version and exit.\n  -workers=1: Use `N` worker threads to process roms.", 
            "title": "Parameter list:"
        }, 
        {
            "location": "/Themes/", 
            "text": "Install Emulationstation Themes\n\n\nAlternate themes can be easily installed with the RetroPie Theme Installer.\n\n\nRetroPie Setup Script \n Setup \n EmulationStation Themes\n\n\nAccess the ui settings from the start menu in emulationstation\n\n\n\n\nchange to your new theme (you may need to press f4 or quit to refresh emulationstation in order for the theme to load)\n\n\n\n\nWhite Screen of Death\n\n\nThere is a fundamental bug with EmulationStation where unique background images are not loaded dynamically so if you have more than ~10 systems (on most themes that have a unique wallpaper per system) you will start to get a white screen of death and nothing will show up. \n\n\nThere are a few things you can do to fix the white screen of death:\n\n\n\n\n\n\nincrease your GPU/CPU split (see \nhere\n)\n\n\n\n\n\n\nremove some systems\n\n\n\n\n\n\nswitch your theme to any Carbon, Pixel, Eudora, Turtle-Pi, or Canela variant (as they have one static background and therefore don't crash when you have many systems)\n\n\n\n\n\n\nIf you can't access the theme changer in emulationstation because it's a white screen, you can \nssh\n into the pi and change the theme name back to carbon in the backend in \n/home/pi/.emulationstation/es_settings.cfg\n\n\nTHEME GALLERY\n\n\nAccess theme gallery in the esthemes menu\n\n\n\n\n\n\n\n\n\n\nTheme\n\n\nPreview\n\n\n\n\n\n\n\n\n\n\ncarbon\n\n\n\n\n\n\n\n\ncarbon-centered\n\n\n\n\n\n\n\n\ncarbon-nometa\n\n\n\n\n\n\n\n\nSimple\n\n\n\n\n\n\n\n\nsimple-dark\n\n\n\n\n\n\n\n\ncolor-pi\n\n\n\n\n\n\n\n\nsimplified-static-canela\n\n\n\n\n\n\n\n\nzoid\n\n\n\n\n\n\n\n\nspace\n\n\n\n\n\n\n\n\nsimplebigart\n\n\n\n\n\n\n\n\nclean-look\n\n\n\n\n\n\n\n\nturtle-pi\n\n\n\n\n\n\n\n\nnbba\n\n\n\n\n\n\n\n\nPixel\n\n\n\n\n\n\n\n\nMaterial\n\n\n\n\n\n\n\n\nMetaPixel\n\n\n\n\n\n\n\n\nSpare\n\n\n\n\n\n\n\n\nIo\n\n\n\n\n\n\n\n\n\n\nCreating Your Own EmulationStation Theme\n\n\nFor an in depth tutorial see this thread \nHERE\n\n\nFor the official documentation on themes see \nHERE", 
            "title": "Themes"
        }, 
        {
            "location": "/Themes/#install-emulationstation-themes", 
            "text": "Alternate themes can be easily installed with the RetroPie Theme Installer.  RetroPie Setup Script   Setup   EmulationStation Themes  Access the ui settings from the start menu in emulationstation   change to your new theme (you may need to press f4 or quit to refresh emulationstation in order for the theme to load)", 
            "title": "Install Emulationstation Themes"
        }, 
        {
            "location": "/Themes/#white-screen-of-death", 
            "text": "There is a fundamental bug with EmulationStation where unique background images are not loaded dynamically so if you have more than ~10 systems (on most themes that have a unique wallpaper per system) you will start to get a white screen of death and nothing will show up.   There are a few things you can do to fix the white screen of death:    increase your GPU/CPU split (see  here )    remove some systems    switch your theme to any Carbon, Pixel, Eudora, Turtle-Pi, or Canela variant (as they have one static background and therefore don't crash when you have many systems)    If you can't access the theme changer in emulationstation because it's a white screen, you can  ssh  into the pi and change the theme name back to carbon in the backend in  /home/pi/.emulationstation/es_settings.cfg", 
            "title": "White Screen of Death"
        }, 
        {
            "location": "/Themes/#theme-gallery", 
            "text": "Access theme gallery in the esthemes menu      Theme  Preview      carbon     carbon-centered     carbon-nometa     Simple     simple-dark     color-pi     simplified-static-canela     zoid     space     simplebigart     clean-look     turtle-pi     nbba     Pixel     Material     MetaPixel     Spare     Io", 
            "title": "THEME GALLERY"
        }, 
        {
            "location": "/Themes/#creating-your-own-emulationstation-theme", 
            "text": "For an in depth tutorial see this thread  HERE  For the official documentation on themes see  HERE", 
            "title": "Creating Your Own EmulationStation Theme"
        }, 
        {
            "location": "/Runcommand/", 
            "text": "runcommand\n\n\nThe runcommand is the script responsible to launch your emulators/games. This wiki shows the runcommand's configurations and features.\n\n\n\n\nRuncommand Launch Menu\n\n\nAdding custom launching images\n\n\nruncommand-onstart and runcommand-onend scripts\n\n\n\n\nRuncommand Launch Menu\n\n\nEach time you load a ROM there is an option to open what is called the Runcommand Launch Menu. This is accessed by pressing any key on the keyboard or js0 (button 0 on your first connected joypad - it will vary depending on the gamepad used)\n\n\n\n\nOnce you press js0 or a button on your keyboard, it will open up into this menu (this menu may vary depending on the emulator you are running and version of retropie you are using- this image is for the super nintendo):\n\n\n\n\nIf you select the first option, if there is more than one emulator, you can swap which emulator is used:\n\n\n\n\nThere are also varying options to change video settings, RetroArch configs for that system, etc. \n\n\nIn the past there were multiple rom folders for each emulator but they got confusing so now there is only one rom folder for each system and the emulator used can be loaded dynamically so there is no longer a need for multiple rom folders for each system. \n\n\nConfiguring Runcommand:\n\n\nYou can enable and disable different functions of the Runcommand Launch Menu. This is configured via RetroPie-Setup or via the runcommand configuration option in the RetroPie area of Emulation Station. \n\n\n\n\n\n\nLaunch Menu:\n Enable or disable the runcommand launch menu\n\n\nLaunch Menu Art:\n If enabled, any scraped box art you have for a game with show up as a splashscreen while your game loads up.\n\n\nLaunch Menu Joystick Control:\n You can disable the joystick support so that your kids don't accidentally mess up settings. Note that this only disables the joystick, not the keyboard so if you have joysticks that act like a keyboard then of course disabling this option will not work. \n\n\nCPU Configuration:\n Allows setting the CPU governor (default is ondemand on RetroPie on the Raspberry Pi). You can use this to set the CPU governor - ie to \"performance\", which will be set on launching a game, and reset after. More information regarding CPU governors can be found in the Linux Kernel documentation - https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt\n\n\n\n\nAdding custom launching images\n\n\nSince 4.0.3 the runcommand can show a custom \"launching\" image instead of the traditional dialog infobox. The custom launching images must be placed at \n/opt/retropie/configs/SYSTEM_NAME/\n and named as \"launching.jpg\" or \"launching.png\". But be aware that if \"Launch Menu Art\" is enabled, the scraped box art image takes precedence.\n\n\nExample: if you have a cool NES related image and want to show it right before launching a NES game, you have to name the image file as \n/opt/retropie/configs/nes/launching.jpg\n.\n\n\nA more general launching image (not related to a specific system) can be named as \n/opt/retropie/configs/all/launching.jpg\n.\n\n\nOnce these images are installed, the timing to activate the the runcommand menu differs, in that pressing a button will not register successfully until just after the image has disappeared.\n\n\nYou can get some cool launching images in these forum topics:\n- https://retropie.org.uk/forum/topic/36/splashscreens/97\n- https://retropie.org.uk/forum/topic/4611/runcommand-system-splashscreens\n\n\nruncommand-onstart and runcommand-onend scripts\n\n\nSince 4.0.2 the runcommand can execute a user script before the game launching (\nruncommand-onstart.sh\n) and after exiting the emulator (\nruncommand-onend.sh\n). Both scripts must be placed at \n/opt/retropie/configs/all/\n.\n\n\nUseful data are passed as arguments to these scripts:\n\n\n\n\n$1\n - the system (eg: atari2600, nes, snes, megadrive, fba, etc).\n\n\n$2\n - the emulator (eg: lr-stella, lr-fceumm, lr-picodrive, pifba, etc).\n\n\n$3\n - the full path to the rom file.\n\n\n$4\n - the full command line used to launch the emulator.\n\n\n\n\nAll the error messages from these scripts will be logged in \nruncommand.log\n. If you want to log something to this file you have to redirect the output to the standard error. This way:\n\n\necho \nmessage to log\n \n2\n\n\n\n\nSome examples of what can be done with these scripts:\n\n\n\n\nIn the \nTake and Scrape Your Own Screenshots wiki\n there are two methods to achieve the same goal. In method 1 the \nruncommand-onstart.sh\n is used to automatically set some configurations in the system specific retroarch.cfg file. In method 2 the \nruncommand-onend.sh\n is used to check if you have a screenshot for the game you are leaving, and if yes, it will make the most recent screenshot be the emulationstation image for this game.\n\n\nIn \nRetroPie-joystick-selection tool\n the joystick selection by name method uses the \nruncommand-onstart.sh\n to get the joystick name, look for its index and set the index in the proper retroarch.cfg file.", 
            "title": "Runcommand"
        }, 
        {
            "location": "/Runcommand/#runcommand", 
            "text": "The runcommand is the script responsible to launch your emulators/games. This wiki shows the runcommand's configurations and features.   Runcommand Launch Menu  Adding custom launching images  runcommand-onstart and runcommand-onend scripts", 
            "title": "runcommand"
        }, 
        {
            "location": "/Runcommand/#runcommand-launch-menu", 
            "text": "Each time you load a ROM there is an option to open what is called the Runcommand Launch Menu. This is accessed by pressing any key on the keyboard or js0 (button 0 on your first connected joypad - it will vary depending on the gamepad used)   Once you press js0 or a button on your keyboard, it will open up into this menu (this menu may vary depending on the emulator you are running and version of retropie you are using- this image is for the super nintendo):   If you select the first option, if there is more than one emulator, you can swap which emulator is used:   There are also varying options to change video settings, RetroArch configs for that system, etc.   In the past there were multiple rom folders for each emulator but they got confusing so now there is only one rom folder for each system and the emulator used can be loaded dynamically so there is no longer a need for multiple rom folders for each system.", 
            "title": "Runcommand Launch Menu"
        }, 
        {
            "location": "/Runcommand/#configuring-runcommand", 
            "text": "You can enable and disable different functions of the Runcommand Launch Menu. This is configured via RetroPie-Setup or via the runcommand configuration option in the RetroPie area of Emulation Station.     Launch Menu:  Enable or disable the runcommand launch menu  Launch Menu Art:  If enabled, any scraped box art you have for a game with show up as a splashscreen while your game loads up.  Launch Menu Joystick Control:  You can disable the joystick support so that your kids don't accidentally mess up settings. Note that this only disables the joystick, not the keyboard so if you have joysticks that act like a keyboard then of course disabling this option will not work.   CPU Configuration:  Allows setting the CPU governor (default is ondemand on RetroPie on the Raspberry Pi). You can use this to set the CPU governor - ie to \"performance\", which will be set on launching a game, and reset after. More information regarding CPU governors can be found in the Linux Kernel documentation - https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt", 
            "title": "Configuring Runcommand:"
        }, 
        {
            "location": "/Runcommand/#adding-custom-launching-images", 
            "text": "Since 4.0.3 the runcommand can show a custom \"launching\" image instead of the traditional dialog infobox. The custom launching images must be placed at  /opt/retropie/configs/SYSTEM_NAME/  and named as \"launching.jpg\" or \"launching.png\". But be aware that if \"Launch Menu Art\" is enabled, the scraped box art image takes precedence.  Example: if you have a cool NES related image and want to show it right before launching a NES game, you have to name the image file as  /opt/retropie/configs/nes/launching.jpg .  A more general launching image (not related to a specific system) can be named as  /opt/retropie/configs/all/launching.jpg .  Once these images are installed, the timing to activate the the runcommand menu differs, in that pressing a button will not register successfully until just after the image has disappeared.  You can get some cool launching images in these forum topics:\n- https://retropie.org.uk/forum/topic/36/splashscreens/97\n- https://retropie.org.uk/forum/topic/4611/runcommand-system-splashscreens", 
            "title": "Adding custom launching images"
        }, 
        {
            "location": "/Runcommand/#runcommand-onstart-and-runcommand-onend-scripts", 
            "text": "Since 4.0.2 the runcommand can execute a user script before the game launching ( runcommand-onstart.sh ) and after exiting the emulator ( runcommand-onend.sh ). Both scripts must be placed at  /opt/retropie/configs/all/ .  Useful data are passed as arguments to these scripts:   $1  - the system (eg: atari2600, nes, snes, megadrive, fba, etc).  $2  - the emulator (eg: lr-stella, lr-fceumm, lr-picodrive, pifba, etc).  $3  - the full path to the rom file.  $4  - the full command line used to launch the emulator.   All the error messages from these scripts will be logged in  runcommand.log . If you want to log something to this file you have to redirect the output to the standard error. This way:  echo  message to log   2  Some examples of what can be done with these scripts:   In the  Take and Scrape Your Own Screenshots wiki  there are two methods to achieve the same goal. In method 1 the  runcommand-onstart.sh  is used to automatically set some configurations in the system specific retroarch.cfg file. In method 2 the  runcommand-onend.sh  is used to check if you have a screenshot for the game you are leaving, and if yes, it will make the most recent screenshot be the emulationstation image for this game.  In  RetroPie-joystick-selection tool  the joystick selection by name method uses the  runcommand-onstart.sh  to get the joystick name, look for its index and set the index in the proper retroarch.cfg file.", 
            "title": "runcommand-onstart and runcommand-onend scripts"
        }, 
        {
            "location": "/Updating-RetroPie/", 
            "text": "Version\n\n\n\n\n\n\n\n\n\n\n4.1\n\n\n\n\n\n\n\n\nUpdating RetroPie\n\n\nThe conventional way to update RetroPie and install new features is through the setup script. \n\n\nThe setup script can be accessed from the \nRetroPie menu\n in emulationstation. \n\n\nIt can also be accessed from the terminal with \nsudo ~/RetroPie-Setup/retropie_setup.sh\n\n\nBefore making any major updates it is important to make backups just in case \n(see backup options below)\n.\n\n\nUsing the RetroPie Setup Script\n\n\n\n\n\n\nIf updating from 3.x and earlier: Select \nUpdate RetroPie-Setup Script\n and then \nUpdate All Installed Packages\n\n\n\n\n\n\nIf updating from 4.x and later: Select \nUpdate All Installed Packages\n\n\n\n\n\n\n\n\n\n\nBasic Install:\n This is intended as a first install and is not required if using a pre-built image. eg When installing RetroPie on top of an existing OS.\n\n\nUpdate All Installed Packages:\n This will update the RetroPie-Setup script and all installed packages.\n\n\nManage Packages:\n This will alllow you to install and update individual emulators, ports, controller drivers (like the ps3 or xboxdrv) other optional packages.\n\n\nConfiguration / Tools:\n Configuration and tools including BlueTooth and WiFi setup, splashscreens and theme. You can also access any packages that have additional configuration here.\n\n\nUpdate RetroPie-Setup Script:\n Updates the RetroPie-Setup script to the latest version.\n\n\nUninstall RetroPie:\n Uninstalls RetroPie from the system.\n\n\nReboot:\n Reboots your system.\n\n\n\n\nManage Packages\n\n\n\n\n\n\nCore:\n These are essential packages needed for RetroPie to run. Do not remove them.\n\n\nMain:\n These are the main emulators that come installed with the RetroPie SD image.\n\n\nOptional:\n These are optional packages that are working but aren't included with the RetroPie SD image.\n\n\nDrivers:\n Here you install gamepad drivers like the PS3 or Xboxdrv.\n\n\nExperimental:\n These packages have not been fully tested and may have bugs.\n\n\n\n\nCore Packages\n\n\n\n\nEach section of the manage packages portion of the setup script have the option to install/update all packages and remove all installed packages. You can also update/install and remove packages individually.\n\n\nThe core components needed for RetroPie to function are:\n- \nRetroArch:\n Frontend for the libretro api, necessary for most emulators to run.\n- \nEmulationStation:\n Frontend for sorting and launching all of your games.\n- \nRetroPie Menu:\n Menu in emulationstation for simpler configuration of your system.\n- \nRuncommand:\n The runcommand launch menu that assists launching your games with proper configurations see related wiki page \nHERE\n.\n\n\nUpdating/Installing individual packages\n\n\nYou can update/install and remove packages individually.\n\n\nWhen selecting a package there is also a help guide with extra information specific to that package:\n\n\n\n\nPackage Help:\n\n\n\n\nThe Package Help for each emulator should show you:\n- The name of the package\n- ROM extensions\n- ROM folder\n- BIOS filename and folder if applicable\n\n\nLatest SD image\n\n\nIf you are worried about conflicts during an update you can always just start with the latest fresh sd image which can be downloaded \nhere\n and just copy all your files back over onto that instead of updating from an older image.\n\n\nMaking a Backup (Option 1)\n\n\nYou can create an sd image of your current sd card with \nwin32diskimager\n (if you're on windows)\n\n\n\n\nPlug your sd card into your laptop (you will need a sd card reader for this)\n\n\nOpen win32diskimager as an administrator (you can right click on it to run as an administrator)\n\n\n\n\n\n\n\n\nmake sure you have the correct drive letter for your SD card! \n\n\ndefine the file path that you want to save your .img backup as\n\n\n\n\n\n\n\n\nClick \nread\n to create your backup. (after you've backed this image up if you screw something up later and want to start from this image you can just click write and it will write this sd image back to your sd card.)\n\n\nnote if you have a 64GB sd card it will create a 64GB backup file even if you don't have it completely filled up. If you don't want a file that large see the next option.   \n\n\n\n\nMaking a Backup (Option 2)\n\n\nif you don't want to create a sd image you can just back up your bios, roms, and configuration files from the samba shares\n\n\n\n\nMaking a Backup (OS X)\n\n\nOpen a terminal window and type \ndiskutil list\n. A list of all hard disks and partitions shows up. Find a partition with the name \nboot\n. The related /dev/disk* is your retropie sd card. Type \nsudo dd if=/dev/disk* of=backup.img bs=1m\n to write a disk image to your home directory.", 
            "title": "Updating RetroPie"
        }, 
        {
            "location": "/Updating-RetroPie/#updating-retropie", 
            "text": "The conventional way to update RetroPie and install new features is through the setup script.   The setup script can be accessed from the  RetroPie menu  in emulationstation.   It can also be accessed from the terminal with  sudo ~/RetroPie-Setup/retropie_setup.sh  Before making any major updates it is important to make backups just in case  (see backup options below) .", 
            "title": "Updating RetroPie"
        }, 
        {
            "location": "/Updating-RetroPie/#using-the-retropie-setup-script", 
            "text": "If updating from 3.x and earlier: Select  Update RetroPie-Setup Script  and then  Update All Installed Packages    If updating from 4.x and later: Select  Update All Installed Packages      Basic Install:  This is intended as a first install and is not required if using a pre-built image. eg When installing RetroPie on top of an existing OS.  Update All Installed Packages:  This will update the RetroPie-Setup script and all installed packages.  Manage Packages:  This will alllow you to install and update individual emulators, ports, controller drivers (like the ps3 or xboxdrv) other optional packages.  Configuration / Tools:  Configuration and tools including BlueTooth and WiFi setup, splashscreens and theme. You can also access any packages that have additional configuration here.  Update RetroPie-Setup Script:  Updates the RetroPie-Setup script to the latest version.  Uninstall RetroPie:  Uninstalls RetroPie from the system.  Reboot:  Reboots your system.   Manage Packages    Core:  These are essential packages needed for RetroPie to run. Do not remove them.  Main:  These are the main emulators that come installed with the RetroPie SD image.  Optional:  These are optional packages that are working but aren't included with the RetroPie SD image.  Drivers:  Here you install gamepad drivers like the PS3 or Xboxdrv.  Experimental:  These packages have not been fully tested and may have bugs.   Core Packages   Each section of the manage packages portion of the setup script have the option to install/update all packages and remove all installed packages. You can also update/install and remove packages individually.  The core components needed for RetroPie to function are:\n-  RetroArch:  Frontend for the libretro api, necessary for most emulators to run.\n-  EmulationStation:  Frontend for sorting and launching all of your games.\n-  RetroPie Menu:  Menu in emulationstation for simpler configuration of your system.\n-  Runcommand:  The runcommand launch menu that assists launching your games with proper configurations see related wiki page  HERE .", 
            "title": "Using the RetroPie Setup Script"
        }, 
        {
            "location": "/Updating-RetroPie/#updatinginstalling-individual-packages", 
            "text": "You can update/install and remove packages individually.  When selecting a package there is also a help guide with extra information specific to that package:   Package Help:   The Package Help for each emulator should show you:\n- The name of the package\n- ROM extensions\n- ROM folder\n- BIOS filename and folder if applicable", 
            "title": "Updating/Installing individual packages"
        }, 
        {
            "location": "/Updating-RetroPie/#latest-sd-image", 
            "text": "If you are worried about conflicts during an update you can always just start with the latest fresh sd image which can be downloaded  here  and just copy all your files back over onto that instead of updating from an older image.", 
            "title": "Latest SD image"
        }, 
        {
            "location": "/Updating-RetroPie/#making-a-backup-option-1", 
            "text": "You can create an sd image of your current sd card with  win32diskimager  (if you're on windows)   Plug your sd card into your laptop (you will need a sd card reader for this)  Open win32diskimager as an administrator (you can right click on it to run as an administrator)     make sure you have the correct drive letter for your SD card!   define the file path that you want to save your .img backup as     Click  read  to create your backup. (after you've backed this image up if you screw something up later and want to start from this image you can just click write and it will write this sd image back to your sd card.)  note if you have a 64GB sd card it will create a 64GB backup file even if you don't have it completely filled up. If you don't want a file that large see the next option.", 
            "title": "Making a Backup (Option 1)"
        }, 
        {
            "location": "/Updating-RetroPie/#making-a-backup-option-2", 
            "text": "if you don't want to create a sd image you can just back up your bios, roms, and configuration files from the samba shares", 
            "title": "Making a Backup (Option 2)"
        }, 
        {
            "location": "/Updating-RetroPie/#making-a-backup-os-x", 
            "text": "Open a terminal window and type  diskutil list . A list of all hard disks and partitions shows up. Find a partition with the name  boot . The related /dev/disk* is your retropie sd card. Type  sudo dd if=/dev/disk* of=backup.img bs=1m  to write a disk image to your home directory.", 
            "title": "Making a Backup (OS X)"
        }, 
        {
            "location": "/SSH/", 
            "text": "SSH\n\n\nSSH stands for secure shell. You can remotely connect to the raspberry pi terminal with an SSH client. A popular ssh client is \nPutty\n \n\n\nNOTE\n Your Raspberry Pi needs to be connected to the same network (either via Ethernet or Wifi Dongle) as the computer you are accessing it from. \n\n\nWhen you first start putty you can sign in with the following credentials:\n\n\n\n\nYou can also use your raspberry pi's ip address instead of \nretropie\n\n\nDefault Login:\n\n\nusername: \npi\n\n\npassword: \nraspberry\n\n\nSee \nhere\n if you wish to log in as root.\n\n\nSome common terminal commands:\n\n\nReboot:\n \n\n\nsudo reboot\n\n\n\n\nShutdown:\n \n\n\nsudo shutdown -h now\n\n\n\n\nChange Directory\n\n\ncd /path/to/directory\n\n\n\n\nlist Files in Current Directory\n\n\nls\n\n\n\n\nRetropie Setup Script:\n\n\nsudo /home/pi/RetroPie-Setup/retropie_setup.sh\n\n\n\n\nEdit Files with Nano:\n \n\n\nsudo nano /path/to/file.txt\n\n\n\n\nChange owner to Pi:\n\n\nsudo chown pi:pi filetobechanged\n\n\n\n\nChange owner of folder and all files in folder to Pi:\n\n\nsudo chown -R pi:pi /folder/to/be/changed\n\n\n\n\nMake shell script executable:\n\n\nsudo chmod +x yourshellscript.sh\n\n\n\n\nExtra Configurations\n\n\nIf you find that you are getting weird characters on the dialog gui for the RetroPie Setup script you can change the font encoding to make it look pretty again.", 
            "title": "SSH"
        }, 
        {
            "location": "/SSH/#ssh", 
            "text": "SSH stands for secure shell. You can remotely connect to the raspberry pi terminal with an SSH client. A popular ssh client is  Putty    NOTE  Your Raspberry Pi needs to be connected to the same network (either via Ethernet or Wifi Dongle) as the computer you are accessing it from.   When you first start putty you can sign in with the following credentials:   You can also use your raspberry pi's ip address instead of  retropie", 
            "title": "SSH"
        }, 
        {
            "location": "/SSH/#default-login", 
            "text": "username:  pi  password:  raspberry  See  here  if you wish to log in as root.", 
            "title": "Default Login:"
        }, 
        {
            "location": "/SSH/#some-common-terminal-commands", 
            "text": "Reboot:    sudo reboot  Shutdown:    sudo shutdown -h now  Change Directory  cd /path/to/directory  list Files in Current Directory  ls  Retropie Setup Script:  sudo /home/pi/RetroPie-Setup/retropie_setup.sh  Edit Files with Nano:    sudo nano /path/to/file.txt  Change owner to Pi:  sudo chown pi:pi filetobechanged  Change owner of folder and all files in folder to Pi:  sudo chown -R pi:pi /folder/to/be/changed  Make shell script executable:  sudo chmod +x yourshellscript.sh", 
            "title": "Some common terminal commands:"
        }, 
        {
            "location": "/SSH/#extra-configurations", 
            "text": "If you find that you are getting weird characters on the dialog gui for the RetroPie Setup script you can change the font encoding to make it look pretty again.", 
            "title": "Extra Configurations"
        }, 
        {
            "location": "/Wifi/", 
            "text": "Configuring Wifi\n\n\nIf you have a Raspberry Pi 3, wifi is built into the pi, if you have a pi2 or earlier you'll need a wifi dongle, you can check to see if your wifi dongle is compatible \nhere\n:\n\n\nThere are 5 main methods to configure Wifi:\n\n\n\n\nWifi Module\n\n\nConnecting to Wifi Without a Keyboard\n\n\nManual Configuration (Interfaces)\n\n\nManual Configuration (WPA_Supplicant)\n\n\nWCID-Curses Daemon\n\n\n\n\nMethod 1 (Easiest)\n\n\nYou can access this from the Retropie menu in emulationstation (you can also access it from option 3 in the RetroPie setup script):\n\n\n\n\nIt will open into this menu:\n\n\n\n\nChoose your SSID from a list:\n\n\n\n\nType your Wifi Password (You may need to wait a bit after you finish for the configurations to save)\n\n\n\n\nAfter it's done configuring you should see your wifi info in the original menu:\n\n\n\n\nMethod 2 (Connecting to Wifi without a keyboard)\n\n\nIf you wish to connect to wifi without needing an extra keyboard you can add a file to the boot partition of the sd card called \nwifikeyfile.txt\n\n\nplace your network details here (note only works on WPA networks)\n\n\nssid=\nNETWORK_NAME\n\npsk=\nNETWORK_PASSWORD\n\n\n\n\n\nYou can then access the wifi module and select the option to \"Import wifi credentials from \n/boot/wifikeyfile.txt\n\"\n\n\n\n\nMethod 3 (INTERFACES)\n\n\nsudo nano /etc/network/interfaces\n\n\nWPA/WPA2\n\n\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n   wpa-ssid \nNETWORK_NAME\n\n   wpa-psk \nNETWORK_PASSWORD\n\n\n\n\n\nyou can also add \nwireless-power off\n at the end if you have issues with your wifi dongle turning off and on a lot and not being able to maintain a connection.\n\n\nWEP\n\n\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n   wireless-essid NETWORK_NAME\n   wireless-key NETWORK_PASSWORD\n\n\n\n\nOpen Network\n\n\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n  wireless-essid NETWORK_NAME\n  wireless-mode managed\n\n\n\n\nHidden SSID\n\n\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n   wpa-ssid \nNETWORK_NAME\n\n   wpa-psk \nNETWORK_PASSWORD\n\n   wpa-scan-ssid 1\n\n\n\n\nStatic IP\n\n\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\n\niface wlan0 inet static \n   wpa-ssid \nNETWORK_NAME\n #(set these lines for their respective encryption type- wpa, wep, etc.)\n   wpa-psk \nNETWORK_PASSWORD\n\naddress 192.168.0.110 #(This is the IP you want your raspberry pi to have)\nnetmask 255.255.255.0 #(This is almost always the same)\ngateway 192.168.0.1 #(almost always the same as well. you can verify with netstat -nr)\n\n\n\n\nsudo reboot\n\n\non reboot (if configured correctly) your wifi will be working.\n\n\nMethod 4 (wpa_supplicant.conf)\n\n\nTaken from the Raspberry Pi Foundation \nhere\n:\n\n\nThis method is suitable if you do not have access to the graphical user interface normally used to set up WiFi on the Raspberry Pi. It is especailly suited for use with a serial console cable if you don't have access to a screen or wired Ethernet network. Also note that no additional software is required; everything you need is already included on the Raspberry Pi.\n\n\nGETTING WIFI NETWORK DETAILS\n\n\nTo scan for WiFi networks, use the command \nsudo iwlist wlan0\n scan. This will list all available WiFi networks along with other useful information. Look out for:\n\n\n\n\n\n\nESSID:\"testing\"\n. This is the name of the WiFi network.\n\n\n\n\n\n\nIE: IEEE 802.11i/WPA2 Version 1\n. This is the authentication used; in this case it is WPA2, the newer and more secure wireless standard which replaces WPA1. This guide should work for WPA or WPA2, but may not work for WPA2 enterprise; for WEP hex keys see the last example \nhere\n. \nYou will also need the password for the WiFi network. For most home routers this is located on a sticker on the back of the router. The ESSID (ssid) for the network in this case is \ntesting\n and the password (psk) \ntestingPassword\n.\n\n\n\n\n\n\nADDING THE NETWORK DETAILS TO THE RASPBERRY PI\n\n\nFirst you'll need to ammend \n/etc/network/interfaces\n to point to wpa-supplicant if it isn't already:\n\n\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet manual\nwpa-roam /etc/wpa_supplicant/wpa_supplicant.conf\n#The following line specified in /etc/network/interfaces will activate and configure each 'default' network in wpa_supplicant.conf with DHCP upon a successful connection to an access point (this line needs to be here for wpa-roam)\niface default inet dhcp\n\n\n\n\nWe've changed it to wpa-roam so that it will reconnect if the connection drops.\n\n\nOpen the \nwpa-supplicant\n configuration file in nano:\n\n\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n\n\nGo to the bottom of the file and add the following:\n\n\nnetwork={\n    ssid=\nThe_ESSID_from_earlier\n\n    psk=\nYour_wifi_password\n\n}\n\n\n\n\nIn the case of the example network, we would enter:\n\n\nWPA/WPA2\n\n\nnetwork={\n    ssid=\ntesting\n\n    psk=\ntestingPassword\n\n}\n\n\n\n\nWEP\n\n\nnetwork={\n     ssid=\nNETWORK_NAME\n\n     key_mgmt=NONE\n     wep_tx_keyidx=0 #this forces it to use wep_key0\n     wep_key0=YOURWEPKEY\n}\n\n\n\n\nOpen Network\n\n\nnetwork={\n    ssid=\nNETWORK_NAME\n\n    key_mgmt=NONE\n}\n\n\n\n\nHidden SSID\n\n\nnetwork={\n    ssid=\nNETWORK_NAME\n # it can be any encryption type, just make sure to add the \nscan_ssid=1\n line after your settings.\n    key_mgmt=NONE\n    scan_ssid=1\n}\n\n\n\n\nNow save the file by pressing \nctrl+x\n then \ny\n, then finally press \nenter\n.\n\n\nAt this point,\nwpa-supplicant\n will normally notice a change has occurred within a few seconds, and it will try and connect to the network. If it does not, either manually restart the interface with \nsudo ifdown wlan0\n and \nsudo ifup wlan0\n, or reboot your Raspberry Pi with \nsudo reboot\n.\n\n\nYou can verify if it has successfully connected using \nifconfig wlan0\n. If the \ninet addr\n field has an address beside it, the Pi has connected to the network. If not, check your password and ESSID are correct.\n\n\nMethod 5 (Wicd-Curses)\n\n\nNote that this may cause a small amount of background cpu usage, which can stop the CPU from scaling to lowest frequency.\n\n\nyou first need to install it with \nsudo apt-get install wicd wicd-curses\n and then typ wicd-curses in the terminal to open it.\n\n\n(of course you'll need to be connected by ethernet to install it)\n\n\n\n\nNavigate to your wireless network and Press the \nRIGHT\n arrow to configure your wifi\n\n\n\n\ncheck automatically connect to this network (by pressing enter) and type in your wifi password where it says \"key\" press \nF10\n to save and then press \nSHIFT+c\n to connect and press \nQ\n to exit back to the terminal. \n\n\nThere are some noted issues with the daemon using some CPU and preventing the Pi from scaling to lowest frequency, so if that's the case you can remove wicd-curses by typing \nsudo apt-get remove wicd-curses\n and proceed to setup your wifi using method 2 or 3.", 
            "title": "Wifi"
        }, 
        {
            "location": "/Wifi/#configuring-wifi", 
            "text": "If you have a Raspberry Pi 3, wifi is built into the pi, if you have a pi2 or earlier you'll need a wifi dongle, you can check to see if your wifi dongle is compatible  here :  There are 5 main methods to configure Wifi:   Wifi Module  Connecting to Wifi Without a Keyboard  Manual Configuration (Interfaces)  Manual Configuration (WPA_Supplicant)  WCID-Curses Daemon", 
            "title": "Configuring Wifi"
        }, 
        {
            "location": "/Wifi/#method-1-easiest", 
            "text": "You can access this from the Retropie menu in emulationstation (you can also access it from option 3 in the RetroPie setup script):   It will open into this menu:   Choose your SSID from a list:   Type your Wifi Password (You may need to wait a bit after you finish for the configurations to save)   After it's done configuring you should see your wifi info in the original menu:", 
            "title": "Method 1 (Easiest)"
        }, 
        {
            "location": "/Wifi/#method-2-connecting-to-wifi-without-a-keyboard", 
            "text": "If you wish to connect to wifi without needing an extra keyboard you can add a file to the boot partition of the sd card called  wifikeyfile.txt  place your network details here (note only works on WPA networks)  ssid= NETWORK_NAME \npsk= NETWORK_PASSWORD   You can then access the wifi module and select the option to \"Import wifi credentials from  /boot/wifikeyfile.txt \"", 
            "title": "Method 2 (Connecting to Wifi without a keyboard)"
        }, 
        {
            "location": "/Wifi/#method-3-interfaces", 
            "text": "sudo nano /etc/network/interfaces", 
            "title": "Method 3 (INTERFACES)"
        }, 
        {
            "location": "/Wifi/#wpawpa2", 
            "text": "auto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n   wpa-ssid  NETWORK_NAME \n   wpa-psk  NETWORK_PASSWORD   you can also add  wireless-power off  at the end if you have issues with your wifi dongle turning off and on a lot and not being able to maintain a connection.", 
            "title": "WPA/WPA2"
        }, 
        {
            "location": "/Wifi/#wep", 
            "text": "auto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n   wireless-essid NETWORK_NAME\n   wireless-key NETWORK_PASSWORD", 
            "title": "WEP"
        }, 
        {
            "location": "/Wifi/#open-network", 
            "text": "auto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n  wireless-essid NETWORK_NAME\n  wireless-mode managed", 
            "title": "Open Network"
        }, 
        {
            "location": "/Wifi/#hidden-ssid", 
            "text": "auto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet dhcp\n   wpa-ssid  NETWORK_NAME \n   wpa-psk  NETWORK_PASSWORD \n   wpa-scan-ssid 1", 
            "title": "Hidden SSID"
        }, 
        {
            "location": "/Wifi/#static-ip", 
            "text": "auto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\n\niface wlan0 inet static \n   wpa-ssid  NETWORK_NAME  #(set these lines for their respective encryption type- wpa, wep, etc.)\n   wpa-psk  NETWORK_PASSWORD \naddress 192.168.0.110 #(This is the IP you want your raspberry pi to have)\nnetmask 255.255.255.0 #(This is almost always the same)\ngateway 192.168.0.1 #(almost always the same as well. you can verify with netstat -nr)  sudo reboot  on reboot (if configured correctly) your wifi will be working.", 
            "title": "Static IP"
        }, 
        {
            "location": "/Wifi/#method-4-wpa_supplicantconf", 
            "text": "Taken from the Raspberry Pi Foundation  here :  This method is suitable if you do not have access to the graphical user interface normally used to set up WiFi on the Raspberry Pi. It is especailly suited for use with a serial console cable if you don't have access to a screen or wired Ethernet network. Also note that no additional software is required; everything you need is already included on the Raspberry Pi.", 
            "title": "Method 4 (wpa_supplicant.conf)"
        }, 
        {
            "location": "/Wifi/#getting-wifi-network-details", 
            "text": "To scan for WiFi networks, use the command  sudo iwlist wlan0  scan. This will list all available WiFi networks along with other useful information. Look out for:    ESSID:\"testing\" . This is the name of the WiFi network.    IE: IEEE 802.11i/WPA2 Version 1 . This is the authentication used; in this case it is WPA2, the newer and more secure wireless standard which replaces WPA1. This guide should work for WPA or WPA2, but may not work for WPA2 enterprise; for WEP hex keys see the last example  here . \nYou will also need the password for the WiFi network. For most home routers this is located on a sticker on the back of the router. The ESSID (ssid) for the network in this case is  testing  and the password (psk)  testingPassword .", 
            "title": "GETTING WIFI NETWORK DETAILS"
        }, 
        {
            "location": "/Wifi/#adding-the-network-details-to-the-raspberry-pi", 
            "text": "First you'll need to ammend  /etc/network/interfaces  to point to wpa-supplicant if it isn't already:  auto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\nauto wlan0\niface wlan0 inet manual\nwpa-roam /etc/wpa_supplicant/wpa_supplicant.conf\n#The following line specified in /etc/network/interfaces will activate and configure each 'default' network in wpa_supplicant.conf with DHCP upon a successful connection to an access point (this line needs to be here for wpa-roam)\niface default inet dhcp  We've changed it to wpa-roam so that it will reconnect if the connection drops.  Open the  wpa-supplicant  configuration file in nano:  sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  Go to the bottom of the file and add the following:  network={\n    ssid= The_ESSID_from_earlier \n    psk= Your_wifi_password \n}  In the case of the example network, we would enter:", 
            "title": "ADDING THE NETWORK DETAILS TO THE RASPBERRY PI"
        }, 
        {
            "location": "/Wifi/#wpawpa2_1", 
            "text": "network={\n    ssid= testing \n    psk= testingPassword \n}", 
            "title": "WPA/WPA2"
        }, 
        {
            "location": "/Wifi/#wep_1", 
            "text": "network={\n     ssid= NETWORK_NAME \n     key_mgmt=NONE\n     wep_tx_keyidx=0 #this forces it to use wep_key0\n     wep_key0=YOURWEPKEY\n}", 
            "title": "WEP"
        }, 
        {
            "location": "/Wifi/#open-network_1", 
            "text": "network={\n    ssid= NETWORK_NAME \n    key_mgmt=NONE\n}", 
            "title": "Open Network"
        }, 
        {
            "location": "/Wifi/#hidden-ssid_1", 
            "text": "network={\n    ssid= NETWORK_NAME  # it can be any encryption type, just make sure to add the  scan_ssid=1  line after your settings.\n    key_mgmt=NONE\n    scan_ssid=1\n}  Now save the file by pressing  ctrl+x  then  y , then finally press  enter .  At this point, wpa-supplicant  will normally notice a change has occurred within a few seconds, and it will try and connect to the network. If it does not, either manually restart the interface with  sudo ifdown wlan0  and  sudo ifup wlan0 , or reboot your Raspberry Pi with  sudo reboot .  You can verify if it has successfully connected using  ifconfig wlan0 . If the  inet addr  field has an address beside it, the Pi has connected to the network. If not, check your password and ESSID are correct.", 
            "title": "Hidden SSID"
        }, 
        {
            "location": "/Wifi/#method-5-wicd-curses", 
            "text": "Note that this may cause a small amount of background cpu usage, which can stop the CPU from scaling to lowest frequency.  you first need to install it with  sudo apt-get install wicd wicd-curses  and then typ wicd-curses in the terminal to open it.  (of course you'll need to be connected by ethernet to install it)   Navigate to your wireless network and Press the  RIGHT  arrow to configure your wifi   check automatically connect to this network (by pressing enter) and type in your wifi password where it says \"key\" press  F10  to save and then press  SHIFT+c  to connect and press  Q  to exit back to the terminal.   There are some noted issues with the daemon using some CPU and preventing the Pi from scaling to lowest frequency, so if that's the case you can remove wicd-curses by typing  sudo apt-get remove wicd-curses  and proceed to setup your wifi using method 2 or 3.", 
            "title": "Method 5 (Wicd-Curses)"
        }, 
        {
            "location": "/3do/", 
            "text": "The Panasonic 3do Real Multiplayer was a Home Video Game Console developed by the 3do company in 1994\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-4do\n\n\n3do\n\n\n.iso\n\n\npanafz10.bin\n\n\n/opt/retropie/configs/3do/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-4do\n :small_red_triangle:\n\n\nNote that this is experimental- even with an overclocked RPi2 it was incredibly laggy and slow. Definitely won't be coming out of experimental any time soon. It can be installed from the experimental menu of the \nRetroPie Setup Script\n.\n\n\nWith RPi3 (stock and overclocked) no real difference in performance compared to the RPi2. Bust-A-Move took around 1 minute to load on stock speed and 39 seconds overclocked. Both had choppy sound and controller lag. As of 8/6/2016.\n\n\nROMS\n\n\nAccepted File Extensions: \n.iso\n\n\nPlace your 3do ROMs in\n\n\n/home/pi/RetroPie/roms/3do\n\n\n\n\nBIOS\n\n\nThe file needed is \npanafz10.bin\n\n\nPlace your panafz10.bin BIOS file in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nControls\n\n\nlr-4do utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/3do/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "3do"
        }, 
        {
            "location": "/3do/#emulator-lr-4do-small_red_triangle", 
            "text": "Note that this is experimental- even with an overclocked RPi2 it was incredibly laggy and slow. Definitely won't be coming out of experimental any time soon. It can be installed from the experimental menu of the  RetroPie Setup Script .  With RPi3 (stock and overclocked) no real difference in performance compared to the RPi2. Bust-A-Move took around 1 minute to load on stock speed and 39 seconds overclocked. Both had choppy sound and controller lag. As of 8/6/2016.", 
            "title": "Emulator: lr-4do :small_red_triangle:"
        }, 
        {
            "location": "/3do/#roms", 
            "text": "Accepted File Extensions:  .iso  Place your 3do ROMs in  /home/pi/RetroPie/roms/3do", 
            "title": "ROMS"
        }, 
        {
            "location": "/3do/#bios", 
            "text": "The file needed is  panafz10.bin  Place your panafz10.bin BIOS file in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/3do/#controls", 
            "text": "lr-4do utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/3do/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Amiga/", 
            "text": "The Amiga was a family of personal computers released by Commodore in the 1980's and 1990's.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nUAE4ALL2\n, \nUAE4ARM\n\n\namiga\n\n\n.adf\n\n\nkick13.rom, kick20.rom, kick31.rom\n\n\nHardcoded\n\n\n\n\n\n\n\n\nEmulators: \nUAE4ALL2\n, \nUAE4ARM\n\n\nUAE4ALL2 is no longer developed and we recommend using UAE4ARM on the Raspberry Pi.\n\n\nROMS\n\n\nAccepted File Extensions: \n.adf\n\n\nPlace your Amiga disks images in\n\n\n/home/pi/RetroPie/roms/amiga/\n\n\n\n\nBIOS\n\n\nThe emulator comes with a free AROS rom that will work for running many games and demos. \n\n\nIf you want to use a kickstart 1.3, 2.0, 3.1 rom place your \nkick13.rom, kick20.rom, kick31.rom\n files in \n\n\n/home/pi/RetroPie/BIOS/\n\n\n\n\nControls\n\n\nThese are hardcoded currently. This initial mapping was chosen as it's somewhat similar to MAME, and should mostly work on any controllers that use that input mapping (such as the picade). Joypad/Joystick is currently untested.\n\n\nin game:\n\n\nlctrl      - joy 1/mouse 1 (button X in gui)\nlalt       - joy 2/mouse 2 (button Y in gui)\nlshift     - joy 1 autofire (button A in gui)\nz          - mouse 1  (button B in gui)\n\n5          - switch input between mouse/joystick\n\narrow keys - up / down / left / right\n\nF12 (UAE4ARM) and/or [CTRL]+[ESC] (UAE4ALL) - Open emulator menu\n\n\n\n\nLaunch it from Emulation Station, and you get the GUI where you can configure disks/roms/memory and insert adf images into the virtual floppy disk drives.\n\n\nVideo Tutorial\n\n\n \n\n\nTips and troubleshooting\n\n\n\n\n\n\nSome games work better with the '512Kb Chip' + '512Kb Slow' memory configuration rather than the default A500 '1MB Chip'. If your game crashes or fails to load, change the memory settings in the 'CPU RAM' tab of the UAE4ALL2 GUI.\n\n\n\n\n\n\nSome games do not work properly if more than one floppy drive is in use. If your game crashes or fails to load try to use just DF0 (change disc image during game if required) and not use DF1, DF2 and DF3.\n\n\n\n\n\n\nFor Raspberry Pi 1 users - make sure you overclock your device. Amiga emulation works much faster when overclocked to maximum. Without overclocking some games do not run at full speed.\n\n\n\n\n\n\nLaunching games directly from EmulationStation\n\n\nScript for creating configuration files\n\n\nHere you will find a script, and the necessary configuration files according to different version of UAE4arm, for creating game configuration file:\n\n\nhttp://www.retropie-italia.it/viewtopic.php?f=10\nt=16 \n\n\nOn EmulationStation, AMIGA, open \"+Start UAE4Arm\" and save a profile with random name then open the file and check the number in the parameter \"config_version\". Download the correct configuration file from previous link then rename it in \"config.uae\" and copy it, together with \"AGCC.sh\" (also download this from previous link), on Raspberry Pi. AGCC.sh uses the \"config.uae\" file in order to create games configuration and (if you want) you can edit it. For default behavior emulator is searching for kickstart 2.04 in\n\n\n/home/pi/RetroPie/roms/amiga/\n\n\nrenamed in \"kick20.rom\", so you have to rename your kickstart or edit \"config.uae\".\n\n\nAlso follow these steps:\n\n\nsudo nano /etc/emulationstation/es_systems.cfg\n\n\nand edit the tag \n for \"amiga\" emulator in this way:\n\n\nextension\n.sh .uae .SH .UAE\n/extension\n\n\nThen\n\nsudo nano /opt/retropie/configs/amiga/emulators.cfg\n\n\nand edit the line in this way:\n\n\nuae4arm = \"pushd /opt/retropie/emulators/uae4arm/; ./uae4arm -f %ROM%\"\n\n\nPoint attention to the floppy image extension (case-insensitive):  .adf, .adz, .dms, .ipf, .zip\n\n\nFor game with multiple disks rename them in this way: \n\n\nGame bla bla bla (Disk 1 of N).adf\n\nGame bla bla bla (Disk 2 of N).adf\n\n...\n\nGame bla bla bla (Disk N of N).adf\n\n\nin other words change ONLY the floppy identifier.  \n\n\nNote: The old script from Mark Dunning has a problem with games with more than 9 floppies (creates others wrong config files) and creates a config file with name like \"Game bla bla bla (Disk 1 of N).uae\". This new app create only 1 file for a multiple disk game with the exact name of the game, \"Game bla bla bla.uae\"\n\n\nOther solution\n\n\nAlternatively, a native BASH script to perform the same steps directly on the RetroPie machine can be found here:\nhttps://github.com/Douggernaut/RetroPieAssistant/tree/master/Amiga", 
            "title": "Amiga"
        }, 
        {
            "location": "/Amiga/#emulators-uae4all2-uae4arm", 
            "text": "UAE4ALL2 is no longer developed and we recommend using UAE4ARM on the Raspberry Pi.", 
            "title": "Emulators: UAE4ALL2, UAE4ARM"
        }, 
        {
            "location": "/Amiga/#roms", 
            "text": "Accepted File Extensions:  .adf  Place your Amiga disks images in  /home/pi/RetroPie/roms/amiga/", 
            "title": "ROMS"
        }, 
        {
            "location": "/Amiga/#bios", 
            "text": "The emulator comes with a free AROS rom that will work for running many games and demos.   If you want to use a kickstart 1.3, 2.0, 3.1 rom place your  kick13.rom, kick20.rom, kick31.rom  files in   /home/pi/RetroPie/BIOS/", 
            "title": "BIOS"
        }, 
        {
            "location": "/Amiga/#controls", 
            "text": "These are hardcoded currently. This initial mapping was chosen as it's somewhat similar to MAME, and should mostly work on any controllers that use that input mapping (such as the picade). Joypad/Joystick is currently untested.  in game:  lctrl      - joy 1/mouse 1 (button X in gui)\nlalt       - joy 2/mouse 2 (button Y in gui)\nlshift     - joy 1 autofire (button A in gui)\nz          - mouse 1  (button B in gui)\n\n5          - switch input between mouse/joystick\n\narrow keys - up / down / left / right\n\nF12 (UAE4ARM) and/or [CTRL]+[ESC] (UAE4ALL) - Open emulator menu  Launch it from Emulation Station, and you get the GUI where you can configure disks/roms/memory and insert adf images into the virtual floppy disk drives.", 
            "title": "Controls"
        }, 
        {
            "location": "/Amiga/#video-tutorial", 
            "text": "", 
            "title": "Video Tutorial"
        }, 
        {
            "location": "/Amiga/#tips-and-troubleshooting", 
            "text": "Some games work better with the '512Kb Chip' + '512Kb Slow' memory configuration rather than the default A500 '1MB Chip'. If your game crashes or fails to load, change the memory settings in the 'CPU RAM' tab of the UAE4ALL2 GUI.    Some games do not work properly if more than one floppy drive is in use. If your game crashes or fails to load try to use just DF0 (change disc image during game if required) and not use DF1, DF2 and DF3.    For Raspberry Pi 1 users - make sure you overclock your device. Amiga emulation works much faster when overclocked to maximum. Without overclocking some games do not run at full speed.", 
            "title": "Tips and troubleshooting"
        }, 
        {
            "location": "/Amiga/#launching-games-directly-from-emulationstation", 
            "text": "", 
            "title": "Launching games directly from EmulationStation"
        }, 
        {
            "location": "/Amiga/#script-for-creating-configuration-files", 
            "text": "Here you will find a script, and the necessary configuration files according to different version of UAE4arm, for creating game configuration file:  http://www.retropie-italia.it/viewtopic.php?f=10 t=16   On EmulationStation, AMIGA, open \"+Start UAE4Arm\" and save a profile with random name then open the file and check the number in the parameter \"config_version\". Download the correct configuration file from previous link then rename it in \"config.uae\" and copy it, together with \"AGCC.sh\" (also download this from previous link), on Raspberry Pi. AGCC.sh uses the \"config.uae\" file in order to create games configuration and (if you want) you can edit it. For default behavior emulator is searching for kickstart 2.04 in  /home/pi/RetroPie/roms/amiga/  renamed in \"kick20.rom\", so you have to rename your kickstart or edit \"config.uae\".  Also follow these steps:  sudo nano /etc/emulationstation/es_systems.cfg  and edit the tag   for \"amiga\" emulator in this way:  extension .sh .uae .SH .UAE /extension  Then sudo nano /opt/retropie/configs/amiga/emulators.cfg  and edit the line in this way:  uae4arm = \"pushd /opt/retropie/emulators/uae4arm/; ./uae4arm -f %ROM%\"  Point attention to the floppy image extension (case-insensitive):  .adf, .adz, .dms, .ipf, .zip  For game with multiple disks rename them in this way:   Game bla bla bla (Disk 1 of N).adf \nGame bla bla bla (Disk 2 of N).adf \n... \nGame bla bla bla (Disk N of N).adf  in other words change ONLY the floppy identifier.    Note: The old script from Mark Dunning has a problem with games with more than 9 floppies (creates others wrong config files) and creates a config file with name like \"Game bla bla bla (Disk 1 of N).uae\". This new app create only 1 file for a multiple disk game with the exact name of the game, \"Game bla bla bla.uae\"", 
            "title": "Script for creating configuration files"
        }, 
        {
            "location": "/Amiga/#other-solution", 
            "text": "Alternatively, a native BASH script to perform the same steps directly on the RetroPie machine can be found here:\nhttps://github.com/Douggernaut/RetroPieAssistant/tree/master/Amiga", 
            "title": "Other solution"
        }, 
        {
            "location": "/Amstrad-CPC/", 
            "text": "The Amstrad CPC (short for Colour Personal Computer) is a series of 8-bit home computers produced by Amstrad between 1984 and 1990.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-caprice32\n, \nCapriceRPI\n\n\namstradcpc\n\n\n.dsk .cpc\n\n\nnone\n\n\n/opt/retropie/configs/armstradcpc/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulators: \nCapriceRPI\n, \nlr-caprice32\n\n\nROMS\n\n\nAccepted File Extensions: \n.dsk .cpc\n\n\nPlace your Amstrad CPC ROMs in\n\n\n/home/pi/RetroPie/roms/amstradcpc\n\n\n\n\nControls\n\n\nCapriceRPI\n\n\nIf you are open into a ROM from EmulationStation and it opens to a blue screen you can type\n\n\nCAT\n\n\n\n\nand it will list the file names of your game. The you will type RUN\"FILENAME (match the lettercase exactly)\n\n\ne.g. CAT results:\n\n\nCABAL     .BI1\nCABAL     .BI2\nCABAL     .BIN\nCABAL     .LV1\n\n\n\n\nThen I type:\n\n\nRUN\nCABAL\n\n\n\n\nif your keyboard can't seem to make the \" then try holding shift and pressing the number 2 and it should type a quotation mark\n\n\nQUICK START CONTROLS\n\n\nF5: reset\nF6: exit\n\nKeyboard Controls will vary by game\n\n\n\n\nlr-caprice32\n\n\nlr-caprice32 utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/amstradcpc/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Amstrad CPC"
        }, 
        {
            "location": "/Amstrad-CPC/#emulators-capricerpi-lr-caprice32", 
            "text": "", 
            "title": "Emulators: CapriceRPI, lr-caprice32"
        }, 
        {
            "location": "/Amstrad-CPC/#roms", 
            "text": "Accepted File Extensions:  .dsk .cpc  Place your Amstrad CPC ROMs in  /home/pi/RetroPie/roms/amstradcpc", 
            "title": "ROMS"
        }, 
        {
            "location": "/Amstrad-CPC/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Amstrad-CPC/#capricerpi", 
            "text": "If you are open into a ROM from EmulationStation and it opens to a blue screen you can type  CAT  and it will list the file names of your game. The you will type RUN\"FILENAME (match the lettercase exactly)  e.g. CAT results:  CABAL     .BI1\nCABAL     .BI2\nCABAL     .BIN\nCABAL     .LV1  Then I type:  RUN CABAL  if your keyboard can't seem to make the \" then try holding shift and pressing the number 2 and it should type a quotation mark  QUICK START CONTROLS  F5: reset\nF6: exit\n\nKeyboard Controls will vary by game", 
            "title": "CapriceRPI"
        }, 
        {
            "location": "/Amstrad-CPC/#lr-caprice32", 
            "text": "lr-caprice32 utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/amstradcpc/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-caprice32"
        }, 
        {
            "location": "/Apple-II/", 
            "text": "The Apple II was a series of personal computers starting from 1977 to 1993.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nLinapple\n\n\napple2\n\n\n.dsk\n\n\nnone\n\n\n/opt/retropie/configs/apple2/linapple.conf\n\n\n\n\n\n\n\n\nEmulator: \nLinapple\n\n\nROMS\n\n\nAccepted File Extensions: \n.dsk\n\n\nPlace your Apple II disk image files in\n\n\n/home/pi/RetroPie/roms/apple2/\n\n\n\n\nControls\n\n\nUpon boot, press F1 to get an overview of the controls- they will vary by game. As the Apple II was a personal computer it would only make sense that you would be using a keyboard and mouse.\n\n\n  F1 - Show help screen\n     F2 - Cold reset\n     Shift+F2 - Reload conf file and restart\n     F3, F4 - Choose an image file name for floppy disk in Slot 6 drive 1 or 2 respectively\n     Shift+F3, Shift+F4 - The same thing for Apple hard disks (in Slot 7)\n    Alt+F3,Alt+F4 - same as F3,F4 using FTP (see linapple.conf about configuring FTP accounts)\n    Alt+Shift+F3, Alt+Shift+F4 - same as Shift+F3, Shift+F4 but using FTP account (see above)\n\n     F5 - Swap drives for Slot 6\n     F6 - Toggle fullscreen mode\n     F7 - Reserved for Debugger!\n     F8 - Save current screen as a .bmp file\n     Shift+F8 - Save settings changable in runtime in conf file\n\n     F9 - Cycle through various video modes\n     F10 - Quit emulator\n\n     F11 - Save current state to file, Alt+F11 - quick save\n     F12 - Reload it from file, Alt+F12 - quick load\n\n     Ctrl+0..9  - fast load state snapshot with corresponding number, saved previously by\n     Ctrl+Shift+0..9 - fast save snapshot to current snapshot directory with corresponding number 0..9\n\n     Ctrl+F12 - Hot reset\n\n      Pause - Pause emulator\n      Scroll Lock - Toggle full speed\n    Num pad keys:\n     Grey + - Speed up emulator\n     Grey - - Speed it down\n     Grey * - Normal speed\n\n\n\n\nGetting Started\n\n\n\n\n\n\nPress F3 to choose your disk drive- and navigate to where you placed your disk images in the apple2 roms folder\n\n\n\n\n\n\nSelect your game by pressing Enter and then press F2 to reboot into the game you just selected- now you should be inside your game. Most games will have a splash screen with controls specific to that game. \n\n\n\n\n\n\nTo exit back to Emulationstation press F10 \n\n\n\n\n\n\nRunning Disks From EmulationStation\n\n\nhttp://blog.petrockblock.com/forums/topic/how-to-get-linapple-disk-images-running-from-emulation-station-in-retropie/", 
            "title": "Apple II"
        }, 
        {
            "location": "/Apple-II/#emulator-linapple", 
            "text": "", 
            "title": "Emulator: Linapple"
        }, 
        {
            "location": "/Apple-II/#roms", 
            "text": "Accepted File Extensions:  .dsk  Place your Apple II disk image files in  /home/pi/RetroPie/roms/apple2/", 
            "title": "ROMS"
        }, 
        {
            "location": "/Apple-II/#controls", 
            "text": "Upon boot, press F1 to get an overview of the controls- they will vary by game. As the Apple II was a personal computer it would only make sense that you would be using a keyboard and mouse.    F1 - Show help screen\n     F2 - Cold reset\n     Shift+F2 - Reload conf file and restart\n     F3, F4 - Choose an image file name for floppy disk in Slot 6 drive 1 or 2 respectively\n     Shift+F3, Shift+F4 - The same thing for Apple hard disks (in Slot 7)\n    Alt+F3,Alt+F4 - same as F3,F4 using FTP (see linapple.conf about configuring FTP accounts)\n    Alt+Shift+F3, Alt+Shift+F4 - same as Shift+F3, Shift+F4 but using FTP account (see above)\n\n     F5 - Swap drives for Slot 6\n     F6 - Toggle fullscreen mode\n     F7 - Reserved for Debugger!\n     F8 - Save current screen as a .bmp file\n     Shift+F8 - Save settings changable in runtime in conf file\n\n     F9 - Cycle through various video modes\n     F10 - Quit emulator\n\n     F11 - Save current state to file, Alt+F11 - quick save\n     F12 - Reload it from file, Alt+F12 - quick load\n\n     Ctrl+0..9  - fast load state snapshot with corresponding number, saved previously by\n     Ctrl+Shift+0..9 - fast save snapshot to current snapshot directory with corresponding number 0..9\n\n     Ctrl+F12 - Hot reset\n\n      Pause - Pause emulator\n      Scroll Lock - Toggle full speed\n    Num pad keys:\n     Grey + - Speed up emulator\n     Grey - - Speed it down\n     Grey * - Normal speed  Getting Started    Press F3 to choose your disk drive- and navigate to where you placed your disk images in the apple2 roms folder    Select your game by pressing Enter and then press F2 to reboot into the game you just selected- now you should be inside your game. Most games will have a splash screen with controls specific to that game.     To exit back to Emulationstation press F10", 
            "title": "Controls"
        }, 
        {
            "location": "/Apple-II/#running-disks-from-emulationstation", 
            "text": "http://blog.petrockblock.com/forums/topic/how-to-get-linapple-disk-images-running-from-emulation-station-in-retropie/", 
            "title": "Running Disks From EmulationStation"
        }, 
        {
            "location": "/Atari-2600/", 
            "text": "The Atari 2600 was a home video game console released by Atari in 1977\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-stella\n\n\natari2600\n\n\n.bin .a26 .rom .zip .gz\n\n\nnone\n\n\n/opt/retropie/configs/atari2600/retroarch.cfg\n\n\n\n\n\n\nStella\n\n\natari2600\n\n\n.bin .a26 .rom .zip .gz\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulators: \nStella\n, \nlr-stella\n\n\nROMS\n\n\nAccepted File Extensions: \n.bin .a26 .rom .zip .gz\n\n\nPlace your Atari 2600 ROMS in\n\n\n/home/pi/RetroPie/roms/atari2600/\n\n\n\n\nControls\n\n\nYou will configure controls differently depending on which emulator you use:\n\n\nlr-stella\n\n\nlr-stella utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/atari2600/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nStella\n\n\nDefault Controls:\n\n\nP0 Joystick Up: Up, J0/A1/-\nP0 Joystick Down: Down, J0/A1/+\nP0 Joystick Left: Left, J0/A0/-\nP0 Joystick Right: Right, J0/A0/+\nP0 Joystick Fire: Space, Lctrl, J0/B0\nP0 Booster Top Trigger: 4\nP0 Booster Handle Grip: 5\n\nConfiguration Menu: TAB\n\nPress Tab to access configuration menu- choose input settings and under the tab Emul. Events you can create custom controller mappings to work for your individual controllers", 
            "title": "Atari 2600"
        }, 
        {
            "location": "/Atari-2600/#emulators-stella-lr-stella", 
            "text": "", 
            "title": "Emulators: Stella, lr-stella"
        }, 
        {
            "location": "/Atari-2600/#roms", 
            "text": "Accepted File Extensions:  .bin .a26 .rom .zip .gz  Place your Atari 2600 ROMS in  /home/pi/RetroPie/roms/atari2600/", 
            "title": "ROMS"
        }, 
        {
            "location": "/Atari-2600/#controls", 
            "text": "You will configure controls differently depending on which emulator you use:", 
            "title": "Controls"
        }, 
        {
            "location": "/Atari-2600/#lr-stella", 
            "text": "lr-stella utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/atari2600/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-stella"
        }, 
        {
            "location": "/Atari-2600/#stella", 
            "text": "Default Controls:  P0 Joystick Up: Up, J0/A1/-\nP0 Joystick Down: Down, J0/A1/+\nP0 Joystick Left: Left, J0/A0/-\nP0 Joystick Right: Right, J0/A0/+\nP0 Joystick Fire: Space, Lctrl, J0/B0\nP0 Booster Top Trigger: 4\nP0 Booster Handle Grip: 5\n\nConfiguration Menu: TAB\n\nPress Tab to access configuration menu- choose input settings and under the tab Emul. Events you can create custom controller mappings to work for your individual controllers", 
            "title": "Stella"
        }, 
        {
            "location": "/Atari-7800/", 
            "text": "The Atari 7800 was a video game console released by Atari in 1986.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-prosystem\n\n\natari7800\n\n\n.a78 .bin\n\n\n7800 BIOS (U).rom\n\n\n/opt/retropie/configs/atari7800/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-prosystem\n\n\nROMS\n\n\nAccepted File Extensions: \n.a78 .bin\n\n\nPlace your Atari ROMs in \n\n\n/home/pi/RetroPie/roms/atari7800\n\n\n\n\nBIOS\n\n\nThis BIOS is optional if you want the Atari Logo at the beginning of games, otherwise you don't need it because the games work fine without it. The BIOS file name is \n7800 BIOS (U).rom\n\n\nPlace your Atari 7800 BIOS in\n\n\n/home/pi/RetroPie/BIOS/\n\n\n\n\nNote: if this BIOS is enabled, PAL ROMs will not work so use it accordingly.\n\n\nControls\n\n\nlr-prosystem utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/atari7800/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Atari 7800"
        }, 
        {
            "location": "/Atari-7800/#emulator-lr-prosystem", 
            "text": "", 
            "title": "Emulator: lr-prosystem"
        }, 
        {
            "location": "/Atari-7800/#roms", 
            "text": "Accepted File Extensions:  .a78 .bin  Place your Atari ROMs in   /home/pi/RetroPie/roms/atari7800", 
            "title": "ROMS"
        }, 
        {
            "location": "/Atari-7800/#bios", 
            "text": "This BIOS is optional if you want the Atari Logo at the beginning of games, otherwise you don't need it because the games work fine without it. The BIOS file name is  7800 BIOS (U).rom  Place your Atari 7800 BIOS in  /home/pi/RetroPie/BIOS/  Note: if this BIOS is enabled, PAL ROMs will not work so use it accordingly.", 
            "title": "BIOS"
        }, 
        {
            "location": "/Atari-7800/#controls", 
            "text": "lr-prosystem utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/atari7800/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Atari-800-and-5200/", 
            "text": "Atari released a series of 8 bit computers (400, 800, 1200XL, 600XL, 800XL, 130XE, XEGS) and a video game console known as the Atari 5200 from 1979 to 1992\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nAtari800\n\n\natari800 \nor\n atari5200\n\n\n.a52 .bas .bin .car .xex .atr .xfd .dcm .atr.gz .xfd.gz\n\n\nATARIXL.ROM \nand\n ATARIBAS.ROM \nand\n ATARIOSA.ROM \nand\n ATARIOSB.ROM \nand\n 5200.rom\n\n\n/opt/retropie/configs/atari800/atari800.cfg or /opt/retropie/configs/atari800.cfg on older releases\n\n\n\n\n\n\n\n\nEmulator: \nAtari800\n\n\nThis emulator emulates the Atari 8 bit family: 400, 800, 1200XL, 600XL, 800XL, 130XE, XEGS and the Atari 5200. This one of the more tricky emulators to get set up as it requires a multiplicity of BIOS files and configurations depending on what systems you want to utilise but it seems to run Atari 5200 games pretty well.\n\n\nROMS\n\n\nAccepted File Extensions: \n.a52 .bas .bin .car .xex .atr .xfd .dcm .atr.gz .xfd.gz\n\n\nPlace your Atari 400,800, ROMS in\n\n\n/home/pi/RetroPie/roms/atari800\n\n\n\n\nPlace your Atari 5200 ROMS in\n\n\n/home/pi/RetroPie/roms/atari5200\n\n\n\n\nBIOS\n\n\nThere are 5 main BIOS needed for the Atari800 emulator:\n\n\nATARIXL.ROM\n (BIOS for Atari XL/XE OS)\n\n\nATARIBAS.ROM\n (BIOS for the BASIC interpreter)\n\n\nATARIOSA.ROM\n (BIOS for Atari 400/800 PAL)\n\n\nATARIOSB.ROM\n (BIOS for Atari 400/800 NTSC)\n\n\n5200.rom\n (BIOS for the Atari 5200)\n\n\nPlace these files in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nOnce you have your ROMS and your BIOS files where they belong there is one more step of configurations needed where you tell the emulator where to look for your BIOS files.\n\n\nNavigate to either the Atari 800 or Atari 5200 system on emulationstation and choose a game. A screen will open up with a bunch of different cartridge options. If you are playing a 5200 game then choose a 5200 cartridge option (Option #5 seems to work). You will then get a warning telling you that it needs a real Atari/OS. (you need to legally own the 5200 hardware to have the BIOS) Then press F1 to open the menu and navigate down to \"Emulator Configuration\" and press enter. Then navigate down to System ROM settings and then press Enter (Quick hint: use the escape button to go back up a step in the GUI)\n\n\nThe easiest option is to just select \"Find ROM images in a directory\" then navigate into the BIOS directory and press the space bar. If you have the right files and file names it should automatically place the BIOS files where they belong. \n\n\nAlternatively you can configure them manually:\n\n\nFor 400/800:\n\n\n Custom OS ROM: select ATARIOSB.ROM in /home/pi/RetroPie/BIOS/ATARIOSB.ROM\n\n ROM_OS_A_PAL=  select ATARIOSA.ROM in /home/pi/RetroPie/BIOS/ATARIOSA.ROM\n\n\n\n\nFor XL/XE:\n\n\n BBO1 REV. 2: select ATARIXL.ROM in /home/pi/RetroPie/BIOS/ATARIXL.ROM\n\n\n\n\nFor 5200:\n\n\n Original: Select atari5200.rom in /home/pi/RetroPie/BIOS/5200.rom\n\n\n\n\nFor BASIC:\n\n\nRev. C:  Select ATARIBAS.ROM in /home/pi/RetroPie/BIOS/ATARIBAS.ROM \n\n\n\n\nThen press escape a few times to go back to the \"Emulator Settings\" and select Save Configuration File or alternatively change Save configuration file on exit from no to yes\n\n\nThen you can exit the emulator by pressing F9 and then try the game again or press shift+F5 to reboot the game.\n\n\nif you can't seem to make it work that way, once you have tried to start a game and use F9 to exit the emulator a file called .atari800.cfg will be created in the /home/pi directory \n\n\nThis is a verified working .atari800.cfg file     \n\n\nAtari 800 Emulator, Version 3.1.0\nROM_OS_A_NTSC=\nROM_OS_A_PAL=/home/pi/RetroPie/BIOS/ATARIOSA.ROM\nROM_OS_B_NTSC=\nROM_OS_AA00R10=\nROM_OS_AA00R11=\nROM_OS_BB00R1=\nROM_OS_BB01R2=/home/pi/RetroPie/BIOS/ATARIXL.ROM\nROM_OS_BB02R3=\nROM_OS_BB02R3V4=\nROM_OS_CC01R4=\nROM_OS_BB01R3=\nROM_OS_BB01R4=\nROM_OS_BB01R59=\nROM_OS_BB01R59A=\nROM_5200=/home/pi/RetroPie/BIOS/5200.rom\nROM_5200_A=\nROM_BASIC_A=\nROM_BASIC_B=\nROM_BASIC_C=/home/pi/RetroPie/BIOS/ATARIBAS.ROM\nROM_XEGAME=\nROM_400/800_CUSTOM=/home/pi/RetroPie/BIOS/ATARIOSB.ROM\nROM_XL/XE_CUSTOM=\nROM_5200_CUSTOM=\nROM_BASIC_CUSTOM=\nROM_XEGAME_CUSTOM=\nOS_400/800_VERSION=AUTO\nOS_XL/XE_VERSION=AUTO\nOS_5200_VERSION=AUTO\nBASIC_VERSION=AUTO\nXEGS_GAME_VERSION=AUTO\nH1_DIR=\nH2_DIR=\nH3_DIR=\nH4_DIR=\nHD_READ_ONLY=1\nPRINT_COMMAND=lpr %s\nSCREEN_REFRESH_RATIO=1\nMACHINE_TYPE=Atari XL/XE\nRAM_SIZE=64\nDEFAULT_TV_MODE=PAL\nMOSAIC_RAM_NUM_BANKS=0\nAXLON_RAM_NUM_BANKS=0\nENABLE_MAPRAM=0\nDISABLE_BASIC=1\nENABLE_SIO_PATCH=1\nENABLE_H_PATCH=1\nENABLE_P_PATCH=1\nENABLE_NEW_POKEY=1\nSTEREO_POKEY=0\nSPEAKER_SOUND=1\nBUILTIN_BASIC=0\nKEYBOARD_LEDS=0\nF_KEYS=0\nBUILTIN_GAME=0\nKEYBOARD_DETACHED=0\n1200XL_JUMPER=0\nCFG_SAVE_ON_EXIT=1\nMIO_ROM=\nBLACK_BOX_ROM=\nXLD_D_ROM=\nXLD_V_ROM=\nCARTRIDGE_FILENAME=\nCARTRIDGE_TYPE=0\nCARTRIDGE_PIGGYBACK_FILENAME=\nCARTRIDGE_PIGGYBACK_TYPE=0\nCARTRIDGE_AUTOREBOOT=1\nCASSETTE_FILENAME=\nCASSETTE_LOADED=0\nCASSETTE_WRITE_PROTECT=0\nRTIME=1\nCOLOURS_NTSC_SATURATION=0\nCOLOURS_NTSC_CONTRAST=0\nCOLOURS_NTSC_BRIGHTNESS=0\nCOLOURS_NTSC_GAMMA=0.3\nCOLOURS_NTSC_HUE=0\nCOLOURS_NTSC_GTIA_DELAY=26.8\nCOLOURS_NTSC_EXTERNAL_PALETTE=\nCOLOURS_NTSC_EXTERNAL_PALETTE_LOADED=0\nCOLOURS_NTSC_ADJUST_EXTERNAL_PALETTE=0\nCOLOURS_PAL_SATURATION=0\nCOLOURS_PAL_CONTRAST=0\nCOLOURS_PAL_BRIGHTNESS=0\nCOLOURS_PAL_GAMMA=0.3\nCOLOURS_PAL_HUE=0\nCOLOURS_PAL_GTIA_DELAY=23.2\nCOLOURS_PAL_EXTERNAL_PALETTE=\nCOLOURS_PAL_EXTERNAL_PALETTE_LOADED=0\nCOLOURS_PAL_ADJUST_EXTERNAL_PALETTE=0\nARTIFACT_NTSC=NONE\nARTIFACT_PAL=NONE\nARTIFACT_NTSC_MODE=0\nSCREEN_SHOW_SPEED=0\nSCREEN_SHOW_IO_ACTIVITY=1\nSCREEN_SHOW_IO_COUNTER=0\nSCREEN_SHOW_1200XL_LEDS=1\nSOUND_ENABLED=1\nSOUND_RATE=44100\nSOUND_BITS=16\nSOUND_FRAG_FRAMES=0\nSOUND_LATENCY=20\nVIDEO_FILTERING=1\nVIDEO_ZOOM=1.00\nSDL_JOY_0_ENABLED=1\nSDL_JOY_0_LEFT=260\nSDL_JOY_0_RIGHT=262\nSDL_JOY_0_UP=264\nSDL_JOY_0_DOWN=261\nSDL_JOY_0_TRIGGER=305\nSDL_JOY_1_ENABLED=0\nSDL_JOY_1_LEFT=97\nSDL_JOY_1_RIGHT=100\nSDL_JOY_1_UP=119\nSDL_JOY_1_DOWN=115\nSDL_JOY_1_TRIGGER=306\n\n\n\n\nControls\n\n\nF1 Built in user interface\nF2 Option key\nF3 Select key\nF4 Start key\nF5 Reset key (\nwarm reset\n)\nShift+F5 Reboot (\ncold reset\n)\nF6 Help key (XL/XE only)\nF7 Break key\nF8 Enter monitor\nF9 Exit emulator\nF10 Save screenshot\nShift+F10 Save interlaced screenshot\nAlt+R Run Atari program\nAlt+D Disk management\nAlt+C Cartridge management\nAlt+Y Select system\nAlt+O Sound settings\nAlt+W Sound recording start/stop\nAlt+S Save state file\nAlt+L Load state file\nAlt+A About the emulator\n\n\n\n\nQuick Tips for Gameplay:\n\n\nStart Game: F4\nUp: up or numpad 8\nDown: down or numpad 2\nRight: right or numpad 6\nLeft: left or numpad 4\nFire: RCTRL\nExit Emulator: F9\n\n\n\n\nTroubleshooting\n\n\n\n\nIf it freezes up on you on the cartridge screen then try rebooting your pi and try again. If it keeps failing you either have the wrong BIOS, your ROM isn't compatible, or you chose the wrong cartridge option.", 
            "title": "Atari 800 and 5200"
        }, 
        {
            "location": "/Atari-800-and-5200/#emulator-atari800", 
            "text": "This emulator emulates the Atari 8 bit family: 400, 800, 1200XL, 600XL, 800XL, 130XE, XEGS and the Atari 5200. This one of the more tricky emulators to get set up as it requires a multiplicity of BIOS files and configurations depending on what systems you want to utilise but it seems to run Atari 5200 games pretty well.", 
            "title": "Emulator: Atari800"
        }, 
        {
            "location": "/Atari-800-and-5200/#roms", 
            "text": "Accepted File Extensions:  .a52 .bas .bin .car .xex .atr .xfd .dcm .atr.gz .xfd.gz  Place your Atari 400,800, ROMS in  /home/pi/RetroPie/roms/atari800  Place your Atari 5200 ROMS in  /home/pi/RetroPie/roms/atari5200", 
            "title": "ROMS"
        }, 
        {
            "location": "/Atari-800-and-5200/#bios", 
            "text": "There are 5 main BIOS needed for the Atari800 emulator:  ATARIXL.ROM  (BIOS for Atari XL/XE OS)  ATARIBAS.ROM  (BIOS for the BASIC interpreter)  ATARIOSA.ROM  (BIOS for Atari 400/800 PAL)  ATARIOSB.ROM  (BIOS for Atari 400/800 NTSC)  5200.rom  (BIOS for the Atari 5200)  Place these files in  /home/pi/RetroPie/BIOS  Once you have your ROMS and your BIOS files where they belong there is one more step of configurations needed where you tell the emulator where to look for your BIOS files.  Navigate to either the Atari 800 or Atari 5200 system on emulationstation and choose a game. A screen will open up with a bunch of different cartridge options. If you are playing a 5200 game then choose a 5200 cartridge option (Option #5 seems to work). You will then get a warning telling you that it needs a real Atari/OS. (you need to legally own the 5200 hardware to have the BIOS) Then press F1 to open the menu and navigate down to \"Emulator Configuration\" and press enter. Then navigate down to System ROM settings and then press Enter (Quick hint: use the escape button to go back up a step in the GUI)  The easiest option is to just select \"Find ROM images in a directory\" then navigate into the BIOS directory and press the space bar. If you have the right files and file names it should automatically place the BIOS files where they belong.   Alternatively you can configure them manually:  For 400/800:   Custom OS ROM: select ATARIOSB.ROM in /home/pi/RetroPie/BIOS/ATARIOSB.ROM\n\n ROM_OS_A_PAL=  select ATARIOSA.ROM in /home/pi/RetroPie/BIOS/ATARIOSA.ROM  For XL/XE:   BBO1 REV. 2: select ATARIXL.ROM in /home/pi/RetroPie/BIOS/ATARIXL.ROM  For 5200:   Original: Select atari5200.rom in /home/pi/RetroPie/BIOS/5200.rom  For BASIC:  Rev. C:  Select ATARIBAS.ROM in /home/pi/RetroPie/BIOS/ATARIBAS.ROM   Then press escape a few times to go back to the \"Emulator Settings\" and select Save Configuration File or alternatively change Save configuration file on exit from no to yes  Then you can exit the emulator by pressing F9 and then try the game again or press shift+F5 to reboot the game.  if you can't seem to make it work that way, once you have tried to start a game and use F9 to exit the emulator a file called .atari800.cfg will be created in the /home/pi directory   This is a verified working .atari800.cfg file       Atari 800 Emulator, Version 3.1.0\nROM_OS_A_NTSC=\nROM_OS_A_PAL=/home/pi/RetroPie/BIOS/ATARIOSA.ROM\nROM_OS_B_NTSC=\nROM_OS_AA00R10=\nROM_OS_AA00R11=\nROM_OS_BB00R1=\nROM_OS_BB01R2=/home/pi/RetroPie/BIOS/ATARIXL.ROM\nROM_OS_BB02R3=\nROM_OS_BB02R3V4=\nROM_OS_CC01R4=\nROM_OS_BB01R3=\nROM_OS_BB01R4=\nROM_OS_BB01R59=\nROM_OS_BB01R59A=\nROM_5200=/home/pi/RetroPie/BIOS/5200.rom\nROM_5200_A=\nROM_BASIC_A=\nROM_BASIC_B=\nROM_BASIC_C=/home/pi/RetroPie/BIOS/ATARIBAS.ROM\nROM_XEGAME=\nROM_400/800_CUSTOM=/home/pi/RetroPie/BIOS/ATARIOSB.ROM\nROM_XL/XE_CUSTOM=\nROM_5200_CUSTOM=\nROM_BASIC_CUSTOM=\nROM_XEGAME_CUSTOM=\nOS_400/800_VERSION=AUTO\nOS_XL/XE_VERSION=AUTO\nOS_5200_VERSION=AUTO\nBASIC_VERSION=AUTO\nXEGS_GAME_VERSION=AUTO\nH1_DIR=\nH2_DIR=\nH3_DIR=\nH4_DIR=\nHD_READ_ONLY=1\nPRINT_COMMAND=lpr %s\nSCREEN_REFRESH_RATIO=1\nMACHINE_TYPE=Atari XL/XE\nRAM_SIZE=64\nDEFAULT_TV_MODE=PAL\nMOSAIC_RAM_NUM_BANKS=0\nAXLON_RAM_NUM_BANKS=0\nENABLE_MAPRAM=0\nDISABLE_BASIC=1\nENABLE_SIO_PATCH=1\nENABLE_H_PATCH=1\nENABLE_P_PATCH=1\nENABLE_NEW_POKEY=1\nSTEREO_POKEY=0\nSPEAKER_SOUND=1\nBUILTIN_BASIC=0\nKEYBOARD_LEDS=0\nF_KEYS=0\nBUILTIN_GAME=0\nKEYBOARD_DETACHED=0\n1200XL_JUMPER=0\nCFG_SAVE_ON_EXIT=1\nMIO_ROM=\nBLACK_BOX_ROM=\nXLD_D_ROM=\nXLD_V_ROM=\nCARTRIDGE_FILENAME=\nCARTRIDGE_TYPE=0\nCARTRIDGE_PIGGYBACK_FILENAME=\nCARTRIDGE_PIGGYBACK_TYPE=0\nCARTRIDGE_AUTOREBOOT=1\nCASSETTE_FILENAME=\nCASSETTE_LOADED=0\nCASSETTE_WRITE_PROTECT=0\nRTIME=1\nCOLOURS_NTSC_SATURATION=0\nCOLOURS_NTSC_CONTRAST=0\nCOLOURS_NTSC_BRIGHTNESS=0\nCOLOURS_NTSC_GAMMA=0.3\nCOLOURS_NTSC_HUE=0\nCOLOURS_NTSC_GTIA_DELAY=26.8\nCOLOURS_NTSC_EXTERNAL_PALETTE=\nCOLOURS_NTSC_EXTERNAL_PALETTE_LOADED=0\nCOLOURS_NTSC_ADJUST_EXTERNAL_PALETTE=0\nCOLOURS_PAL_SATURATION=0\nCOLOURS_PAL_CONTRAST=0\nCOLOURS_PAL_BRIGHTNESS=0\nCOLOURS_PAL_GAMMA=0.3\nCOLOURS_PAL_HUE=0\nCOLOURS_PAL_GTIA_DELAY=23.2\nCOLOURS_PAL_EXTERNAL_PALETTE=\nCOLOURS_PAL_EXTERNAL_PALETTE_LOADED=0\nCOLOURS_PAL_ADJUST_EXTERNAL_PALETTE=0\nARTIFACT_NTSC=NONE\nARTIFACT_PAL=NONE\nARTIFACT_NTSC_MODE=0\nSCREEN_SHOW_SPEED=0\nSCREEN_SHOW_IO_ACTIVITY=1\nSCREEN_SHOW_IO_COUNTER=0\nSCREEN_SHOW_1200XL_LEDS=1\nSOUND_ENABLED=1\nSOUND_RATE=44100\nSOUND_BITS=16\nSOUND_FRAG_FRAMES=0\nSOUND_LATENCY=20\nVIDEO_FILTERING=1\nVIDEO_ZOOM=1.00\nSDL_JOY_0_ENABLED=1\nSDL_JOY_0_LEFT=260\nSDL_JOY_0_RIGHT=262\nSDL_JOY_0_UP=264\nSDL_JOY_0_DOWN=261\nSDL_JOY_0_TRIGGER=305\nSDL_JOY_1_ENABLED=0\nSDL_JOY_1_LEFT=97\nSDL_JOY_1_RIGHT=100\nSDL_JOY_1_UP=119\nSDL_JOY_1_DOWN=115\nSDL_JOY_1_TRIGGER=306", 
            "title": "BIOS"
        }, 
        {
            "location": "/Atari-800-and-5200/#controls", 
            "text": "F1 Built in user interface\nF2 Option key\nF3 Select key\nF4 Start key\nF5 Reset key ( warm reset )\nShift+F5 Reboot ( cold reset )\nF6 Help key (XL/XE only)\nF7 Break key\nF8 Enter monitor\nF9 Exit emulator\nF10 Save screenshot\nShift+F10 Save interlaced screenshot\nAlt+R Run Atari program\nAlt+D Disk management\nAlt+C Cartridge management\nAlt+Y Select system\nAlt+O Sound settings\nAlt+W Sound recording start/stop\nAlt+S Save state file\nAlt+L Load state file\nAlt+A About the emulator", 
            "title": "Controls"
        }, 
        {
            "location": "/Atari-800-and-5200/#quick-tips-for-gameplay", 
            "text": "Start Game: F4\nUp: up or numpad 8\nDown: down or numpad 2\nRight: right or numpad 6\nLeft: left or numpad 4\nFire: RCTRL\nExit Emulator: F9", 
            "title": "Quick Tips for Gameplay:"
        }, 
        {
            "location": "/Atari-800-and-5200/#troubleshooting", 
            "text": "If it freezes up on you on the cartridge screen then try rebooting your pi and try again. If it keeps failing you either have the wrong BIOS, your ROM isn't compatible, or you chose the wrong cartridge option.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Atari-Jaguar/", 
            "text": "The Atari Jaguar was the first 64 bit video game console released in 1993. It was a bad enough commercial failure that it put Atari out of the home video game console business.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-virtualjaguar\n\n\natarijaguar\n\n\n.j64 .jag\n\n\nnone\n\n\n/opt/retropie/configs/atarijaguar/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-virtualjaguar\n :small_red_triangle:\n\n\nNote that this emulator is currently experimental and will need to be installed through the experimental menu in the setup script. \n\n\nOn testing with RPi2 it is incredibly laggy and slow and experimental for a reason. \n\n\nAs of 8/6/16, testing on RPi3 (overclocked and normal speed) where choppy as well. For example, Doom took 48 seconds stock speed to load the first level, 41 seconds overclocked to 1ghz.\n\n\nROMS\n\n\nAccepted File Extensions: \n.j64 .jag\n\n\nPlace your Atari Jaguar ROMs in \n\n\n/home/pi/RetroPie/roms/atarijaguar\n\n\n\n\nControls\n\n\nlr-virtualjaguar utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/atarijaguar/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Atari Jaguar"
        }, 
        {
            "location": "/Atari-Jaguar/#emulator-lr-virtualjaguar-small_red_triangle", 
            "text": "Note that this emulator is currently experimental and will need to be installed through the experimental menu in the setup script.   On testing with RPi2 it is incredibly laggy and slow and experimental for a reason.   As of 8/6/16, testing on RPi3 (overclocked and normal speed) where choppy as well. For example, Doom took 48 seconds stock speed to load the first level, 41 seconds overclocked to 1ghz.", 
            "title": "Emulator: lr-virtualjaguar :small_red_triangle:"
        }, 
        {
            "location": "/Atari-Jaguar/#roms", 
            "text": "Accepted File Extensions:  .j64 .jag  Place your Atari Jaguar ROMs in   /home/pi/RetroPie/roms/atarijaguar", 
            "title": "ROMS"
        }, 
        {
            "location": "/Atari-Jaguar/#controls", 
            "text": "lr-virtualjaguar utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/atarijaguar/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Atari-Lynx/", 
            "text": "The Atari Lynx is the world's first handheld gaming console with a color screen. It was released by Atari in 1989\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-handy\n\n\natarilynx\n\n\n.lnx\n\n\nnone\n\n\n/opt/retropie/configs/atarilynx/retroarch.cfg\n\n\n\n\n\n\nlr-beetle-lynx\n\n\natarilynx\n\n\n.lnx\n\n\nlynxboot.img\n\n\n/opt/retropie/configs/atarilynx/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-handy\n, \nlr-beetle-lynx\n\n\nROMS\n\n\nAccepted File Extensions: \n.lnx\n\n\nPlace your Lynx ROMS in:\n\n\n/home/pi/RetroPie/roms/atarilynx/\n\n\n\n\nControls\n\n\nlr-handy utilises Retroarch configurations\n\n\nAdd custom RetroArch controls to the retroarch.cfg file in:\n\n\n/opt/retropie/configs/atarilynx/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Atari Lynx"
        }, 
        {
            "location": "/Atari-Lynx/#emulator-lr-handy-lr-beetle-lynx", 
            "text": "", 
            "title": "Emulator: lr-handy, lr-beetle-lynx"
        }, 
        {
            "location": "/Atari-Lynx/#roms", 
            "text": "Accepted File Extensions:  .lnx  Place your Lynx ROMS in:  /home/pi/RetroPie/roms/atarilynx/", 
            "title": "ROMS"
        }, 
        {
            "location": "/Atari-Lynx/#controls", 
            "text": "lr-handy utilises Retroarch configurations  Add custom RetroArch controls to the retroarch.cfg file in:  /opt/retropie/configs/atarilynx/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Atari-ST-STE-TT-Falcon/", 
            "text": "The Atari ST, STE, TT, and Falcon were a series of personal computers released by Atari starting in 1985.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nHatari\n\n\natarist\n\n\n.st .stx .img .rom .raw .ipf .ctr\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nHatari\n\n\nMuch of the emulation for later models, such as the Falcon, is still experimental so some games may be hit and miss.\n\n\nROMS\n\n\nAccepted File Extensions: \n.st .stx .img .rom .raw .ipf .ctr\n\n\nPlace your Atari ST/STE/TT/Falcon ROMS in\n\n\n/home/pi/RetroPie/roms/atarist\n\n\n\n\nControls\n\n\nWhile in game press F12 to open the Hatari main menu, to reconfigure controls select either joysticks or keyboards\n\n\nDefault Keyboard Controls:\n\n\nUp: up\nDown: down\nLeft: left\nRight: right\nFire: RCTRL\nto exit the emulator you can use alt+q or select quit from the F12 menu", 
            "title": "Atari ST-STE-TT-Falcon"
        }, 
        {
            "location": "/Atari-ST-STE-TT-Falcon/#emulator-hatari", 
            "text": "Much of the emulation for later models, such as the Falcon, is still experimental so some games may be hit and miss.", 
            "title": "Emulator: Hatari"
        }, 
        {
            "location": "/Atari-ST-STE-TT-Falcon/#roms", 
            "text": "Accepted File Extensions:  .st .stx .img .rom .raw .ipf .ctr  Place your Atari ST/STE/TT/Falcon ROMS in  /home/pi/RetroPie/roms/atarist", 
            "title": "ROMS"
        }, 
        {
            "location": "/Atari-ST-STE-TT-Falcon/#controls", 
            "text": "While in game press F12 to open the Hatari main menu, to reconfigure controls select either joysticks or keyboards  Default Keyboard Controls:  Up: up\nDown: down\nLeft: left\nRight: right\nFire: RCTRL\nto exit the emulator you can use alt+q or select quit from the F12 menu", 
            "title": "Controls"
        }, 
        {
            "location": "/Coco/", 
            "text": "The Tandy Colour Computer series were home computers originally released by the Tandy Corporation in 1980.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nXRoar\n\n\ncoco\n\n\n.cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna\n\n\nbas13.rom\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nXRoar\n\n\nROMS\n\n\nAccepted File Extensions: \n.cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna\n\n\nPlace your CoCo ROMs in\n\n\n/home/pi/RetroPie/roms/coco\n\n\n\n\nBIOS\n\n\nThe file needed is \nbas13.rom\n\n\nPlace your bas13.rom BIOS file in\n\n\n/home/pi/RetroPie/BIOS", 
            "title": "Coco"
        }, 
        {
            "location": "/Coco/#emulator-xroar", 
            "text": "", 
            "title": "Emulator: XRoar"
        }, 
        {
            "location": "/Coco/#roms", 
            "text": "Accepted File Extensions:  .cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna  Place your CoCo ROMs in  /home/pi/RetroPie/roms/coco", 
            "title": "ROMS"
        }, 
        {
            "location": "/Coco/#bios", 
            "text": "The file needed is  bas13.rom  Place your bas13.rom BIOS file in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/Colecovision/", 
            "text": "The Colecovision is a home video game console released by Coleco in 1982. It features a unique gamepad which is a mixture of  a phone keypad and a joystick\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nCoolCV\n\n\ncoleco\n\n\n.bin .col .rom .zip\n\n\ncoleco.rom\n\n\n/opt/retropie/configs/coleco/coolcv_mapping.txt\n\n\n\n\n\n\n\n\nEmulator \nCoolCV\n\n\nROMS\n\n\nAccepted File Extensions: \n.bin .col .rom .zip\n\n\nPlace your Colecovision ROMs in\n\n\n/home/pi/RetroPie/roms/coleco\n\n\n\n\nControls\n\n\nKeyboard is the default controller. Press Right Shift + Enter to exit\n\n\nMapping file is created after you've started the emulator once in \n/home/pi/coolcv_mapping.txt\n\n\n' CoolCV mappings for Colecovision controllers to keyboard and joystick\nup_1    key1073741906\nright_1 key1073741903\ndown_1  key1073741905\nleft_1  key1073741904\nleft_button_1   key32   joy0_0\nright_button_1  key109  joy0_1\nbutton3_1   key1073741939\nbutton4_1   key1073741939\nkey1_1  key49\nkey2_1  key50\nkey3_1  key51\nkey4_1  key52\nkey5_1  key53\nkey6_1  key54\nkey7_1  key55\nkey8_1  key56\nkey9_1  key57\nkey*_1  key111\nkey0_1  key48\nkey#_1  key112\nup_2    key119\nright_2 key100\ndown_2  key115\nleft_2  key97\nleft_button_2   key9    joy1_0\nright_button_2  key113  joy1_1\nbutton3_2   key1073741939\nbutton4_2   key1073741939\nkey1_2  key114\nkey2_2  key116\nkey3_2  key121\nkey4_2  key102\nkey5_2  key103\nkey6_2  key104\nkey7_2  key118\nkey8_2  key98\nkey9_2  key110\nkey*_2  key106\nkey0_2  key107\nkey#_2  key108\nkey_save    key1073741882\nkey_restore key1073741883\nkey_exit    key1073741939\nkey_pause   key1073741884\nkey_reset   key8", 
            "title": "Colecovision"
        }, 
        {
            "location": "/Colecovision/#emulator-coolcv", 
            "text": "", 
            "title": "Emulator CoolCV"
        }, 
        {
            "location": "/Colecovision/#roms", 
            "text": "Accepted File Extensions:  .bin .col .rom .zip  Place your Colecovision ROMs in  /home/pi/RetroPie/roms/coleco", 
            "title": "ROMS"
        }, 
        {
            "location": "/Colecovision/#controls", 
            "text": "Keyboard is the default controller. Press Right Shift + Enter to exit  Mapping file is created after you've started the emulator once in  /home/pi/coolcv_mapping.txt  ' CoolCV mappings for Colecovision controllers to keyboard and joystick\nup_1    key1073741906\nright_1 key1073741903\ndown_1  key1073741905\nleft_1  key1073741904\nleft_button_1   key32   joy0_0\nright_button_1  key109  joy0_1\nbutton3_1   key1073741939\nbutton4_1   key1073741939\nkey1_1  key49\nkey2_1  key50\nkey3_1  key51\nkey4_1  key52\nkey5_1  key53\nkey6_1  key54\nkey7_1  key55\nkey8_1  key56\nkey9_1  key57\nkey*_1  key111\nkey0_1  key48\nkey#_1  key112\nup_2    key119\nright_2 key100\ndown_2  key115\nleft_2  key97\nleft_button_2   key9    joy1_0\nright_button_2  key113  joy1_1\nbutton3_2   key1073741939\nbutton4_2   key1073741939\nkey1_2  key114\nkey2_2  key116\nkey3_2  key121\nkey4_2  key102\nkey5_2  key103\nkey6_2  key104\nkey7_2  key118\nkey8_2  key98\nkey9_2  key110\nkey*_2  key106\nkey0_2  key107\nkey#_2  key108\nkey_save    key1073741882\nkey_restore key1073741883\nkey_exit    key1073741939\nkey_pause   key1073741884\nkey_reset   key8", 
            "title": "Controls"
        }, 
        {
            "location": "/Commodore-64/", 
            "text": "The Commodore 64 is an 8 Bit personal computer introduced in 1982 by Commodore International. This model holds the world record for the highest-selling single computer model of all time.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nVICE\n\n\nc64\n\n\n.crt .d64 .g64 .t64 .tap .x64\n\n\nnone\n\n\n/opt/retropie/configs/c64/sdl-vicerc \nand\n /opt/retropie/configs/c64/sdl-joymap-c64.vjm\n\n\n\n\n\n\n\n\nEmulator: \nVICE\n\n\nROMS\n\n\nAccepted File Extensions: \n.crt .d64 .g64 .t64 .tap .x64\n\n\nPlace your ROMS in\n\n\n/home/pi/RetroPie/roms/c64\n\n\n\n\nControls\n\n\nStart Game: Spacebar\nMenu: F12\nSelect: Enter\nCancel: Backspace\nExit GUI: Escape\n\nChanging Controls:\n-Press F12 to enter menu\n-Navigate to machine settings and press enter\n-Navigate to Joystick settings and press enter\n-Navigate to Joystick device in port 2 and press enter\n-to use a numpad to play your game navigate to Numpad and press enter\n     -Up: 8\n     -Up/Right: 9\n     -Up/Left: 7\n     -Left: 4\n     -Right: 8\n     -Down: 2\n     -Down/Left: 1\n     -Down/Right: 3\n     -Fire: 0\n-to use a Joystick (gamepad) instead, navigate to Joystick and press enter\n\nSAVING CONFIGURATIONS:\n\nGo into \n- settings management\n- save settings on exit\n- save current settings\n- save hotkeys\n- save joystick map\n\nCUSTOM MAPPING\n- Go back to Joystick settings by pressing backspace and navigate to Joystick 1 Mapping and press enter\n- Press enter on each key followed by pressing the key on your gamepad you wish to be mapped.\n- Press escape to exit the menu and return to your game\n\n\n\n\nAdvanced Configuration\n\n\nOnce you've started and exited the VICE emulator at least once it will create a configuration file called \nsdl-vicerc\n in \n/home/pi/.vice/\n which is a symbolic link to \n\n\n/opt/retropie/configs/c64/ \n\n\n\n\nopen the file \"sdl-vicerc\" and to double the screen size change\n\n\nVICIIDoubleSize=0\n\nto VICIIDoubleSize=1 \n\n\n\n\nTroubleshooting\n\n\n\n\nThere have been some reports of the emulator crashing when it exits requiring a hard reboot\n\n\n\n\nNote that the VICE emulator also emulates systems other than the Commodore 64 \n\n\n\n\nC128\n\n\nC64DTV\n\n\nalmost all PET models\n\n\nPLUS4\n\n\nCBM-II (aka C610) \n\n\nVIC20\n\n\n\n\nwhich can be accessed through the \nRuncommand Launch Menu", 
            "title": "Commodore 64"
        }, 
        {
            "location": "/Commodore-64/#emulator-vice", 
            "text": "", 
            "title": "Emulator: VICE"
        }, 
        {
            "location": "/Commodore-64/#roms", 
            "text": "Accepted File Extensions:  .crt .d64 .g64 .t64 .tap .x64  Place your ROMS in  /home/pi/RetroPie/roms/c64", 
            "title": "ROMS"
        }, 
        {
            "location": "/Commodore-64/#controls", 
            "text": "Start Game: Spacebar\nMenu: F12\nSelect: Enter\nCancel: Backspace\nExit GUI: Escape\n\nChanging Controls:\n-Press F12 to enter menu\n-Navigate to machine settings and press enter\n-Navigate to Joystick settings and press enter\n-Navigate to Joystick device in port 2 and press enter\n-to use a numpad to play your game navigate to Numpad and press enter\n     -Up: 8\n     -Up/Right: 9\n     -Up/Left: 7\n     -Left: 4\n     -Right: 8\n     -Down: 2\n     -Down/Left: 1\n     -Down/Right: 3\n     -Fire: 0\n-to use a Joystick (gamepad) instead, navigate to Joystick and press enter\n\nSAVING CONFIGURATIONS:\n\nGo into \n- settings management\n- save settings on exit\n- save current settings\n- save hotkeys\n- save joystick map\n\nCUSTOM MAPPING\n- Go back to Joystick settings by pressing backspace and navigate to Joystick 1 Mapping and press enter\n- Press enter on each key followed by pressing the key on your gamepad you wish to be mapped.\n- Press escape to exit the menu and return to your game", 
            "title": "Controls"
        }, 
        {
            "location": "/Commodore-64/#advanced-configuration", 
            "text": "Once you've started and exited the VICE emulator at least once it will create a configuration file called  sdl-vicerc  in  /home/pi/.vice/  which is a symbolic link to   /opt/retropie/configs/c64/   open the file \"sdl-vicerc\" and to double the screen size change  VICIIDoubleSize=0\n\nto VICIIDoubleSize=1", 
            "title": "Advanced Configuration"
        }, 
        {
            "location": "/Commodore-64/#troubleshooting", 
            "text": "There have been some reports of the emulator crashing when it exits requiring a hard reboot   Note that the VICE emulator also emulates systems other than the Commodore 64    C128  C64DTV  almost all PET models  PLUS4  CBM-II (aka C610)   VIC20   which can be accessed through the  Runcommand Launch Menu", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Daphne/", 
            "text": "Laserdiscs were predecessors to the DVD. The first laserdisc game was released in 1982. Laserdisc games function much like interactive fiction where you choose your own story and the video adapts to the path you choose to take.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nDaphne\n\n\ndaphne\n\n\n.daphne\n\n\nnone\n\n\n/opt/retropie/configs/daphne/dapinput.ini\n\n\n\n\n\n\n\n\nEmulator: \nDaphne\n\n\nMatt Ownby is the developer of Daphne. For the best replication of Laserdisc games check out his Dexter project \nHERE\n\n\nROMS\n\n\nAccepted extensions: \n.daphne\n\n\nPlace your Laserdisc roms in \n\n\n/home/pi/RetroPie/roms/daphne\n\n\n\n\nThe file structure is like so:\n\n\nroms\n|-- daphne\n|    |   (The folder below holds a laserdisc...\n.daphne\n\n|    |   tells emulationstation to add this to the menu,\n|    |   and \ndle21\n tells daphne to use that game engine)\n|    |\n|    |-- dle21.daphne     \n|    |    |-- dle21.commands  (Optional extra command-\n|    |    |                   line params!)\n|    |    |-- dle21.txt      (Framefile)\n|    |    |-- lair.m2v\n|    |    |-- lair.ogg\n|    |\n|    |                (All roms go into this roms folder)\n|    +-- roms\n|         +-- dle21.zip\n\n\n\n\nDAPHNE COMPATIBILITY LIST\n feel free to contribute to the list.\n\n\nControls\n\n\nControls are located in \n\n\n/opt/retropie/configs/daphne/dapinput.ini\n\n\n\n\nDefault Keyboard Controls:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nESC\n\n\nQuit the game\n\n\n\n\n\n\n5 and 6\n\n\nInsert Coin (coin chutes)\n\n\n\n\n\n\n1\n\n\nPlayer 1 Start (and \"FEET\" in Cliffhanger)\n\n\n\n\n\n\n2\n\n\nPlayer 2 Start (and \"FEET\" in Cliffhanger)\n\n\n\n\n\n\nArrow Keys\n\n\nDirectional Movement\n\n\n\n\n\n\nCTRL or Space Bar\n\n\nButton #1 (Primary fire and/or Sword)\n\n\n\n\n\n\nLeft ALT\n\n\nButton #2 (Alternate fire, used in Bega's Battle, Cobra Command, etc)\n\n\n\n\n\n\nLeft Shift\n\n\nButton #3 (used in a few games like Road Blaster, if memory serves)\n\n\n\n\n\n\n/ (keypad)\n\n\nCadet skill level (Space Ace)\n\n\n\n\n\n\n* (keypad)\n\n\nCaptain skill level (Space Ace)\n\n\n\n\n\n\n-(keypad)\n\n\nSpace Ace skill level (Space Ace)\n\n\n\n\n\n\nP\n\n\nPause game (laserdisc player must be playing)\n\n\n\n\n\n\nT\n\n\nTilt game (just a gimmick, only works in a few games)\n\n\n\n\n\n\n9\n\n\nGo into service mode (used in Dragon's Lair 2)\n\n\n\n\n\n\nF2\n\n\nGo into test mode (similar to service mode, used in Cliff Hanger)\n\n\n\n\n\n\nF3\n\n\nReset/reboot game\n\n\n\n\n\n\nF12\n\n\nTake screenshot (VLDP only)\n\n\n\n\n\n\n\n\nDefault \ndapinput.ini\n\n\n# Daphne cutom keyboard and joystick mapping\n#\n# Each input is mapped to 2 keyboard keys and one joystick button.\n# A joystick's first analog stick is also automatically mapped.\n#\n# The first two numbers are SDL keyboard codes (or 0 for \nnone\n)\n# Find keyboard codes here:\n# http://www.daphne-emu.com/mediawiki/index.php/KeyList\n#\n# The third number is the joystick button code (or 0 for \nnone\n)\n# Since 0 is reserved for special meaning, joystick button 0 is identified\n# as 1 here.  Button 1 is identified as 2, and so on.\n# \n# Find the button you want to map by running:\n# jstest /dev/input/js0\n\n[KEYBOARD]\nKEY_UP = 273 114 5\nKEY_DOWN = 274 102 7\nKEY_LEFT = 276 100 8\nKEY_RIGHT = 275 103 6\nKEY_BUTTON1 = 306 97 14\nKEY_BUTTON2 = 308 115 15\nKEY_BUTTON3 = 32 113 16\nKEY_START1 = 49 0 4\nKEY_START2 = 50 0 0\nKEY_COIN1 = 53 0 1\nKEY_COIN2 = 54 0 0\nKEY_SKILL1 = 304 119 0\nKEY_SKILL2 = 122 105 0\nKEY_SKILL3 = 120 107 0\nKEY_SERVICE = 57 0 0\nKEY_TEST = 283 0 0\nKEY_RESET = 284 0 0\nKEY_SCREENSHOT = 293 0 0\nKEY_QUIT = 27 113 17\nEND\n\n\n\n\nCommand Parametres\n\n\nExample Dragon's Lair Commands file in\n\n\n/home/pi/RetroPie/roms/daphne/lair.daphne/lair.commands\n\n\n-nocrc -noissues -nolog -noserversend -latency 950 -x 640 -y 480 -bank 1 00110111 -bank 0 10011000\n\n\n\n\nSee \nhere\n for more cmdline parameters.\n\n\nTroubleshooting\n\n\nIf you have issues with black screen, try deleting the .dat file as it is generated the first time you parse the video files. If you transferred the .dat file from another system it may not work, so just leave the .dat file out.\n\n\nIt is also case sensitive so if it's not working try making the extensions in the .daphne file lowercase.", 
            "title": "Daphne"
        }, 
        {
            "location": "/Daphne/#emulator-daphne", 
            "text": "Matt Ownby is the developer of Daphne. For the best replication of Laserdisc games check out his Dexter project  HERE", 
            "title": "Emulator: Daphne"
        }, 
        {
            "location": "/Daphne/#roms", 
            "text": "Accepted extensions:  .daphne  Place your Laserdisc roms in   /home/pi/RetroPie/roms/daphne  The file structure is like so:  roms\n|-- daphne\n|    |   (The folder below holds a laserdisc... .daphne \n|    |   tells emulationstation to add this to the menu,\n|    |   and  dle21  tells daphne to use that game engine)\n|    |\n|    |-- dle21.daphne     \n|    |    |-- dle21.commands  (Optional extra command-\n|    |    |                   line params!)\n|    |    |-- dle21.txt      (Framefile)\n|    |    |-- lair.m2v\n|    |    |-- lair.ogg\n|    |\n|    |                (All roms go into this roms folder)\n|    +-- roms\n|         +-- dle21.zip  DAPHNE COMPATIBILITY LIST  feel free to contribute to the list.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Daphne/#controls", 
            "text": "Controls are located in   /opt/retropie/configs/daphne/dapinput.ini  Default Keyboard Controls:     Key  Action      ESC  Quit the game    5 and 6  Insert Coin (coin chutes)    1  Player 1 Start (and \"FEET\" in Cliffhanger)    2  Player 2 Start (and \"FEET\" in Cliffhanger)    Arrow Keys  Directional Movement    CTRL or Space Bar  Button #1 (Primary fire and/or Sword)    Left ALT  Button #2 (Alternate fire, used in Bega's Battle, Cobra Command, etc)    Left Shift  Button #3 (used in a few games like Road Blaster, if memory serves)    / (keypad)  Cadet skill level (Space Ace)    * (keypad)  Captain skill level (Space Ace)    -(keypad)  Space Ace skill level (Space Ace)    P  Pause game (laserdisc player must be playing)    T  Tilt game (just a gimmick, only works in a few games)    9  Go into service mode (used in Dragon's Lair 2)    F2  Go into test mode (similar to service mode, used in Cliff Hanger)    F3  Reset/reboot game    F12  Take screenshot (VLDP only)     Default  dapinput.ini  # Daphne cutom keyboard and joystick mapping\n#\n# Each input is mapped to 2 keyboard keys and one joystick button.\n# A joystick's first analog stick is also automatically mapped.\n#\n# The first two numbers are SDL keyboard codes (or 0 for  none )\n# Find keyboard codes here:\n# http://www.daphne-emu.com/mediawiki/index.php/KeyList\n#\n# The third number is the joystick button code (or 0 for  none )\n# Since 0 is reserved for special meaning, joystick button 0 is identified\n# as 1 here.  Button 1 is identified as 2, and so on.\n# \n# Find the button you want to map by running:\n# jstest /dev/input/js0\n\n[KEYBOARD]\nKEY_UP = 273 114 5\nKEY_DOWN = 274 102 7\nKEY_LEFT = 276 100 8\nKEY_RIGHT = 275 103 6\nKEY_BUTTON1 = 306 97 14\nKEY_BUTTON2 = 308 115 15\nKEY_BUTTON3 = 32 113 16\nKEY_START1 = 49 0 4\nKEY_START2 = 50 0 0\nKEY_COIN1 = 53 0 1\nKEY_COIN2 = 54 0 0\nKEY_SKILL1 = 304 119 0\nKEY_SKILL2 = 122 105 0\nKEY_SKILL3 = 120 107 0\nKEY_SERVICE = 57 0 0\nKEY_TEST = 283 0 0\nKEY_RESET = 284 0 0\nKEY_SCREENSHOT = 293 0 0\nKEY_QUIT = 27 113 17\nEND", 
            "title": "Controls"
        }, 
        {
            "location": "/Daphne/#command-parametres", 
            "text": "Example Dragon's Lair Commands file in  /home/pi/RetroPie/roms/daphne/lair.daphne/lair.commands  -nocrc -noissues -nolog -noserversend -latency 950 -x 640 -y 480 -bank 1 00110111 -bank 0 10011000  See  here  for more cmdline parameters.", 
            "title": "Command Parametres"
        }, 
        {
            "location": "/Daphne/#troubleshooting", 
            "text": "If you have issues with black screen, try deleting the .dat file as it is generated the first time you parse the video files. If you transferred the .dat file from another system it may not work, so just leave the .dat file out.  It is also case sensitive so if it's not working try making the extensions in the .daphne file lowercase.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Dragon/", 
            "text": "The Dragon 32 and Dragon 64 were home computers originally released in 1980. The 32 and 64 refer to the kilobytes of RAM.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nXRoar\n\n\ncoco\n\n\n.cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna\n\n\nd32.rom\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nXRoar\n\n\nROMS\n\n\nAccepted File Extensions: \n.cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna\n\n\nPlace your Dragon ROMs in\n\n\n/home/pi/RetroPie/roms/dragon32\n\n\n\n\nBIOS\n\n\nThe file needed is \nd32.rom\n\n\nPlace your d32.rom BIOS file in\n\n\n/home/pi/RetroPie/BIOS", 
            "title": "Dragon"
        }, 
        {
            "location": "/Dragon/#emulator-xroar", 
            "text": "", 
            "title": "Emulator: XRoar"
        }, 
        {
            "location": "/Dragon/#roms", 
            "text": "Accepted File Extensions:  .cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna  Place your Dragon ROMs in  /home/pi/RetroPie/roms/dragon32", 
            "title": "ROMS"
        }, 
        {
            "location": "/Dragon/#bios", 
            "text": "The file needed is  d32.rom  Place your d32.rom BIOS file in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/Dreamcast/", 
            "text": "The Sega Dreamcast is a 6th generation home video game console released by Sega in 1998. It is notably the last console that Sega produced.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nReicast\n\n\ndreamcast\n\n\n.cdi .gdi\n\n\ndc_boot.bin, dc_flash.bin\n\n\n/opt/retropie/configs/dreamcast/mappings\n\n\n\n\n\n\n\n\nEmulator: \nReicast\n\n\nIt can be very laggy and buggy, but some games work great (see compatibility list below). Pi 2 is required.  \n\n\nAudio is choppy and not great, and degrades the longer the emulator is in use.  Restarting the emulator (and ultimately the Pi) may become a good idea after a couple hours of gameplay. There is a memory leak somewhere in the Reicast code. Low screen resolution are recommended to get best performance. Performance suffers if HD resolutions are used.   \n\n\nROMS\n\n\nAccepted File Extensions: \n.cdi .gdi\n \n\n\nPlace your Dreamcast ROMs in\n\n\n/home/pi/RetroPie/roms/dreamcast\n\n\n\n\nDREAMCAST COMPATIBILITY LIST\n feel free to contribute to the list.\n\n\nBIOS\n\n\nThe BIOS files needed are: \ndc_boot.bin, dc_flash.bin\n. The BIOS file is often found named something else such as dc_\nbios\n.bin and must be renamed to dc_\nboot\n.bin when placed in the BIOS folder.\n\n\nPlace your BIOS files in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nVideo Setup Guide\n\n\n  \n\n\nRetroPie 4.0 uses an output resolution independent render resolution of 640x480. Open \n/home/pi/.reicast/emu.cfg\n to modify render resolution.\n\n\nTweaks\n\n\n/opt/retropie/configs/all/autoconf.cfg\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nreicast_input\n\n\nenable input auto configuration\n\n\n(0/1)\n\n\n\n\n\n\n\n\nVMUs\n\n\nVMUs are stored as .BIN files under \n/home/pi/.reicast/\n, and will be automatically created the first time you run Reicast without VMU files.  \n\n\nOn occasion, these VMUs do not get formatted quite right during creation, and the Dreamcast can't save or load data from them.  They just need to be reformatted -- run the \nSYSTEMMANAGER\n entry in the EmulationStation Dreamcast menu and / or see \nthis post\n for details. \n\n\nA Dreamcast soft-reset (A+B+X+Y+Start buttons at the same time) at the ROM's title screen will also take you into the Dreamcast BIOS to manage the VMU's. After formatting VMU's, exit the emulator and restart. Pressing 'Play' will cause Reicast to crash.\n\n\nControls\n\n\nStarting with RetroPie 3.3 controls for the Dreamcast Emulator are automatically configured when you configure your controls through emulationstation.\n\n\n\n\nControls can be mapped via the \n/home/pi/.reicast/emu.cfg\n file. Make sure that evdev_device_id_1 \n evdev_device_id_2 are set to the corresponding controller's /dev/input/event* number you want to use. A -1 means no controller which we will use for player 3 and 4. Then have evdev_mapping_1 \n evdev_mapping_2 point to the matching controller mapping configuration files and both can either point to the same file or different files if you want to use 2 different controllers types.\n\n\nHere is an example of this:\n\n\n[input]\nevdev_device_id_1 = 2\nevdev_device_id_2 = 3\nevdev_device_id_3 = -1\nevdev_device_id_4 = -1\nevdev_mapping_1 = /opt/retropie/configs/dreamcast/mappings/controller_Xbox360WirelessReceiver(XBOX).cfg\nevdev_mapping_2 = /opt/retropie/configs/dreamcast/mappings/controller_8BitdoSNES30GamePad.cfg\njoystick_device_id = -1\n\n\n\n\nIf you want to be able to use 2 controllers at the same time, then you would add this section to the \nemu.cfg\n file:\n\n\n[players]\nnb = 2\n\n\n\n\nAn example mapping for a PS3 controller is below for reference:\n\n\nPlayStation 3 Controller\n\n\n[PLAYSTATION(R)3 Controller]\nbutton.0=Btn_Z\nbutton.1=Btn_C\nbutton.2=Btn_D\nbutton.3=Btn_Start\nbutton.4=DPad_Up\nbutton.5=DPad_Right\nbutton.6=DPad_Down\nbutton.7=DPad_Left\nbutton.8=Axis_LT\nbutton.9=Axis_RT\nbutton.10=DPad2_Left\nbutton.11=DPad2_Right\nbutton.12=Btn_Y\nbutton.13=Btn_B\nbutton.14=Btn_A\nbutton.15=Btn_X\nbutton.16=Quit\naxis.0=Axis_X\naxis.1=Axis_Y\n\n\n\n\nIf mapping is not working correctly try changing controller name for: \n\n\n[Sony PLAYSTATION(R)3 Controller]\n\n\n\n\nFor Wireless PS3 Controller use: \n\n\n[PLAYSTATION(R)3 Controller (xx:xx:xx:xx:xx:xx)]\n\n\n\n\nReplace xx:xx:xx:xx:xx:xx with your own controller mac address\n\n\nPress ctrl+c to exit- Or map a Quit button (PS) as shown above :D \n\n\nXbox 360 Controller:\n\n\n[emulator]\nmapping_name = Xbox Gamepad (userspace driver)\nbtn_escape = 0x13a\n\n[dreamcast]\nbtn_a = 0x130h\nbtn_b = 0x131h\nbtn_c = \nbtn_d = 0x139h\nbtn_x = 0x133h\nbtn_y = 0x134h\nbtn_z = 0x138h\nbtn_start = 0x13Bh\naxis_x = 0x00\naxis_y = 0x01\naxis_trigger_left = 0x0a\naxis_trigger_right = 0x09\n\n[compat]\naxis_dpad1_x = 0x10\naxis_dpad1_y = 0x11\n\n\n\n\nXbox 360 Wireless Controller using xpad driver:\n\n\n[emulator]\nmapping_name = Xbox 360 Wireless Receiver (XBOX)\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 304\nbtn_b = 305\nbtn_c =\nbtn_d =\nbtn_x = 307\nbtn_y = 308\nbtn_z =\nbtn_start = 315\nbtn_dpad1_left =\nbtn_dpad1_right =\nbtn_dpad1_up = 704\nbtn_dpad1_down = 707\nbtn_dpad2_left =\nbtn_dpad2_right =\nbtn_dpad2_up =\nbtn_dpad2_down =\naxis_x = 0\naxis_y = 1\naxis_trigger_left = 10\naxis_trigger_right = 9\n\n[compat]\nbtn_trigger_left = 312\nbtn_trigger_right = 313\naxis_dpad1_x = 16\naxis_dpad1_y = 17\naxis_dpad2_x =\naxis_dpad2_y =\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted =\naxis_trigger_right_inverted =\naxis_dpad1_y_inverted = no\naxis_dpad1_x_inverted = no\n\n\n\n\niBuffalo USB controller\n \n\n\nbutton.0=Btn_B\nbutton.1=Btn_A\nbutton.2=Btn_Y\nbutton.3=Btn_X\nbutton.4=DPad2_Left\nbutton.5=DPad2_Right\nbutton.6=Quit\nbutton.7=Btn_Start\naxis.0=Axis_X\naxis.1=Axis_Y\n\n\n\n\nPS4 Controller:\n\n\n[emulator]\nmapping_name = Sony Computer Entertainment Wireless Controller\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 305\nbtn_b = 306\nbtn_x = 304\nbtn_y = 307\nbtn_start = 313\naxis_x = 0\naxis_y = 1\naxis_trigger_left = 3\naxis_trigger_right = 4\n\n[compat]\naxis_dpad1_x = 16\naxis_dpad1_y = 17\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted = no\naxis_trigger_right_inverted = no\naxis_dpad1_y_inverted = no\naxis_dpad1_x_inverted = no\n\n\n\n\nAkishop Ps 360+ Joystick\n\n\n[emulator]\nmapping_name = Akishop Customs PS360+ v1.66\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 306\nbtn_b = 305\nbtn_x = 307\nbtn_y = 304\nbtn_start = 312\n\n[compat]\naxis_dpad1_x = 16\naxis_dpad1_x_inverted = no\naxis_dpad1_y = 17\naxis_dpad1_y_inverted = no\nbtn_trigger_left = 309\nbtn_trigger_right = 311\n\n\n\n\nMobile Gamepad [EXPERIMENTAL]\n\n\n[emulator]\nmapping_name = MobileGamePad\nbtn_escape = 0x13a\n\n[dreamcast]\nbtn_a = 0x130\nbtn_b = 0x131\nbtn_c = 0x136\nbtn_d = 0x137\nbtn_x = 0x133\nbtn_y = 0x134\nbtn_z =\nbtn_start = 0x13b\nbtn_dpad1_left =\nbtn_dpad1_right =\nbtn_dpad1_up =\nbtn_dpad1_down =\nbtn_dpad2_left =\nbtn_dpad2_right =\nbtn_dpad2_up =\nbtn_dpad2_down =\naxis_x = 0x00\naxis_y = 0x01\naxis_trigger_left =\naxis_trigger_right =\n\n[compat]\nbtn_trigger_left = 0x138\nbtn_trigger_right = 0x139\naxis_dpad1_x =\naxis_dpad1_y =\naxis_dpad2_x =\naxis_dpad2_y =\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted =\naxis_trigger_right_inverted =\n\n\n\n\nFor mapping non-standard controller via @Folly\n\n\nrun in terminal :\n\n\ncd /opt/retropie/emulators/reicast/bin\n\n\n\n\nHere is a script called 'reicast-joyconfig'\nrun it :\n\n\n./reicast-joyconfig\n\n\n\n\nChoose your joystick.\nNow you can map your buttons.\nWhen all is done it outputs the text for making a file in \n/home/pi/.reicast/mappings\n\n\nIt outputs something like this (numbers are in decimals not hexadecimal such as in other contoller.cfg's(0x13b)):\n[emulator]\nmapping_name = Your Gamepad\nbtn_escape = 316\n\n\n[dreamcast]\n.......etc\n\n\nmake a file in /home/pi/.reicast/mappings called controller_Your Gamepad.cfg and paste the text in this file.", 
            "title": "Dreamcast"
        }, 
        {
            "location": "/Dreamcast/#emulator-reicast", 
            "text": "It can be very laggy and buggy, but some games work great (see compatibility list below). Pi 2 is required.    Audio is choppy and not great, and degrades the longer the emulator is in use.  Restarting the emulator (and ultimately the Pi) may become a good idea after a couple hours of gameplay. There is a memory leak somewhere in the Reicast code. Low screen resolution are recommended to get best performance. Performance suffers if HD resolutions are used.", 
            "title": "Emulator: Reicast"
        }, 
        {
            "location": "/Dreamcast/#roms", 
            "text": "Accepted File Extensions:  .cdi .gdi    Place your Dreamcast ROMs in  /home/pi/RetroPie/roms/dreamcast  DREAMCAST COMPATIBILITY LIST  feel free to contribute to the list.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Dreamcast/#bios", 
            "text": "The BIOS files needed are:  dc_boot.bin, dc_flash.bin . The BIOS file is often found named something else such as dc_ bios .bin and must be renamed to dc_ boot .bin when placed in the BIOS folder.  Place your BIOS files in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/Dreamcast/#video-setup-guide", 
            "text": "RetroPie 4.0 uses an output resolution independent render resolution of 640x480. Open  /home/pi/.reicast/emu.cfg  to modify render resolution.", 
            "title": "Video Setup Guide"
        }, 
        {
            "location": "/Dreamcast/#tweaks", 
            "text": "/opt/retropie/configs/all/autoconf.cfg     Option  Description  Value      reicast_input  enable input auto configuration  (0/1)", 
            "title": "Tweaks"
        }, 
        {
            "location": "/Dreamcast/#vmus", 
            "text": "VMUs are stored as .BIN files under  /home/pi/.reicast/ , and will be automatically created the first time you run Reicast without VMU files.    On occasion, these VMUs do not get formatted quite right during creation, and the Dreamcast can't save or load data from them.  They just need to be reformatted -- run the  SYSTEMMANAGER  entry in the EmulationStation Dreamcast menu and / or see  this post  for details.   A Dreamcast soft-reset (A+B+X+Y+Start buttons at the same time) at the ROM's title screen will also take you into the Dreamcast BIOS to manage the VMU's. After formatting VMU's, exit the emulator and restart. Pressing 'Play' will cause Reicast to crash.", 
            "title": "VMUs"
        }, 
        {
            "location": "/Dreamcast/#controls", 
            "text": "Starting with RetroPie 3.3 controls for the Dreamcast Emulator are automatically configured when you configure your controls through emulationstation.   Controls can be mapped via the  /home/pi/.reicast/emu.cfg  file. Make sure that evdev_device_id_1   evdev_device_id_2 are set to the corresponding controller's /dev/input/event* number you want to use. A -1 means no controller which we will use for player 3 and 4. Then have evdev_mapping_1   evdev_mapping_2 point to the matching controller mapping configuration files and both can either point to the same file or different files if you want to use 2 different controllers types.  Here is an example of this:  [input]\nevdev_device_id_1 = 2\nevdev_device_id_2 = 3\nevdev_device_id_3 = -1\nevdev_device_id_4 = -1\nevdev_mapping_1 = /opt/retropie/configs/dreamcast/mappings/controller_Xbox360WirelessReceiver(XBOX).cfg\nevdev_mapping_2 = /opt/retropie/configs/dreamcast/mappings/controller_8BitdoSNES30GamePad.cfg\njoystick_device_id = -1  If you want to be able to use 2 controllers at the same time, then you would add this section to the  emu.cfg  file:  [players]\nnb = 2  An example mapping for a PS3 controller is below for reference:  PlayStation 3 Controller  [PLAYSTATION(R)3 Controller]\nbutton.0=Btn_Z\nbutton.1=Btn_C\nbutton.2=Btn_D\nbutton.3=Btn_Start\nbutton.4=DPad_Up\nbutton.5=DPad_Right\nbutton.6=DPad_Down\nbutton.7=DPad_Left\nbutton.8=Axis_LT\nbutton.9=Axis_RT\nbutton.10=DPad2_Left\nbutton.11=DPad2_Right\nbutton.12=Btn_Y\nbutton.13=Btn_B\nbutton.14=Btn_A\nbutton.15=Btn_X\nbutton.16=Quit\naxis.0=Axis_X\naxis.1=Axis_Y  If mapping is not working correctly try changing controller name for:   [Sony PLAYSTATION(R)3 Controller]  For Wireless PS3 Controller use:   [PLAYSTATION(R)3 Controller (xx:xx:xx:xx:xx:xx)]  Replace xx:xx:xx:xx:xx:xx with your own controller mac address  Press ctrl+c to exit- Or map a Quit button (PS) as shown above :D   Xbox 360 Controller:  [emulator]\nmapping_name = Xbox Gamepad (userspace driver)\nbtn_escape = 0x13a\n\n[dreamcast]\nbtn_a = 0x130h\nbtn_b = 0x131h\nbtn_c = \nbtn_d = 0x139h\nbtn_x = 0x133h\nbtn_y = 0x134h\nbtn_z = 0x138h\nbtn_start = 0x13Bh\naxis_x = 0x00\naxis_y = 0x01\naxis_trigger_left = 0x0a\naxis_trigger_right = 0x09\n\n[compat]\naxis_dpad1_x = 0x10\naxis_dpad1_y = 0x11  Xbox 360 Wireless Controller using xpad driver:  [emulator]\nmapping_name = Xbox 360 Wireless Receiver (XBOX)\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 304\nbtn_b = 305\nbtn_c =\nbtn_d =\nbtn_x = 307\nbtn_y = 308\nbtn_z =\nbtn_start = 315\nbtn_dpad1_left =\nbtn_dpad1_right =\nbtn_dpad1_up = 704\nbtn_dpad1_down = 707\nbtn_dpad2_left =\nbtn_dpad2_right =\nbtn_dpad2_up =\nbtn_dpad2_down =\naxis_x = 0\naxis_y = 1\naxis_trigger_left = 10\naxis_trigger_right = 9\n\n[compat]\nbtn_trigger_left = 312\nbtn_trigger_right = 313\naxis_dpad1_x = 16\naxis_dpad1_y = 17\naxis_dpad2_x =\naxis_dpad2_y =\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted =\naxis_trigger_right_inverted =\naxis_dpad1_y_inverted = no\naxis_dpad1_x_inverted = no  iBuffalo USB controller    button.0=Btn_B\nbutton.1=Btn_A\nbutton.2=Btn_Y\nbutton.3=Btn_X\nbutton.4=DPad2_Left\nbutton.5=DPad2_Right\nbutton.6=Quit\nbutton.7=Btn_Start\naxis.0=Axis_X\naxis.1=Axis_Y  PS4 Controller:  [emulator]\nmapping_name = Sony Computer Entertainment Wireless Controller\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 305\nbtn_b = 306\nbtn_x = 304\nbtn_y = 307\nbtn_start = 313\naxis_x = 0\naxis_y = 1\naxis_trigger_left = 3\naxis_trigger_right = 4\n\n[compat]\naxis_dpad1_x = 16\naxis_dpad1_y = 17\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted = no\naxis_trigger_right_inverted = no\naxis_dpad1_y_inverted = no\naxis_dpad1_x_inverted = no  Akishop Ps 360+ Joystick  [emulator]\nmapping_name = Akishop Customs PS360+ v1.66\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 306\nbtn_b = 305\nbtn_x = 307\nbtn_y = 304\nbtn_start = 312\n\n[compat]\naxis_dpad1_x = 16\naxis_dpad1_x_inverted = no\naxis_dpad1_y = 17\naxis_dpad1_y_inverted = no\nbtn_trigger_left = 309\nbtn_trigger_right = 311  Mobile Gamepad [EXPERIMENTAL]  [emulator]\nmapping_name = MobileGamePad\nbtn_escape = 0x13a\n\n[dreamcast]\nbtn_a = 0x130\nbtn_b = 0x131\nbtn_c = 0x136\nbtn_d = 0x137\nbtn_x = 0x133\nbtn_y = 0x134\nbtn_z =\nbtn_start = 0x13b\nbtn_dpad1_left =\nbtn_dpad1_right =\nbtn_dpad1_up =\nbtn_dpad1_down =\nbtn_dpad2_left =\nbtn_dpad2_right =\nbtn_dpad2_up =\nbtn_dpad2_down =\naxis_x = 0x00\naxis_y = 0x01\naxis_trigger_left =\naxis_trigger_right =\n\n[compat]\nbtn_trigger_left = 0x138\nbtn_trigger_right = 0x139\naxis_dpad1_x =\naxis_dpad1_y =\naxis_dpad2_x =\naxis_dpad2_y =\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted =\naxis_trigger_right_inverted =", 
            "title": "Controls"
        }, 
        {
            "location": "/Dreamcast/#for-mapping-non-standard-controller-via-folly", 
            "text": "run in terminal :  cd /opt/retropie/emulators/reicast/bin  Here is a script called 'reicast-joyconfig'\nrun it :  ./reicast-joyconfig  Choose your joystick.\nNow you can map your buttons.\nWhen all is done it outputs the text for making a file in \n/home/pi/.reicast/mappings  It outputs something like this (numbers are in decimals not hexadecimal such as in other contoller.cfg's(0x13b)):\n[emulator]\nmapping_name = Your Gamepad\nbtn_escape = 316  [dreamcast]\n.......etc  make a file in /home/pi/.reicast/mappings called controller_Your Gamepad.cfg and paste the text in this file.", 
            "title": "For mapping non-standard controller via @Folly"
        }, 
        {
            "location": "/FinalBurn-Alpha/", 
            "text": "Final Burn Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the final burn team and originated from FinalBurn by Dave\n\n\nSee also: [[MAME]], [[Neo Geo]]\n\n\n\n\nThere are a variety of arcade emulators available in RetroPie. There are significant differences in performance, compatibility, and configuration between them. If you're getting started with arcade emulation, start by reading \nManaging Arcade ROMs\n.\n\n\nThis page is a resource for additional details on RetroPie's Final Burn Alpha emulators including configuration paths, controls, and the ROM sets which each emulator requires.\n\n\nAll Arcade ROMS Compatibility List\n feel free to contribute to the list.\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nRequired ROM Version\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\n\n\nlr-fbalpha\n\n\narcade \nor\n fba \nor\n neogeo\n\n\nFB Alpha v0.2.97.39\n\n\n/opt/retropie/configs/arcade/retroarch.cfg, \nor\n /opt/retropie/configs/fba/retroarch.cfg, \nor\n /opt/retropie/configs/neogeo/retroarch.cfg\n\n\n\n\n\n\n\n\nlr-fbalpha2012\n\n\narcade \nor\n fba \nor\n neogeo\n\n\nFB Alpha v0.2.97.30\n\n\n/opt/retropie/configs/arcade/retroarch.cfg, \nor\n /opt/retropie/configs/fba/retroarch.cfg, \nor\n /opt/retropie/configs/neogeo/retroarch.cfg\n\n\n\n\n\n\n\n\nPiFBA\n\n\narcade \nor\n fba \nor\n neogeo\n\n\nFB Alpha 0.2.96.71\n\n\n/opt/retropie/emulators/pifba/fba2x.cfg \nor\n /opt/retropie/configs/fba/fba2x.cfg\n\n\n\n\n\n\n\n\n\n\nArcade ROM paths\n\n\nIn 3.0.0 some emulators share directories, so you need to choose which FBA, NeoGeo and mame4all version you want.\nSo you can have 1 romset for each of these (mame4all, FBA, NeoGeo, advmame) To avoid having several EmulationStation menus for different arcade emulators, all arcade-based ROMs can be placed in the \narcade\n ROM folder, but you will have to specify which emulator each will use from the \nRuncommand Menu\n\n\nEmulators\n\n\nlr-fbalpha on github\n\n\nNote: Please see [[lr-fbalpha]] for information on how to configure specific features of this emulator.\n\n\nRoms Dir: /home/pi/RetroPie/roms/fba\nBinary Dir: /opt/retropie/libretrocores/lr-fbalpha\nConfig Dir: /opt/retropie/configs/fba/retroarch.cfg\n\n\n\n\nROM Version\n: FB Alpha 0.2.97.39\n\n\nTotal games emulated: 4375\n\n\n BIOS: 6\n\n Samples: ?\n\n\nFB Alpha v0.2.97.39 DAT File\n:  \nFB Alpha v0.2.97.39 (Arcade Only)\n\n\nFB Alpha v0.2.97.39 DAT File\n: \nFB Alpha v0.2.97.39 (NeoGeo Only)\n Instructions: Rebuild using Non-merged-sets, Place the ROMs in the neogeo ROMs folder and use FB Alpha v0.2.97.39 as the default emulator.\"\n\n\nlr-fbalpha Compatibility List\n feel free to contribute to the list.\n\n\n\n\nlr-fbalpha2012 on github\n\n\nRoms Dir: /home/pi/RetroPie/roms/fba\nBinary Dir: /opt/retropie/libretrocores/lr-fbalpha2012\nConfig Dir: /opt/retropie/configs/fba/retroarch.cfg\n\n\n\n\nROM Version\n: FB Alpha v0.2.97.30\n\n\nTotal games emulated: \n3369\n\n\n BIOS: 5\n\n Samples: ?\n\n\nFB Alpha v0.2.97.30 DAT File\n: \nFB Alpha v0.2.97.30.dat.zip\n\n\nFB Alpha v0.2.97.30 Neo Geo Only DAT File\n: \nfba-lr-neogeo\n\n\nlr-fbalpha2012 Compatibility List\n  feel free to contribute to the list.\n\n\nControls\n\nlr-fbalpha2012 utilises RetroArch configs. Add custom retroarch controls to the retroarch.cfg file in:\n\n\n/opt/retropie/configs/fba/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n \n\n\n\n\nPiFBA on sourceforge\n\n\nRoms Dir: /home/pi/RetroPie/roms/fba\nBinary Dir: /opt/retropie/emulators/pifba\nConfig Dir: /opt/retropie/configs/fba/fba2x.cfg\n\n\n\n\nROM Version\n: FB Alpha 0.2.96.71\n\n\nTotal games emulated: 684\n\n\n BIOS: ?\n\n Samples: ?\n\n\nFB Alpha v0.2.96.71 DAT File\n: \nFB Alpha v0.2.96.71 (ClrMame Pro).dat\n\n\nFB Alpha v0.2.96.71 'Lite' DAT File\n: [fba_029671_od_release_10_working_roms_filtered.zip] (https://drive.google.com/file/d/0B2TMeZ6iEFvHMTV2TnlrZWwxRXc/view?usp=sharing) (clones, non-working, mahjong, quiz, adult, casino, rythm removed)\n\n\nPiFBA Compatibility List\n  feel free to contribute to the list.\n\n\nControls\n\n\nPiFBA controls are located in:\n\n\n/opt/retropie/emulators/pifba/fba2x.cfg\n\n\n\n\nAs there is no menu to configure controllers with PiFBA like there is with Mame4all, you'll have to edit the aforementioned file manually. \n\n\nNOTE\n PiFBA currently only supports 2 players.\n\n\nExample of fba2x.cfg\n\n\n[Keyboard]\n# Get codes from /usr/include/SDL/SDL_keysym.h\nA_1=306 #LCTRL (button1)\nB_1=32 #SPACE (button3)\nX_1=308 #LALT (button2\nY_1=304 #LSHIFT\nL_1=122 #z\nR_1=120 #x\nSTART_1=49 #1\nSELECT_1=53 #5\nLEFT_1=276 #left\nRIGHT_1=275 #right\nUP_1=273 #up\nDOWN_1=274 #down\nQUIT=27 #escape\n#player 2 keyboard controls, disabled by default\nA_2=97 #a (button1)\nB_2=113 #q (button3)\nX_2=115 #s (button2)\nY_2=119 #w\nL_2=105 #i\nR_2=107 #k\nSTART_2=50 #2\nSELECT_2=54 #6\nLEFT_2=100 #d\nRIGHT_2=103 #g\nUP_2=114 #r\nDOWN_2=102 #f\n\n[Joystick]\n# Get codes from \njstest /dev/input/js0\n\n# from package \njoystick\n\nA_1=3\nB_1=1\nX_1=2\nY_1=0\nL_1=4\nR_1=5\nSTART_1=9\nSELECT_1=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n#player 2 button configuration\nA_2=3\nB_2=1\nX_2=2\nY_2=0\nL_2=4\nR_2=5\nSTART_2=9\nSELECT_2=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n\n[Graphics]\nDisplaySmoothStretch=1\n# Display Effect: 0 none, 1 scanlines\nDisplayEffect=0\nDisplayBorder=0\nMaintainAspectRatio=1\n\n[Sound]", 
            "title": "FinalBurn Alpha"
        }, 
        {
            "location": "/FinalBurn-Alpha/#arcade-rom-paths", 
            "text": "In 3.0.0 some emulators share directories, so you need to choose which FBA, NeoGeo and mame4all version you want.\nSo you can have 1 romset for each of these (mame4all, FBA, NeoGeo, advmame) To avoid having several EmulationStation menus for different arcade emulators, all arcade-based ROMs can be placed in the  arcade  ROM folder, but you will have to specify which emulator each will use from the  Runcommand Menu", 
            "title": "Arcade ROM paths"
        }, 
        {
            "location": "/FinalBurn-Alpha/#emulators", 
            "text": "", 
            "title": "Emulators"
        }, 
        {
            "location": "/FinalBurn-Alpha/#lr-fbalpha-on-github", 
            "text": "Note: Please see [[lr-fbalpha]] for information on how to configure specific features of this emulator.  Roms Dir: /home/pi/RetroPie/roms/fba\nBinary Dir: /opt/retropie/libretrocores/lr-fbalpha\nConfig Dir: /opt/retropie/configs/fba/retroarch.cfg  ROM Version : FB Alpha 0.2.97.39  Total games emulated: 4375   BIOS: 6  Samples: ?  FB Alpha v0.2.97.39 DAT File :   FB Alpha v0.2.97.39 (Arcade Only)  FB Alpha v0.2.97.39 DAT File :  FB Alpha v0.2.97.39 (NeoGeo Only)  Instructions: Rebuild using Non-merged-sets, Place the ROMs in the neogeo ROMs folder and use FB Alpha v0.2.97.39 as the default emulator.\"  lr-fbalpha Compatibility List  feel free to contribute to the list.", 
            "title": "lr-fbalpha on github"
        }, 
        {
            "location": "/FinalBurn-Alpha/#lr-fbalpha2012-on-github", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/fba\nBinary Dir: /opt/retropie/libretrocores/lr-fbalpha2012\nConfig Dir: /opt/retropie/configs/fba/retroarch.cfg  ROM Version : FB Alpha v0.2.97.30  Total games emulated:  3369   BIOS: 5  Samples: ?  FB Alpha v0.2.97.30 DAT File :  FB Alpha v0.2.97.30.dat.zip  FB Alpha v0.2.97.30 Neo Geo Only DAT File :  fba-lr-neogeo  lr-fbalpha2012 Compatibility List   feel free to contribute to the list.  Controls \nlr-fbalpha2012 utilises RetroArch configs. Add custom retroarch controls to the retroarch.cfg file in:  /opt/retropie/configs/fba/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-fbalpha2012 on github"
        }, 
        {
            "location": "/FinalBurn-Alpha/#pifba-on-sourceforge", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/fba\nBinary Dir: /opt/retropie/emulators/pifba\nConfig Dir: /opt/retropie/configs/fba/fba2x.cfg  ROM Version : FB Alpha 0.2.96.71  Total games emulated: 684   BIOS: ?  Samples: ?  FB Alpha v0.2.96.71 DAT File :  FB Alpha v0.2.96.71 (ClrMame Pro).dat  FB Alpha v0.2.96.71 'Lite' DAT File : [fba_029671_od_release_10_working_roms_filtered.zip] (https://drive.google.com/file/d/0B2TMeZ6iEFvHMTV2TnlrZWwxRXc/view?usp=sharing) (clones, non-working, mahjong, quiz, adult, casino, rythm removed)  PiFBA Compatibility List   feel free to contribute to the list.  Controls  PiFBA controls are located in:  /opt/retropie/emulators/pifba/fba2x.cfg  As there is no menu to configure controllers with PiFBA like there is with Mame4all, you'll have to edit the aforementioned file manually.   NOTE  PiFBA currently only supports 2 players.  Example of fba2x.cfg  [Keyboard]\n# Get codes from /usr/include/SDL/SDL_keysym.h\nA_1=306 #LCTRL (button1)\nB_1=32 #SPACE (button3)\nX_1=308 #LALT (button2\nY_1=304 #LSHIFT\nL_1=122 #z\nR_1=120 #x\nSTART_1=49 #1\nSELECT_1=53 #5\nLEFT_1=276 #left\nRIGHT_1=275 #right\nUP_1=273 #up\nDOWN_1=274 #down\nQUIT=27 #escape\n#player 2 keyboard controls, disabled by default\nA_2=97 #a (button1)\nB_2=113 #q (button3)\nX_2=115 #s (button2)\nY_2=119 #w\nL_2=105 #i\nR_2=107 #k\nSTART_2=50 #2\nSELECT_2=54 #6\nLEFT_2=100 #d\nRIGHT_2=103 #g\nUP_2=114 #r\nDOWN_2=102 #f\n\n[Joystick]\n# Get codes from  jstest /dev/input/js0 \n# from package  joystick \nA_1=3\nB_1=1\nX_1=2\nY_1=0\nL_1=4\nR_1=5\nSTART_1=9\nSELECT_1=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n#player 2 button configuration\nA_2=3\nB_2=1\nX_2=2\nY_2=0\nL_2=4\nR_2=5\nSTART_2=9\nSELECT_2=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n\n[Graphics]\nDisplaySmoothStretch=1\n# Display Effect: 0 none, 1 scanlines\nDisplayEffect=0\nDisplayBorder=0\nMaintainAspectRatio=1\n\n[Sound]", 
            "title": "PiFBA on sourceforge"
        }, 
        {
            "location": "/Game-Boy-Advance/", 
            "text": "The Game Boy Advance is a 32 bit handheld video game console released by Nintendo in 2001.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-gpSP\n\n\ngba\n\n\n.gba\n\n\ngba_bios.bin\n\n\n/opt/retropie/configs/gba/retroarch.cfg\n\n\n\n\n\n\nlr-vba-next\n\n\ngba\n\n\n.gba\n\n\ngba_bios.bin\n\n\n/opt/retropie/configs/gba/retroarch.cfg\n\n\n\n\n\n\nlr-mgba\n\n\ngba\n\n\n.gba\n\n\ngba_bios.bin\n\n\n/opt/retropie/configs/gba/retroarch.cfg\n\n\n\n\n\n\ngpSP\n\n\ngba\n\n\n.gba\n\n\ngba_bios.bin\n\n\n/opt/retropie/emulators/gpsp/gpsp.cfg\n\n\n\n\n\n\n\n\nEmulators: \ngpSP\n, \nlr-gpSP\n, \nlr-vba-next\n, \nlr-mgba\n\n\nROMS\n\n\nAccepted File Extensions: \n.gba\n\n\nPlace your Game Boy Advance ROMS in \n\n\n/home/pi/RetroPie/roms/gba\n\n\n\n\nBIOS\n\n\nThe Game Boy Advance requires a BIOS called \ngba_bios.bin\n\n\nPlace the BIOS in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nTo verify your BIOS file:\n\n\n$ md5sum /home/pi/RetroPie/BIOS/gba_bios.bin \na860e8c0b6d573d191e4ec7db1b1e4f6  /home/pi/RetroPie/BIOS/gba_bios.bin\n\n\n\n\nIf you get something else besides that \na860...\n string, that's not the correct file.\n\n\nControls\n\n\nThere are two ways to configure your Game Boy Advance controls depending on the emulator.\n\n\nlr-gpSP, lr-vba-next, and lr-mgba\n\n\nlr-gpSP, lr-vba-next, and lr-mgba utilise Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/gba/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\ngpSP\n\n\nTo configure your controls for gpSP, once you are in a game you can press F10 to access the menu\n\n\nif you want your settings to be saved you need to select quit from the F10 menu instead of pressing esc on the keyboard\n\n\nFor Gamepad: Navigate to configure gamepad input and modify the controls to fit your preferences.\n\n\nExample Gamepad Controls\n\n\nD-pad up: asix Y-\nD-pad down: asix Y+\nD-pad left: asix X-\nD-pad right: asix X+\nA: Button 1\nB: Button 2\nLeft Trigger: Button 5\nRight Trigger: Button 6\nStart: Button 3\nSelect: Button 4\n\nMenu Hotkey: yes  (this means if you hold select+right trigger it will open the menu- but it is mapped to whichever buttons you configure for select and right trigger above)\n\n\n\n\nFor Keyboard: Navigate to configure keyboard input and modify the controls to fit your preferences.\n\n\nExample Keyboard Controls\n\n\nD-pad up: Up\nD-pad down: Down\nD-pad left: Left\nD-pad right: Right\nA: Z\nB: X\nLeft Trigger: A\nRight Trigger: S\nStart: Return\nSelect: Backspace\n\n\n\n\nVideo Tutorial:", 
            "title": "Game Boy Advance"
        }, 
        {
            "location": "/Game-Boy-Advance/#emulators-gpsp-lr-gpsp-lr-vba-next-lr-mgba", 
            "text": "", 
            "title": "Emulators: gpSP, lr-gpSP, lr-vba-next, lr-mgba"
        }, 
        {
            "location": "/Game-Boy-Advance/#roms", 
            "text": "Accepted File Extensions:  .gba  Place your Game Boy Advance ROMS in   /home/pi/RetroPie/roms/gba", 
            "title": "ROMS"
        }, 
        {
            "location": "/Game-Boy-Advance/#bios", 
            "text": "The Game Boy Advance requires a BIOS called  gba_bios.bin  Place the BIOS in  /home/pi/RetroPie/BIOS  To verify your BIOS file:  $ md5sum /home/pi/RetroPie/BIOS/gba_bios.bin \na860e8c0b6d573d191e4ec7db1b1e4f6  /home/pi/RetroPie/BIOS/gba_bios.bin  If you get something else besides that  a860...  string, that's not the correct file.", 
            "title": "BIOS"
        }, 
        {
            "location": "/Game-Boy-Advance/#controls", 
            "text": "There are two ways to configure your Game Boy Advance controls depending on the emulator.", 
            "title": "Controls"
        }, 
        {
            "location": "/Game-Boy-Advance/#lr-gpsp-lr-vba-next-and-lr-mgba", 
            "text": "lr-gpSP, lr-vba-next, and lr-mgba utilise Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/gba/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-gpSP, lr-vba-next, and lr-mgba"
        }, 
        {
            "location": "/Game-Boy-Advance/#gpsp", 
            "text": "To configure your controls for gpSP, once you are in a game you can press F10 to access the menu  if you want your settings to be saved you need to select quit from the F10 menu instead of pressing esc on the keyboard  For Gamepad: Navigate to configure gamepad input and modify the controls to fit your preferences.  Example Gamepad Controls  D-pad up: asix Y-\nD-pad down: asix Y+\nD-pad left: asix X-\nD-pad right: asix X+\nA: Button 1\nB: Button 2\nLeft Trigger: Button 5\nRight Trigger: Button 6\nStart: Button 3\nSelect: Button 4\n\nMenu Hotkey: yes  (this means if you hold select+right trigger it will open the menu- but it is mapped to whichever buttons you configure for select and right trigger above)  For Keyboard: Navigate to configure keyboard input and modify the controls to fit your preferences.  Example Keyboard Controls  D-pad up: Up\nD-pad down: Down\nD-pad left: Left\nD-pad right: Right\nA: Z\nB: X\nLeft Trigger: A\nRight Trigger: S\nStart: Return\nSelect: Backspace", 
            "title": "gpSP"
        }, 
        {
            "location": "/Game-Boy-Advance/#video-tutorial", 
            "text": "", 
            "title": "Video Tutorial:"
        }, 
        {
            "location": "/Game-Boy-Color/", 
            "text": "The Game Boy Color was an 8 bit handheld gaming console released by Nintendo in 1998. Pokemon Yellow anyone?\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-gambatte\n\n\ngbc\n\n\n.gbc\n\n\nnone\n\n\n/opt/retropie/configs/gbc/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-gambatte\n\n\nlr-gambatte is a libretro port of Gambatte that utilises RetroArch configurations for your controller\n\n\nROMS\n\n\nAccepted File Extensions: \n.gbc\n\n\nPlace your Game Boy Color ROMs in\n\n\n/home/pi/RetroPie/roms/gbc\n\n\n\n\nControls\n\n\nlr-gambatte utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/gbc/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Game Boy Color"
        }, 
        {
            "location": "/Game-Boy-Color/#emulator-lr-gambatte", 
            "text": "lr-gambatte is a libretro port of Gambatte that utilises RetroArch configurations for your controller", 
            "title": "Emulator: lr-gambatte"
        }, 
        {
            "location": "/Game-Boy-Color/#roms", 
            "text": "Accepted File Extensions:  .gbc  Place your Game Boy Color ROMs in  /home/pi/RetroPie/roms/gbc", 
            "title": "ROMS"
        }, 
        {
            "location": "/Game-Boy-Color/#controls", 
            "text": "lr-gambatte utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/gbc/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Game-Boy/", 
            "text": "The Game Boy was released by Nintendo in 1989 thus kicking off the era of handheld gaming and Pokemon.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-gambatte\n\n\ngb\n\n\n.gb\n\n\nnone\n\n\n/opt/retropie/configs/gb/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-gambatte\n\n\nlr-gambatte is a libretro port of Gambatte that utilises RetroArch configurations for your controller\n\n\nROMS\n\n\nAccepted File Extensions: \n.gb\n\n\nPlace your Game Boy ROMs in\n\n\n/home/pi/RetroPie/roms/gb\n\n\n\n\nControls\n\n\nlr-gambatte utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/gb/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nSyncing Save Games\n\n\nFor games which can share save games, such as Pokemon Blue and Pokemon Red, it is possible to link one save to the other.\n\n\nThis procedure assumes you have \none\n save game. If you've played both games, you'll need to delete one save, it's not possible to combine both after you've played them.\n\n\nGet to the commandline with F4 or \nSSH\n, change directory to the Game Boy folder, and look at the save files:\n\n\ncd RetroPie/roms/gb\nls *.srm\n\n\n\n\nYou should see your existing save game, for example:\n\n\nPokemon Blue.srm\n\n\n\n\nIf you have two save files, such as:\n\n\nPokemon Blue.srm\nPokemon Red.srm\n\n\n\n\nThen delete the one you \ndon't\n want to keep:\n\n\nrm Pokemon Red.srm\n\n\n\n\nNow create an \"imaginary\" save for the other game by creating a symbolic link.\n\n\nln -s \nPokemon Blue.srm\n \nPokemon Red.srm\n\n\n\n\n\nThe above example takes an existing Blue save and makes an imaginary Red save.\n\n\nHow to change the color palette\n\n\nOpen the RetroArch RGUI by pressing \nSelect+X\n on the controller, or \nHotkey+F1\n on the keyboard then navigate to:\n\n\n\n\nQuick Menu\n\n\nCore Options\n\n\nChange \nGB Colorization\n to \ninternal\n by pressing left or right\n\n\nSelect an \nInternal Palette\n with left and right\n\n\n\n\n\n\n\n\n\n\n\n\nPress \nB\n to go back to the Quick Menu and \nResume Content\n.\n\n\nTo make the change permanent, choose \nSave Configuration\n on the main RGUI menu.\n\n\nIt's also possible to edit \n/opt/retropie/configs/all/retroarch-core-options.cfg\n and set the palette like:\n\n\ngambatte_gb_colorization = \ninternal\n\ngambatte_gb_internal_palette = \nGBC - Grayscale\n\n\n\n\n\nThe complete list of palettes can be found in the emulator core source:\n\n\nGBC - Blue\nGBC - Brown\nGBC - Dark Blue\nGBC - Dark Brown\nGBC - Dark Green\nGBC - Grayscale\nGBC - Green\nGBC - Inverted\nGBC - Orange\nGBC - Pastel Mix\nGBC - Red\nGBC - Yellow\nSpecial 1\nSpecial 2\nSpecial 3\n\n\n\n\nhttps://github.com/libretro/gambatte-libretro/blob/master/libgambatte/libretro/libretro.cpp", 
            "title": "Game Boy"
        }, 
        {
            "location": "/Game-Boy/#emulator-lr-gambatte", 
            "text": "lr-gambatte is a libretro port of Gambatte that utilises RetroArch configurations for your controller", 
            "title": "Emulator: lr-gambatte"
        }, 
        {
            "location": "/Game-Boy/#roms", 
            "text": "Accepted File Extensions:  .gb  Place your Game Boy ROMs in  /home/pi/RetroPie/roms/gb", 
            "title": "ROMS"
        }, 
        {
            "location": "/Game-Boy/#controls", 
            "text": "lr-gambatte utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/gb/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Game-Boy/#syncing-save-games", 
            "text": "For games which can share save games, such as Pokemon Blue and Pokemon Red, it is possible to link one save to the other.  This procedure assumes you have  one  save game. If you've played both games, you'll need to delete one save, it's not possible to combine both after you've played them.  Get to the commandline with F4 or  SSH , change directory to the Game Boy folder, and look at the save files:  cd RetroPie/roms/gb\nls *.srm  You should see your existing save game, for example:  Pokemon Blue.srm  If you have two save files, such as:  Pokemon Blue.srm\nPokemon Red.srm  Then delete the one you  don't  want to keep:  rm Pokemon Red.srm  Now create an \"imaginary\" save for the other game by creating a symbolic link.  ln -s  Pokemon Blue.srm   Pokemon Red.srm   The above example takes an existing Blue save and makes an imaginary Red save.", 
            "title": "Syncing Save Games"
        }, 
        {
            "location": "/Game-Boy/#how-to-change-the-color-palette", 
            "text": "Open the RetroArch RGUI by pressing  Select+X  on the controller, or  Hotkey+F1  on the keyboard then navigate to:   Quick Menu  Core Options  Change  GB Colorization  to  internal  by pressing left or right  Select an  Internal Palette  with left and right       Press  B  to go back to the Quick Menu and  Resume Content .  To make the change permanent, choose  Save Configuration  on the main RGUI menu.  It's also possible to edit  /opt/retropie/configs/all/retroarch-core-options.cfg  and set the palette like:  gambatte_gb_colorization =  internal \ngambatte_gb_internal_palette =  GBC - Grayscale   The complete list of palettes can be found in the emulator core source:  GBC - Blue\nGBC - Brown\nGBC - Dark Blue\nGBC - Dark Brown\nGBC - Dark Green\nGBC - Grayscale\nGBC - Green\nGBC - Inverted\nGBC - Orange\nGBC - Pastel Mix\nGBC - Red\nGBC - Yellow\nSpecial 1\nSpecial 2\nSpecial 3  https://github.com/libretro/gambatte-libretro/blob/master/libgambatte/libretro/libretro.cpp", 
            "title": "How to change the color palette"
        }, 
        {
            "location": "/GameCube/", 
            "text": "The GameCube is a home video game console that was released by Nintendo on September 14, 2001.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\ndolphin\n\n\ngc\n\n\n.iso\n\n\nnone\n\n\n/opt/retropie/configs/gc/Config\n\n\n\n\n\n\n\n\n\n\n:exclamation: This is only for x86 builds- Not the Raspberry Pi!.\n\n\n\n\nEmulator: \ndolphin\n\n\nROMS\n\n\nAccepted File Extensions: \n.iso\n\n\nPlace your GameCube ROMs in\n\n\n/home/pi/RetroPie/roms/gc\n\n\n\n\nControls\n\n\nDolphin controls must currently be mapped via the GUI. You will need to drop down into terminal mode press F4 on your keyboard if you are currently in emulation station, hit the unity button and search for terminal. Click to launch. \n\n\nChange to the Dolphin directory:\n\n\ncd /opt/retropie/emulators/bin/dolphin-emu\n\n\n\n\nLaunch Dolphin:\n\n\n./dolphin-emu\n\n\n\n\nFrom there the graphical client will launch and you can bind your controller in the Dolphin Interface as well as change settings.\n\n\nExiting Dolphin\n\n\nCurrently the only way I have found to exit dolphin is with the Keyboard combination Alt+F4\nIf someone is smart enough to hard code a single exit button that is assignable and or find a way to map a button press or button combination preess to Alt F4 we would have a valid way of exiting the emulator back to EmulationStation", 
            "title": "GameCube"
        }, 
        {
            "location": "/GameCube/#emulator-dolphin", 
            "text": "", 
            "title": "Emulator: dolphin"
        }, 
        {
            "location": "/GameCube/#roms", 
            "text": "Accepted File Extensions:  .iso  Place your GameCube ROMs in  /home/pi/RetroPie/roms/gc", 
            "title": "ROMS"
        }, 
        {
            "location": "/GameCube/#controls", 
            "text": "Dolphin controls must currently be mapped via the GUI. You will need to drop down into terminal mode press F4 on your keyboard if you are currently in emulation station, hit the unity button and search for terminal. Click to launch.   Change to the Dolphin directory:  cd /opt/retropie/emulators/bin/dolphin-emu  Launch Dolphin:  ./dolphin-emu  From there the graphical client will launch and you can bind your controller in the Dolphin Interface as well as change settings.", 
            "title": "Controls"
        }, 
        {
            "location": "/GameCube/#exiting-dolphin", 
            "text": "Currently the only way I have found to exit dolphin is with the Keyboard combination Alt+F4\nIf someone is smart enough to hard code a single exit button that is assignable and or find a way to map a button press or button combination preess to Alt F4 we would have a valid way of exiting the emulator back to EmulationStation", 
            "title": "Exiting Dolphin"
        }, 
        {
            "location": "/Game-Gear/", 
            "text": "The Sega Game Gear was an 8 bit handheld gaming console released in 1990\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-genesis-plus-gx\n\n\ngamegear\n\n\n.gg\n\n\nnone\n\n\n/opt/retropie/configs/gamegear/retroarch.cfg\n\n\n\n\n\n\nOsmose\n\n\ngamegear\n\n\n.gg\n\n\nnone\n\n\n/home/pi/osmose_files/osmose.ini\n\n\n\n\n\n\n\n\nEmulators: \nOsmose\n, \nlr-genesis-plus-gx\n\n\nThe Osmose is tedious to configure controllers with. The lr-genesis-plus-gx will be the most convenient choice as it utilises RetroArch configurations.\n\n\nROMS\n\n\nAcceptable File Extensions: \n.gg\n\n\nPlace your Gamegear roms in\n\n\n/home/pi/RetroPie/roms/gamegear\n\n\n\n\nControls\n\n\nlr-genesis-plus-gx\n\n\nlr-genesis-plus-gx utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/gamegear/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nOsmose\n\n\nOnce you have run Osmose at least once, a configuration file call osmose.ini will be created at\n\n\n/home/pi/osmose_files/osmose.ini\n\n\n\n\nIt will look something like this:\n\n\n# Configuration Starts Here !\n\n#\n#  General emulation keys:\n#\n\nSCREENSHOT    = SDLK_F2\nSOUNDSHOT     = SDLK_F1\nQUIT          = SDLK_ESCAPE\nTILESHOT      = SDLK_F3\nDEBUGGER      = SDLK_d\nPAUSE         = SDLK_p\n\n#\n# First Player PAD:\n#\n\nPAD1_UP       = SDLK_UP\nPAD1_DOWN     = SDLK_DOWN\nPAD1_LEFT     = SDLK_LEFT\nPAD1_RIGHT    = SDLK_RIGHT\nPAD1_BUTTON_A = SDLK_LCTRL\nPAD1_BUTTON_B = SDLK_LALT\n\n#\n# Second Player PAD:\n#\n\nPAD2_UP       = SDLK_KP5\nPAD2_DOWN     = SDLK_KP2\nPAD2_LEFT     = SDLK_KP1\nPAD2_RIGHT    = SDLK_KP3\nPAD2_BUTTON_A = SDLK_n\nPAD2_BUTTON_B = SDLK_b\n\n\n\n\nThe above controls only apply to the keyboard. Configuring controls for a gamepad must be done by editing the es_systems.cfg file\n\n\n/etc/emulationstation/es_systems.cfg\n\n\n\n\nadd your specific controls in this format to the gamegear section:\n\n\nosmose -joy 1 -joy1 1 -joy2 2 -joyquit 6\n\n\n\n\nsee \nThis Thread\n for more details", 
            "title": "Game Gear"
        }, 
        {
            "location": "/Game-Gear/#emulators-osmose-lr-genesis-plus-gx", 
            "text": "The Osmose is tedious to configure controllers with. The lr-genesis-plus-gx will be the most convenient choice as it utilises RetroArch configurations.", 
            "title": "Emulators: Osmose, lr-genesis-plus-gx"
        }, 
        {
            "location": "/Game-Gear/#roms", 
            "text": "Acceptable File Extensions:  .gg  Place your Gamegear roms in  /home/pi/RetroPie/roms/gamegear", 
            "title": "ROMS"
        }, 
        {
            "location": "/Game-Gear/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Game-Gear/#lr-genesis-plus-gx", 
            "text": "lr-genesis-plus-gx utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/gamegear/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-genesis-plus-gx"
        }, 
        {
            "location": "/Game-Gear/#osmose", 
            "text": "Once you have run Osmose at least once, a configuration file call osmose.ini will be created at  /home/pi/osmose_files/osmose.ini  It will look something like this:  # Configuration Starts Here !\n\n#\n#  General emulation keys:\n#\n\nSCREENSHOT    = SDLK_F2\nSOUNDSHOT     = SDLK_F1\nQUIT          = SDLK_ESCAPE\nTILESHOT      = SDLK_F3\nDEBUGGER      = SDLK_d\nPAUSE         = SDLK_p\n\n#\n# First Player PAD:\n#\n\nPAD1_UP       = SDLK_UP\nPAD1_DOWN     = SDLK_DOWN\nPAD1_LEFT     = SDLK_LEFT\nPAD1_RIGHT    = SDLK_RIGHT\nPAD1_BUTTON_A = SDLK_LCTRL\nPAD1_BUTTON_B = SDLK_LALT\n\n#\n# Second Player PAD:\n#\n\nPAD2_UP       = SDLK_KP5\nPAD2_DOWN     = SDLK_KP2\nPAD2_LEFT     = SDLK_KP1\nPAD2_RIGHT    = SDLK_KP3\nPAD2_BUTTON_A = SDLK_n\nPAD2_BUTTON_B = SDLK_b  The above controls only apply to the keyboard. Configuring controls for a gamepad must be done by editing the es_systems.cfg file  /etc/emulationstation/es_systems.cfg  add your specific controls in this format to the gamegear section:  osmose -joy 1 -joy1 1 -joy2 2 -joyquit 6  see  This Thread  for more details", 
            "title": "Osmose"
        }, 
        {
            "location": "/Game-&-Watch/", 
            "text": "Game \n Watch is a line of handheld electronic games produced by Nintendo from 1980 to 1991.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-gw\n\n\ngameandwatch\n\n\n.mgw\n\n\nnone\n\n\n/opt/retropie/configs/gameandwatch/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-gw\n (EXPERIMENTAL)\n\n\nNote that this is experimental. It can be installed from the experimental menu of the \nRetroPie Setup Script\n.\n\n\nROMS\n\n\nAccepted File Extensions: \n.mgw\n\n\nPlace your Game \n Watch ROMs in\n\n\n/home/pi/RetroPie/roms/gameandwatch\n\n\n\n\nGames can be found at http://bot.libretro.com/assets/cores/Game%20and%20Watch/\n\n\nVideo Guide\n\n\n  \n\n\nControls\n\n\nlr-gw utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/gameandwatch/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Game & Watch"
        }, 
        {
            "location": "/Game-&-Watch/#emulator-lr-gw-experimental", 
            "text": "Note that this is experimental. It can be installed from the experimental menu of the  RetroPie Setup Script .", 
            "title": "Emulator: lr-gw (EXPERIMENTAL)"
        }, 
        {
            "location": "/Game-&-Watch/#roms", 
            "text": "Accepted File Extensions:  .mgw  Place your Game   Watch ROMs in  /home/pi/RetroPie/roms/gameandwatch  Games can be found at http://bot.libretro.com/assets/cores/Game%20and%20Watch/", 
            "title": "ROMS"
        }, 
        {
            "location": "/Game-&-Watch/#video-guide", 
            "text": "", 
            "title": "Video Guide"
        }, 
        {
            "location": "/Game-&-Watch/#controls", 
            "text": "lr-gw utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/gameandwatch/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/GemRB/", 
            "text": "GemRB is a portable open-source implementation of Bioware's Infinity Engine. It is an engine for Baldur's Gate, Icewind Dale and Planescape.\n\n\n\n\nEmulator \nGemRB\n\n\n  \n\n\nVideo Guide\n: https://www.youtube.com/watch?v=W3YsyRDc_Os  \n\n\nRoms\n\n\nYou need to have the original Baldur's Gate/ Icewind Dale/ or Planescape data in order to play. Place your game data in:\n\n\nBaldur's Gate 1\n\n\n/home/pi/RetroPie/roms/ports/baldurs1\n\n\n\n\nBaldur's Gate 2\n\n\n/home/pi/RetroPie/roms/ports/baldurs2\n\n\n\n\nIcewind 1\n\n\n/home/pi/RetroPie/roms/ports/icewind1\n\n\n\n\nIcewind 2\n\n\n/home/pi/RetroPie/roms/ports/icewind2\n\n\n\n\nPlanescape\n\n\n/home/pi/RetroPie/roms/ports/planescape\n\n\n\n\nConfigs\n\n\nDefault configs are automagically configured with the install script but you can tweak them further if you like.\n\n\nBaldur's Gate 1\n\n\n/opt/retropie/configs/ports/baldursgate1/GemRB.cfg\n\n\n\n\nBaldur's Gate 2\n\n\n/opt/retropie/configs/ports/baldursgate2/GemRB.cfg\n\n\n\n\nIcewind 1\n\n\n/opt/retropie/configs/ports/icewind1/GemRB.cfg\n\n\n\n\nIcewind 2\n\n\n/opt/retropie/configs/ports/icewind2/GemRB.cfg\n\n\n\n\nPlanescape\n\n\n/opt/retropie/configs/ports/planescape/GemRB.cfg\n\n\n\n\nExtra Configurations\n\n\nIf you are using demo data some configs need to be manually changed, see more info \nHERE", 
            "title": "GemRB"
        }, 
        {
            "location": "/GemRB/#emulator-gemrb", 
            "text": "Video Guide : https://www.youtube.com/watch?v=W3YsyRDc_Os", 
            "title": "Emulator GemRB"
        }, 
        {
            "location": "/GemRB/#roms", 
            "text": "You need to have the original Baldur's Gate/ Icewind Dale/ or Planescape data in order to play. Place your game data in:", 
            "title": "Roms"
        }, 
        {
            "location": "/GemRB/#baldurs-gate-1", 
            "text": "/home/pi/RetroPie/roms/ports/baldurs1", 
            "title": "Baldur's Gate 1"
        }, 
        {
            "location": "/GemRB/#baldurs-gate-2", 
            "text": "/home/pi/RetroPie/roms/ports/baldurs2", 
            "title": "Baldur's Gate 2"
        }, 
        {
            "location": "/GemRB/#icewind-1", 
            "text": "/home/pi/RetroPie/roms/ports/icewind1", 
            "title": "Icewind 1"
        }, 
        {
            "location": "/GemRB/#icewind-2", 
            "text": "/home/pi/RetroPie/roms/ports/icewind2", 
            "title": "Icewind 2"
        }, 
        {
            "location": "/GemRB/#planescape", 
            "text": "/home/pi/RetroPie/roms/ports/planescape", 
            "title": "Planescape"
        }, 
        {
            "location": "/GemRB/#configs", 
            "text": "Default configs are automagically configured with the install script but you can tweak them further if you like.", 
            "title": "Configs"
        }, 
        {
            "location": "/GemRB/#baldurs-gate-1_1", 
            "text": "/opt/retropie/configs/ports/baldursgate1/GemRB.cfg", 
            "title": "Baldur's Gate 1"
        }, 
        {
            "location": "/GemRB/#baldurs-gate-2_1", 
            "text": "/opt/retropie/configs/ports/baldursgate2/GemRB.cfg", 
            "title": "Baldur's Gate 2"
        }, 
        {
            "location": "/GemRB/#icewind-1_1", 
            "text": "/opt/retropie/configs/ports/icewind1/GemRB.cfg", 
            "title": "Icewind 1"
        }, 
        {
            "location": "/GemRB/#icewind-2_1", 
            "text": "/opt/retropie/configs/ports/icewind2/GemRB.cfg", 
            "title": "Icewind 2"
        }, 
        {
            "location": "/GemRB/#planescape_1", 
            "text": "/opt/retropie/configs/ports/planescape/GemRB.cfg", 
            "title": "Planescape"
        }, 
        {
            "location": "/GemRB/#extra-configurations", 
            "text": "If you are using demo data some configs need to be manually changed, see more info  HERE", 
            "title": "Extra Configurations"
        }, 
        {
            "location": "/Genesis-Megadrive/", 
            "text": "This console, known as the Genesis in North America and the Mega Drive everywhere else in the world, was released by Sega in 1988\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-picodrive\n\n\nmegadrive\n\n\n.smd .bin .md .iso\n\n\nnone\n\n\n/opt/retropie/configs/megadrive/retroarch.cfg\n\n\n\n\n\n\nlr-genesis-plus-gx\n\n\nmegadrive\n\n\n.smd .bin .md .iso\n\n\nnone\n\n\n/opt/retropie/configs/megadrive/retroarch.cfg\n\n\n\n\n\n\nDGen\n\n\nmegadrive\n\n\n.smd .bin .md .iso\n\n\nnone\n\n\n/opt/retropie/configs/megadrive/dgenrc\n\n\n\n\n\n\n\n\nEmulators: \nDGen\n, \nlr-picodrive\n, \nlr-genesis-plus-gx\n\n\nDGEN has the worst performance and can be tedious to configure controls, lr-picodrive seems to be the favourite for older Pi's, lr-genesis-plus-gx seems to be the favourite for the Pi 2.\n\n\nROMS\n\n\nAccepted File Extensions: \n.smd .bin .gen .md .sg .zip\n\n\nPlace your ROMS in either\n\n\n/home/pi/RetroPie/roms/megadrive\n\n\n\n\nor\n\n\n/home/pi/RetroPie/roms/genesis (symlinked to megadrive folder to remove confusion)\n\n\n\n\nControls\n\n\nThere are two methods for configuring controls- one for DGen and the other for lr-picodrive and lr-Genesis-Plus-GX.\n\n\nlr-picodrive and lr-genesis-plus-gx\n\n\nlr-picodrive and lr-genesis-plus-gx utilise RetroArch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/megadrive/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nConfiguring a 6 button controller\n\n\nFirst you need to tell retroarch to use 6 buttons, because the default is to use 3.\n\n\nlr-picodrive\n\n\nThere are two ways to achieve this, most people will want to use Option 1:\n\n\nOption 1 - RetroArch Menu\n\n\nLaunch a Megadrive game and go to the Retroarch menu (default mapping: \nSelect + X\n).\n\n\nGo to \nQuick Menu -\n Options\n and set the two input devices to \n6 button pad\n.\n\n\nExit the Retroarch menu.\n\n\nOnce you quit the game, the configuration will be saved within the \n/opt/retropie/configs/all/retroarch-core-options.cfg\n file. You do not need to edit this file.\n\n\nThese core options will also take affect on any other system which you may use lr-picodrive for (eg. Sega 32X, Sega CD).\n\n\nOption 2 - Config file edit\n\n\nIf you don't have access to the Quick Menu (due to misconfigured controls or some other reason), then edit the \n/opt/retropie/configs/all/retroarch-core-options.cfg\n file and add:\n\n\npicodrive_input1 = \n6 button pad\n\npicodrive_input2 = \n6 button pad\n\n\n\n\n\nlr-genesis-plus-gx\n\n\nThere are two ways to achieve this, most people will want to use Option 1:\n\n\nOption 1 - RetroArch Menu\n\n\nYou can save a Core Remap File which reloads every time the emulator is launched.\n\n\nLaunch a Megadrive game and go into the RetroArch menu (default mapping: \nSelect + X\n).\n\n\nGo to \nQuick Menu -\n Input Options\n and set the User 1 Device Type and User 2 Device Type to \nMD Joypad 6 Button\n.\n\n\nScroll down on the same page and select *\nSave Core Remap File\n.\n\n\nThis will save a core remap file (\n.rmp\n) to a folder called \"Genesis Plus GX\" in the \n/opt/retropie/configs/megadrive\n folder. By default this remap file will load every time the emulator is launched.\n\n\nOption 2 - Config file edit\n\n\nEdit the file \n/opt/retropie/configs/megadrive/retroarch.cfg\n and add:\n\n\ninput_libretro_device_p1 = \n513\n\ninput_libretro_device_p2 = \n513\n\n\n\n\n\nThis will set the controller type to a 6 button pad, and will reload this configuration every time the emulator is launched.\n\n\n3 Button Genesis/MegaDrive Controller\n\n\n\n\n6 Button Genesis/MegaDrive Wireless Controller\n\n\n\n\n6 Button Genesis/MegaDrive ArcadePad Controller\n\n\n\n\nDgen\n\n\nDGen uses a configuration file called dgenrc located in\n\n\n/opt/retropie/configs/megadrive/dgenrc\n\n\n\n\nTo set up an exit button:\nmodify this line to match your controller button\n\n\n# Quit DGen or switch to the next ROM on the command-line.\nkey_quit = escape\njoy_quit = joystick0-button12\n\n\n\n\nSwitching Emulation Station to the Genesis logo:\n\n\nIf you are from the United States it is likely that you had the Sega Genesis rather than the Sega Megadrive. If you want EmulationStation to show the genesis graphics instead of megadrive then you should create a file \n/opt/retropie/configs/all/platforms.cfg\n with the following contents (note this requires at least v4.1.6 of the RetroPie-Setup script).\n\n\nmegadrive_theme=\ngenesis\n\nmegadrive_platform=\ngenesis\n\n\n\n\n\nOnce this is done, please update any of the currently installed megadrive emulators from RetroPie-Setup and Emulation Station will now use the Genesis logo. Scraping from within Emulation Station should also return Genesis artwork.", 
            "title": "Genesis/Megadrive"
        }, 
        {
            "location": "/Genesis-Megadrive/#emulators-dgen-lr-picodrive-lr-genesis-plus-gx", 
            "text": "DGEN has the worst performance and can be tedious to configure controls, lr-picodrive seems to be the favourite for older Pi's, lr-genesis-plus-gx seems to be the favourite for the Pi 2.", 
            "title": "Emulators: DGen, lr-picodrive, lr-genesis-plus-gx"
        }, 
        {
            "location": "/Genesis-Megadrive/#roms", 
            "text": "Accepted File Extensions:  .smd .bin .gen .md .sg .zip  Place your ROMS in either  /home/pi/RetroPie/roms/megadrive  or  /home/pi/RetroPie/roms/genesis (symlinked to megadrive folder to remove confusion)", 
            "title": "ROMS"
        }, 
        {
            "location": "/Genesis-Megadrive/#controls", 
            "text": "There are two methods for configuring controls- one for DGen and the other for lr-picodrive and lr-Genesis-Plus-GX.", 
            "title": "Controls"
        }, 
        {
            "location": "/Genesis-Megadrive/#lr-picodrive-and-lr-genesis-plus-gx", 
            "text": "lr-picodrive and lr-genesis-plus-gx utilise RetroArch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/megadrive/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-picodrive and lr-genesis-plus-gx"
        }, 
        {
            "location": "/Genesis-Megadrive/#configuring-a-6-button-controller", 
            "text": "First you need to tell retroarch to use 6 buttons, because the default is to use 3.", 
            "title": "Configuring a 6 button controller"
        }, 
        {
            "location": "/Genesis-Megadrive/#lr-picodrive", 
            "text": "There are two ways to achieve this, most people will want to use Option 1:", 
            "title": "lr-picodrive"
        }, 
        {
            "location": "/Genesis-Megadrive/#option-1-retroarch-menu", 
            "text": "Launch a Megadrive game and go to the Retroarch menu (default mapping:  Select + X ).  Go to  Quick Menu -  Options  and set the two input devices to  6 button pad .  Exit the Retroarch menu.  Once you quit the game, the configuration will be saved within the  /opt/retropie/configs/all/retroarch-core-options.cfg  file. You do not need to edit this file.  These core options will also take affect on any other system which you may use lr-picodrive for (eg. Sega 32X, Sega CD).", 
            "title": "Option 1 - RetroArch Menu"
        }, 
        {
            "location": "/Genesis-Megadrive/#option-2-config-file-edit", 
            "text": "If you don't have access to the Quick Menu (due to misconfigured controls or some other reason), then edit the  /opt/retropie/configs/all/retroarch-core-options.cfg  file and add:  picodrive_input1 =  6 button pad \npicodrive_input2 =  6 button pad", 
            "title": "Option 2 - Config file edit"
        }, 
        {
            "location": "/Genesis-Megadrive/#lr-genesis-plus-gx", 
            "text": "There are two ways to achieve this, most people will want to use Option 1:", 
            "title": "lr-genesis-plus-gx"
        }, 
        {
            "location": "/Genesis-Megadrive/#option-1-retroarch-menu_1", 
            "text": "You can save a Core Remap File which reloads every time the emulator is launched.  Launch a Megadrive game and go into the RetroArch menu (default mapping:  Select + X ).  Go to  Quick Menu -  Input Options  and set the User 1 Device Type and User 2 Device Type to  MD Joypad 6 Button .  Scroll down on the same page and select * Save Core Remap File .  This will save a core remap file ( .rmp ) to a folder called \"Genesis Plus GX\" in the  /opt/retropie/configs/megadrive  folder. By default this remap file will load every time the emulator is launched.", 
            "title": "Option 1 - RetroArch Menu"
        }, 
        {
            "location": "/Genesis-Megadrive/#option-2-config-file-edit_1", 
            "text": "Edit the file  /opt/retropie/configs/megadrive/retroarch.cfg  and add:  input_libretro_device_p1 =  513 \ninput_libretro_device_p2 =  513   This will set the controller type to a 6 button pad, and will reload this configuration every time the emulator is launched.", 
            "title": "Option 2 - Config file edit"
        }, 
        {
            "location": "/Genesis-Megadrive/#3-button-genesismegadrive-controller", 
            "text": "", 
            "title": "3 Button Genesis/MegaDrive Controller"
        }, 
        {
            "location": "/Genesis-Megadrive/#6-button-genesismegadrive-wireless-controller", 
            "text": "", 
            "title": "6 Button Genesis/MegaDrive Wireless Controller"
        }, 
        {
            "location": "/Genesis-Megadrive/#6-button-genesismegadrive-arcadepad-controller", 
            "text": "", 
            "title": "6 Button Genesis/MegaDrive ArcadePad Controller"
        }, 
        {
            "location": "/Genesis-Megadrive/#dgen", 
            "text": "DGen uses a configuration file called dgenrc located in  /opt/retropie/configs/megadrive/dgenrc  To set up an exit button:\nmodify this line to match your controller button  # Quit DGen or switch to the next ROM on the command-line.\nkey_quit = escape\njoy_quit = joystick0-button12", 
            "title": "Dgen"
        }, 
        {
            "location": "/Genesis-Megadrive/#switching-emulation-station-to-the-genesis-logo", 
            "text": "If you are from the United States it is likely that you had the Sega Genesis rather than the Sega Megadrive. If you want EmulationStation to show the genesis graphics instead of megadrive then you should create a file  /opt/retropie/configs/all/platforms.cfg  with the following contents (note this requires at least v4.1.6 of the RetroPie-Setup script).  megadrive_theme= genesis \nmegadrive_platform= genesis   Once this is done, please update any of the currently installed megadrive emulators from RetroPie-Setup and Emulation Station will now use the Genesis logo. Scraping from within Emulation Station should also return Genesis artwork.", 
            "title": "Switching Emulation Station to the Genesis logo:"
        }, 
        {
            "location": "/Intellivision/", 
            "text": "The Intellivision is a home video game console released by Mattel in 1979\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\njzintv\n\n\nintellivision\n\n\n.int .bin\n\n\nexec.bin grom.bin\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \njzintv\n\n\nROMS\n\n\nAccepted File Extensions: \n.int .bin\n\n\nPlace your Intellivision ROMs in\n\n\n/home/pi/RetroPie/roms/intellivision\n\n\n\n\nBIOS\n\n\nThere are a few BIOS files for the Intellevision. The first two are the main ones you'll probably use.\n\n Executive ROM: \nexec.bin\n\n\n Graphics ROM: \ngrom.bin\n\n\n Entertainment Computer System ROM: Commonly named ECS.BIN. Required to play ECS games. \n\n Intellivoice ROM: Commonly named IVOICE.BIN. Required to play Intellivoice games. \n\n\nPlace your BIOS files in:\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nControls:\n\n\nGamepad Controls\n\n\nBy default, jzIntv maps the first (left) analog stick to the left controller's disc input. In addition, the first 9 buttons are mapped to the 3 action buttons as follows:\n\n\nButtons 0, 3, 6:  Top action buttons, left controller\nButtons 1, 4, 7:  Lower left action button, left controller\nButtons 2, 5, 8:  Lower left action button, left controller\n\n\n\njzIntv maps the first joystick's first hat's 8 directions to the numeric keypad on the right controller, making the hat usable in games such as Night Stalker and TRON Deadly Discs. [\nSource\n]\n\n\nIt is possible to remap these using a keyboard hack file. Instructions on creating these can be found \nHERE\n. Keys 0, Clear and Enter on the numeric keypad are not mapped by default so a keyboard hack file would be required to this.\n\n\nKeyboard Controls\n\n\nFunction/Special keys, all maps:\n    F1              Quit\n    F4              Break into debugger\n    F5              Switch to keymap 0 (default keymap)\n    F6              Switch to keymap 1 (left controller only for 1 player games)\n\n    F7              Switch to keymap 2 (ECS keyboard keymap)\n    F8              Shift to keymap 3 while held (command keys)\n    F9              Toggle fullscreen/windowed \n    F10             Toggle movie recording \n    F11             Take screen shot\n    F12             Reset emulator\n    Pause           Pause the emulator\n    PgUp            Increase volume\n    PgDn            Decrease volume\n\nNumeric Keypad, maps 0 and 1\n    1-9             Left controller 1 - 9\n    0               Left controller Clear\n    .               Left controller 0\n    Enter           Left controller Enter\n\nMain Keyboard, map 0.  (Map 1 just moves right controller mappings to left.)\n    0-9             Right controller 0 - 9\n    -               Right controller Clear\n    =               Right controller Enter\n    Left Shift      Right controller top action buttons\n    Left Alt        Right controller lower left action button\n    Left Control    Right controller lower right action button\n\n    Right Shift     Left controller top action buttons\n    Right Alt       Left controller lower left action button\n    Right Control   Left controller lower right action button\n\n    Up Arrow        Left controller disc up\n    Down Arrow      Left controller disc down\n    Left Arrow      Left controller disc left\n    Right Arrow     Left controller disc right\n\nFine-grain directional pad inputs:\n\n    U   I   O\n      \\ | /\n       \\|/ \n    J --+-- K      Left controller disc\n       /|\\\n      / | \\\n    N   M   , \n\n    W   E   R\n      \\ | /\n       \\|/ \n    S --+-- D      Right controller disc\n       /|\\\n      / | \\\n    Z   X   C\n\n\n\n\nMemory Map Config Files:\n\n\nIf a rom does not load leaving you with a black screen (and the files dump.cpu and dump.mem in your home folder upon exit), then you need a memory map config file. This is likely to be the case for titles from Atarisoft, Imagic or INTV Corp.\n\n\nFirst determine which config file your rom requires from this \nspreadsheet\n. \n\n\nNext download the config file from \nhere\n and rename it the same as the your rom. \n\n\nFor example, you are trying to get \natlantis.int\n to work. From the spreadsheet, you see that it takes memory map #7 so download \n7.cfg\n and rename it \natlantis.cfg\n. Place it in your roms folder and your rom should now work.\n\n\nFull details about using memory map config files can be found \nhere\n.", 
            "title": "Intellivision"
        }, 
        {
            "location": "/Intellivision/#emulator-jzintv", 
            "text": "", 
            "title": "Emulator: jzintv"
        }, 
        {
            "location": "/Intellivision/#roms", 
            "text": "Accepted File Extensions:  .int .bin  Place your Intellivision ROMs in  /home/pi/RetroPie/roms/intellivision", 
            "title": "ROMS"
        }, 
        {
            "location": "/Intellivision/#bios", 
            "text": "There are a few BIOS files for the Intellevision. The first two are the main ones you'll probably use.  Executive ROM:  exec.bin   Graphics ROM:  grom.bin   Entertainment Computer System ROM: Commonly named ECS.BIN. Required to play ECS games.   Intellivoice ROM: Commonly named IVOICE.BIN. Required to play Intellivoice games.   Place your BIOS files in:  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/Intellivision/#controls", 
            "text": "", 
            "title": "Controls:"
        }, 
        {
            "location": "/Intellivision/#gamepad-controls", 
            "text": "By default, jzIntv maps the first (left) analog stick to the left controller's disc input. In addition, the first 9 buttons are mapped to the 3 action buttons as follows: \nButtons 0, 3, 6:  Top action buttons, left controller\nButtons 1, 4, 7:  Lower left action button, left controller\nButtons 2, 5, 8:  Lower left action button, left controller  jzIntv maps the first joystick's first hat's 8 directions to the numeric keypad on the right controller, making the hat usable in games such as Night Stalker and TRON Deadly Discs. [ Source ]  It is possible to remap these using a keyboard hack file. Instructions on creating these can be found  HERE . Keys 0, Clear and Enter on the numeric keypad are not mapped by default so a keyboard hack file would be required to this.", 
            "title": "Gamepad Controls"
        }, 
        {
            "location": "/Intellivision/#keyboard-controls", 
            "text": "Function/Special keys, all maps:\n    F1              Quit\n    F4              Break into debugger\n    F5              Switch to keymap 0 (default keymap)\n    F6              Switch to keymap 1 (left controller only for 1 player games)\n\n    F7              Switch to keymap 2 (ECS keyboard keymap)\n    F8              Shift to keymap 3 while held (command keys)\n    F9              Toggle fullscreen/windowed \n    F10             Toggle movie recording \n    F11             Take screen shot\n    F12             Reset emulator\n    Pause           Pause the emulator\n    PgUp            Increase volume\n    PgDn            Decrease volume\n\nNumeric Keypad, maps 0 and 1\n    1-9             Left controller 1 - 9\n    0               Left controller Clear\n    .               Left controller 0\n    Enter           Left controller Enter\n\nMain Keyboard, map 0.  (Map 1 just moves right controller mappings to left.)\n    0-9             Right controller 0 - 9\n    -               Right controller Clear\n    =               Right controller Enter\n    Left Shift      Right controller top action buttons\n    Left Alt        Right controller lower left action button\n    Left Control    Right controller lower right action button\n\n    Right Shift     Left controller top action buttons\n    Right Alt       Left controller lower left action button\n    Right Control   Left controller lower right action button\n\n    Up Arrow        Left controller disc up\n    Down Arrow      Left controller disc down\n    Left Arrow      Left controller disc left\n    Right Arrow     Left controller disc right\n\nFine-grain directional pad inputs:\n\n    U   I   O\n      \\ | /\n       \\|/ \n    J --+-- K      Left controller disc\n       /|\\\n      / | \\\n    N   M   , \n\n    W   E   R\n      \\ | /\n       \\|/ \n    S --+-- D      Right controller disc\n       /|\\\n      / | \\\n    Z   X   C", 
            "title": "Keyboard Controls"
        }, 
        {
            "location": "/Intellivision/#memory-map-config-files", 
            "text": "If a rom does not load leaving you with a black screen (and the files dump.cpu and dump.mem in your home folder upon exit), then you need a memory map config file. This is likely to be the case for titles from Atarisoft, Imagic or INTV Corp.  First determine which config file your rom requires from this  spreadsheet .   Next download the config file from  here  and rename it the same as the your rom.   For example, you are trying to get  atlantis.int  to work. From the spreadsheet, you see that it takes memory map #7 so download  7.cfg  and rename it  atlantis.cfg . Place it in your roms folder and your rom should now work.  Full details about using memory map config files can be found  here .", 
            "title": "Memory Map Config Files:"
        }, 
        {
            "location": "/Love/", 
            "text": "L\u00f6ve is a 2d game engine programmed primarily in lua.\n\n\n\n\nEmulator \nL\u00f6ve\n (Experimental)\n\n\nIt only really works well on a Raspberry Pi 2. Games are programmed for different versions of L\u00f6ve. RetroPie uses Love 0.10.0 and so it is likely a lot of games will not work because they have not been updated for version 0.10.0\n\n\nROMS\n\n\nAccepted File Extensions: \n.love\n\n\nPlace your L\u00f6ve games in\n\n\n/home/pi/RetroPie/roms/love/\n\n\n\n\nNote that love games are basically .zip files with a .love extension instead of a .zip, so when building love files from repos, the files all need to be in the top level directory (especially main.lua)\n\n\nControls\n\n\nControls vary by game though most will need a keyboard. \nMari0\n (which is installed when you install L\u00f6ve) has some support for gamepads but you still need to use a keyboard to navigate the menus. \n\n\nFor display it is best to leave the video settings alone in the runcommand menu and just use the in game settings to scale it to 5.\n\n\nOther Games:\n\n\nYou can add the following scripts in the configure function of \n/home/pi/RetroPie-Setup/scriptmodules/ports/love.sh\n\n\nor you can just follow the links and download the .love files and place them into your ROM folders manually.\n\n\nMr. Rescue\n\n\n    # get mrrescue-1.02d.love (freeware game data)\n    if [[ ! -f \n$romdir/love/mrrescue-1.02d.love\n ]]; then\n        wget \nhttps://github.com/SimonLarsen/mrrescue/releases/download/v1.02d/mrrescue-1.02e.love\n -O \n$romdir/love/mrrescue-1.02e.love\n\n        chown $user:$user \n$romdir/love/mrrescue-1.02e.love\n\n    fi\n\n\n\n\nSienna\n\n\n    # get sienna-1.0c.love (freeware game data)\n    if [[ ! -f \n$romdir/love/sienna-1.0c.love\n ]]; then\n        wget \nhttps://github.com/SimonLarsen/sienna/releases/download/v1.0c/sienna-1.0c.love\n -O \n$romdir/love/sienna-1.0c.love\n\n        chown $user:$user \n$romdir/love/sienna-1.0c.love\n\n    fi\n\n\n\n\n90 Second Portraits\n\n\n    # get 90secondportraits-1.01b.love (freeware game data)\n    if [[ ! -f \n$romdir/love/90secondportraits-1.01b.love\n ]]; then\n        wget \nhttps://github.com/SimonLarsen/90-Second-Portraits/releases/download/1.01b/90secondportraits-1.01b.love\n -O \n$romdir/love/90secondportraits-1.01b.love\n\n        chown $user:$user \n$romdir/love/90secondportraits-1.01b.love\n\n     fi\n\n\n\n\nIt can be run with\n\n\ncd RetroPie-Setup\nsudo ./retropie_packages.sh love configure", 
            "title": "Love"
        }, 
        {
            "location": "/Love/#emulator-love-experimental", 
            "text": "It only really works well on a Raspberry Pi 2. Games are programmed for different versions of L\u00f6ve. RetroPie uses Love 0.10.0 and so it is likely a lot of games will not work because they have not been updated for version 0.10.0", 
            "title": "Emulator L\u00f6ve (Experimental)"
        }, 
        {
            "location": "/Love/#roms", 
            "text": "Accepted File Extensions:  .love  Place your L\u00f6ve games in  /home/pi/RetroPie/roms/love/  Note that love games are basically .zip files with a .love extension instead of a .zip, so when building love files from repos, the files all need to be in the top level directory (especially main.lua)", 
            "title": "ROMS"
        }, 
        {
            "location": "/Love/#controls", 
            "text": "Controls vary by game though most will need a keyboard.  Mari0  (which is installed when you install L\u00f6ve) has some support for gamepads but you still need to use a keyboard to navigate the menus.   For display it is best to leave the video settings alone in the runcommand menu and just use the in game settings to scale it to 5.", 
            "title": "Controls"
        }, 
        {
            "location": "/Love/#other-games", 
            "text": "You can add the following scripts in the configure function of  /home/pi/RetroPie-Setup/scriptmodules/ports/love.sh  or you can just follow the links and download the .love files and place them into your ROM folders manually.  Mr. Rescue      # get mrrescue-1.02d.love (freeware game data)\n    if [[ ! -f  $romdir/love/mrrescue-1.02d.love  ]]; then\n        wget  https://github.com/SimonLarsen/mrrescue/releases/download/v1.02d/mrrescue-1.02e.love  -O  $romdir/love/mrrescue-1.02e.love \n        chown $user:$user  $romdir/love/mrrescue-1.02e.love \n    fi  Sienna      # get sienna-1.0c.love (freeware game data)\n    if [[ ! -f  $romdir/love/sienna-1.0c.love  ]]; then\n        wget  https://github.com/SimonLarsen/sienna/releases/download/v1.0c/sienna-1.0c.love  -O  $romdir/love/sienna-1.0c.love \n        chown $user:$user  $romdir/love/sienna-1.0c.love \n    fi  90 Second Portraits      # get 90secondportraits-1.01b.love (freeware game data)\n    if [[ ! -f  $romdir/love/90secondportraits-1.01b.love  ]]; then\n        wget  https://github.com/SimonLarsen/90-Second-Portraits/releases/download/1.01b/90secondportraits-1.01b.love  -O  $romdir/love/90secondportraits-1.01b.love \n        chown $user:$user  $romdir/love/90secondportraits-1.01b.love \n     fi  It can be run with  cd RetroPie-Setup\nsudo ./retropie_packages.sh love configure", 
            "title": "Other Games:"
        }, 
        {
            "location": "/lr-fbalpha/", 
            "text": "Please check [[FinalBurn-Alpha]] for for basic information about controls and managing ROMs - this page is for specific information about the lr-fbalpha emulator's features.\n\n\nlr-fbalpha is a popular choice for the Raspberry Pi 2 and up, as it supports the latest FBA romset (v0.2.97.38), and a broad set of features. FBA also should always outperform MAME in the games they both support, as it is tailored for speed, rather than accuracy. Also, it is a libretro core, so enjoys all the benefits of that: centralised controller configurations, many customisation options, netplay, shader/overlay support, etc.\n\n\nSystem menu\n\n\nBy default, if you hold the Start button for a few seconds, the system menu appears. Here you can set various game options, typically including 'Free Play' modes, regional settings, etc. Settings are saved in .fs files in the ROMS directory for the system in use, and are loaded automatically on next use.\n\n\nDipswitches\n\n\nlr-fbalpha exposes all the dipswitch options of any given game to libretro, allowing you to adjust them via the RetroArch GUI. Hold hotkey (by default, Select) \n X (the top button) to access the GUI, and then \nQuick Menu\n \n \nOptions\n. You should be presented by a menu where you can enable/disable the various dipswitches.\n\n\nThe dipswitches available will vary from game-to-game. Any changes made will be stored in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nHigh scores\n\n\nlr-fbalpha will attempt to keep a permanent record of any high scores you set, but some games will not save these by default. There is a supplementary file that you can transfer to your Pi that will enable high score saving for more games, called \nhiscore.dat\n. This file can be downloaded from http://highscore.mameworld.info/ - you need the one labeled \"\nold format hiscore.dat (pre mame v0174)\n\". Transfer it to:\n\n\n/home/pi/RetroPie/roms/fba/\n\n\n\n\nor, if you're using the arcade folder:\n\n\n/home/pi/RetroPie/roms/arcade/\n\n\n\n\nWhen high scores are saved, they are kept in the same directory as \ngamename.hi\n files.\n\n\nButton rebinding\n\n\nlr-fbalpha supports a useful feature where you can rebind the keys for individual games, without impacting the internal libretro hotkey macros (select \n R = quicksave, etc). These rebinding options are accessed and saved in the same way as the dipswitches above.\n\n\nSamples\n\n\nSome sound effects in a few older (typically pre-1986) arcade games are difficult/impossible to emulate. Instead, audio clips of these effects can be downloaded and automatically played at the appropriate times. FBA additionally supports the use of some higher quality samples such as the CD audio rips from the console version of Donpachi. Samples are often included in a romset, or you can find some at http://www.progettosnaps.net/samples/. Place them into:\n\n\n/home/pi/RetroPie/BIOS/fba/samples/\n\n\n\n\nNeo Geo UNIBIOS\n\n\nFor Neo Geo games, you may want to use the \nUNIVERSE BIOS/UNIBIOS\n - an advanced Neo Geo bios that allows region selection, cheats, dip-switch control, and more. To activate, start a Neo Geo game, hold hotkey (by default, Select) \n X (the top button) to access the GUI, and then \nQuick Menu\n \n \nOptions\n \n Change \nNeo Geo mode\n to \nUNIBIOS\n.\n\n\nNote that this will automatically use the latest version of the UNIBIOS avaialble in your \nneogeo.zip\n. If you want to select a specific version, use the \nBIOS\n core option, however note that this setting applies per-game, rather than system-wide, like the \nNeo Geo mode\n setting.\n\n\nUse the \nB\n button to go back to the \nQuick Menu\n and select \nRestart Content\n then \nResume Content\n. You should see the Unibios boot screen before the usual \"Max 330 Mega Pro-Gear Spec\" screen.\n\n\nInstructions on how to use the UNIBIOS can be found here: [[Neo-Geo#using-the-universe-bios-unibios]]\n\n\nFeature requests\n\n\nPlease use the \nforum\n for all support issues, but feature requests can be made on the \nGitHub page\n.", 
            "title": "lr-fbalpha"
        }, 
        {
            "location": "/lr-fbalpha/#system-menu", 
            "text": "By default, if you hold the Start button for a few seconds, the system menu appears. Here you can set various game options, typically including 'Free Play' modes, regional settings, etc. Settings are saved in .fs files in the ROMS directory for the system in use, and are loaded automatically on next use.", 
            "title": "System menu"
        }, 
        {
            "location": "/lr-fbalpha/#dipswitches", 
            "text": "lr-fbalpha exposes all the dipswitch options of any given game to libretro, allowing you to adjust them via the RetroArch GUI. Hold hotkey (by default, Select)   X (the top button) to access the GUI, and then  Quick Menu     Options . You should be presented by a menu where you can enable/disable the various dipswitches.  The dipswitches available will vary from game-to-game. Any changes made will be stored in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/", 
            "title": "Dipswitches"
        }, 
        {
            "location": "/lr-fbalpha/#high-scores", 
            "text": "lr-fbalpha will attempt to keep a permanent record of any high scores you set, but some games will not save these by default. There is a supplementary file that you can transfer to your Pi that will enable high score saving for more games, called  hiscore.dat . This file can be downloaded from http://highscore.mameworld.info/ - you need the one labeled \" old format hiscore.dat (pre mame v0174) \". Transfer it to:  /home/pi/RetroPie/roms/fba/  or, if you're using the arcade folder:  /home/pi/RetroPie/roms/arcade/  When high scores are saved, they are kept in the same directory as  gamename.hi  files.", 
            "title": "High scores"
        }, 
        {
            "location": "/lr-fbalpha/#button-rebinding", 
            "text": "lr-fbalpha supports a useful feature where you can rebind the keys for individual games, without impacting the internal libretro hotkey macros (select   R = quicksave, etc). These rebinding options are accessed and saved in the same way as the dipswitches above.", 
            "title": "Button rebinding"
        }, 
        {
            "location": "/lr-fbalpha/#samples", 
            "text": "Some sound effects in a few older (typically pre-1986) arcade games are difficult/impossible to emulate. Instead, audio clips of these effects can be downloaded and automatically played at the appropriate times. FBA additionally supports the use of some higher quality samples such as the CD audio rips from the console version of Donpachi. Samples are often included in a romset, or you can find some at http://www.progettosnaps.net/samples/. Place them into:  /home/pi/RetroPie/BIOS/fba/samples/", 
            "title": "Samples"
        }, 
        {
            "location": "/lr-fbalpha/#neo-geo-unibios", 
            "text": "For Neo Geo games, you may want to use the  UNIVERSE BIOS/UNIBIOS  - an advanced Neo Geo bios that allows region selection, cheats, dip-switch control, and more. To activate, start a Neo Geo game, hold hotkey (by default, Select)   X (the top button) to access the GUI, and then  Quick Menu     Options    Change  Neo Geo mode  to  UNIBIOS .  Note that this will automatically use the latest version of the UNIBIOS avaialble in your  neogeo.zip . If you want to select a specific version, use the  BIOS  core option, however note that this setting applies per-game, rather than system-wide, like the  Neo Geo mode  setting.  Use the  B  button to go back to the  Quick Menu  and select  Restart Content  then  Resume Content . You should see the Unibios boot screen before the usual \"Max 330 Mega Pro-Gear Spec\" screen.  Instructions on how to use the UNIBIOS can be found here: [[Neo-Geo#using-the-universe-bios-unibios]]", 
            "title": "Neo Geo UNIBIOS"
        }, 
        {
            "location": "/lr-fbalpha/#feature-requests", 
            "text": "Please use the  forum  for all support issues, but feature requests can be made on the  GitHub page .", 
            "title": "Feature requests"
        }, 
        {
            "location": "/lr-mame2003/", 
            "text": "Please check the \nMAME documentation\n for for basic information about controls and managing ROMs - this page is for specific information about the mame2003 emulator's features.\n\n\n\n\nWARNING:\n As of 2016-05-03 (2016-05-05 for binary installs), the directory structure that lr-mame2003 uses has been updated to better match MAME norms. Thus, if you upgrade from a previous version, various directories will need moving/updating to ensure existing MAME configurations and save files are used. Please see \nthis github PR\n for full details on what has changed.\n\n\n\n\nlr-mame2003 is a popular choice for the Raspberry Pi 2 and up, as it combines a large romset (MAME 0.78) playing host to most 2D-era arcade games that people would be interested in, and a broad set of features. It also is still a relatively old MAME core, which is actually a good thing for lower-end hardware such as the Raspberry Pis, as later MAME cores feature increasingly accurate emulation which requires greater CPU power. Also, it is a libretro core, so enjoys all the benefits of that: centralised controller configurations, many customisation options, netplay, shader/overlay support, etc.\n\n\nMAME menu\n\n\nTo access the MAME internal menu, press the 'TAB' key.\n\n\nWhilst lr-mame2003 is a libretro emulator and benefits from automatic controller configuration, sometimes you may still want to rebind how it internally deals with inputs. For example, the default control setup might make sense in one game, but in another they don't. In which case, you can use the 'Input (this game)' option to rebind keys for a single game, generating a .cfg file in:\n\n\n/home/pi/RetroPie/roms/mame-libretro/mame2003/cfg/\n\n\n\n\nor, if you're using the arcade folder:\n\n\n/home/pi/RetroPie/roms/arcade/mame2003/cfg/\n\n\n\n\nIf you rebind global inputs ('Input (general)'), it will update a file in the same directory called \ndefault.cfg\n.\n\n\nThese files are not human-readable, but can be safely deleted if you get into a mess and wish to return to the default configuration.\n\n\nService menu\n\n\nTo access the MAME service, press the 'F2' key.\n\n\nlr-mame2003 has the useful ability to access games' internal service menus to set permanent game options. This allows you to, for example, configure a game to be 'free play' (no need to insert coins). After changing options in the service mode, the game's internal memory will be stored to an .nv file in:\n\n\n/home/pi/RetroPie/roms/mame-libretro/mame2003/nvram/\n\n\n\n\nor, if you're using the arcade folder:\n\n\n/home/pi/RetroPie/roms/arcade/mame2003/nvram/\n\n\n\n\nDip-switches\n\n\nSimilarly to the \nService menu\n, many arcade games had hardware switches for arcade owners to modify certain parameters. These can be adjust by pressing the 'TAB' key to access the \nMAME menu\n, and select the '\nDip Switches\n' option. Here you can turn them on/off.\n\n\nHigh scores\n\n\nlr-mame2003 will attempt to keep a permanent record of any high scores you set, but some games will not save these by default. There is a supplementary file that you can transfer to your Pi that will enable high score saving for more games, called \nhiscore.dat\n. This file can be downloaded from http://highscore.mameworld.info/ - you need the one labeled \"\nold format hiscore.dat (pre mame v0174)\n\". Transfer it to:\n\n\n/home/pi/RetroPie/BIOS/mame2003/\n\n\n\n\nWhen high scores are saved, they are kept in:\n\n\n/home/pi/RetroPie/roms/mame-libretro/mame2003/hi/\n\n\n\n\nor, if you're using the arcade folder:\n\n\n/home/pi/RetroPie/roms/arcade/mame2003/hi/\n\n\n\n\nCheats\n\n\nlr-mame2003 supports the MAME cheat engine, allowing you to use the 'TAB' menu to enable various in-game cheats. To active these, there is a supplementary file that you need to transfer to your Pi, called \ncheat.dat\n. This file can be downloaded from http://cheat.retrogames.com/mame_downloads.htm. You need the version of the file that is equal-to or greater-than the MAME version in question, which in our case is 0.78, so the file needed is \nCheat File for MAME 0.81 (Release Date: 21st April 2004)\n. Extract \ncheat.dat\n from this .zip and place in:\n\n\n/home/pi/RetroPie/BIOS/mame2003/\n\n\n\n\nFurther to this, the 'enabled cheats' core option needs to be turned on via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-cheats = \nenabled\n\n\n\n\n\nSamples\n\n\nSome sound effects in a few older (typically pre-1986) arcade games are difficult/impossible to emulate. Instead, audio clips of these effects can be downloaded and automatically played at the appropriate times. To do this, download the sample files you require (eg from http://www.progettosnaps.net/samples/) and place the individual audio files into a .zip file matching the ROM's title (eg \ninvaders.zip\n) or into a folder matching the filename of the ROM (eg \n/invaders/\n) into the following location:\n\n\n/home/pi/RetroPie/BIOS/mame2003/samples/\n\n\n\n\nSample rate\n\n\nYou can adjust the sample rate for \nall\n audio. Lowering it from the default of 48000 KHz may increase performance, at the cost of audio fidelity. It can be controlled via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-sample_rate = \n48000\n\n\n\n\n\nThe valid possibilities are 8000, 11025, 22050, 44100 and 48000.\n\n\nNag-screen\n\n\nThe copyright warning should be hidden by default, but can be controlled via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-skip_disclaimer = \nenabled\n\n\n\n\n\nSkip warnings screen\n\n\nGames that feature incomplete emulation, or other side-effects will have a warning screen detailing these flaws similar to the 'nag screen' mentioned above. It is recommended to leave this screen visible to understand why a game may have such issues, but it can be controlled via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-skip_warnings = \nenabled\n\n\n\n\n\nMouse/Trackball/Analog Controller support\n\n\nBy default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick. Lightgun games are supported by either. The left and right mouse buttons can be bound to fire/etc using the \nMAME menu\n.\n\n\nPointer/Trackpad/Touchscreen support\n\n\nAbsolute pointer devices are supported, but need to be turned on via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-mouse_device = \npointer\n\n\n\n\n\nNOTE:\n This will disable \nMouse support\n.\n\n\n2 player dial/spinner devices\n\n\nSome (all?) 2 player spinner/dial devices are represented as 1 device with 2 axes. lr-mame2003 can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-dialsharexy = \nenabled\n\n\n\n\n\nDual stick games\n\n\nThe right analog stick can now be used a second joystick. This is enabled by default, via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-rstick_to_btns = \nenabled\n\n\n\n\n\nTATE mode\n\n\nFor users who have a rotatable display, this mode shows vertical games (e.g. Pac-Man, Centipede, Galaga, etc) at their original aspect ratio, and will display along the length of the screen with the right configuration. This is disabled by default, but can be enabled via a setting in the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\nmame2003-tate_mode = \nenabled\n\n\n\n\n\nIn addition to this, you will want to stop rotating the games and instead show them in along the length of the screen, \nvideo_allow_rotate\n in mame-libretro/arcade to false via the [[Configuration Editor]].\n\n\nSave states\n\n\nBeyond \nHigh scores\n, lr-mame2003 supports save states through the \nusual Retroarch hotkeys\n. However, save state support has to be implemented per-driver, so they won't work with all games.\n\n\nFeature requests\n\n\nPlease use the \nforum\n for all support issues, but feature requests can be made on the \nGitHub page\n.", 
            "title": "lr-mame2003"
        }, 
        {
            "location": "/lr-mame2003/#mame-menu", 
            "text": "To access the MAME internal menu, press the 'TAB' key.  Whilst lr-mame2003 is a libretro emulator and benefits from automatic controller configuration, sometimes you may still want to rebind how it internally deals with inputs. For example, the default control setup might make sense in one game, but in another they don't. In which case, you can use the 'Input (this game)' option to rebind keys for a single game, generating a .cfg file in:  /home/pi/RetroPie/roms/mame-libretro/mame2003/cfg/  or, if you're using the arcade folder:  /home/pi/RetroPie/roms/arcade/mame2003/cfg/  If you rebind global inputs ('Input (general)'), it will update a file in the same directory called  default.cfg .  These files are not human-readable, but can be safely deleted if you get into a mess and wish to return to the default configuration.", 
            "title": "MAME menu"
        }, 
        {
            "location": "/lr-mame2003/#service-menu", 
            "text": "To access the MAME service, press the 'F2' key.  lr-mame2003 has the useful ability to access games' internal service menus to set permanent game options. This allows you to, for example, configure a game to be 'free play' (no need to insert coins). After changing options in the service mode, the game's internal memory will be stored to an .nv file in:  /home/pi/RetroPie/roms/mame-libretro/mame2003/nvram/  or, if you're using the arcade folder:  /home/pi/RetroPie/roms/arcade/mame2003/nvram/", 
            "title": "Service menu"
        }, 
        {
            "location": "/lr-mame2003/#dip-switches", 
            "text": "Similarly to the  Service menu , many arcade games had hardware switches for arcade owners to modify certain parameters. These can be adjust by pressing the 'TAB' key to access the  MAME menu , and select the ' Dip Switches ' option. Here you can turn them on/off.", 
            "title": "Dip-switches"
        }, 
        {
            "location": "/lr-mame2003/#high-scores", 
            "text": "lr-mame2003 will attempt to keep a permanent record of any high scores you set, but some games will not save these by default. There is a supplementary file that you can transfer to your Pi that will enable high score saving for more games, called  hiscore.dat . This file can be downloaded from http://highscore.mameworld.info/ - you need the one labeled \" old format hiscore.dat (pre mame v0174) \". Transfer it to:  /home/pi/RetroPie/BIOS/mame2003/  When high scores are saved, they are kept in:  /home/pi/RetroPie/roms/mame-libretro/mame2003/hi/  or, if you're using the arcade folder:  /home/pi/RetroPie/roms/arcade/mame2003/hi/", 
            "title": "High scores"
        }, 
        {
            "location": "/lr-mame2003/#cheats", 
            "text": "lr-mame2003 supports the MAME cheat engine, allowing you to use the 'TAB' menu to enable various in-game cheats. To active these, there is a supplementary file that you need to transfer to your Pi, called  cheat.dat . This file can be downloaded from http://cheat.retrogames.com/mame_downloads.htm. You need the version of the file that is equal-to or greater-than the MAME version in question, which in our case is 0.78, so the file needed is  Cheat File for MAME 0.81 (Release Date: 21st April 2004) . Extract  cheat.dat  from this .zip and place in:  /home/pi/RetroPie/BIOS/mame2003/  Further to this, the 'enabled cheats' core option needs to be turned on via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-cheats =  enabled", 
            "title": "Cheats"
        }, 
        {
            "location": "/lr-mame2003/#samples", 
            "text": "Some sound effects in a few older (typically pre-1986) arcade games are difficult/impossible to emulate. Instead, audio clips of these effects can be downloaded and automatically played at the appropriate times. To do this, download the sample files you require (eg from http://www.progettosnaps.net/samples/) and place the individual audio files into a .zip file matching the ROM's title (eg  invaders.zip ) or into a folder matching the filename of the ROM (eg  /invaders/ ) into the following location:  /home/pi/RetroPie/BIOS/mame2003/samples/", 
            "title": "Samples"
        }, 
        {
            "location": "/lr-mame2003/#sample-rate", 
            "text": "You can adjust the sample rate for  all  audio. Lowering it from the default of 48000 KHz may increase performance, at the cost of audio fidelity. It can be controlled via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-sample_rate =  48000   The valid possibilities are 8000, 11025, 22050, 44100 and 48000.", 
            "title": "Sample rate"
        }, 
        {
            "location": "/lr-mame2003/#nag-screen", 
            "text": "The copyright warning should be hidden by default, but can be controlled via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-skip_disclaimer =  enabled", 
            "title": "Nag-screen"
        }, 
        {
            "location": "/lr-mame2003/#skip-warnings-screen", 
            "text": "Games that feature incomplete emulation, or other side-effects will have a warning screen detailing these flaws similar to the 'nag screen' mentioned above. It is recommended to leave this screen visible to understand why a game may have such issues, but it can be controlled via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-skip_warnings =  enabled", 
            "title": "Skip warnings screen"
        }, 
        {
            "location": "/lr-mame2003/#mousetrackballanalog-controller-support", 
            "text": "By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick. Lightgun games are supported by either. The left and right mouse buttons can be bound to fire/etc using the  MAME menu .", 
            "title": "Mouse/Trackball/Analog Controller support"
        }, 
        {
            "location": "/lr-mame2003/#pointertrackpadtouchscreen-support", 
            "text": "Absolute pointer devices are supported, but need to be turned on via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-mouse_device =  pointer   NOTE:  This will disable  Mouse support .", 
            "title": "Pointer/Trackpad/Touchscreen support"
        }, 
        {
            "location": "/lr-mame2003/#2-player-dialspinner-devices", 
            "text": "Some (all?) 2 player spinner/dial devices are represented as 1 device with 2 axes. lr-mame2003 can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-dialsharexy =  enabled", 
            "title": "2 player dial/spinner devices"
        }, 
        {
            "location": "/lr-mame2003/#dual-stick-games", 
            "text": "The right analog stick can now be used a second joystick. This is enabled by default, via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-rstick_to_btns =  enabled", 
            "title": "Dual stick games"
        }, 
        {
            "location": "/lr-mame2003/#tate-mode", 
            "text": "For users who have a rotatable display, this mode shows vertical games (e.g. Pac-Man, Centipede, Galaga, etc) at their original aspect ratio, and will display along the length of the screen with the right configuration. This is disabled by default, but can be enabled via a setting in the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  mame2003-tate_mode =  enabled   In addition to this, you will want to stop rotating the games and instead show them in along the length of the screen,  video_allow_rotate  in mame-libretro/arcade to false via the [[Configuration Editor]].", 
            "title": "TATE mode"
        }, 
        {
            "location": "/lr-mame2003/#save-states", 
            "text": "Beyond  High scores , lr-mame2003 supports save states through the  usual Retroarch hotkeys . However, save state support has to be implemented per-driver, so they won't work with all games.", 
            "title": "Save states"
        }, 
        {
            "location": "/lr-mame2003/#feature-requests", 
            "text": "Please use the  forum  for all support issues, but feature requests can be made on the  GitHub page .", 
            "title": "Feature requests"
        }, 
        {
            "location": "/Macintosh/", 
            "text": "The Apple Macintosh, later renamed the Macintosh 128K, was a personal computer released in 1984.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nBasiliskII\n\n\nmacintosh\n\n\n.img .rom\n\n\nmac.rom, disk.img\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nBasiliskII\n\n\nROMS\n\n\nAccepted File Extensions: \n.img .rom  (.dsk?, .sit?)\n\n\nPlace your Macintosh ROMs in\n\n\n/home/pi/RetroPie/roms/macintosh\n\n\n\n\nBIOS\n\n\nTo start up your mac you need two main files: \n\n\nmac.rom\n (can be renamed from PERFORMA.ROM)\n\n\ndisk.img\n (can be renamed from MacStartup.img)\n\n\nYou will also place these files in\n\n\n/home/pi/RetroPie/roms/macintosh\n\n\n\n\nFor more details see the forum post at http://blog.petrockblock.com/forums/topic/installing-basiliskii-an-early-macintosh-emulator/ and the links therein for detailed instructions about how to set up Basilisk II.\n\n\nThere is also detailed information along with roms and a startup disk image at http://www.redundantrobot.com/#/sheepshaver .\n\n\nIf your \ndisk.img\n file (from MacStartup.img) only has a few MB of free space on it while running the emulator, you must create a new larger one if you want more free space. Since the disk setup GUI is not included in RetroPie's version of Basilisk, you must install Basilisk on your PC to create a larger image and copy your disk.img file to it. Similar instructions can be found at\nhttp://www.emaculation.com/forum/viewtopic.php?f=6\nt=8068\n\n\nOnce you have a working disk image large enough to install other software on, you can access other install disk images from the \"Unix\" icon on the Mac desktop which can access the file system of the Raspberry Pi.\n\n\nControls\n\n\na keyboard and a mouse\n\n\nCtrl + Escape will exit the emulator", 
            "title": "Macintosh"
        }, 
        {
            "location": "/Macintosh/#emulator-basiliskii", 
            "text": "", 
            "title": "Emulator: BasiliskII"
        }, 
        {
            "location": "/Macintosh/#roms", 
            "text": "Accepted File Extensions:  .img .rom  (.dsk?, .sit?)  Place your Macintosh ROMs in  /home/pi/RetroPie/roms/macintosh", 
            "title": "ROMS"
        }, 
        {
            "location": "/Macintosh/#bios", 
            "text": "To start up your mac you need two main files:   mac.rom  (can be renamed from PERFORMA.ROM)  disk.img  (can be renamed from MacStartup.img)  You will also place these files in  /home/pi/RetroPie/roms/macintosh  For more details see the forum post at http://blog.petrockblock.com/forums/topic/installing-basiliskii-an-early-macintosh-emulator/ and the links therein for detailed instructions about how to set up Basilisk II.  There is also detailed information along with roms and a startup disk image at http://www.redundantrobot.com/#/sheepshaver .  If your  disk.img  file (from MacStartup.img) only has a few MB of free space on it while running the emulator, you must create a new larger one if you want more free space. Since the disk setup GUI is not included in RetroPie's version of Basilisk, you must install Basilisk on your PC to create a larger image and copy your disk.img file to it. Similar instructions can be found at\nhttp://www.emaculation.com/forum/viewtopic.php?f=6 t=8068  Once you have a working disk image large enough to install other software on, you can access other install disk images from the \"Unix\" icon on the Mac desktop which can access the file system of the Raspberry Pi.", 
            "title": "BIOS"
        }, 
        {
            "location": "/Macintosh/#controls", 
            "text": "a keyboard and a mouse  Ctrl + Escape will exit the emulator", 
            "title": "Controls"
        }, 
        {
            "location": "/MAME/", 
            "text": "MAME stands for Multiple Arcade Machine Emulator. MAME can emulate thousands of games that otherwise would have been lost in the ash-heaps of history.\n\n\nSee Also: [[FB Alpha|FinalBurn-Alpha]], [[Neo Geo]]\n\n\n\n\nThere are a variety of arcade emulator versions available in RetroPie. There are significant differences in performance, compatibility, and configuration between them. If you're getting started with an arcade emulation project, begin by reading \nManaging Arcade ROMs\n.\n\n\nThis page is a resource for additional details on RetroPie's MAME emulators including configuration paths, controls, and the ROM sets which each emulator requires.\n\n\nAll Arcade ROMS Compatibility List\n feel free to contribute to the list.\n\n\n\n\n\n\n\n\nEmulator\n\n\nROM Folder\n\n\nRequired ROM Set Version\n\n\nController Configuration\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmame4all-pi\n\n\narcade \nor\n mame-mame4all\n\n\nMAME 0.37b5\n\n\n/opt/retropie/configs/mame-mame4all/cfg/default.cfg\n\n\n\n\n\n\n\n\n\n\nlr-imame4all\n\n\narcade \nor\n mame-mame4all\n\n\nMAME 0.37b5\n\n\n/opt/retropie/configs/arcade/retroarch.cfg, \nor\n /opt/retropie/configs/mame-mame4all/retroarch.cfg\n\n\n\n\n\n\n\n\n\n\nlr-mame2003\n\n\narcade \nor\n mame-libretro\n\n\nMAME 0.78\n\n\n/opt/retropie/configs/arcade/retroarch.cfg, \nor\n /opt/retropie/configs/mame-libretro/retroarch.cfg\n\n\n\n\n\n\n\n\n\n\nlr-mame2010\n\n\narcade \nor\n mame-libretro\n\n\nMAME 0.139\n\n\n/opt/retropie/configs/arcade/retroarch.cfg, \nor\n /opt/retropie/configs/mame-libretro/retroarch.cfg\n\n\n\n\n\n\n\n\n\n\nAdvanceMAME 0.94\n\n\narcade \nor\n mame-advmame\n\n\nMAME 0.94\n\n\n/opt/retropie/configs/mame-advmame/advmame-0.94.0.rc\n\n\n\n\n\n\n\n\n\n\nAdvanceMAME 1.4\n\n\narcade \nor\n mame-advmame\n\n\nMAME 0.106\n\n\n/opt/retropie/configs/mame-advmame/advmame-1.4.rc\n\n\n\n\n\n\n\n\n\n\n\n\nArcade ROM paths\n\n\nIn RetroPie 3.0.0 some emulators share directories, so you need to choose which FBA, NeoGeo and mame4all version you want. So you can have one zipped ROMset for each of these (mame4all, FBA, NeoGeo, advmame) To avoid having several EmulationStation menus for different arcade emulators, all arcade-based ROMs can be placed in the \narcade\n ROM folder, but you will have to specify which emulator each will use from the \nRuncommand Menu\n\n\nEmulators\n\n\nNote: These details are as per the default installed binaries on the RetroPie 3.0.0 image.\n\n\n\n\nmame4all-pi on sourceforge\n\n\nRoms Dir: /home/pi/RetroPie/roms/mame-mame4all\nBinary Dir: /opt/retropie/emulators/mame4all\nConfig Dir: /opt/retropie/configs/mame-mame4all\n\n\n\n\nMAME Version\n: 0.37b5 (July 2000)\n\n\nActive Sets: 2241\n\n\n BIOS: 1\n\n CHDs: 0\n* Samples: 35\n\n\nMAME 0.37b5 DAT File\n: \nmame4all-037b5-RetroPie-260.zip\n\n\nMAME 0.37b5 DAT File\n: \nmame4all-no-clones-no-neogeo\n (no clones, no neogeo)\n\n\nMAME4ALL-PI Compatibility List\n feel free to contribute to the list.\n\n\nControls\n\n\nWhile in a game press Tab to open the menu to set up controls. The MAME4ALL tab menu configuration is stored in:\n\n\n/opt/retropie/configs/mame-mame4all/cfg/default.cfg\n\n\n\n\nOther files in this cfg directory are ROM specific configs.\n\n\nNote: Should your input configuration or other aspect of the configuration need resetting to defaults, remove the default.cfg or ROM specific .cfg file, and it will be re-created with default values next time you start MAME4ALL or modify the ROM configuration.\n\n\n\n\nlr-imame4all on github\n\n\nRoms Dir: /home/pi/RetroPie/roms/mame-mame4all\nBinary Dir: /opt/retropie/libretrocores/lr-imame4all\nConfig Dir: /opt/retropie/configs/mame-mame4all/retroarch.cfg\n\n\n\n\nMAME Version\n: 0.37b5 (July 2000)\n\n\nActive Sets: 2241\n\n\n BIOS: 1\n\n CHDs: 0\n* Samples: 35\n\n\nMAME 0.37b5 DAT File\n: \nmame4all-037b5-RetroPie-260.zip\n\n\nMAME 0.37b5 'Lite' DAT File (no clones, no neogeo)\n: \nmame4all-no-clones-no-neogeo\n\n\nlr-IMAME4ALL Compatibility List\n feel free to contribute to the list.\n\n\nControls\n\n\nlr-imame4all utilises \nRetroArch control configuration\n. Add custom retroarch controls to the retroarch.cfg file in:\n\n\n/opt/retropie/configs/mame-mame4all/retroarch.cfg\n\n\n\n\n\n\nlr-mame2003 on github\n\n\nPlease see \nlr-mame2003 on RetroPie\n for information on how to configure specific features of this emulator.\n\n\nRoms Dir: /home/pi/RetroPie/roms/mame-libretro\nSamples Dir: /home/pi/RetroPie/BIOS/mame2003/samples/\nBinary Dir: /opt/retropie/libretrocores/lr-mame2003\nConfig Dir: /opt/retropie/configs/mame-libretro/retroarch.cfg\n\n\n\n\nMAME Version\n: 0.78 (December 2003)\n\n\nActive Sets: 4705\n\n\n BIOS: 15\n\n CHDs: 30\n* Samples: 56\n\n\nMAME 0.78 DAT File\n: \nMAME 0.78.dat\n\n\nMAME 0.78u5 DAT File\n: \nmame2003-lr-working-no-clones\n (working only, no clones)\n\n\nMAME 0.78u5 'Lite' DAT File\n: \nmame2003-lr-lite\n (working, no clones, neogeo, PlayChoice/NES multiplay, no rotary/dial/trackball/lightgun controls, no casino/multiplay/quiz/mahjong/fruit_machines/rhythm/mature)\n\n\nlr-mame2003 Compatibility List\n feel free to contribute to the list.\n\n\nControls\n\n\nlr-mame2003 utilises \nRetroArch control configurations\n. Add custom retroarch controls to the retroarch.cfg file in:\n\n\n/opt/retropie/configs/mame-libretro/retroarch.cfg\n\n\n\n\n\n\nlr-mame2010 on github\n\n\nNote: This emulator is considered experimental in RetroPie and has limited functionality. For example, only 2 players are supported.\n\n\nRoms Dir: /home/pi/RetroPie/roms/mame-libretro\nBinary Dir: /opt/retropie/libretrocores/lr-mame2010\nConfig Dir: /opt/retropie/configs/mame-libretro/retroarch.cfg\n\n\n\n\nMAME Version\n: 0.139 (August 2010)\n\n\nActive Sets: 8782\n\n\n BIOS: ?\n\n CHDs: 406\n* Samples: 70 (4 more samples are not in circulation)\n\n\nMAME 0.139 DAT File\n: \nMAME 0.139.dat\n \n\n\nlr-mame2010 Compatibility List\n feel free to contribute to the list.\n\n\nControls\n\n\nlr-mame2010 utilises \nRetroArch control configurations\n. Add custom retroarch controls to the retroarch.cfg file in:\n\n\n/opt/retropie/configs/mame-libretro/retroarch.cfg\n\n\n\n\n\n\nAdvanceMAME 0.94 on sourceforge\n\n\nRoms Dir: /home/pi/RetroPie/roms/mame-advmame\nBinary Dir: /opt/retropie/emulators/advmame/bin\nConfig Dir: /opt/retropie/configs/mame-advmame\n\n\n\n\nMAME Version\n: MAME 0.94 (March 2005)\n\n\nActive Sets: 5563\n\n\n BIOS: 25\n\n CHDs: ?\n* Samples: ?\n\n\nAdvanceMAME 0.94 DAT File\n: \nadvmame-0.94-RetroPie-260.7z\n\n\nAdvanceMAME 0.94 Compatibility List\n feel free to contribute to the list.\n\n\nControls\n\n\nWhile in a game press Tab to open the menu to set up controls. advmame tab menu configuration is stored in:\n\n\n/opt/retropie/configs/advmame/cfg/default.cfg\n\n\n\n\nOther files in this cfg directory are ROM specific configs.\n\n\nNote: Should your input configuration or other aspect of the configuration need resetting to defaults, remove the default.cfg or ROM specific .cfg file, and it will be re-created with default values next time you start AdvanceMAME or modify the ROM configuration.\n\n\n\n\nAdvanceMAME 1.4 on sourceforge\n\n\nRoms Dir: /home/pi/RetroPie/roms/mame-advmame\nBinary Dir: /opt/retropie/emulators/advmame/bin\nConfig Dir: /opt/retropie/configs/mame-advmame\n\n\n\n\nMAME Version\n: MAME 0.106 (May 2006)\n\n\nActive Sets: 6166\n\n\n BIOS: 26\n\n CHDs: 86\n* Samples: 64 (3 more samples are not in circulation)\n\n\nAdvanceMAME 1.4 DAT File\n: \nadvmame12-106.7z\n\n\nAdvanceMAME 1.4 Compatibility List\n feel free to contribute to the list.\n\n\nControls\n\n\nWhile in a game press Tab to open the menu to set up controls. advmame tab menu configuration is stored in:\n\n\n/opt/retropie/configs/advmame/cfg/default.cfg\n\n\n\n\nOther files in this cfg directory are ROM specific configs.\n\n\nNote: Should your input configuration or other aspect of the configuration need resetting to defaults, remove the default.cfg or ROM specific .cfg file, and it will be re-created with default values next time you start AdvanceMAME or modify the ROM configuration.", 
            "title": "MAME"
        }, 
        {
            "location": "/MAME/#arcade-rom-paths", 
            "text": "In RetroPie 3.0.0 some emulators share directories, so you need to choose which FBA, NeoGeo and mame4all version you want. So you can have one zipped ROMset for each of these (mame4all, FBA, NeoGeo, advmame) To avoid having several EmulationStation menus for different arcade emulators, all arcade-based ROMs can be placed in the  arcade  ROM folder, but you will have to specify which emulator each will use from the  Runcommand Menu", 
            "title": "Arcade ROM paths"
        }, 
        {
            "location": "/MAME/#emulators", 
            "text": "Note: These details are as per the default installed binaries on the RetroPie 3.0.0 image.", 
            "title": "Emulators"
        }, 
        {
            "location": "/MAME/#mame4all-pi-on-sourceforge", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/mame-mame4all\nBinary Dir: /opt/retropie/emulators/mame4all\nConfig Dir: /opt/retropie/configs/mame-mame4all  MAME Version : 0.37b5 (July 2000)  Active Sets: 2241   BIOS: 1  CHDs: 0\n* Samples: 35  MAME 0.37b5 DAT File :  mame4all-037b5-RetroPie-260.zip  MAME 0.37b5 DAT File :  mame4all-no-clones-no-neogeo  (no clones, no neogeo)  MAME4ALL-PI Compatibility List  feel free to contribute to the list.  Controls  While in a game press Tab to open the menu to set up controls. The MAME4ALL tab menu configuration is stored in:  /opt/retropie/configs/mame-mame4all/cfg/default.cfg  Other files in this cfg directory are ROM specific configs.  Note: Should your input configuration or other aspect of the configuration need resetting to defaults, remove the default.cfg or ROM specific .cfg file, and it will be re-created with default values next time you start MAME4ALL or modify the ROM configuration.", 
            "title": "mame4all-pi on sourceforge"
        }, 
        {
            "location": "/MAME/#lr-imame4all-on-github", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/mame-mame4all\nBinary Dir: /opt/retropie/libretrocores/lr-imame4all\nConfig Dir: /opt/retropie/configs/mame-mame4all/retroarch.cfg  MAME Version : 0.37b5 (July 2000)  Active Sets: 2241   BIOS: 1  CHDs: 0\n* Samples: 35  MAME 0.37b5 DAT File :  mame4all-037b5-RetroPie-260.zip  MAME 0.37b5 'Lite' DAT File (no clones, no neogeo) :  mame4all-no-clones-no-neogeo  lr-IMAME4ALL Compatibility List  feel free to contribute to the list.  Controls  lr-imame4all utilises  RetroArch control configuration . Add custom retroarch controls to the retroarch.cfg file in:  /opt/retropie/configs/mame-mame4all/retroarch.cfg", 
            "title": "lr-imame4all on github"
        }, 
        {
            "location": "/MAME/#lr-mame2003-on-github", 
            "text": "Please see  lr-mame2003 on RetroPie  for information on how to configure specific features of this emulator.  Roms Dir: /home/pi/RetroPie/roms/mame-libretro\nSamples Dir: /home/pi/RetroPie/BIOS/mame2003/samples/\nBinary Dir: /opt/retropie/libretrocores/lr-mame2003\nConfig Dir: /opt/retropie/configs/mame-libretro/retroarch.cfg  MAME Version : 0.78 (December 2003)  Active Sets: 4705   BIOS: 15  CHDs: 30\n* Samples: 56  MAME 0.78 DAT File :  MAME 0.78.dat  MAME 0.78u5 DAT File :  mame2003-lr-working-no-clones  (working only, no clones)  MAME 0.78u5 'Lite' DAT File :  mame2003-lr-lite  (working, no clones, neogeo, PlayChoice/NES multiplay, no rotary/dial/trackball/lightgun controls, no casino/multiplay/quiz/mahjong/fruit_machines/rhythm/mature)  lr-mame2003 Compatibility List  feel free to contribute to the list.  Controls  lr-mame2003 utilises  RetroArch control configurations . Add custom retroarch controls to the retroarch.cfg file in:  /opt/retropie/configs/mame-libretro/retroarch.cfg", 
            "title": "lr-mame2003 on github"
        }, 
        {
            "location": "/MAME/#lr-mame2010-on-github", 
            "text": "Note: This emulator is considered experimental in RetroPie and has limited functionality. For example, only 2 players are supported.  Roms Dir: /home/pi/RetroPie/roms/mame-libretro\nBinary Dir: /opt/retropie/libretrocores/lr-mame2010\nConfig Dir: /opt/retropie/configs/mame-libretro/retroarch.cfg  MAME Version : 0.139 (August 2010)  Active Sets: 8782   BIOS: ?  CHDs: 406\n* Samples: 70 (4 more samples are not in circulation)  MAME 0.139 DAT File :  MAME 0.139.dat    lr-mame2010 Compatibility List  feel free to contribute to the list.  Controls  lr-mame2010 utilises  RetroArch control configurations . Add custom retroarch controls to the retroarch.cfg file in:  /opt/retropie/configs/mame-libretro/retroarch.cfg", 
            "title": "lr-mame2010 on github"
        }, 
        {
            "location": "/MAME/#advancemame-094-on-sourceforge", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/mame-advmame\nBinary Dir: /opt/retropie/emulators/advmame/bin\nConfig Dir: /opt/retropie/configs/mame-advmame  MAME Version : MAME 0.94 (March 2005)  Active Sets: 5563   BIOS: 25  CHDs: ?\n* Samples: ?  AdvanceMAME 0.94 DAT File :  advmame-0.94-RetroPie-260.7z  AdvanceMAME 0.94 Compatibility List  feel free to contribute to the list.  Controls  While in a game press Tab to open the menu to set up controls. advmame tab menu configuration is stored in:  /opt/retropie/configs/advmame/cfg/default.cfg  Other files in this cfg directory are ROM specific configs.  Note: Should your input configuration or other aspect of the configuration need resetting to defaults, remove the default.cfg or ROM specific .cfg file, and it will be re-created with default values next time you start AdvanceMAME or modify the ROM configuration.", 
            "title": "AdvanceMAME 0.94 on sourceforge"
        }, 
        {
            "location": "/MAME/#advancemame-14-on-sourceforge", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/mame-advmame\nBinary Dir: /opt/retropie/emulators/advmame/bin\nConfig Dir: /opt/retropie/configs/mame-advmame  MAME Version : MAME 0.106 (May 2006)  Active Sets: 6166   BIOS: 26  CHDs: 86\n* Samples: 64 (3 more samples are not in circulation)  AdvanceMAME 1.4 DAT File :  advmame12-106.7z  AdvanceMAME 1.4 Compatibility List  feel free to contribute to the list.  Controls  While in a game press Tab to open the menu to set up controls. advmame tab menu configuration is stored in:  /opt/retropie/configs/advmame/cfg/default.cfg  Other files in this cfg directory are ROM specific configs.  Note: Should your input configuration or other aspect of the configuration need resetting to defaults, remove the default.cfg or ROM specific .cfg file, and it will be re-created with default values next time you start AdvanceMAME or modify the ROM configuration.", 
            "title": "AdvanceMAME 1.4 on sourceforge"
        }, 
        {
            "location": "/Master-System/", 
            "text": "The Sega Master System was a 4th generation video game console released by Sega in 1987.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-picodrive\n\n\nmastersystem\n\n\n.sms\n\n\nnone\n\n\n/opt/retropie/configs/mastersystem/retroarch.cfg\n\n\n\n\n\n\nlr-genesis-plus-gx\n\n\nmastersystem\n\n\n.sms\n\n\nnone\n\n\n/opt/retropie/configs/mastersystem/retroarch.cfg\n\n\n\n\n\n\nOsmose\n\n\nmastersystem\n\n\n.sms\n\n\nnone\n\n\n/home/pi/osmose_files/osmose.ini\n\n\n\n\n\n\n\n\nEmulators: \nOsmose\n, \nlr-genesis-plus-gx\n, \nlr-picodrive\n\n\nOsmose has it's own configurations whereas lr-Genesis-Plus-GX and lr-picodrive utilise RetroArch configurations\n\n\nROMS\n\n\nAccepted File Extensions: \n.sms\n\n\nPlace your Master System ROMs in\n\n\n/home/pi/RetroPie/roms/mastersystem\n\n\n\n\nControls\n\n\nlr-picodrive and lr-genesis-plus-gx\n\n\nlr-picodrive and lr-genesis-plus-gx utilise RetroArch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/mastersystem/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nOsmose\n\n\nOnce you have run Osmose at least once, a configuration file call osmose.ini will be created at\n\n\n/home/pi/osmose_files/osmose.ini\n\n\n\n\nIt will look something like this:\n\n\n# Configuration Starts Here !\n\n#\n#  General emulation keys:\n#\n\nSCREENSHOT    = SDLK_F2\nSOUNDSHOT     = SDLK_F1\nQUIT          = SDLK_ESCAPE\nTILESHOT      = SDLK_F3\nDEBUGGER      = SDLK_d\nPAUSE         = SDLK_p\n\n#\n# First Player PAD:\n#\n\nPAD1_UP       = SDLK_UP\nPAD1_DOWN     = SDLK_DOWN\nPAD1_LEFT     = SDLK_LEFT\nPAD1_RIGHT    = SDLK_RIGHT\nPAD1_BUTTON_A = SDLK_LCTRL\nPAD1_BUTTON_B = SDLK_LALT\n\n#\n# Second Player PAD:\n#\n\nPAD2_UP       = SDLK_KP5\nPAD2_DOWN     = SDLK_KP2\nPAD2_LEFT     = SDLK_KP1\nPAD2_RIGHT    = SDLK_KP3\nPAD2_BUTTON_A = SDLK_n\nPAD2_BUTTON_B = SDLK_b\n\n\n\n\nThe above controls only apply to the keyboard. Configuring controls for a gamepad must be done by editing the es_systems.cfg file\n\n\n/etc/emulationstation/es_systems.cfg\n\n\n\n\nadd your specific controls in this format to the gamegear section:\n\n\nosmose -joy 1 -joy1 1 -joy2 2 -joyquit 6\n\n\n\n\nsee \nThis Thread\n for more details", 
            "title": "Master System"
        }, 
        {
            "location": "/Master-System/#emulators-osmose-lr-genesis-plus-gx-lr-picodrive", 
            "text": "Osmose has it's own configurations whereas lr-Genesis-Plus-GX and lr-picodrive utilise RetroArch configurations", 
            "title": "Emulators: Osmose, lr-genesis-plus-gx, lr-picodrive"
        }, 
        {
            "location": "/Master-System/#roms", 
            "text": "Accepted File Extensions:  .sms  Place your Master System ROMs in  /home/pi/RetroPie/roms/mastersystem", 
            "title": "ROMS"
        }, 
        {
            "location": "/Master-System/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Master-System/#lr-picodrive-and-lr-genesis-plus-gx", 
            "text": "lr-picodrive and lr-genesis-plus-gx utilise RetroArch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/mastersystem/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-picodrive and lr-genesis-plus-gx"
        }, 
        {
            "location": "/Master-System/#osmose", 
            "text": "Once you have run Osmose at least once, a configuration file call osmose.ini will be created at  /home/pi/osmose_files/osmose.ini  It will look something like this:  # Configuration Starts Here !\n\n#\n#  General emulation keys:\n#\n\nSCREENSHOT    = SDLK_F2\nSOUNDSHOT     = SDLK_F1\nQUIT          = SDLK_ESCAPE\nTILESHOT      = SDLK_F3\nDEBUGGER      = SDLK_d\nPAUSE         = SDLK_p\n\n#\n# First Player PAD:\n#\n\nPAD1_UP       = SDLK_UP\nPAD1_DOWN     = SDLK_DOWN\nPAD1_LEFT     = SDLK_LEFT\nPAD1_RIGHT    = SDLK_RIGHT\nPAD1_BUTTON_A = SDLK_LCTRL\nPAD1_BUTTON_B = SDLK_LALT\n\n#\n# Second Player PAD:\n#\n\nPAD2_UP       = SDLK_KP5\nPAD2_DOWN     = SDLK_KP2\nPAD2_LEFT     = SDLK_KP1\nPAD2_RIGHT    = SDLK_KP3\nPAD2_BUTTON_A = SDLK_n\nPAD2_BUTTON_B = SDLK_b  The above controls only apply to the keyboard. Configuring controls for a gamepad must be done by editing the es_systems.cfg file  /etc/emulationstation/es_systems.cfg  add your specific controls in this format to the gamegear section:  osmose -joy 1 -joy1 1 -joy2 2 -joyquit 6  see  This Thread  for more details", 
            "title": "Osmose"
        }, 
        {
            "location": "/MESS/", 
            "text": "MESS (Multi Emulator Super System) is a system that emulates a vast quantity of obscure hardware. It was merged with MAME in version .162.\n\n\n\n\nEmulator: \nlr-mess\n\n\nROMS:\n\n\n\n\nUsing lr-mess in the way I am telling you here will only work with MAME Software List ROMs matching the version of MAME you are compiling. Any other set of ROMs will not work. A good guideline for avoiding bad ROMs: If you are downloading them through HTTP from a public ROM site, they are not likely to work. The ROMs cannot be unzipped or renamed.\n\n\n\n\nFor more information on types of romsets see \nHERE\n\n\n\n\n\n\nAt this point, the lr-mess script will automatically set up lr-mess for you only for systems that are known to run well on a Pi 2 with an overclock. If the system is not listed in the lr-mess script, it either has not been tested or has been tested and ran at a bad speed.[\n\n\n\n\n\n\nSystems that have been tested and run well with lr-mess so far:\nColecovision (100% speed, driver: coleco)\nCreatiVision (80-100% speed, driver: crvision, not added to the script yet)\nEmerson Arcadia 2001 (100% speed, driver: arcadia)\nNintendo Entertainment System (100% speed, driver: nes)\nNintendo Gameboy (100% speed, driver: gameboy)\nSega Dreamcast VMU (100% speed, driver: svmu)\n\n\n\n\n\n\nSystems that have been tested and don\u2019t run as well with lr-mess so far:\nAmstrad GX4000 (65% speed, some games still feel very playable, driver: gx4000)\nAtari 2600 (70-85% speed, driver: a2600)\nAtari 5200 (50-60% speed, driver: a5200)\nBBC Micro B (25% speed, driver: bbcb)\nIntellivision (Fails to find/load saa5050 ROM, driver: intv)\nNintendo Gameboy Advance (50% speed, driver: gba\nSega Game Gear (80% speed, driver: gamegear)\nSega Genesis (46% speed, driver: megadriv)\nSharp X68000 (14% speed, driver: x68000)\nSNK Neo Geo AES (60-65% speed, driver: aes)\n\n\n\n\n\n\nAll systems other than those listed above have not been tested.\n\n\nInstructions\n\n\nRun the lr-mess script from the experimental menu. Compile should take about 3 hours on a Pi 2.\n\n\nCheck your BIOS folder after compilation and see if a folder named \u201cmame\u201d exists. Within it should be a folder named \u201chash\u201d that includes a bunch of xml files. These are the software lists that lr-mess requires. If they exist, we likely compiled properly.\n\n\nGo to your roms directory, wherever you have it (default: /home/pi/RetroPie/roms/) and create a directory named after the driver you wish to use. Place the BIOS file for that driver in the root of your roms directory.\n\n\nFor example, if you wanted to run the Donkey Kong Colecovision rom (dkong.zip) through lr-mess, you would place your files like this:\n\n\nMain rom directory (/home/pi/RetroPie/roms)\n|\n+-Coleco Driver BIOS zip: coleco.zip (/home/pi/RetroPie/roms/coleco.zip)\n|\n+-coleco (/home/pi/RetroPie/roms/coleco)\n|\n+- dkong.zip (/home/pi/RetroPie/roms/coleco/dkong.zip)\n\n\nIf the driver you wish to use does not require a ROM, you do not need to put one into your roms directory.\n\n\nCheck /opt/retropie/configs/all/retroarch-core-options.cfg and make sure that MAME CLI launching, MAME software lists and MAME auto media type are turned on. The compilation script should set these by default at the bottom of the file, but just make sure.\n\n\nYou may need to add .zip and .ZIP to your extensions in /etc/emulationstation/es_systems.cfg and restart emulationstation for it to pick up your ROMs.\n\n\nIf all goes well, you should get the game running when you select it from emulationstation. If it quits back to emulationstation immediately, you likely have bad ROMs or something else unexpected happened.", 
            "title": "MESS"
        }, 
        {
            "location": "/MESS/#emulator-lr-mess", 
            "text": "", 
            "title": "Emulator: lr-mess"
        }, 
        {
            "location": "/MESS/#roms", 
            "text": "Using lr-mess in the way I am telling you here will only work with MAME Software List ROMs matching the version of MAME you are compiling. Any other set of ROMs will not work. A good guideline for avoiding bad ROMs: If you are downloading them through HTTP from a public ROM site, they are not likely to work. The ROMs cannot be unzipped or renamed.   For more information on types of romsets see  HERE    At this point, the lr-mess script will automatically set up lr-mess for you only for systems that are known to run well on a Pi 2 with an overclock. If the system is not listed in the lr-mess script, it either has not been tested or has been tested and ran at a bad speed.[    Systems that have been tested and run well with lr-mess so far:\nColecovision (100% speed, driver: coleco)\nCreatiVision (80-100% speed, driver: crvision, not added to the script yet)\nEmerson Arcadia 2001 (100% speed, driver: arcadia)\nNintendo Entertainment System (100% speed, driver: nes)\nNintendo Gameboy (100% speed, driver: gameboy)\nSega Dreamcast VMU (100% speed, driver: svmu)    Systems that have been tested and don\u2019t run as well with lr-mess so far:\nAmstrad GX4000 (65% speed, some games still feel very playable, driver: gx4000)\nAtari 2600 (70-85% speed, driver: a2600)\nAtari 5200 (50-60% speed, driver: a5200)\nBBC Micro B (25% speed, driver: bbcb)\nIntellivision (Fails to find/load saa5050 ROM, driver: intv)\nNintendo Gameboy Advance (50% speed, driver: gba\nSega Game Gear (80% speed, driver: gamegear)\nSega Genesis (46% speed, driver: megadriv)\nSharp X68000 (14% speed, driver: x68000)\nSNK Neo Geo AES (60-65% speed, driver: aes)    All systems other than those listed above have not been tested.", 
            "title": "ROMS:"
        }, 
        {
            "location": "/MESS/#instructions", 
            "text": "Run the lr-mess script from the experimental menu. Compile should take about 3 hours on a Pi 2.  Check your BIOS folder after compilation and see if a folder named \u201cmame\u201d exists. Within it should be a folder named \u201chash\u201d that includes a bunch of xml files. These are the software lists that lr-mess requires. If they exist, we likely compiled properly.  Go to your roms directory, wherever you have it (default: /home/pi/RetroPie/roms/) and create a directory named after the driver you wish to use. Place the BIOS file for that driver in the root of your roms directory.  For example, if you wanted to run the Donkey Kong Colecovision rom (dkong.zip) through lr-mess, you would place your files like this:  Main rom directory (/home/pi/RetroPie/roms)\n|\n+-Coleco Driver BIOS zip: coleco.zip (/home/pi/RetroPie/roms/coleco.zip)\n|\n+-coleco (/home/pi/RetroPie/roms/coleco)\n|\n+- dkong.zip (/home/pi/RetroPie/roms/coleco/dkong.zip)  If the driver you wish to use does not require a ROM, you do not need to put one into your roms directory.  Check /opt/retropie/configs/all/retroarch-core-options.cfg and make sure that MAME CLI launching, MAME software lists and MAME auto media type are turned on. The compilation script should set these by default at the bottom of the file, but just make sure.  You may need to add .zip and .ZIP to your extensions in /etc/emulationstation/es_systems.cfg and restart emulationstation for it to pick up your ROMs.  If all goes well, you should get the game running when you select it from emulationstation. If it quits back to emulationstation immediately, you likely have bad ROMs or something else unexpected happened.", 
            "title": "Instructions"
        }, 
        {
            "location": "/MSX/", 
            "text": "The MSX was a 8bit personal computer standard developed by ASCII in 1983. Microsoft provided the BASIC interpreter and later MSX-DOS. Various electronics vendors made MSX systems such as Canon, Casio, Daewoo, Fujitsu, Goldstar (LG), Hitachi, JVC, Mitsubishi, Panasonic, Philips, Pioneer, Samsung, Sanyo, Sony, Toshiba, Yamaha and various others. The MSX was followed by the MSX2, after which manufacturers abandoned the market outside Japan due to limited success. In Japan a few manufacturers still held out and released the MSX2+ and finally the TurboR. MSX had its greatest success in Japan, and was able to establishment some market share in countries like the Netherlands, Spain and Brazil.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-bluemsx\n\n\nmsx\n\n\n.rom .mx1 .mx2 .col .dsk\n\n\nsee below\n\n\n/opt/retropie/configs/msx/retroarch.cfg\n\n\n\n\n\n\nlr-fmsx\n\n\nmsx\n\n\n.rom .mx1 .mx2 .col .dsk\n\n\nsee below\n\n\n/opt/retropie/configs/msx/retroarch.cfg\n\n\n\n\n\n\nOpenMSX\n\n\nmsx\n\n\n.rom .mx1 .mx2 .col .dsk\n\n\nsee below\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nlr-fmsx\n, \nlr-bluemsx\n, \nOpenMSX\n\n\nROMS\n\n\nAccepted File Extensions: \n.rom .mx1 .mx2 .col .dsk\n\n\nPlace your MSX ROMs in\n\n\n/home/pi/RetroPie/roms/msx\n\n\n\n\nControls\n\n\nlr-fmsx and lr-bluemsx utilise RetroArch configurations. openMSX has its own configuration, and will ignore control definitions made in RetroArch.\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/msx/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nMany games will have varying keyboard controls.\n\n\nBIOS List\n\n\n\n\nMSX : MSX.ROM - PHILIPSDISK.ROM \n\n\nMSX Brazilian : MSXBR.ROM - MICROSOLDISK.ROM \n\n\nMSX German : MSXG.ROM - PHILIPSDISK.ROM \n\n\nMSX Japanese : MSXJ.ROM - PANASONICDISK.ROM \n\n\nMSX Korean : MSXKR.ROM - MSXHAN.ROM - NATIONALDISK.ROM \n\n\nMSX Swedish : MSXSE.ROM - PHILIPSDISK.ROM \n\n\nMSX2 : MSX2.ROM - MSX2EXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM \n\n\nMSX2 Arabic : MSX2AR.ROM - MSX2AREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PANASONICDISK.ROM - KANJI.ROM - MSXKANJI.ROM - ARABIC.ROM - SWP.ROM - PAINT.ROM \n\n\nMSX2 Brazilian : MSX2BR.ROM - MSX2BREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - MICROSOLDISK.ROM \n\n\nMSX2 French : MSX2FR.ROM - MSX2FREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM \n\n\nMSX2 German : MSX2G.ROM - MSX2GEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM \n\n\nMSX2 Japanese : MSX2J.ROM - MSX2JEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PANASONICDISK.ROM - KANJI.ROM - MSXKANJI.ROM \n\n\nMSX2 Korean : MSX2KR.ROM - MSX2KREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - NATIONALDISK.ROM - HANGUL.ROM - MSX2HAN.ROM \n\n\nMSX2 Only PSG : MSX2.ROM - MSX2EXT.ROM - XBASIC2.ROM - PHILIPSDISK.ROM \n\n\nMSX2 Russian : MSX2R.ROM - MSX2REXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - NATIONALDISK.ROM \n\n\nMSX2 Spanish : MSX2SP.ROM - MSX2SPEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM \n\n\nMSX2+ : MSX2P.ROM - MSX2PEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PANASONICDISK.ROM - KANJI.ROM - MSXKANJI.ROM \n\n\nTurbo-R : FSA1GT.ROM - KANJI.ROM - MOONSOUND.ROM - XBASIC2.ROM\n\n\n\n\nopenMSX\n\n\nopenMSX will by default use a MSX2+ c-bios rom image. c-bios is not a real BIOS rom and has certain restrictions, such as no support for anything other then cartridges (ROMs). So there is no support for disk or cassette for instance.\n\n\nYou can change this by adding dumps of real MSX system roms into the \n/opt/retropie/emulators/openmsx/share/systemroms\n or the \n~/.openMSX/share/systemroms\n directory.\n\n\nTo locate real MSX system ROMs, try google.\n\n\nChanging default machine to be emulated\n\n\nBy default openMSX will emulate a MSX2+ using the c-bios ROMs. To change this, you need to start openMSX, either by starting a game or from the commandline by typing \n/opt/retropie/emulators/openmsx/bin/openmsx\n\n\nWhen the emulator is running, press \nF10\n and you will get a overlay where you can type commands, here you need to type the following to change the default MSX to be emulated;\n\n\nset default_emulator turbor\n\n\nIn the above example we change the default to the MSX TurboR, which was the last MSX machine produced. Other options could be \nmsx1\n, \nmsx2\n or \nmsx2plus\n. There are many MSX machines that can potentially be emulated, for a list look in the directory \n/opt/retropie/emulators/openmsx/share/machines\n. If for instance you wanted to emulate a Spectravideo SVI-728 you will find in that directory a file \nSpectravideo_SVI-728.xml\n, simply use the name of the file, excluding the .xml extension as the machine name.\n\n\nMachine type msx1, msx2, msx2plus and turbor are simply links to certain MSX machines as follows;\n- msx1 = European Toshiba HX10\n- msx2 = European Philips NMS 8250\n- msx2plus = Japanese Panasonic FS-A1WSX\n- turbor = Japanese Panasonic FS-A1GT\n\n\nThe machine type selected will obviously have certain effects. For instance the FS-A1GT does not support cassettes, and so you cannot play cassette games on it. Also starting some games (mainly Konami) on a Japanese machine may result in the in-game dialogue being in Japanese, while if you start the same game on a European machine the in-game dialogue may be in English.\n\n\nNote: If you do not have the ROMs for the default machine type requested in the correct location, openMSX will still start, but with the c-bios ROMs.\n\n\nExiting the emulator\n\n\nThe key definitions defined in retropie will not work in openMSX. openMSX does however allow you to redefine your controls. For more information, look at the openMSX website for 'bind'.\n\n\nBy default the exit key in the emulator is \nAlt-F4\n\n\nSetting default screen on MSX2+ and TurboR machines\n\n\nBy default MSX2+ and TurboR machines will start with a screen type which is incompatible with lots of European software. Typically resulting in errors such as \nSyntax error in 10\n when starting disk or cassette based games. This is typically because the software is trying to change the width of the screen to something incompatible with the current screen type selected. The solution is to start the emulator to a MSX BIOS Ok prompt. This can be done when a game fails to start and gives you an Ok prompt, or you can start the emulator outside of RetroPie as shown above.\n\n\nAt the MSX BIOS Ok prompt (not the openMSX command prompt), type the following;\n\n\nscreen0\n\n\nset screen\n\n\nYou have now changed your default screen to screen0 as was normal on European MSX machines, and saved the setting into virtual nvram.\n\n\nNote: if you change your default machine type from say a TurboR to a MSX2+ you will have to redo this step as each MSX2 and later machine type has its own virtual nvram file.\n\n\n50 or 60Hz?\n\n\nEuropean MSX machines ran at 50Hz, as that is the PAL video standard. Japanese MSX machines however ran at 60Hz as is standard on NTSC. How does this effect things? Well it means that lots of Japanese developed games run ~20% slower when run on a European MSX. This may mean more sluggish behaviour and slower sound if the programmers did not take this into account.\n\n\nHow does this effect emulation? The default c-bios roms use 60Hz. If you use real MSX system roms, then it depends on which machine your emulating. A MSX2+ or TurboR will always be 60Hz since they where never officially sold in Europe.\n\n\nOf course the effect can also be the other way around. European MSX software that runs too fast on a Japanese machine type.\n\n\nIn openMSX, you can change the emulated frequency during runtime. Simply open the openMSX command prompt with \nF10\n, and type \ntoggle_freq\n.", 
            "title": "MSX"
        }, 
        {
            "location": "/MSX/#emulator-lr-fmsx-lr-bluemsx-openmsx", 
            "text": "", 
            "title": "Emulator: lr-fmsx, lr-bluemsx, OpenMSX"
        }, 
        {
            "location": "/MSX/#roms", 
            "text": "Accepted File Extensions:  .rom .mx1 .mx2 .col .dsk  Place your MSX ROMs in  /home/pi/RetroPie/roms/msx", 
            "title": "ROMS"
        }, 
        {
            "location": "/MSX/#controls", 
            "text": "lr-fmsx and lr-bluemsx utilise RetroArch configurations. openMSX has its own configuration, and will ignore control definitions made in RetroArch.  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/msx/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration  Many games will have varying keyboard controls.", 
            "title": "Controls"
        }, 
        {
            "location": "/MSX/#bios-list", 
            "text": "MSX : MSX.ROM - PHILIPSDISK.ROM   MSX Brazilian : MSXBR.ROM - MICROSOLDISK.ROM   MSX German : MSXG.ROM - PHILIPSDISK.ROM   MSX Japanese : MSXJ.ROM - PANASONICDISK.ROM   MSX Korean : MSXKR.ROM - MSXHAN.ROM - NATIONALDISK.ROM   MSX Swedish : MSXSE.ROM - PHILIPSDISK.ROM   MSX2 : MSX2.ROM - MSX2EXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM   MSX2 Arabic : MSX2AR.ROM - MSX2AREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PANASONICDISK.ROM - KANJI.ROM - MSXKANJI.ROM - ARABIC.ROM - SWP.ROM - PAINT.ROM   MSX2 Brazilian : MSX2BR.ROM - MSX2BREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - MICROSOLDISK.ROM   MSX2 French : MSX2FR.ROM - MSX2FREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM   MSX2 German : MSX2G.ROM - MSX2GEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM   MSX2 Japanese : MSX2J.ROM - MSX2JEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PANASONICDISK.ROM - KANJI.ROM - MSXKANJI.ROM   MSX2 Korean : MSX2KR.ROM - MSX2KREXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - NATIONALDISK.ROM - HANGUL.ROM - MSX2HAN.ROM   MSX2 Only PSG : MSX2.ROM - MSX2EXT.ROM - XBASIC2.ROM - PHILIPSDISK.ROM   MSX2 Russian : MSX2R.ROM - MSX2REXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - NATIONALDISK.ROM   MSX2 Spanish : MSX2SP.ROM - MSX2SPEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PHILIPSDISK.ROM   MSX2+ : MSX2P.ROM - MSX2PEXT.ROM - MSX2PMUS.ROM - MOONSOUND.ROM - XBASIC2.ROM - PANASONICDISK.ROM - KANJI.ROM - MSXKANJI.ROM   Turbo-R : FSA1GT.ROM - KANJI.ROM - MOONSOUND.ROM - XBASIC2.ROM", 
            "title": "BIOS List"
        }, 
        {
            "location": "/MSX/#openmsx", 
            "text": "openMSX will by default use a MSX2+ c-bios rom image. c-bios is not a real BIOS rom and has certain restrictions, such as no support for anything other then cartridges (ROMs). So there is no support for disk or cassette for instance.  You can change this by adding dumps of real MSX system roms into the  /opt/retropie/emulators/openmsx/share/systemroms  or the  ~/.openMSX/share/systemroms  directory.  To locate real MSX system ROMs, try google.", 
            "title": "openMSX"
        }, 
        {
            "location": "/MSX/#changing-default-machine-to-be-emulated", 
            "text": "By default openMSX will emulate a MSX2+ using the c-bios ROMs. To change this, you need to start openMSX, either by starting a game or from the commandline by typing  /opt/retropie/emulators/openmsx/bin/openmsx  When the emulator is running, press  F10  and you will get a overlay where you can type commands, here you need to type the following to change the default MSX to be emulated;  set default_emulator turbor  In the above example we change the default to the MSX TurboR, which was the last MSX machine produced. Other options could be  msx1 ,  msx2  or  msx2plus . There are many MSX machines that can potentially be emulated, for a list look in the directory  /opt/retropie/emulators/openmsx/share/machines . If for instance you wanted to emulate a Spectravideo SVI-728 you will find in that directory a file  Spectravideo_SVI-728.xml , simply use the name of the file, excluding the .xml extension as the machine name.  Machine type msx1, msx2, msx2plus and turbor are simply links to certain MSX machines as follows;\n- msx1 = European Toshiba HX10\n- msx2 = European Philips NMS 8250\n- msx2plus = Japanese Panasonic FS-A1WSX\n- turbor = Japanese Panasonic FS-A1GT  The machine type selected will obviously have certain effects. For instance the FS-A1GT does not support cassettes, and so you cannot play cassette games on it. Also starting some games (mainly Konami) on a Japanese machine may result in the in-game dialogue being in Japanese, while if you start the same game on a European machine the in-game dialogue may be in English.  Note: If you do not have the ROMs for the default machine type requested in the correct location, openMSX will still start, but with the c-bios ROMs.", 
            "title": "Changing default machine to be emulated"
        }, 
        {
            "location": "/MSX/#exiting-the-emulator", 
            "text": "The key definitions defined in retropie will not work in openMSX. openMSX does however allow you to redefine your controls. For more information, look at the openMSX website for 'bind'.  By default the exit key in the emulator is  Alt-F4", 
            "title": "Exiting the emulator"
        }, 
        {
            "location": "/MSX/#setting-default-screen-on-msx2-and-turbor-machines", 
            "text": "By default MSX2+ and TurboR machines will start with a screen type which is incompatible with lots of European software. Typically resulting in errors such as  Syntax error in 10  when starting disk or cassette based games. This is typically because the software is trying to change the width of the screen to something incompatible with the current screen type selected. The solution is to start the emulator to a MSX BIOS Ok prompt. This can be done when a game fails to start and gives you an Ok prompt, or you can start the emulator outside of RetroPie as shown above.  At the MSX BIOS Ok prompt (not the openMSX command prompt), type the following;  screen0  set screen  You have now changed your default screen to screen0 as was normal on European MSX machines, and saved the setting into virtual nvram.  Note: if you change your default machine type from say a TurboR to a MSX2+ you will have to redo this step as each MSX2 and later machine type has its own virtual nvram file.", 
            "title": "Setting default screen on MSX2+ and TurboR machines"
        }, 
        {
            "location": "/MSX/#50-or-60hz", 
            "text": "European MSX machines ran at 50Hz, as that is the PAL video standard. Japanese MSX machines however ran at 60Hz as is standard on NTSC. How does this effect things? Well it means that lots of Japanese developed games run ~20% slower when run on a European MSX. This may mean more sluggish behaviour and slower sound if the programmers did not take this into account.  How does this effect emulation? The default c-bios roms use 60Hz. If you use real MSX system roms, then it depends on which machine your emulating. A MSX2+ or TurboR will always be 60Hz since they where never officially sold in Europe.  Of course the effect can also be the other way around. European MSX software that runs too fast on a Japanese machine type.  In openMSX, you can change the emulated frequency during runtime. Simply open the openMSX command prompt with  F10 , and type  toggle_freq .", 
            "title": "50 or 60Hz?"
        }, 
        {
            "location": "/Neo-Geo/", 
            "text": "The Neo Geo is a cartridge-based arcade system board and home video game console released by SNK in 1990.\n\n\nSee also: [[MAME]], [[Neo Geo]]\n\n\n\n\nThere are a variety of arcade emulators available in RetroPie which can emulate Neo Geo games. There are significant differences in performance, compatibility, and configuration between them. If you're getting started with arcade emulation, start by reading \nManaging Arcade ROMs\n.\n\n\nThis page is a resource for additional details on configuring a dedicated set of Neo Geo ROMs including configuration paths, controls, and the ROM sets which each emulator requires.\n\n\nRecommended Neo Geo emulators\n\n\nlr-fbalpha\n is recommended for emulating Neo Geo games because it features the libretro control system, shaders, and all other libretro advantages. Please also refer to \nFB Alpha\n and specifically [[lr-fbalpha]] for configuration information.\n\n\nUsers with Raspberry Pi 1s may prefer the standalone emulator \nPiFBA\n, which will have better performance on limited hardware. The GnGeo-Pi emulator is also available. \n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nRequired ROM Version\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-fbalpha\n\n\narcade \nor\n fba \nor\n neogeo\n\n\nFB Alpha v0.2.97.39\n\n\n/opt/retropie/configs/arcade/retroarch.cfg, \nor\n /opt/retropie/configs/fba/retroarch.cfg, \nor\n /opt/retropie/configs/neogeo/retroarch.cfg\n\n\n\n\n\n\nPiFBA\n\n\narcade \nor\n fba \nor\n neogeo\n\n\nFBA 0.2.96.71\n\n\n/opt/retropie/emulators/pifba/fba2x.cfg \nor\n /opt/retropie/configs/fba/fba2x.cfg\n\n\n\n\n\n\nGnGeo-Pi\n\n\narcade \nor\n neogeo\n\n\nMAME 0.138\n\n\n/opt/retropie/configs/neogeo/gngeorc\n\n\n\n\n\n\n\n\nROMS\n\n\nPlace Neo Geo ROMs in\n\n\n/home/pi/RetroPie/roms/neogeo\n\n\n\n\nBIOS\n\n\nNeo-Geo ROMs require a \nneogeo.zip\n BIOS file with the exact same MAME or FB Alpha version as the emulator you select. Place the correct \nneogeo.zip\n with your ROMs in:\n\n\n/home/pi/RetroPie/roms/neogeo\n\n\n\n\nInstructions on how to install the Neo Geo Unibios on lr-fbalpha can be found here: [[lr-fbalpha#neo-geo-unibios]] The Unibios can be used as documented on the official page: \nhttp://unibios.free.fr/howitworks.html\n\n\n\n\nOn the Unibios boot screen\n\n\nNeo-Geo \nA+B+C\n (RetroPad B+A+Y) for BIOS Menu\n\n\nNeo-Geo \nB+C+D\n (RetroPad A+Y+X) for Test Menu\n\n\n\n\n\n\nAt any time\n\n\nNeo-Geo \nStart+A+B+C\n (RetroPad Start+B+A+Y) for In-Game Menu\n\n\n\n\n\n\n\n\nThe menus allow you to change various settings like region, dip switch settings for gameplay options like difficulty or blood, and coin or free play settings. Unibios settings will persist after quitting FBA, launching another Neo-Geo game, or rebooting RetroPie.\n\n\nEmulators\n\n\nlr-fbalpha\n\n\nlr-fbalpha Controls\n\n\nlr-fbalpha utilises RetroArch configs. Add custom RetrAarch controls to the \nretroarch.cfg\n file in:\n\n\n/opt/retropie/configs/fba/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n \n\n\n\n\nPiFBA\n\n\nPiFBA Controls\n\n\nPiFBA controls are located in:\n\n\n/opt/retropie/emulators/pifba/fba2x.cfg\n\n\n\n\nAs there is no menu to configure controllers with PiFBA like there is with Mame4all, you'll have to edit the aforementioned file manually.\n\n\nExample fba2x.cfg\n:\n\n\n[Keyboard]\n# Get codes from /usr/include/SDL/SDL_keysym.h\nA_1=306 #LCTRL (button1)\nB_1=32 #SPACE (button3)\nX_1=308 #LALT (button2\nY_1=304 #LSHIFT\nL_1=122 #z\nR_1=120 #x\nSTART_1=49 #1\nSELECT_1=53 #5\nLEFT_1=276 #left\nRIGHT_1=275 #right\nUP_1=273 #up\nDOWN_1=274 #down\nQUIT=27 #escape\n#player 2 keyboard controls, disabled by default\nA_2=97 #a (button1)\nB_2=113 #q (button3)\nX_2=115 #s (button2)\nY_2=119 #w\nL_2=105 #i\nR_2=107 #k\nSTART_2=50 #2\nSELECT_2=54 #6\nLEFT_2=100 #d\nRIGHT_2=103 #g\nUP_2=114 #r\nDOWN_2=102 #f\n\n[Joystick]\n# Get codes from \njstest /dev/input/js0\n\n# from package \njoystick\n\nA_1=3\nB_1=1\nX_1=2\nY_1=0\nL_1=4\nR_1=5\nSTART_1=9\nSELECT_1=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n#player 2 button configuration\nA_2=3\nB_2=1\nX_2=2\nY_2=0\nL_2=4\nR_2=5\nSTART_2=9\nSELECT_2=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n\n[Graphics]\nDisplaySmoothStretch=1\n# Display Effect: 0 none, 1 scanlines\nDisplayEffect=0\nDisplayBorder=0\nMaintainAspectRatio=1\n\n[Sound]\n\n\n\n\n\n\nGnGeo 0.8 on github\n\n\nRoms Dir: /home/pi/RetroPie/roms/neogeo\nBinary Dir: /opt/retropie/emulators/gngeopi/bin\nConfig Dir: /opt/retropie/configs/neogeo\n\n\n\n\nMAME Version\n: 0.138 (May 2010)\n\n\nRomsets emulated: 203\n\n\nGnGeo-Pi DAT File\n: \npandora_gngeo_084_dat.zip\n\n\nGnGeo-Pi Filtered DAT File\n: \npandora_gngeo_084_filtered.zip\nAll clones non-working\\mahjong\\quiz removed\n\n\nRomsets emulated\n: 128\n\n\nGnGeo-Pi Compatibility List\n  feel free to contribute to the list.\n\n\nAs a caveat if you're using gngeopi, the ROMs you have must match the file in \ngngeo_data.zip\n located at:\n\n\n/opt/retropie/emulators/gngeopi/share/gngeo\n\n\n\n\nYou can only play roms that have the same name as these .drv files, e.g. \nmslug2.zip\n (rom) and \nmslug2.drv\n (data). If the names of these files don't match, GnGeo-Pi will crash. (see the list at the bottom of this page for compatible ROMs)\n\n\nGnGeo-Pi Controls\n\n\nOnce you've started GnGeo-Pi at least once a file called \ngngeorc\n will be created in:\n\n\n/home/pi/.gngeo/gngeorc\n\n\n\n\nExample Configuration:\n\n\n Xbox360\n p1control A=J0B0,B=J0B1,C=J0B2,D=J0B3,START=J0B6,COIN=J0B10,UP=J0a1,DOWN=J0a1,LEFT=J0A0,RIGHT=J0A0,MENU=J0B7\n Dualshock2\n p1control A=J0B2,B=J0B1,C=J0B3,D=J0B0,START=J0B9,COIN=J0B8,UP=J0a1,DOWN=J0a1,LEFT=J0A0,RIGHT=J0A0\n\n Meaning of the code:\n Kxxx : keyboad key number xxx\n JxByy : Joystick number x Button\n JxAyy : Joystick number x Axe yy (use a lowercase 'a' if you need to invert the axis)\n JxHyy : Joystick number x Hat yy\n\n you can define a button multiple time, for example A=J0B0,A=K123,etc..\n\n\n\n\nList of GnGeo-Pi ROMS\n:\n\n\n2020bb.drv\n2020bba.drv\n2020bbh.drv\n3countb.drv\nalpham2.drv\nandrodun.drv\naodk.drv\naof.drv\naof2.drv\naof2a.drv\naof3.drv\naof3k.drv\nbakatono.drv\nbangbead.drv\nbjourney.drv\nblazstar.drv\nbreakers.drv\nbreakrev.drv\nbstars.drv\nbstars2.drv\nburningf.drv\nburningfh.drv\ncmc42.xor\ncmc50.xor\ncrsword.drv\nct2k3sa.drv\nct2k3sp.drv\ncthd2003.drv\nctomaday.drv\ncyberlip.drv\ndiggerma.drv\ndoubledr.drv\neightman.drv\nfatfursa.drv\nfatfursp.drv\nfatfury1.drv\nfatfury2.drv\nfatfury3.drv\nfbfrenzy.drv\nfightfev.drv\nfightfeva.drv\nflipshot.drv\nfswords.drv\ngalaxyfg.drv\nganryu.drv\ngarou.drv\ngaroubl.drv\ngarouo.drv\ngaroup.drv\nghostlop.drv\ngoalx3.drv\ngowcaizr.drv\ngpilots.drv\ngpilotsh.drv\ngururin.drv\nirrmaze.drv\njanshin.drv\njockeygp.drv\njoyjoy.drv\nkabukikl.drv\nkarnovr.drv\nkf10thep.drv\nkf2k2mp.drv\nkf2k2mp2.drv\nkf2k2pla.drv\nkf2k2pls.drv\nkf2k3bl.drv\nkf2k3bla.drv\nkf2k3pcb.drv\nkf2k3pl.drv\nkf2k3upl.drv\nkf2k5uni.drv\nkizuna.drv\nkof10th.drv\nkof2000.drv\nkof2000n.drv\nkof2001.drv\nkof2001h.drv\nkof2002.drv\nkof2002b.drv\nkof2003.drv\nkof2003h.drv\nkof2k4se.drv\nkof94.drv\nkof95.drv\nkof95h.drv\nkof96.drv\nkof96h.drv\nkof97.drv\nkof97a.drv\nkof97pls.drv\nkof98.drv\nkof98k.drv\nkof98n.drv\nkof99.drv\nkof99a.drv\nkof99e.drv\nkof99n.drv\nkof99p.drv\nkog.drv\nkotm.drv\nkotm2.drv\nkotmh.drv\nlans2004.drv\nlastblad.drv\nlastbladh.drv\nlastbld2.drv\nlastsold.drv\nlbowling.drv\nlegendos.drv\nlist.txt\nlresort.drv\nmagdrop2.drv\nmagdrop3.drv\nmaglord.drv\nmaglordh.drv\nmahretsu.drv\nmarukodq.drv\nmatrim.drv\nmatrimbl.drv\nmiexchng.drv\nminasan.drv\nmosyougi.drv\nms4plus.drv\nms5pcb.drv\nms5plus.drv\nmslug.drv\nmslug2.drv\nmslug3.drv\nmslug3b6.drv\nmslug3h.drv\nmslug3n.drv\nmslug4.drv\nmslug5.drv\nmslug5h.drv\nmslugx.drv\nmutnat.drv\nnam1975.drv\nncombat.drv\nncombath.drv\nncommand.drv\nneobombe.drv\nneocup98.drv\nneodrift.drv\nneogeo.drv\nneomrdo.drv\nninjamas.drv\nnitd.drv\nnitdbl.drv\novertop.drv\npanicbom.drv\npbobbl2n.drv\npbobblen.drv\npbobblena.drv\npgoal.drv\npnyaa.drv\npopbounc.drv\npreisle2.drv\npspikes2.drv\npulstar.drv\npuzzldpr.drv\npuzzledp.drv\nquizdai2.drv\nquizdais.drv\nquizkof.drv\nragnagrd.drv\nrbff1.drv\nrbff1a.drv\nrbff2.drv\nrbff2h.drv\nrbff2k.drv\nrbffspec.drv\nridhero.drv\nridheroh.drv\nroboarmy.drv\nrotd.drv\ns1945p.drv\nsamsh5sp.drv\nsamsh5sph.drv\nsamsh5spn.drv\nsamsho.drv\nsamsho2.drv\nsamsho3.drv\nsamsho3h.drv\nsamsho4.drv\nsamsho5.drv\nsamsho5b.drv\nsamsho5h.drv\nsamshoh.drv\nsavagere.drv\nsdodgeb.drv\nsengokh.drv\nsengoku.drv\nsengoku2.drv\nsengoku3.drv\nshocktr2.drv\nshocktra.drv\nshocktro.drv\nsocbrawl.drv\nsocbrawla.drv\nsonicwi2.drv\nsonicwi3.drv\nspinmast.drv\nssideki.drv\nssideki2.drv\nssideki3.drv\nssideki4.drv\nstakwin.drv\nstakwin2.drv\nstrhoop.drv\nsuperspy.drv\nsvc.drv\nsvcboot.drv\nsvcpcb.drv\nsvcpcba.drv\nsvcplus.drv\nsvcplusa.drv\nsvcsplus.drv\ntophuntr.drv\ntophuntra.drv\ntpgolf.drv\ntrally.drv\nturfmast.drv\ntwinspri.drv\ntws96.drv\nviewpoin.drv\nvliner.drv\nvlinero.drv\nwakuwak7.drv\nwh1.drv\nwh1h.drv\nwh1ha.drv\nwh2.drv\nwh2j.drv\nwh2jh.drv\nwhp.drv\nwjammers.drv\nzedblade.drv\nzintrckb.drv\nzupapa.drv", 
            "title": "Neo Geo"
        }, 
        {
            "location": "/Neo-Geo/#recommended-neo-geo-emulators", 
            "text": "lr-fbalpha  is recommended for emulating Neo Geo games because it features the libretro control system, shaders, and all other libretro advantages. Please also refer to  FB Alpha  and specifically [[lr-fbalpha]] for configuration information.  Users with Raspberry Pi 1s may prefer the standalone emulator  PiFBA , which will have better performance on limited hardware. The GnGeo-Pi emulator is also available.      Emulator  Rom Folder  Required ROM Version  Controller Config      lr-fbalpha  arcade  or  fba  or  neogeo  FB Alpha v0.2.97.39  /opt/retropie/configs/arcade/retroarch.cfg,  or  /opt/retropie/configs/fba/retroarch.cfg,  or  /opt/retropie/configs/neogeo/retroarch.cfg    PiFBA  arcade  or  fba  or  neogeo  FBA 0.2.96.71  /opt/retropie/emulators/pifba/fba2x.cfg  or  /opt/retropie/configs/fba/fba2x.cfg    GnGeo-Pi  arcade  or  neogeo  MAME 0.138  /opt/retropie/configs/neogeo/gngeorc", 
            "title": "Recommended Neo Geo emulators"
        }, 
        {
            "location": "/Neo-Geo/#roms", 
            "text": "Place Neo Geo ROMs in  /home/pi/RetroPie/roms/neogeo", 
            "title": "ROMS"
        }, 
        {
            "location": "/Neo-Geo/#bios", 
            "text": "Neo-Geo ROMs require a  neogeo.zip  BIOS file with the exact same MAME or FB Alpha version as the emulator you select. Place the correct  neogeo.zip  with your ROMs in:  /home/pi/RetroPie/roms/neogeo  Instructions on how to install the Neo Geo Unibios on lr-fbalpha can be found here: [[lr-fbalpha#neo-geo-unibios]] The Unibios can be used as documented on the official page:  http://unibios.free.fr/howitworks.html   On the Unibios boot screen  Neo-Geo  A+B+C  (RetroPad B+A+Y) for BIOS Menu  Neo-Geo  B+C+D  (RetroPad A+Y+X) for Test Menu    At any time  Neo-Geo  Start+A+B+C  (RetroPad Start+B+A+Y) for In-Game Menu     The menus allow you to change various settings like region, dip switch settings for gameplay options like difficulty or blood, and coin or free play settings. Unibios settings will persist after quitting FBA, launching another Neo-Geo game, or rebooting RetroPie.", 
            "title": "BIOS"
        }, 
        {
            "location": "/Neo-Geo/#emulators", 
            "text": "", 
            "title": "Emulators"
        }, 
        {
            "location": "/Neo-Geo/#lr-fbalpha", 
            "text": "lr-fbalpha Controls  lr-fbalpha utilises RetroArch configs. Add custom RetrAarch controls to the  retroarch.cfg  file in:  /opt/retropie/configs/fba/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-fbalpha"
        }, 
        {
            "location": "/Neo-Geo/#pifba", 
            "text": "PiFBA Controls  PiFBA controls are located in:  /opt/retropie/emulators/pifba/fba2x.cfg  As there is no menu to configure controllers with PiFBA like there is with Mame4all, you'll have to edit the aforementioned file manually.  Example fba2x.cfg :  [Keyboard]\n# Get codes from /usr/include/SDL/SDL_keysym.h\nA_1=306 #LCTRL (button1)\nB_1=32 #SPACE (button3)\nX_1=308 #LALT (button2\nY_1=304 #LSHIFT\nL_1=122 #z\nR_1=120 #x\nSTART_1=49 #1\nSELECT_1=53 #5\nLEFT_1=276 #left\nRIGHT_1=275 #right\nUP_1=273 #up\nDOWN_1=274 #down\nQUIT=27 #escape\n#player 2 keyboard controls, disabled by default\nA_2=97 #a (button1)\nB_2=113 #q (button3)\nX_2=115 #s (button2)\nY_2=119 #w\nL_2=105 #i\nR_2=107 #k\nSTART_2=50 #2\nSELECT_2=54 #6\nLEFT_2=100 #d\nRIGHT_2=103 #g\nUP_2=114 #r\nDOWN_2=102 #f\n\n[Joystick]\n# Get codes from  jstest /dev/input/js0 \n# from package  joystick \nA_1=3\nB_1=1\nX_1=2\nY_1=0\nL_1=4\nR_1=5\nSTART_1=9\nSELECT_1=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n#player 2 button configuration\nA_2=3\nB_2=1\nX_2=2\nY_2=0\nL_2=4\nR_2=5\nSTART_2=9\nSELECT_2=8\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n\n[Graphics]\nDisplaySmoothStretch=1\n# Display Effect: 0 none, 1 scanlines\nDisplayEffect=0\nDisplayBorder=0\nMaintainAspectRatio=1\n\n[Sound]", 
            "title": "PiFBA"
        }, 
        {
            "location": "/Neo-Geo/#gngeo-08-on-github", 
            "text": "Roms Dir: /home/pi/RetroPie/roms/neogeo\nBinary Dir: /opt/retropie/emulators/gngeopi/bin\nConfig Dir: /opt/retropie/configs/neogeo  MAME Version : 0.138 (May 2010)  Romsets emulated: 203  GnGeo-Pi DAT File :  pandora_gngeo_084_dat.zip  GnGeo-Pi Filtered DAT File :  pandora_gngeo_084_filtered.zip All clones non-working\\mahjong\\quiz removed  Romsets emulated : 128  GnGeo-Pi Compatibility List   feel free to contribute to the list.  As a caveat if you're using gngeopi, the ROMs you have must match the file in  gngeo_data.zip  located at:  /opt/retropie/emulators/gngeopi/share/gngeo  You can only play roms that have the same name as these .drv files, e.g.  mslug2.zip  (rom) and  mslug2.drv  (data). If the names of these files don't match, GnGeo-Pi will crash. (see the list at the bottom of this page for compatible ROMs)  GnGeo-Pi Controls  Once you've started GnGeo-Pi at least once a file called  gngeorc  will be created in:  /home/pi/.gngeo/gngeorc  Example Configuration:   Xbox360\n p1control A=J0B0,B=J0B1,C=J0B2,D=J0B3,START=J0B6,COIN=J0B10,UP=J0a1,DOWN=J0a1,LEFT=J0A0,RIGHT=J0A0,MENU=J0B7\n Dualshock2\n p1control A=J0B2,B=J0B1,C=J0B3,D=J0B0,START=J0B9,COIN=J0B8,UP=J0a1,DOWN=J0a1,LEFT=J0A0,RIGHT=J0A0\n\n Meaning of the code:\n Kxxx : keyboad key number xxx\n JxByy : Joystick number x Button\n JxAyy : Joystick number x Axe yy (use a lowercase 'a' if you need to invert the axis)\n JxHyy : Joystick number x Hat yy\n\n you can define a button multiple time, for example A=J0B0,A=K123,etc..  List of GnGeo-Pi ROMS :  2020bb.drv\n2020bba.drv\n2020bbh.drv\n3countb.drv\nalpham2.drv\nandrodun.drv\naodk.drv\naof.drv\naof2.drv\naof2a.drv\naof3.drv\naof3k.drv\nbakatono.drv\nbangbead.drv\nbjourney.drv\nblazstar.drv\nbreakers.drv\nbreakrev.drv\nbstars.drv\nbstars2.drv\nburningf.drv\nburningfh.drv\ncmc42.xor\ncmc50.xor\ncrsword.drv\nct2k3sa.drv\nct2k3sp.drv\ncthd2003.drv\nctomaday.drv\ncyberlip.drv\ndiggerma.drv\ndoubledr.drv\neightman.drv\nfatfursa.drv\nfatfursp.drv\nfatfury1.drv\nfatfury2.drv\nfatfury3.drv\nfbfrenzy.drv\nfightfev.drv\nfightfeva.drv\nflipshot.drv\nfswords.drv\ngalaxyfg.drv\nganryu.drv\ngarou.drv\ngaroubl.drv\ngarouo.drv\ngaroup.drv\nghostlop.drv\ngoalx3.drv\ngowcaizr.drv\ngpilots.drv\ngpilotsh.drv\ngururin.drv\nirrmaze.drv\njanshin.drv\njockeygp.drv\njoyjoy.drv\nkabukikl.drv\nkarnovr.drv\nkf10thep.drv\nkf2k2mp.drv\nkf2k2mp2.drv\nkf2k2pla.drv\nkf2k2pls.drv\nkf2k3bl.drv\nkf2k3bla.drv\nkf2k3pcb.drv\nkf2k3pl.drv\nkf2k3upl.drv\nkf2k5uni.drv\nkizuna.drv\nkof10th.drv\nkof2000.drv\nkof2000n.drv\nkof2001.drv\nkof2001h.drv\nkof2002.drv\nkof2002b.drv\nkof2003.drv\nkof2003h.drv\nkof2k4se.drv\nkof94.drv\nkof95.drv\nkof95h.drv\nkof96.drv\nkof96h.drv\nkof97.drv\nkof97a.drv\nkof97pls.drv\nkof98.drv\nkof98k.drv\nkof98n.drv\nkof99.drv\nkof99a.drv\nkof99e.drv\nkof99n.drv\nkof99p.drv\nkog.drv\nkotm.drv\nkotm2.drv\nkotmh.drv\nlans2004.drv\nlastblad.drv\nlastbladh.drv\nlastbld2.drv\nlastsold.drv\nlbowling.drv\nlegendos.drv\nlist.txt\nlresort.drv\nmagdrop2.drv\nmagdrop3.drv\nmaglord.drv\nmaglordh.drv\nmahretsu.drv\nmarukodq.drv\nmatrim.drv\nmatrimbl.drv\nmiexchng.drv\nminasan.drv\nmosyougi.drv\nms4plus.drv\nms5pcb.drv\nms5plus.drv\nmslug.drv\nmslug2.drv\nmslug3.drv\nmslug3b6.drv\nmslug3h.drv\nmslug3n.drv\nmslug4.drv\nmslug5.drv\nmslug5h.drv\nmslugx.drv\nmutnat.drv\nnam1975.drv\nncombat.drv\nncombath.drv\nncommand.drv\nneobombe.drv\nneocup98.drv\nneodrift.drv\nneogeo.drv\nneomrdo.drv\nninjamas.drv\nnitd.drv\nnitdbl.drv\novertop.drv\npanicbom.drv\npbobbl2n.drv\npbobblen.drv\npbobblena.drv\npgoal.drv\npnyaa.drv\npopbounc.drv\npreisle2.drv\npspikes2.drv\npulstar.drv\npuzzldpr.drv\npuzzledp.drv\nquizdai2.drv\nquizdais.drv\nquizkof.drv\nragnagrd.drv\nrbff1.drv\nrbff1a.drv\nrbff2.drv\nrbff2h.drv\nrbff2k.drv\nrbffspec.drv\nridhero.drv\nridheroh.drv\nroboarmy.drv\nrotd.drv\ns1945p.drv\nsamsh5sp.drv\nsamsh5sph.drv\nsamsh5spn.drv\nsamsho.drv\nsamsho2.drv\nsamsho3.drv\nsamsho3h.drv\nsamsho4.drv\nsamsho5.drv\nsamsho5b.drv\nsamsho5h.drv\nsamshoh.drv\nsavagere.drv\nsdodgeb.drv\nsengokh.drv\nsengoku.drv\nsengoku2.drv\nsengoku3.drv\nshocktr2.drv\nshocktra.drv\nshocktro.drv\nsocbrawl.drv\nsocbrawla.drv\nsonicwi2.drv\nsonicwi3.drv\nspinmast.drv\nssideki.drv\nssideki2.drv\nssideki3.drv\nssideki4.drv\nstakwin.drv\nstakwin2.drv\nstrhoop.drv\nsuperspy.drv\nsvc.drv\nsvcboot.drv\nsvcpcb.drv\nsvcpcba.drv\nsvcplus.drv\nsvcplusa.drv\nsvcsplus.drv\ntophuntr.drv\ntophuntra.drv\ntpgolf.drv\ntrally.drv\nturfmast.drv\ntwinspri.drv\ntws96.drv\nviewpoin.drv\nvliner.drv\nvlinero.drv\nwakuwak7.drv\nwh1.drv\nwh1h.drv\nwh1ha.drv\nwh2.drv\nwh2j.drv\nwh2jh.drv\nwhp.drv\nwjammers.drv\nzedblade.drv\nzintrckb.drv\nzupapa.drv", 
            "title": "GnGeo 0.8 on github"
        }, 
        {
            "location": "/Neo-Geo-Pocket-Color/", 
            "text": "The Neo Geo Pocket Color was a handheld video game system released by SNK in 1999.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-beetle-ngp\n\n\nngpc\n\n\n.ngc\n\n\nnone\n\n\n/opt/retropie/configs/ngpc/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-beetle-ngp\n\n\nROMS\n\n\nAccept File Extensions: \n.ngc\n\n\nPlace your Neo Geo Pocket Color ROMs in\n\n\n/home/pi/RetroPie/roms/ngpc\n\n\n\n\nControls\n\n\nlr-beetle-ngp utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/ngpc/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Neo Geo Pocket Color"
        }, 
        {
            "location": "/Neo-Geo-Pocket-Color/#emulator-lr-beetle-ngp", 
            "text": "", 
            "title": "Emulator: lr-beetle-ngp"
        }, 
        {
            "location": "/Neo-Geo-Pocket-Color/#roms", 
            "text": "Accept File Extensions:  .ngc  Place your Neo Geo Pocket Color ROMs in  /home/pi/RetroPie/roms/ngpc", 
            "title": "ROMS"
        }, 
        {
            "location": "/Neo-Geo-Pocket-Color/#controls", 
            "text": "lr-beetle-ngp utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/ngpc/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Neo-Geo-Pocket/", 
            "text": "The Neo Geo Pocket was a handheld video game system released by SNK in 1998.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-beetle-ngp\n\n\nngp\n\n\n.ngp\n\n\nnone\n\n\n/opt/retropie/configs/ngp/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-beetle-ngp\n\n\nROMS\n\n\nAccept File Extensions: \n.ngp\n\n\nPlace your Neo Geo Pocket ROMs in\n\n\n/home/pi/RetroPie/roms/ngp\n\n\n\n\nControls\n\n\nlr-beetle-ngp utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/ngp/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Neo Geo Pocket"
        }, 
        {
            "location": "/Neo-Geo-Pocket/#emulator-lr-beetle-ngp", 
            "text": "", 
            "title": "Emulator: lr-beetle-ngp"
        }, 
        {
            "location": "/Neo-Geo-Pocket/#roms", 
            "text": "Accept File Extensions:  .ngp  Place your Neo Geo Pocket ROMs in  /home/pi/RetroPie/roms/ngp", 
            "title": "ROMS"
        }, 
        {
            "location": "/Neo-Geo-Pocket/#controls", 
            "text": "lr-beetle-ngp utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/ngp/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Nintendo-64/", 
            "text": "The Nintendo 64 is a 5th generation gaming console released by Nintendo in 1996\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nMupen64plus\n\n\nn64\n\n\n.z64 .n64 .v64\n\n\nnone\n\n\n/opt/retropie/configs/n64/InputAutoCfg.ini \nand\n /opt/retropie/configs/n64/mupen64plus.cfg\n\n\n\n\n\n\nlr-Mupen64plus\n\n\nn64\n\n\n.z64 .n64 .v64\n\n\nnone\n\n\n/opt/retropie/configs/n64/retroarch.cfg\n\n\n\n\n\n\nlr-GLupeN64\n\n\nn64\n\n\n.z64 .n64 .v64\n\n\nnone\n\n\n/opt/retropie/configs/n64/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulators: \nMupen64plus\n, \nlr-Mupen64plus\n, \nlr-GLupeN64\n\n\nWhile the mupen64plus-libretro core has the convenience of RetroArch configurations, the actual Mupen64plus does better with performance. \n\n\nYou can choose between the RICE, glesN64 and GLideN64 video plugin from the \nruncommand\n menu- you may have to test out each one to see which works best- but you can also check the compatibility list below.\n\n\nNote that you need a Raspberry Pi 2 if you want any decent N64 performance and even then it is hit and miss.\n\n\nROMS\n\n\nAccepted File Extensions: \n.z64 .n64 .v64\n\n\nPlace your Nintendo 64 ROMs in \n\n\n/home/pi/RetroPie/roms/n64\n\n\n\n\nRom Compatibility List\n feel free to contribute!\n\n\nSecondary Rom Compatibility list with testing on Raspberry Pi 3 need to \nmerge 2 lists\n. \n\n\nDon't want to step on any toes and Credit to the author of the original list, but here is \nanother\n. I just took the original sheet and did some formatting. Use the first tab for Comments and Suggestions. Just trying to help get this to one sheet.\n\n\nPerformance\n\n\nLow screen resolution are recommended to get best performance. Performance suffers if HD resolutions are used.\n\n\nRetroPie 4.0 forces a resolution of 320x240 for best performance. \n\n\nTweaks\n\n\nMupen64plus\n\n\nRetroPie 3.x:\n\n\n/opt/retropie/configs/all/autoconf.cfg\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nmupen64plus_audio\n\n\nenable auto configuration of audio output path\n\n\n(0/1)\n\n\n\n\n\n\nmupen64plus_hotkeys\n\n\nenable hotkey auto configuration\n\n\n(0/1)\n\n\n\n\n\n\nmupen64plus_compatibility_check\n\n\nenable compatibility check which alters game related settings\n\n\n(0/1)\n\n\n\n\n\n\n8bitdo_hack\n\n\nenable 8bitdo controller mapping hack\n\n\n(0/1)\n\n\n\n\n\n\n\n\n/opt/retropie/configs/n64/mupen64plus.cfg\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nAudio-OMX/OUTPUT_PORT\n\n\nAudio output path is Jack or HDMI. (will be overwritten if \nmupen64plus_audio\n is enabled)\n\n\n(0=Audio Jack / \n1=HDMI\n)\n\n\n\n\n\n\nCoreEvents/Joy Mapping Stop\n\n\nJoystick exit button. (will be overwritten if \nmupen64plus_hotkeys\n is enabled)\n\n\nJ\nX\nB\nY\n/B\nZ\n or J\nX\nB\nY\n\n\n\n\n\n\nCoreEvents/Joy Mapping Load State\n\n\nJoystick load state button. (will be overwritten if \nmupen64plus_hotkeys\n is enabled)\n\n\nJ\nX\nB\nY\n/B\nZ\n or J\nX\nB\nY\n\n\n\n\n\n\nCoreEvents/Joy Mapping Save State\n\n\nJoystick save state button. (will be overwritten if \nmupen64plus_hotkeys\n is enabled)\n\n\nJ\nX\nB\nY\n/B\nZ\n or J\nX\nB\nY\n\n\n\n\n\n\nVideo-GLideN64/EnableFBEmulation\n\n\nEnable framebuffer emulation. Games like Mario Tennis need this option to render framebuffer effects. Some games have glitches if this option is enabled. (will be overwritten if \ncompatibility_check\n is enabled)\n\n\n(True/\nFalse\n)\n\n\n\n\n\n\nVideo-GLideN64/enableLegacyBlending\n\n\nUse fixed function pipeline instead of shaders for blending for speed. Some games have glitches if this option is enabled. (will be overwritten if \ncompatibility_check\n is enabled)\n\n\n(True/\nFalse\n)\n\n\n\n\n\n\n\n\nRetroPie 4.0: GLideN64/Rice\n\n\n/opt/retropie/emulators/mupen64plus/bin/mupen64plus.sh line 269\n\n\n\n\nScaling Mode --\n SDL_VIDEO_RPI_SCALE_MODE=x\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nWindow resolution is desktop resolution. This is the behaviour of SDL \n= 2.0.4. (default)\n\n\n\n\n\n\n1\n\n\nRequested video resolution will be scaled to desktop resolution. Aspect ratio of requested video resolution will be respected.\n\n\n\n\n\n\n2\n\n\nRequested video resolution will be scaled to desktop resolution.\n\n\n\n\n\n\n3\n\n\nRequested video resolution will be scaled to desktop resolution. Aspect ratio of requested video resolution will be respected. If possible output resolution will be integral multiple of video resolution.\n\n\n\n\n\n\n\n\n/opt/retropie/configs/n64/emulators.cfg\n\n\n\n\nYou can use emulators.cfg to add custom resolution startup options. Default resolution options are 320x240 and 640x480.\n\n\nControls\n\n\nlr-Mupen64plus, lr-GLupeN64\n\n\nlr-Mupen64plus and lr-GLupeN64 utilise RetroArch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/n64/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nMupen64plus\n\n\nStarting with RetroPie 3.3 Mupen64Plus configurations are automatically generated when you configure your controller for the first time in emulationstation. Mupen64plus configurations differ from the RetroArch configs listed above and more closely match the original physical N64 controller.\n\n\n\nThere are two main configuration files that can be modified located at:\n\n\n/opt/retropie/configs/n64/mupen64plus.cfg\nand\n/opt/retropie/configs/n64/InputAutoCfg.ini\n\n\n\n\nNote that, by default, the memory expansion pack is configured as installed.\n\n\nHotkeys and special buttons\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSELECT + START\n\n\nExit emulator.\n\n\n\n\n\n\nSELECT + L1\n\n\nLoad state.\n\n\n\n\n\n\nSELECT + R1\n\n\nSave state.\n\n\n\n\n\n\nTHUMB LEFT\n\n\nEnable memory expansion pak.\n\n\n\n\n\n\nTHUMB RIGHT\n\n\nEnable rumble expansion pak.\n\n\n\n\n\n\n\n\nExample mupen64plus.cfg\n\n\n[CoreEvents]\n\n# Mupen64Plus CoreEvents config parameter set version number.  Please don't change this version number.\nVersion = 1\n# SDL keysym for stopping the emulator\nKbd Mapping Stop = 27\n# SDL keysym for switching between fullscreen/windowed modes\nKbd Mapping Fullscreen = 0\n# SDL keysym for saving the emulator state\nKbd Mapping Save State = 286\n# SDL keysym for loading the emulator state\nKbd Mapping Load State = 288\n# SDL keysym for advancing the save state slot\nKbd Mapping Increment Slot = 0\n# SDL keysym for resetting the emulator\nKbd Mapping Reset = 290\n# SDL keysym for slowing down the emulator\nKbd Mapping Speed Down = 291\n# SDL keysym for speeding up the emulator\nKbd Mapping Speed Up = 292\n# SDL keysym for taking a screenshot\nKbd Mapping Screenshot = 293\n# SDL keysym for pausing the emulator\nKbd Mapping Pause = 112\n# SDL keysym for muting/unmuting the sound\nKbd Mapping Mute = 109\n# SDL keysym for increasing the volume\nKbd Mapping Increase Volume = 93\n# SDL keysym for decreasing the volume\nKbd Mapping Decrease Volume = 91\n# SDL keysym for temporarily going really fast\nKbd Mapping Fast Forward = 102\n# SDL keysym for advancing by one frame when paused\nKbd Mapping Frame Advance = 47\n# SDL keysym for pressing the game shark button\nKbd Mapping Gameshark = 103\n# Joystick event string for stopping the emulator\nJoy Mapping Stop = \nJ0B7/B6,J1B7/B6\n\n# Joystick event string for switching between fullscreen/windowed modes\nJoy Mapping Fullscreen = \n\n# Joystick event string for saving the emulator state\nJoy Mapping Save State = \nJ0B5/B6,J1B5/B6\n\n# Joystick event string for loading the emulator state\nJoy Mapping Load State = \nJ0B4/B6,J1B4/B6\n\n# Joystick event string for advancing the save state slot\nJoy Mapping Increment Slot = \n\n# Joystick event string for taking a screenshot\nJoy Mapping Screenshot = \n\n# Joystick event string for pausing the emulator\nJoy Mapping Pause = \n\n# Joystick event string for muting/unmuting the sound\nJoy Mapping Mute = \n\n# Joystick event string for increasing the volume\nJoy Mapping Increase Volume = \n\n# Joystick event string for decreasing the volume\nJoy Mapping Decrease Volume = \n\n# Joystick event string for fast-forward\nJoy Mapping Fast Forward = \n\n# Joystick event string for pressing the game shark button\nJoy Mapping Gameshark = \n\n\n\n[Input-SDL-Control1]\n\n# Mupen64Plus SDL Input Plugin config parameter version number.  Please don't change this version number.\nversion = 2\n# Controller configuration mode: 0=Fully Manual, 1=Auto with named SDL Device, 2=Fully automatic\nmode = 2\n# Specifies which joystick is bound to this controller: -1=No joystick, 0 or more= SDL Joystick number\ndevice = 0\n# SDL joystick name (or Keyboard)\nname = \nLogitech Gamepad F310\n\n# Specifies whether this controller is 'plugged in' to the simulated N64\nplugged = True\n# Specifies which type of expansion pak is in the controller: 1=None, 2=Mem pak, 5=Rumble pak\nplugin = 2\n# If True, then mouse buttons may be used with this controller\nmouse = False\n# Scaling factor for mouse movements.  For X, Y axes.\nMouseSensitivity = \n2.00,2.00\n\n# The minimum absolute value of the SDL analog joystick axis to move the N64 controller axis value from 0.  For X, Y axes.\nAnalogDeadzone = \n4096,4096\n\n# An absolute value of the SDL joystick axis \n= AnalogPeak will saturate the N64 controller axis value (at 80).  For X, Y axes. For each axis, this must be greater than the corresponding AnalogDeadzone value\nAnalogPeak = \n32768,32768\n\n# Digital button configuration mappings\nDPad R = \nhat(0 Right)\n\nDPad L = \nhat(0 Left)\n\nDPad D = \nhat(0 Down)\n\nDPad U = \nhat(0 Up)\n\nStart = \nbutton(7)\n\nZ Trig = \nbutton(5)\n\nB Button = \nbutton(2)\n\nA Button = \nbutton(0)\n\nC Button R = \naxis(3+)\n\nC Button L = \naxis(3-)\n\nC Button D = \naxis(4+)\n\nC Button U = \naxis(4-)\n\nR Trig = \naxis(5-)\n\nL Trig = \naxis(2-)\n\nMempak switch = \nbutton(1)\n\nRumblepak switch = \nbutton(3)\n\n# Analog axis configuration mappings\nX Axis = \naxis(0-,0+)\n\nY Axis = \naxis(1-,1+)\n\n\n\n[Input-SDL-Control2]\n\n# Mupen64Plus SDL Input Plugin config parameter version number.  Please don't change this version number.\nversion = 2\n# Controller configuration mode: 0=Fully Manual, 1=Auto with named SDL Device, 2=Fully automatic\nmode = 2\n# Specifies which joystick is bound to this controller: -1=No joystick, 0 or more= SDL Joystick number\ndevice = 1\n# SDL joystick name (or Keyboard)\nname = \nLogitech Gamepad F310\n\n# Specifies whether this controller is 'plugged in' to the simulated N64\nplugged = True\n# Specifies which type of expansion pak is in the controller: 1=None, 2=Mem pak, 5=Rumble pak\nplugin = 2\n# If True, then mouse buttons may be used with this controller\nmouse = False\n# Scaling factor for mouse movements.  For X, Y axes.\nMouseSensitivity = \n2.00,2.00\n\n# The minimum absolute value of the SDL analog joystick axis to move the N64 controller axis value from 0.  For X, Y axes.\nAnalogDeadzone = \n4096,4096\n\n# An absolute value of the SDL joystick axis \n= AnalogPeak will saturate the N64 controller axis value (at 80).  For X, Y axes. For each axis, this must be greater than the corresponding AnalogDeadzone value\nAnalogPeak = \n32768,32768\n\n# Digital button configuration mappings\nDPad R = \nhat(0 Right)\n\nDPad L = \nhat(0 Left)\n\nDPad D = \nhat(0 Down)\n\nDPad U = \nhat(0 Up)\n\nStart = \nbutton(7)\n\nZ Trig = \nbutton(5)\n\nB Button = \nbutton(2)\n\nA Button = \nbutton(0)\n\nC Button R = \naxis(3+)\n\nC Button L = \naxis(3-)\n\nC Button D = \naxis(4+)\n\nC Button U = \naxis(4-)\n\nR Trig = \naxis(5-)\n\nL Trig = \naxis(2-)\n\nMempak switch = \nbutton(1)\n\nRumblepak switch = \nbutton(3)\n\n# Analog axis configuration mappings\nX Axis = \naxis(0-,0+)\n\nY Axis = \naxis(1-,1+)\n\n\n\n\n\nExample InputAutoCfg.ini\n\n\n[Logitech Gamepad F310]\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768\nDPad R = hat(0 Right)\nDPad L = hat(0 Left)\nDPad D = hat(0 Down)\nDPad U = hat(0 Up)\nStart = button(7)\nZ Trig = button(5)\nB Button = button(2)\nA Button = button(0)\nC Button R = axis(3+)\nC Button L = axis(3-)\nC Button D = axis(4+)\nC Button U = axis(4-)\nR Trig = axis(5-)\nL Trig = axis(2-)\nMempak switch = button(1)\nRumblepak switch = button(3)\nX Axis = axis(0-,0+)\nY Axis = axis(1-,1+)\n\n\n\n\nVideo Tutorials\n\n\n |\n\n \n\n\nNote for configuring Arcade Joystick or non analogue controller to use N64 correctly.\n\n\nChanging the below inside /opt/retropie/configs/n64/InputAutoCfg.ini\n\n\nFrom\nX Axis = \"hat(0 Left, 0 Right)\"\nY Axis = \"hat(0 Up, 0 Down)\"\n\n\nTo \nX Axis = \"hat(0 Left Right)\"\nY Axis = \"hat(0 Up Down)\"\n\n\nGets joystick correctly configured\nTested with Akishop PS360+ \n\n\nIf your config will differ, go to input configuration, and configure your joystick to use the joystick for Left Analogue UP Down Left and right.  Then browse to \n/opt/retropie/configs/n64/InputAutoCfg.ini\n and cat that file\n\ncat /opt/retropie/configs/n64/InputAutoCfg.ini\n\nCopy that into a text file.   Then go back to input configuration and map your controller correctly again using joystick inputs to dpad up down left and right.  After this completes go back to edit the \n/opt/retropie/configs/n64/InputAutoCfg.ini\n and only change the portion that relates to X and Y axis from your previous state where your joystick was mapped to the analogue inputs. \n\n\nFrom there you will be able to use your joystick as analogue inputs in 64 games. \n\n\nConfiguring N64 USB Controller for use with Retropie accurately\n\n\nWhat I do is I will configure via Retropie the config how I like it for all the general emulators and then i will edit the /opt/retropie/configs/n64/InputAutoCfg.ini file with the below which as long as your using the USB N64 pad should get your 64 controller mapped correctly.\n\n\nI sacrifice Ltrigger to Select and don't define it so It can be used to xit the emulator with start\n\n\n; Generic USB Joystick _START\n[Generic USB Joystick ]\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768\nMempak switch =\nRumblepak switch =\nR Trig = button(5)\nStart = button(9)\nY Axis = axis(1-,1+)\nZ Trig = button(7)\nDPad U = hat(0 Up)\nA Button = button(6)\nDPad D = hat(0 Down)\nX Axis = axis(0-,0+)\nDPad R = hat(0 Right)\nB Button = button(8)\nDPad L = hat(0 Left)\nC Button R = button(1)\nC Button L = button(3)\nC Button D = button(2)\nC Button U = button(0)\n; Generic USB Joystick _END\n\n\n\n\n\nRetroLink controller config source", 
            "title": "Nintendo 64"
        }, 
        {
            "location": "/Nintendo-64/#emulators-mupen64plus-lr-mupen64plus-lr-glupen64", 
            "text": "While the mupen64plus-libretro core has the convenience of RetroArch configurations, the actual Mupen64plus does better with performance.   You can choose between the RICE, glesN64 and GLideN64 video plugin from the  runcommand  menu- you may have to test out each one to see which works best- but you can also check the compatibility list below.  Note that you need a Raspberry Pi 2 if you want any decent N64 performance and even then it is hit and miss.", 
            "title": "Emulators: Mupen64plus, lr-Mupen64plus, lr-GLupeN64"
        }, 
        {
            "location": "/Nintendo-64/#roms", 
            "text": "Accepted File Extensions:  .z64 .n64 .v64  Place your Nintendo 64 ROMs in   /home/pi/RetroPie/roms/n64", 
            "title": "ROMS"
        }, 
        {
            "location": "/Nintendo-64/#rom-compatibility-list-feel-free-to-contribute", 
            "text": "Secondary Rom Compatibility list with testing on Raspberry Pi 3 need to  merge 2 lists .   Don't want to step on any toes and Credit to the author of the original list, but here is  another . I just took the original sheet and did some formatting. Use the first tab for Comments and Suggestions. Just trying to help get this to one sheet.", 
            "title": "Rom Compatibility List feel free to contribute!"
        }, 
        {
            "location": "/Nintendo-64/#performance", 
            "text": "Low screen resolution are recommended to get best performance. Performance suffers if HD resolutions are used.  RetroPie 4.0 forces a resolution of 320x240 for best performance.", 
            "title": "Performance"
        }, 
        {
            "location": "/Nintendo-64/#tweaks", 
            "text": "", 
            "title": "Tweaks"
        }, 
        {
            "location": "/Nintendo-64/#mupen64plus", 
            "text": "RetroPie 3.x:  /opt/retropie/configs/all/autoconf.cfg     Option  Description  Value      mupen64plus_audio  enable auto configuration of audio output path  (0/1)    mupen64plus_hotkeys  enable hotkey auto configuration  (0/1)    mupen64plus_compatibility_check  enable compatibility check which alters game related settings  (0/1)    8bitdo_hack  enable 8bitdo controller mapping hack  (0/1)     /opt/retropie/configs/n64/mupen64plus.cfg     Option  Description  Value      Audio-OMX/OUTPUT_PORT  Audio output path is Jack or HDMI. (will be overwritten if  mupen64plus_audio  is enabled)  (0=Audio Jack /  1=HDMI )    CoreEvents/Joy Mapping Stop  Joystick exit button. (will be overwritten if  mupen64plus_hotkeys  is enabled)  J X B Y /B Z  or J X B Y    CoreEvents/Joy Mapping Load State  Joystick load state button. (will be overwritten if  mupen64plus_hotkeys  is enabled)  J X B Y /B Z  or J X B Y    CoreEvents/Joy Mapping Save State  Joystick save state button. (will be overwritten if  mupen64plus_hotkeys  is enabled)  J X B Y /B Z  or J X B Y    Video-GLideN64/EnableFBEmulation  Enable framebuffer emulation. Games like Mario Tennis need this option to render framebuffer effects. Some games have glitches if this option is enabled. (will be overwritten if  compatibility_check  is enabled)  (True/ False )    Video-GLideN64/enableLegacyBlending  Use fixed function pipeline instead of shaders for blending for speed. Some games have glitches if this option is enabled. (will be overwritten if  compatibility_check  is enabled)  (True/ False )     RetroPie 4.0: GLideN64/Rice  /opt/retropie/emulators/mupen64plus/bin/mupen64plus.sh line 269  Scaling Mode --  SDL_VIDEO_RPI_SCALE_MODE=x     Value  Description      0  Window resolution is desktop resolution. This is the behaviour of SDL  = 2.0.4. (default)    1  Requested video resolution will be scaled to desktop resolution. Aspect ratio of requested video resolution will be respected.    2  Requested video resolution will be scaled to desktop resolution.    3  Requested video resolution will be scaled to desktop resolution. Aspect ratio of requested video resolution will be respected. If possible output resolution will be integral multiple of video resolution.     /opt/retropie/configs/n64/emulators.cfg  You can use emulators.cfg to add custom resolution startup options. Default resolution options are 320x240 and 640x480.", 
            "title": "Mupen64plus"
        }, 
        {
            "location": "/Nintendo-64/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Nintendo-64/#lr-mupen64plus-lr-glupen64", 
            "text": "lr-Mupen64plus and lr-GLupeN64 utilise RetroArch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/n64/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-Mupen64plus, lr-GLupeN64"
        }, 
        {
            "location": "/Nintendo-64/#mupen64plus_1", 
            "text": "Starting with RetroPie 3.3 Mupen64Plus configurations are automatically generated when you configure your controller for the first time in emulationstation. Mupen64plus configurations differ from the RetroArch configs listed above and more closely match the original physical N64 controller.  \nThere are two main configuration files that can be modified located at:  /opt/retropie/configs/n64/mupen64plus.cfg\nand\n/opt/retropie/configs/n64/InputAutoCfg.ini  Note that, by default, the memory expansion pack is configured as installed.", 
            "title": "Mupen64plus"
        }, 
        {
            "location": "/Nintendo-64/#hotkeys-and-special-buttons", 
            "text": "Key  Description      SELECT + START  Exit emulator.    SELECT + L1  Load state.    SELECT + R1  Save state.    THUMB LEFT  Enable memory expansion pak.    THUMB RIGHT  Enable rumble expansion pak.", 
            "title": "Hotkeys and special buttons"
        }, 
        {
            "location": "/Nintendo-64/#example-mupen64pluscfg", 
            "text": "[CoreEvents]\n\n# Mupen64Plus CoreEvents config parameter set version number.  Please don't change this version number.\nVersion = 1\n# SDL keysym for stopping the emulator\nKbd Mapping Stop = 27\n# SDL keysym for switching between fullscreen/windowed modes\nKbd Mapping Fullscreen = 0\n# SDL keysym for saving the emulator state\nKbd Mapping Save State = 286\n# SDL keysym for loading the emulator state\nKbd Mapping Load State = 288\n# SDL keysym for advancing the save state slot\nKbd Mapping Increment Slot = 0\n# SDL keysym for resetting the emulator\nKbd Mapping Reset = 290\n# SDL keysym for slowing down the emulator\nKbd Mapping Speed Down = 291\n# SDL keysym for speeding up the emulator\nKbd Mapping Speed Up = 292\n# SDL keysym for taking a screenshot\nKbd Mapping Screenshot = 293\n# SDL keysym for pausing the emulator\nKbd Mapping Pause = 112\n# SDL keysym for muting/unmuting the sound\nKbd Mapping Mute = 109\n# SDL keysym for increasing the volume\nKbd Mapping Increase Volume = 93\n# SDL keysym for decreasing the volume\nKbd Mapping Decrease Volume = 91\n# SDL keysym for temporarily going really fast\nKbd Mapping Fast Forward = 102\n# SDL keysym for advancing by one frame when paused\nKbd Mapping Frame Advance = 47\n# SDL keysym for pressing the game shark button\nKbd Mapping Gameshark = 103\n# Joystick event string for stopping the emulator\nJoy Mapping Stop =  J0B7/B6,J1B7/B6 \n# Joystick event string for switching between fullscreen/windowed modes\nJoy Mapping Fullscreen =  \n# Joystick event string for saving the emulator state\nJoy Mapping Save State =  J0B5/B6,J1B5/B6 \n# Joystick event string for loading the emulator state\nJoy Mapping Load State =  J0B4/B6,J1B4/B6 \n# Joystick event string for advancing the save state slot\nJoy Mapping Increment Slot =  \n# Joystick event string for taking a screenshot\nJoy Mapping Screenshot =  \n# Joystick event string for pausing the emulator\nJoy Mapping Pause =  \n# Joystick event string for muting/unmuting the sound\nJoy Mapping Mute =  \n# Joystick event string for increasing the volume\nJoy Mapping Increase Volume =  \n# Joystick event string for decreasing the volume\nJoy Mapping Decrease Volume =  \n# Joystick event string for fast-forward\nJoy Mapping Fast Forward =  \n# Joystick event string for pressing the game shark button\nJoy Mapping Gameshark =  \n\n\n[Input-SDL-Control1]\n\n# Mupen64Plus SDL Input Plugin config parameter version number.  Please don't change this version number.\nversion = 2\n# Controller configuration mode: 0=Fully Manual, 1=Auto with named SDL Device, 2=Fully automatic\nmode = 2\n# Specifies which joystick is bound to this controller: -1=No joystick, 0 or more= SDL Joystick number\ndevice = 0\n# SDL joystick name (or Keyboard)\nname =  Logitech Gamepad F310 \n# Specifies whether this controller is 'plugged in' to the simulated N64\nplugged = True\n# Specifies which type of expansion pak is in the controller: 1=None, 2=Mem pak, 5=Rumble pak\nplugin = 2\n# If True, then mouse buttons may be used with this controller\nmouse = False\n# Scaling factor for mouse movements.  For X, Y axes.\nMouseSensitivity =  2.00,2.00 \n# The minimum absolute value of the SDL analog joystick axis to move the N64 controller axis value from 0.  For X, Y axes.\nAnalogDeadzone =  4096,4096 \n# An absolute value of the SDL joystick axis  = AnalogPeak will saturate the N64 controller axis value (at 80).  For X, Y axes. For each axis, this must be greater than the corresponding AnalogDeadzone value\nAnalogPeak =  32768,32768 \n# Digital button configuration mappings\nDPad R =  hat(0 Right) \nDPad L =  hat(0 Left) \nDPad D =  hat(0 Down) \nDPad U =  hat(0 Up) \nStart =  button(7) \nZ Trig =  button(5) \nB Button =  button(2) \nA Button =  button(0) \nC Button R =  axis(3+) \nC Button L =  axis(3-) \nC Button D =  axis(4+) \nC Button U =  axis(4-) \nR Trig =  axis(5-) \nL Trig =  axis(2-) \nMempak switch =  button(1) \nRumblepak switch =  button(3) \n# Analog axis configuration mappings\nX Axis =  axis(0-,0+) \nY Axis =  axis(1-,1+) \n\n\n[Input-SDL-Control2]\n\n# Mupen64Plus SDL Input Plugin config parameter version number.  Please don't change this version number.\nversion = 2\n# Controller configuration mode: 0=Fully Manual, 1=Auto with named SDL Device, 2=Fully automatic\nmode = 2\n# Specifies which joystick is bound to this controller: -1=No joystick, 0 or more= SDL Joystick number\ndevice = 1\n# SDL joystick name (or Keyboard)\nname =  Logitech Gamepad F310 \n# Specifies whether this controller is 'plugged in' to the simulated N64\nplugged = True\n# Specifies which type of expansion pak is in the controller: 1=None, 2=Mem pak, 5=Rumble pak\nplugin = 2\n# If True, then mouse buttons may be used with this controller\nmouse = False\n# Scaling factor for mouse movements.  For X, Y axes.\nMouseSensitivity =  2.00,2.00 \n# The minimum absolute value of the SDL analog joystick axis to move the N64 controller axis value from 0.  For X, Y axes.\nAnalogDeadzone =  4096,4096 \n# An absolute value of the SDL joystick axis  = AnalogPeak will saturate the N64 controller axis value (at 80).  For X, Y axes. For each axis, this must be greater than the corresponding AnalogDeadzone value\nAnalogPeak =  32768,32768 \n# Digital button configuration mappings\nDPad R =  hat(0 Right) \nDPad L =  hat(0 Left) \nDPad D =  hat(0 Down) \nDPad U =  hat(0 Up) \nStart =  button(7) \nZ Trig =  button(5) \nB Button =  button(2) \nA Button =  button(0) \nC Button R =  axis(3+) \nC Button L =  axis(3-) \nC Button D =  axis(4+) \nC Button U =  axis(4-) \nR Trig =  axis(5-) \nL Trig =  axis(2-) \nMempak switch =  button(1) \nRumblepak switch =  button(3) \n# Analog axis configuration mappings\nX Axis =  axis(0-,0+) \nY Axis =  axis(1-,1+)", 
            "title": "Example mupen64plus.cfg"
        }, 
        {
            "location": "/Nintendo-64/#example-inputautocfgini", 
            "text": "[Logitech Gamepad F310]\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768\nDPad R = hat(0 Right)\nDPad L = hat(0 Left)\nDPad D = hat(0 Down)\nDPad U = hat(0 Up)\nStart = button(7)\nZ Trig = button(5)\nB Button = button(2)\nA Button = button(0)\nC Button R = axis(3+)\nC Button L = axis(3-)\nC Button D = axis(4+)\nC Button U = axis(4-)\nR Trig = axis(5-)\nL Trig = axis(2-)\nMempak switch = button(1)\nRumblepak switch = button(3)\nX Axis = axis(0-,0+)\nY Axis = axis(1-,1+)", 
            "title": "Example InputAutoCfg.ini"
        }, 
        {
            "location": "/Nintendo-64/#video-tutorials", 
            "text": "|", 
            "title": "Video Tutorials"
        }, 
        {
            "location": "/Nintendo-64/#note-for-configuring-arcade-joystick-or-non-analogue-controller-to-use-n64-correctly", 
            "text": "Changing the below inside /opt/retropie/configs/n64/InputAutoCfg.ini  From\nX Axis = \"hat(0 Left, 0 Right)\"\nY Axis = \"hat(0 Up, 0 Down)\"  To \nX Axis = \"hat(0 Left Right)\"\nY Axis = \"hat(0 Up Down)\"  Gets joystick correctly configured\nTested with Akishop PS360+   If your config will differ, go to input configuration, and configure your joystick to use the joystick for Left Analogue UP Down Left and right.  Then browse to  /opt/retropie/configs/n64/InputAutoCfg.ini  and cat that file cat /opt/retropie/configs/n64/InputAutoCfg.ini \nCopy that into a text file.   Then go back to input configuration and map your controller correctly again using joystick inputs to dpad up down left and right.  After this completes go back to edit the  /opt/retropie/configs/n64/InputAutoCfg.ini  and only change the portion that relates to X and Y axis from your previous state where your joystick was mapped to the analogue inputs.   From there you will be able to use your joystick as analogue inputs in 64 games.", 
            "title": "Note for configuring Arcade Joystick or non analogue controller to use N64 correctly."
        }, 
        {
            "location": "/Nintendo-64/#configuring-n64-usb-controller-for-use-with-retropie-accurately", 
            "text": "What I do is I will configure via Retropie the config how I like it for all the general emulators and then i will edit the /opt/retropie/configs/n64/InputAutoCfg.ini file with the below which as long as your using the USB N64 pad should get your 64 controller mapped correctly.  I sacrifice Ltrigger to Select and don't define it so It can be used to xit the emulator with start  ; Generic USB Joystick _START\n[Generic USB Joystick ]\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768\nMempak switch =\nRumblepak switch =\nR Trig = button(5)\nStart = button(9)\nY Axis = axis(1-,1+)\nZ Trig = button(7)\nDPad U = hat(0 Up)\nA Button = button(6)\nDPad D = hat(0 Down)\nX Axis = axis(0-,0+)\nDPad R = hat(0 Right)\nB Button = button(8)\nDPad L = hat(0 Left)\nC Button R = button(1)\nC Button L = button(3)\nC Button D = button(2)\nC Button U = button(0)\n; Generic USB Joystick _END  RetroLink controller config source", 
            "title": "Configuring N64 USB Controller for use with Retropie accurately"
        }, 
        {
            "location": "/Nintendo-DS/", 
            "text": "The Nintendo DS is a handheld video game console that was released by Nintendo in 2004. The DS stands for Dual Screen.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nDraStic\n\n\nnds\n\n\n.nds .zip\n\n\ndrastic_bios_arm7.bin, drastic_bios_arm9.bin\n\n\n/opt/retropie/configs/nds/drastic/config/drastic.cfg\n\n\n\n\n\n\nlr-desmume\n\n\nnds\n\n\n.nds .zip\n\n\nnone\n\n\n/opt/retropie/configs/nds/retroarch.cfg\n\n\n\n\n\n\n\n\nNote that lr-desmume is very experimental and lags quite a bit even with an overclocked RPI 2/3. Now DraStic on the other hand, runs at about full speed on a RPI 2/3. Both can be installed through the experimental menu in the \nRetroPie Setup Script\n.\n\n\nEmulator: \nDraStic\n :small_red_triangle: , \nlr-desmume\n :small_red_triangle:\n\n\nROMS\n\n\nAccepted File Extensions: \n.nds .zip\n\n\nPlace your DS ROMs in \n\n\n/home/pi/RetroPie/roms/nds\n\n\n\n\nControls\n\n\nlr-desmume Controls\n\n\nlr-desmume utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/nds/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nDraStic Controls\n\n\nDraStic controls and configurations are located in\n\n\n/opt/retropie/configs/nds/drastic/config/drastic.cfg", 
            "title": "Nintendo DS"
        }, 
        {
            "location": "/Nintendo-DS/#emulator-drastic-small_red_triangle-lr-desmume-small_red_triangle", 
            "text": "", 
            "title": "Emulator: DraStic :small_red_triangle: , lr-desmume :small_red_triangle:"
        }, 
        {
            "location": "/Nintendo-DS/#roms", 
            "text": "Accepted File Extensions:  .nds .zip  Place your DS ROMs in   /home/pi/RetroPie/roms/nds", 
            "title": "ROMS"
        }, 
        {
            "location": "/Nintendo-DS/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Nintendo-DS/#lr-desmume-controls", 
            "text": "lr-desmume utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/nds/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-desmume Controls"
        }, 
        {
            "location": "/Nintendo-DS/#drastic-controls", 
            "text": "DraStic controls and configurations are located in  /opt/retropie/configs/nds/drastic/config/drastic.cfg", 
            "title": "DraStic Controls"
        }, 
        {
            "location": "/Nintendo-Entertainment-System/", 
            "text": "The Nintendo Entertainment System (NES) is an 8-bit home video game console that was released by Nintendo in 1985.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-fceumm\n\n\nnes\n\n\n.zip .nes .smc .sfc .fig .swc .mgd .fds\n\n\nnone\n\n\n/opt/retropie/configs/nes/retroarch.cfg\n\n\n\n\n\n\nlr-nestopia\n\n\nnes\n\n\n.zip .nes .smc .sfc .fig .swc .mgd .fds\n\n\ndisksys.rom\n\n\n/opt/retropie/configs/nes/retroarch.cfg\n\n\n\n\n\n\nlr-quicknes\n\n\nnes\n\n\n.zip .nes .smc .sfc .fig .swc .mgd\n\n\nnone\n\n\n/opt/retropie/configs/nes/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulators: \nlr-nestopia\n, \nlr-fceumm\n, \nlr-quicknes\n\n\nBoth emulators utilise RetroArch configurations for controllers. lr-nestopia is preferred due to better accuracy and the ability to play Famicom Disk System games, plus \nbetter input latency\n. lr-fceumm is slightly faster, which may give a benefit to Raspberry Pi 1/0 users.\n\n\nROMS\n\n\nAccepted File Extensions: \n.zip .nes .smc .sfc .fig .swc .mgd\n - Make sure your roms have headers. Roms without headers will not work. If you want to use PAL roms, make sure they contain \n(E)\n or \n(Europe)\n in the filename, or else they may be run at the wrong speed.\n\n\nPlace your NES Roms in\n\n\n/home/pi/RetroPie/roms/nes\n\n\n\n\nBIOS\n\n\nBoth lr-nestopia and lr-fceumm are able to play Famicom Disk System (FDS) games with a \ndisksys.rom\n bios file.\n\n\nPlace the BIOS in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nPlace your FDS Roms in\n\n\n/home/pi/RetroPie/roms/nes\n\n\n\n\nOr if you want them separate from NES Roms\n\n\n/home/pi/RetroPie/roms/fds\n\n\n\n\nControls\n\n\nBoth emulators utilise Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/nes/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Nintendo Entertainment System"
        }, 
        {
            "location": "/Nintendo-Entertainment-System/#emulators-lr-nestopia-lr-fceumm-lr-quicknes", 
            "text": "Both emulators utilise RetroArch configurations for controllers. lr-nestopia is preferred due to better accuracy and the ability to play Famicom Disk System games, plus  better input latency . lr-fceumm is slightly faster, which may give a benefit to Raspberry Pi 1/0 users.", 
            "title": "Emulators: lr-nestopia, lr-fceumm, lr-quicknes"
        }, 
        {
            "location": "/Nintendo-Entertainment-System/#roms", 
            "text": "Accepted File Extensions:  .zip .nes .smc .sfc .fig .swc .mgd  - Make sure your roms have headers. Roms without headers will not work. If you want to use PAL roms, make sure they contain  (E)  or  (Europe)  in the filename, or else they may be run at the wrong speed.  Place your NES Roms in  /home/pi/RetroPie/roms/nes", 
            "title": "ROMS"
        }, 
        {
            "location": "/Nintendo-Entertainment-System/#bios", 
            "text": "Both lr-nestopia and lr-fceumm are able to play Famicom Disk System (FDS) games with a  disksys.rom  bios file.  Place the BIOS in  /home/pi/RetroPie/BIOS  Place your FDS Roms in  /home/pi/RetroPie/roms/nes  Or if you want them separate from NES Roms  /home/pi/RetroPie/roms/fds", 
            "title": "BIOS"
        }, 
        {
            "location": "/Nintendo-Entertainment-System/#controls", 
            "text": "Both emulators utilise Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/nes/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/OpenBOR/", 
            "text": "OpenBOR is the open source continuation of Beats of Rage - a 2D sidescrolling beat em up game engine.\n\n\n\n\nEmulator: \nOpenBOR\n\n\nROMS:\n\n\nAccepted extensions: \n.pak\n\n\nPlace your OpenBOR games in \n\n\n/home/pi/RetroPie/roms/ports/openbor\n\n\n\n\nThen you need to run\n\n\n/opt/retropie/ports/openbor/extract.sh\n\n\n\n\nYour games are extracted and ready to be played. Your originals are stored safely in \n/home/pi/RetroPie/roms/ports/openbor/original\n but they won't be needed anymore. Everything within it can be deleted.\n\n\nSee more info from the OpenBOR Community \nHERE\n\n\nControls:\n\n\nYou need a keyboard to navigate the menus", 
            "title": "OpenBOR"
        }, 
        {
            "location": "/OpenBOR/#emulator-openbor", 
            "text": "", 
            "title": "Emulator: OpenBOR"
        }, 
        {
            "location": "/OpenBOR/#roms", 
            "text": "Accepted extensions:  .pak  Place your OpenBOR games in   /home/pi/RetroPie/roms/ports/openbor  Then you need to run  /opt/retropie/ports/openbor/extract.sh  Your games are extracted and ready to be played. Your originals are stored safely in  /home/pi/RetroPie/roms/ports/openbor/original  but they won't be needed anymore. Everything within it can be deleted.  See more info from the OpenBOR Community  HERE", 
            "title": "ROMS:"
        }, 
        {
            "location": "/OpenBOR/#controls", 
            "text": "You need a keyboard to navigate the menus", 
            "title": "Controls:"
        }, 
        {
            "location": "/Oric/", 
            "text": "The Oric was a series of home computers originally released by the Tangerine Computer Systems in 1983. Models emulated include Oric-1, Oric Atmos, Stratos/IQ164, and Oric Telestrat.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\noricutron\n\n\noric\n\n\n.dsk .tap\n\n\n-\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \noricutron\n\n\nROMS\n\n\nAccepted File Extensions: \n.dsk .tap\n\n\nPlace your oric ROMs in\n\n\n/home/pi/RetroPie/roms/oric\n\n\n\n\nControls:\n\n\n  In emulator\n  -----------\n\n  F1       - Bring up the menu\n  F2       - Go to debugger/monitor\n  F3       - Reset button (NMI)\n  F4       - Hard reset\n  Shift+F4 - Jasmin reset\n  F5       - Toggle FPS\n  F6       - Toggle warp speed\n  F7       - Save all modified disks\n  Shift+F7 - Save all modified disks to new disk images\n  F8       - Toggle fullscreen\n  F9       - Save tape output\n  F10      - Start/Stop AVI capture\n  F11      - Copy text screen to clipboard (BeOS, Linux \n Windows)\n  F12      - Paste (BeOS, Linux \n Windows)\n  Help     - Show guide (Amiga, MorphOS and AROS)\n  AltGr    - Additional modifier\n\n\n  In menus\n  --------\n\n  Cursors   - Navigate\n  Enter     - Perform option\n  Backspace - Go back\n  Escape    - Exit menus\n  (or use the mouse)", 
            "title": "Oric"
        }, 
        {
            "location": "/Oric/#emulator-oricutron", 
            "text": "", 
            "title": "Emulator: oricutron"
        }, 
        {
            "location": "/Oric/#roms", 
            "text": "Accepted File Extensions:  .dsk .tap  Place your oric ROMs in  /home/pi/RetroPie/roms/oric", 
            "title": "ROMS"
        }, 
        {
            "location": "/Oric/#controls", 
            "text": "In emulator\n  -----------\n\n  F1       - Bring up the menu\n  F2       - Go to debugger/monitor\n  F3       - Reset button (NMI)\n  F4       - Hard reset\n  Shift+F4 - Jasmin reset\n  F5       - Toggle FPS\n  F6       - Toggle warp speed\n  F7       - Save all modified disks\n  Shift+F7 - Save all modified disks to new disk images\n  F8       - Toggle fullscreen\n  F9       - Save tape output\n  F10      - Start/Stop AVI capture\n  F11      - Copy text screen to clipboard (BeOS, Linux   Windows)\n  F12      - Paste (BeOS, Linux   Windows)\n  Help     - Show guide (Amiga, MorphOS and AROS)\n  AltGr    - Additional modifier\n\n\n  In menus\n  --------\n\n  Cursors   - Navigate\n  Enter     - Perform option\n  Backspace - Go back\n  Escape    - Exit menus\n  (or use the mouse)", 
            "title": "Controls:"
        }, 
        {
            "location": "/PC-Engine/", 
            "text": "The TurboGrafx-16 Entertainment SuperSystem, originally known in Japan as the PC Engine, is a home video game console joint-developed by Hudson Soft and NEC, released in 1987.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-beetle-pce-fast\n\n\npcengine\n\n\n.pce .cue .zip\n\n\nsyscard3.pce\n\n\n/opt/retropie/configs/pcengine/retroarch.cfg\n\n\n\n\n\n\nlr-beetle-supergrafx\n\n\npcengine\n\n\n.pce .cue .zip\n\n\nsyscard3.pce\n\n\n/opt/retropie/configs/pcengine/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-beetle-pce-fast\n, \nlr-beetle-supergrafx\n\n\nROMS\n\n\nAccepted File Extensions: \n.pce\n\n\nPlace your PC Engine/ TurboGrafx-16 ROMs in\n\n\n/home/pi/RetroPie/roms/pcengine\n\n\n\n\nBIOS\n\n\nThe BIOS file necessary is called: \nsyscard3.pce\n \n\n\nPlace your the syscard3.pce file in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nA working BIOS file md5sum is \nff1a674273fe3540ccef576376407d1d\n\n\nControls\n\n\nlr-beetle-pce-fast and lr-beetle-supergrafx utilise Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/pcengine/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nPC Engine CD\n\n\nIt is important that the image file (usually \n.bin\n) and the CUE file (\n.cue\n) match.\n\n\nCUE files are just text files containing a description of the CD. If you have files named like:\n\n\nAkumajou Dracula X.bin\nAkumajou Dracula X.cue\n\n\n\n\nthen ensure the first line of the CUE file contains:\n\n\nFILE \nAkumajou Dracula X.bin\n BINARY\n\n\n\n\nAny of the following are wrong and will not work:\n\n\n### extension has incorrect case\nFILE \nAkumajou Dracula X.BIN\n BINARY\n\n### file name has incorrect case\nFILE \nAKUMAJOU DRACULA X.bin\n BINARY\n\n### does not match the actual file name\nFILE \nAkumajou_Dracula_X_-_Chi_no_Rinne_(NTSC-J)_[KMCD3005].bin\n BINARY\n\n\n\n\nAdvanced Configuration:\n\n\nIf you are from the United States, it is likely that you had the TurboGrafx-16 rather than the PC Engine. If you want EmulationStation to show the TurboGrafx-16 logo instead of PC Engine, then you can change the file in \n/etc/emulationstation/es_systems.cfg\n\n\nfrom \n\n\n  \nsystem\n\n    \nname\npcengine\n/name\n\n    \nfullname\nTurboGrafx 16 (PC Engine)\n/fullname\n\n    \npath\n/home/pi/RetroPie/roms/pcengine\n/path\n\n    \nextension\n.pce .cue .zip .PCE .CUE .ZIP\n/extension\n\n    \ncommand\n/opt/retropie/supplementary/runcommand/runcommand.sh 0 _SYS_ pcengine %ROM%\n/command\n\n    \nplatform\npcengine\n/platform\n\n    \ntheme\npcengine\n/theme\n\n    \ndirectlaunch/\n\n  \n/system\n\n\n\n\n\nto\n\n\n  \nsystem\n\n    \nname\npcengine\n/name\n\n    \nfullname\nTurboGrafx 16 (PC Engine)\n/fullname\n\n    \npath\n/home/pi/RetroPie/roms/pcengine\n/path\n\n    \nextension\n.pce .cue .zip .PCE .CUE .ZIP\n/extension\n\n    \ncommand\n/opt/retropie/supplementary/runcommand/runcommand.sh 0 _SYS_ pcengine %ROM%\n/command\n\n    \nplatform\npcengine\n/platform\n\n    \ntheme\ntg16\n/theme\n\n    \ndirectlaunch/\n\n  \n/system\n\n\n\n\n\nSwitching Emulation Station to the TurboGrafx-16 logo:\n\n\nIf you are from the United States it is likely that you had the TurboGrafx-16 rather than the PC Engine. If you want EmulationStation to show the TurboGrafx-16 graphics instead of PC Engine then you should create a file /opt/retropie/configs/all/platforms.cfg with the following contents (note this requires at least v4.1.6 of the RetroPie-Setup script).\n\n\npcengine_theme=\ntg16\n\npcengine_platform=\ntg16\n\n\n\n\n\nOnce this is done, please update any of the currently installed PC Engine emulators from RetroPie-Setup and Emulation Station will now use the TurboGrafx-16 logo. Scraping from within Emulation Station should also return TurboGrafx-16 artwork.", 
            "title": "PC Engine"
        }, 
        {
            "location": "/PC-Engine/#emulator-lr-beetle-pce-fast-lr-beetle-supergrafx", 
            "text": "", 
            "title": "Emulator: lr-beetle-pce-fast, lr-beetle-supergrafx"
        }, 
        {
            "location": "/PC-Engine/#roms", 
            "text": "Accepted File Extensions:  .pce  Place your PC Engine/ TurboGrafx-16 ROMs in  /home/pi/RetroPie/roms/pcengine", 
            "title": "ROMS"
        }, 
        {
            "location": "/PC-Engine/#bios", 
            "text": "The BIOS file necessary is called:  syscard3.pce    Place your the syscard3.pce file in  /home/pi/RetroPie/BIOS  A working BIOS file md5sum is  ff1a674273fe3540ccef576376407d1d", 
            "title": "BIOS"
        }, 
        {
            "location": "/PC-Engine/#controls", 
            "text": "lr-beetle-pce-fast and lr-beetle-supergrafx utilise Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/pcengine/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/PC-Engine/#pc-engine-cd", 
            "text": "It is important that the image file (usually  .bin ) and the CUE file ( .cue ) match.  CUE files are just text files containing a description of the CD. If you have files named like:  Akumajou Dracula X.bin\nAkumajou Dracula X.cue  then ensure the first line of the CUE file contains:  FILE  Akumajou Dracula X.bin  BINARY  Any of the following are wrong and will not work:  ### extension has incorrect case\nFILE  Akumajou Dracula X.BIN  BINARY\n\n### file name has incorrect case\nFILE  AKUMAJOU DRACULA X.bin  BINARY\n\n### does not match the actual file name\nFILE  Akumajou_Dracula_X_-_Chi_no_Rinne_(NTSC-J)_[KMCD3005].bin  BINARY", 
            "title": "PC Engine CD"
        }, 
        {
            "location": "/PC-Engine/#advanced-configuration", 
            "text": "If you are from the United States, it is likely that you had the TurboGrafx-16 rather than the PC Engine. If you want EmulationStation to show the TurboGrafx-16 logo instead of PC Engine, then you can change the file in  /etc/emulationstation/es_systems.cfg  from      system \n     name pcengine /name \n     fullname TurboGrafx 16 (PC Engine) /fullname \n     path /home/pi/RetroPie/roms/pcengine /path \n     extension .pce .cue .zip .PCE .CUE .ZIP /extension \n     command /opt/retropie/supplementary/runcommand/runcommand.sh 0 _SYS_ pcengine %ROM% /command \n     platform pcengine /platform \n     theme pcengine /theme \n     directlaunch/ \n   /system   to     system \n     name pcengine /name \n     fullname TurboGrafx 16 (PC Engine) /fullname \n     path /home/pi/RetroPie/roms/pcengine /path \n     extension .pce .cue .zip .PCE .CUE .ZIP /extension \n     command /opt/retropie/supplementary/runcommand/runcommand.sh 0 _SYS_ pcengine %ROM% /command \n     platform pcengine /platform \n     theme tg16 /theme \n     directlaunch/ \n   /system", 
            "title": "Advanced Configuration:"
        }, 
        {
            "location": "/PC-Engine/#switching-emulation-station-to-the-turbografx-16-logo", 
            "text": "If you are from the United States it is likely that you had the TurboGrafx-16 rather than the PC Engine. If you want EmulationStation to show the TurboGrafx-16 graphics instead of PC Engine then you should create a file /opt/retropie/configs/all/platforms.cfg with the following contents (note this requires at least v4.1.6 of the RetroPie-Setup script).  pcengine_theme= tg16 \npcengine_platform= tg16   Once this is done, please update any of the currently installed PC Engine emulators from RetroPie-Setup and Emulation Station will now use the TurboGrafx-16 logo. Scraping from within Emulation Station should also return TurboGrafx-16 artwork.", 
            "title": "Switching Emulation Station to the TurboGrafx-16 logo:"
        }, 
        {
            "location": "/PC/", 
            "text": "The good old days of DOS.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nDOSBox\n\n\npc\n\n\n.com .sh .bat .exe\n\n\nnone\n\n\n/opt/retropie/configs/pc/dosbox-SVN.conf\n\n\n\n\n\n\n\n\nEmulator: \nDOSBox\n, \nRpix86\n\n\nROMS\n\n\nAccepted File Extensions: \n.com .sh .bat .exe\n\n\nPlace your ROMs in \n\n\n/home/pi/RetroPie/roms/pc\n\n\n\n\nYou can also place your games within folders in the pc folder if it helps keep you organised.\n\n\nControls\n\n\nKeyboard\n\n\nQuick Keys:\n\n\nctrl+F9: exit emulator\n\n\nFor more information see http://www.dosbox.com/wiki/Main_Page\n\n\nTutorials\n\n\nHow to add games to RetroPie and launch them directly from EmulationStation.\n\n\nHow to configure USB game controllers in DOSBox.\n\n\nHow to create a default (arcade) mapping for game controllers in DOSBox.\n\n\nHow to configure DOSBOX for individual games.\n\n\nUpdate for Retropie 3.0.\n\n\nDosBOX Compatibility List\n feel free to contribute to the list. \n\n\nsee also forum post \nhere\n\n\nTroubleshooting\n\n\nIf the keyboard input in DOSBox is not correct, you need to edit the DOSBox config file, dosbox-SVN.conf, which is located in the hidden folder, .dosbox, in your home folder.\n\n\nTo fix, run the following commands:\n\n\ncd ~/.dosbox\nsudo nano dosbox-SVN.conf\n\n\n\nIn the [sdl] section, edit line 34 of dosbox-SVN.conf so that usescancodes is set to false as below:\n\n\nusescancodes=false\n\n\n\nIn some games your joystick/controller may be permanently fixed in one corner. For these games, edit dosbox-SVN.conf, find the [Joystick] section and set timed to false as below:\n\n\ntimed=false\n\n\n\nrpix86 defaults to analog audio output, if you use HDMI audio you need to give -a0 parameter to rpix86", 
            "title": "PC"
        }, 
        {
            "location": "/PC/#emulator-dosbox-rpix86", 
            "text": "", 
            "title": "Emulator: DOSBox, Rpix86"
        }, 
        {
            "location": "/PC/#roms", 
            "text": "Accepted File Extensions:  .com .sh .bat .exe  Place your ROMs in   /home/pi/RetroPie/roms/pc  You can also place your games within folders in the pc folder if it helps keep you organised.", 
            "title": "ROMS"
        }, 
        {
            "location": "/PC/#controls", 
            "text": "Keyboard  Quick Keys:  ctrl+F9: exit emulator  For more information see http://www.dosbox.com/wiki/Main_Page", 
            "title": "Controls"
        }, 
        {
            "location": "/PC/#tutorials", 
            "text": "How to add games to RetroPie and launch them directly from EmulationStation.  How to configure USB game controllers in DOSBox.  How to create a default (arcade) mapping for game controllers in DOSBox.  How to configure DOSBOX for individual games.  Update for Retropie 3.0.  DosBOX Compatibility List  feel free to contribute to the list.   see also forum post  here", 
            "title": "Tutorials"
        }, 
        {
            "location": "/PC/#troubleshooting", 
            "text": "If the keyboard input in DOSBox is not correct, you need to edit the DOSBox config file, dosbox-SVN.conf, which is located in the hidden folder, .dosbox, in your home folder.  To fix, run the following commands:  cd ~/.dosbox\nsudo nano dosbox-SVN.conf  In the [sdl] section, edit line 34 of dosbox-SVN.conf so that usescancodes is set to false as below:  usescancodes=false  In some games your joystick/controller may be permanently fixed in one corner. For these games, edit dosbox-SVN.conf, find the [Joystick] section and set timed to false as below:  timed=false  rpix86 defaults to analog audio output, if you use HDMI audio you need to give -a0 parameter to rpix86", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Playstation-1/", 
            "text": "The PlayStation 1 is a 5th generation video game console released by Sony in 1994.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-pcsx-rearmed\n\n\npsx\n\n\n.cue .cbn .img .iso .m3u .mdf .pbp .toc .z .znx\n\n\nSCPH1001.BIN\n\n\n/opt/retropie/configs/psx/retroarch.cfg\n\n\n\n\n\n\npcsx-rearmed\n\n\npsx\n\n\n.cue .cbn .img .iso .m3u .mdf .pbp .toc .z .znx\n\n\nSCPH1001.BIN\n\n\n/opt/retropie/configs/psx/pcsx.cfg\n\n\n\n\n\n\nlr-beetle-psx\n\n\npsx\n\n\n.cue .cbn .img .iso .m3u .mdf .pbp .toc .z .znx\n\n\nscph5500.bin scph5501.bin scph5502.bin\n\n\n/opt/retropie/configs/psx/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulators: \nlr-pcsx-rearmed\n, \npcsx-rearmed\n,\n\n\nROMS\n\n\nAccepted File Extensions: \n.cue .cbn .img .iso .m3u .mdf .pbp .toc .z .znx\n\n\nPlace your PlayStation ROMs in \n\n\n/home/pi/RetroPie/roms/psx\n\n\n\n\nWhy arent my .bin files showing in Emulation Station?\n\n\nSince June 16th 2016 the RetroPie script has configured Emulation Station to no longer show .bin files in the UI.\nThis means that a .cue file is required to start the game.  \n\n\nA .cue file is basically a plain text file that tells the emulator where in the .bin file the (data and/or audio) track(s) are. This is often important in the case where multiple audio files are in the single .bin file. These are often called \"mixed mode\" discs. \nWikipedia .cue files\n\n\nIf you only have a .bin file and no .cue file, you can generate it:\n\n Manually:\nhttp://www.shivaranjan.com/2007/01/03/how-to-create-cue-file-for-a-bin-file-in-5-steps/\n\n\n Individually:\nhttp://www.dslreports.com/r0/download/373724~1e45059000cfc371c157f544cc5aef07/MakeCue.zip\n* En masse or individually: https://github.com/thorst/CueMaker\n\n\nCue files\n\n\nYou can also find cue files for many games here, obviously you will need to make sure the .bin filename is correct when you use it.\n\n\nLink to .cue files\n\n\nWhy .bin was removed\n\n\n\n\nIt is very common for PSX games to be in 2 parts, a .bin and .cue, this means that Emulation Station will show duplicates for each game which no-one really wants. This is because it used to show extensions .bin and .cue\n\n\nA PSX game will only ever need one .cue file, so by hiding a .bin it prevents duplicates showing (as it could have multiple .bin files)\n\n\nBy hiding .bin files it will make the user think a little bit more about how the emulator loads files rather than blindly throwing files at it until it works.\n\n\nAny PSX game that has multi tracks will work better (usually audio tracks) if it has a .cue to point to the audio.\n\nhttps://retropie.org.uk/forum/topic/735/psx-please-remove-bin-from-the-file-types\n\n\n\n\nif your psx game is a .ecm extension, its a compressed file that needs to be extracted with ecmtools.\n\n\nWhere is lr-beetle-psx?\n\n\nThe Beetle/Mednafen PSX core is not available for systems with ARM CPUs (like the Raspberry Pi) because it does not perform well enough. This emulator is supplied for people who are running RetroPie on more powerful x86 systems.\n\n\n\n\nRetroPie commit - Add Beetle PSX emulator\n\n\n\n\n$ grep flags scriptmodules/libretrocores/lr-beetle-psx.sh\nrp_module_flags=\n!arm\n\n\n\n\n\nBIOS\n\n\nThe BIOS file is named \nSCPH1001.BIN\n (both name and extension are case-sensitive so MUST be in capitals)\n\n\nPlace SCPH1001.BIN in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nSee table at the bottom for alternative BIOS options that may or may not work.\n\n\nControls\n\n\nlr-pcsx-rearmed Controls\n\n\nlr-pcsx-rearmed utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/psx/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\npcsx-rearmed Controls\n\n\npcsx-rearmed controls and configurations are located in\n\n\n/opt/retropie/configs/psx/pcsx.cfg\n\n\n\n\nAn example mapping for pcsx-rearmed using an Xbox 360 controller is below for reference:\n\n\nXbox 360 Controller\n\n\nbinddev = sdl:Xbox 360 Wireless Receiver (XBOX)\nbind backspace = Fast Forward\nbind \\xA0 = player1 CROSS\nbind \\xA1 = player1 SQUARE\nbind \\xA2 = player1 CIRCLE\nbind \\xA3 = player1 TRIANGLE\nbind \\xA4 = player1 L1\nbind \\xA5 = player1 R1\nbind \\xA6 = player1 L2\nbind \\xA7 = player1 R2\nbind \\xA8 = player1 SELECT\nbind \\xA9 = player1 START\nbind \\xAA = Enter Menu\nbind \\xAB = player1 L3\nbind \\xAC = player1 R3\nbind \\xAD = player1 LEFT\nbind \\xAE = player1 RIGHT\nbind \\xAF = player1 UP\nbind \\xB0 = player1 DOWN\nbind up = player1 UP\nbind down = player1 DOWN\nbind right = player1 RIGHT\nbind left = player1 LEFT\nbind f1 = Save State\nbind f2 = Load State\nbind f3 = Prev Save Slot\nbind f4 = Next Save Slot\nbind f5 = Toggle Frameskip\nbind f7 = Show/Hide FPS\nbind f8 = Switch Renderer\nbind f11 = Toggle fullscreen\nbind f12 = Take Screenshot\n\n\n\n\nVideo Guide\n\n\n  \n\n\nEnhanced Graphics\n\n\nlr-pcsx-rearmed has a core option to improve graphical fidelity by doubling the normal resolution. On a Pi 2 this introduces some slowdown and audio skipping, but on a Pi 3 it appears to work without issue. The 'speed hack' option is required for good results, but has some minor visual glitches.\n\n\nTo enable this, edit the \nretroarch-core-options.cfg\n file, found in:\n\n\n/opt/retropie/configs/all/\n\n\n\n\nThe option is:\n\n\npcsx_rearmed_neon_enhancement_enable = \nenabled\n\npcsx_rearmed_neon_enhancement_no_main = \nenabled\n\n\n\n\n\nMultitap (3-8 player)\n\n\nThe latest version of lr-pcsx-rearmed has the ability to emulate up to two Multitaps, allowing 3-8 player support in games that permit it. It does this via core options. However, just as with the original hardware, many games do not support the multitap and will not recognise \nany\n inputs with it turned on, so it is recommended to only enable multitaps for games that support it, via the 'Game Specific Options' retroarch functionality which allows you to create core options files for specific games. To enable this, use the [[Configuration Editor]] \n \nAdvanced Configuration\n \n \nConfigure Libretro options\n \n \npsx/retroarch.cfg\n \n Set \ngame_specific_options\n to \ntrue\n.\n\n\nAlternatively, you can manually edit \nretroarch.cfg\n in:\n\n\n/opt/retropie/configs/psx/\n\n\n\n\nThe option is:\n\n\ngame_specific_options = \ntrue\n\n\n\n\n\nThen, within a multiplayer game, load up the Retroarch menu via the menu hotkey combination (select \n X/Triangle, by default), go to \nQuick Menu\n \n \nOptions\n \n Find the \nMultitap 1\n and \nMultitap 2\n options and turn them on, as appropriate. Then scroll to the top, and choose \nCreate game options file\n. Once this is completed, restart the game, and multiplayer options should become available.\n\n\nAnalog Controller Type\n\n\nlr-pcsc-rearmed controller type can be changed in-game and in a configuration file to support games that require the analog/dualshock controller type.\n\n\nNOTE:\n Games that do not support analog controls will be unresponsive in this mode.\n\n Use the Retroarch GUI hotkey(default select+X) in-game\n\n Navigate to Quick Menu -\n Core Options\n\n Change Pad # Type from standard to analog\n\n \nretroarch-core-options.cfg\n will be updated automatically when a game is exited, so there is no need to set save on exit\n\n\nRetroarch Core options can be located in \n/opt/retropie/configs/all/retroarch-core-options.cfg\n for changing manually outside of a game.\n\n\npcsx_rearmed_pad1type = \nanalog\n\npcsx_rearmed_pad2type = \nstandard\n\n\n\n\n\nThe standalone pcsx-rearmed controller type can be changed in the in-game menu.\n\n Enter the in-game menu using ESC on a keyboard\n\n Navigate to the controls menu\n* Change Port # device from Standard to Analog\n\n\nDisc Swapping for Multi-disc Games in RetroArch\n\n\nTo change disks in-game, go to Core Disk Options \n Disk Image Append.\n\n\nSome games like Metal Gear Solid require the disk tray to be opened before changing disks. To do this, change 'Disk Index' to 'No Disk' first. \n\n\nMulti-disc games or CD image not working\n\n\nNote that all the emulators accept \n.pbp\n files, which are EBOOT-format PlayStation executables. These are also known as PSX2PSP files, used to play PlayStation 1 games on the PSP.\n\n\nThis is the easiest way to play multi-disc PlayStation games on RetroPie.\n\n\nIf a CD image such as \n.iso\n or \n.bin/.cue\n does not work, try the EBOOT version.\n\n\nCD images can be converted to EBOOT \n.pbp\n files with the \nPSX2PSP v1.4.2\n application for Windows.\n\n\nEBOOTs are also often smaller than CD images, so could be a good option if you're tight on space.\n\n\nImporting Save Files\n\n\nOn sites like \nGameFAQs\n you can find many save files for PlayStation games, these are either disk images of peoples' memory cards or hacked memory cards with a save file that gets you to a certain point in the game or gives you a character with many levels/gold/items, however the game works.\n\n\nAll the different PlayStation emulators (ePSXe, PCSX, Bleem, PSEmu, etc) and memory card dumper hardware (DexDrive, MadCatz Data Deck) use a different memory card save format, so you often can't just copy these downloaded save files right onto the Pi.\n\n\nFirst you must use a memory card manager utility to convert from one format to the format suitable for RetroPie's PCSX-based emulators. One such tool is \nMemory Card Manager 1.4 by Aldo Vargas\n. Download this and \nMSVBVM50.DLL\n, and run \nMemManager.exe\n. It looks like this:\n\n\n\n\nPress the \nNew\n button at the bottom and create a file the same name as your PSX ROM. For example, if you are using \nDiablo.pbp\n or \nDiablo.cue\n then call the new memory card file \nDiablo.mcr\n. Ensure you select the \nOther - AdriPSX, FPSE, pcsx\n format in the dropdown menu, then press \nSave\n.\n\n\nPress the \n at the bottom of the window which opens a second pane on the right. In the new pane, press the \n...\n at the top and open the save file you have downloaded. \nHopefully\n you'll see valid memory card blocks, similar to what you'd see on an actual PSX. (some saves may not show expected/valid contents, in which case you're probably out of luck trying to use that save file, download a different one)\n\n\nClick on the block in the right hand column you wish to import, and press the \n arrow to copy it into your new memory card on the left hand column. The screenshot above demonstrates the way to select the correct block and the correct button to press.\n\n\nIn your memory card on the left, click \nSave As\n and save over the blank card you just created.\n\n\nQuit MemManager and rename your new memory card from \n.mcr\n to \n.srm\n. Following our example above, we'd now have a file called \nDiablo.srm\n. Copy this memory card file to your RetroPie ROMs directory.\n\n\nNow go to RetroPie and run your game in the PSX emulator. You should be able to see the contents of the memory card and load the saved game which you downloaded.\n\n\nAlternative BIOS files\n\n\nAdd different bios' that you've tested and tell the community if it works or not.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nmd5\n\n\nCRC32\n\n\nComment\n\n\n\n\n\n\n\n\n\n\n\n\nps-10j\n\n\nSCPH-1000/DTL-H1000 (Version 1.0 J)\n\n\n239665b1a3dade1b5a52c06338011044\n\n\n3b601fc8\n\n\n\n\n\n\n\n\n\n\nps-11j\n\n\nSCPH-3000/DTL-H1000H (Version 1.1 01/22/95)\n\n\n849515939161e62f6b866f6853006780\n\n\n3539def6\n\n\n\n\n\n\n\n\n\n\nps-20a\n\n\nDTL-H1001 (Version 2.0 05/07/95 A)\n\n\ndc2b9bf8da62ec93e868cfd29f0d067d\n\n\n55847d8c\n\n\n\n\n\n\n\n\n\n\nps-20e\n\n\nDTL-H1002/SCPH-1002 (Version 2.0 05/10/95 E)\n\n\n54847e693405ffeb0359c6287434cbef\n\n\n9bb87c4b\n\n\n\n\n\n\n\n\n\n\nps-21j\n\n\nSCPH-3500 (Version 2.1 07/17/95 J)\n\n\ncba733ceeff5aef5c32254f1d617fa62\n\n\nbc190209\n\n\n\n\n\n\n\n\n\n\nps-21a\n\n\nDTL-H1101 (Version 2.1 07/17/95 A)\n\n\nda27e8b6dab242d8f91a9b25d80c63b8\n\n\naff00f2f\n\n\n\n\n\n\n\n\n\n\nps-21e\n\n\nSCPH-1002/DTL-H1102 (Version 2.1 07/17/95 E)\n\n\n417b34706319da7cf001e76e40136c23\n\n\n86c30531\n\n\n\n\n\n\n\n\n\n\nps-22j\n\n\nSCPH-5000/DTL-H1200/DTL-H3000 (Version 2.2 12/04/95 J)\n\n\n57a06303dfa9cf9351222dfcbb4a29d9\n\n\n24fc7e17\n\n\n\n\n\n\n\n\n\n\nps-22a\n\n\nSCPH-1001/DTL-H1201/DTL-H3001 (Version 2.2 12/04/95 A)\n\n\n924e392ed05558ffdb115408c263dccf\n\n\n37157331\n\n\n\n\n\n\n\n\n\n\nps-22e\n\n\nSCPH-1002/DTL-H1202/DTL-H3002 (Version 2.2 12/04/95 E)\n\n\ne2110b8a2b97a8e0b857a45d32f7e187\n\n\n1e26792f\n\n\n\n\n\n\n\n\n\n\nps-22d\n\n\nDTL-H1100 (Version 2.2 03/06/96 D)\n\n\nca5cfc321f916756e3f0effbfaeba13b\n\n\ndecb22f5\n\n\n\n\n\n\n\n\n\n\nps-30j\n\n\nSCPH-5500 (Version 3.0 09/09/96 J)\n\n\n8dd7d5296a650fac7319bce665a6a53c\n\n\nff3eeb8c\n\n\n\n\n\n\n\n\n\n\nps-30a\n\n\nSCPH-5501/SCPH-5503/SCPH-7003 (Version 3.0 11/18/96 A)\n\n\n490f666e1afb15b7362b406ed1cea246\n\n\n8d8cb7e4\n\n\n\n\n\n\n\n\n\n\nps-30e\n\n\nSCPH-5502/SCPH-5552 (Version 3.0 01/06/97 E)\n\n\n32736f17079d0b2b7024407c39bd3050\n\n\nd786f0b9\n\n\n\n\n\n\n\n\n\n\nps-40j\n\n\nSCPH-7000/SCPH-7500/SCPH-9000 (Version 4.0 08/18/97 J)\n\n\n8e4c14f567745eff2f0408c8129f72a6\n\n\nec541cd0\n\n\n\n\n\n\n\n\n\n\nps-41a\n\n\nSCPH-7001/SCPH-7501/SCPH-7503/SCPH-9001/SCPH-9003/SCPH-9903 (Version 4.1 12/16/97 A)\n\n\n1e68c231d0896b7eadcad1d7d8e76129\n\n\n502224b6\n\n\n\n\n\n\n\n\n\n\nps-41e\n\n\nSCPH-7002/SCPH-7502/SCPH-9002 (Version 4.1 12/16/97 E)\n\n\nb9d9a0286c33dc6b7237bb13cd46fdee\n\n\n318178bf\n\n\n\n\n\n\n\n\n\n\npsone-43j\n\n\nSCPH-100 (Version 4.3 03/11/00 J)\n\n\n8abc1b549a4a80954addc48ef02c4521\n\n\nf2af798b\n\n\n\n\n\n\n\n\n\n\npsone-44e\n\n\nSCPH-102 (Version 4.4 03/24/00 E)\n\n\nb10f5e0e3d9eb60e5159690680b1e774\n\n\n0bad7ea9\n\n\n\n\n\n\n\n\n\n\npsone-45a\n\n\nSCPH-101 (Version 4.5 05/25/00 A)\n\n\n6e3735ff4c7dc899ee98981385f6f3d0\n\n\n171bdcec\n\n\n\n\n\n\n\n\n\n\npsone-45e\n\n\nSCPH-102 (Version 4.5 05/25/00 E)\n\n\nde93caec13d1a141a40a79f5c86168d6\n\n\n76b880e5", 
            "title": "Playstation 1"
        }, 
        {
            "location": "/Playstation-1/#emulators-lr-pcsx-rearmed-pcsx-rearmed", 
            "text": "", 
            "title": "Emulators: lr-pcsx-rearmed, pcsx-rearmed,"
        }, 
        {
            "location": "/Playstation-1/#roms", 
            "text": "Accepted File Extensions:  .cue .cbn .img .iso .m3u .mdf .pbp .toc .z .znx  Place your PlayStation ROMs in   /home/pi/RetroPie/roms/psx", 
            "title": "ROMS"
        }, 
        {
            "location": "/Playstation-1/#why-arent-my-bin-files-showing-in-emulation-station", 
            "text": "Since June 16th 2016 the RetroPie script has configured Emulation Station to no longer show .bin files in the UI.\nThis means that a .cue file is required to start the game.    A .cue file is basically a plain text file that tells the emulator where in the .bin file the (data and/or audio) track(s) are. This is often important in the case where multiple audio files are in the single .bin file. These are often called \"mixed mode\" discs.  Wikipedia .cue files  If you only have a .bin file and no .cue file, you can generate it:  Manually:\nhttp://www.shivaranjan.com/2007/01/03/how-to-create-cue-file-for-a-bin-file-in-5-steps/   Individually:\nhttp://www.dslreports.com/r0/download/373724~1e45059000cfc371c157f544cc5aef07/MakeCue.zip\n* En masse or individually: https://github.com/thorst/CueMaker", 
            "title": "Why arent my .bin files showing in Emulation Station?"
        }, 
        {
            "location": "/Playstation-1/#cue-files", 
            "text": "You can also find cue files for many games here, obviously you will need to make sure the .bin filename is correct when you use it.  Link to .cue files", 
            "title": "Cue files"
        }, 
        {
            "location": "/Playstation-1/#why-bin-was-removed", 
            "text": "It is very common for PSX games to be in 2 parts, a .bin and .cue, this means that Emulation Station will show duplicates for each game which no-one really wants. This is because it used to show extensions .bin and .cue  A PSX game will only ever need one .cue file, so by hiding a .bin it prevents duplicates showing (as it could have multiple .bin files)  By hiding .bin files it will make the user think a little bit more about how the emulator loads files rather than blindly throwing files at it until it works.  Any PSX game that has multi tracks will work better (usually audio tracks) if it has a .cue to point to the audio. \nhttps://retropie.org.uk/forum/topic/735/psx-please-remove-bin-from-the-file-types   if your psx game is a .ecm extension, its a compressed file that needs to be extracted with ecmtools.", 
            "title": "Why .bin was removed"
        }, 
        {
            "location": "/Playstation-1/#where-is-lr-beetle-psx", 
            "text": "The Beetle/Mednafen PSX core is not available for systems with ARM CPUs (like the Raspberry Pi) because it does not perform well enough. This emulator is supplied for people who are running RetroPie on more powerful x86 systems.   RetroPie commit - Add Beetle PSX emulator   $ grep flags scriptmodules/libretrocores/lr-beetle-psx.sh\nrp_module_flags= !arm", 
            "title": "Where is lr-beetle-psx?"
        }, 
        {
            "location": "/Playstation-1/#bios", 
            "text": "The BIOS file is named  SCPH1001.BIN  (both name and extension are case-sensitive so MUST be in capitals)  Place SCPH1001.BIN in  /home/pi/RetroPie/BIOS  See table at the bottom for alternative BIOS options that may or may not work.", 
            "title": "BIOS"
        }, 
        {
            "location": "/Playstation-1/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Playstation-1/#lr-pcsx-rearmed-controls", 
            "text": "lr-pcsx-rearmed utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/psx/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-pcsx-rearmed Controls"
        }, 
        {
            "location": "/Playstation-1/#pcsx-rearmed-controls", 
            "text": "pcsx-rearmed controls and configurations are located in  /opt/retropie/configs/psx/pcsx.cfg  An example mapping for pcsx-rearmed using an Xbox 360 controller is below for reference:  Xbox 360 Controller  binddev = sdl:Xbox 360 Wireless Receiver (XBOX)\nbind backspace = Fast Forward\nbind \\xA0 = player1 CROSS\nbind \\xA1 = player1 SQUARE\nbind \\xA2 = player1 CIRCLE\nbind \\xA3 = player1 TRIANGLE\nbind \\xA4 = player1 L1\nbind \\xA5 = player1 R1\nbind \\xA6 = player1 L2\nbind \\xA7 = player1 R2\nbind \\xA8 = player1 SELECT\nbind \\xA9 = player1 START\nbind \\xAA = Enter Menu\nbind \\xAB = player1 L3\nbind \\xAC = player1 R3\nbind \\xAD = player1 LEFT\nbind \\xAE = player1 RIGHT\nbind \\xAF = player1 UP\nbind \\xB0 = player1 DOWN\nbind up = player1 UP\nbind down = player1 DOWN\nbind right = player1 RIGHT\nbind left = player1 LEFT\nbind f1 = Save State\nbind f2 = Load State\nbind f3 = Prev Save Slot\nbind f4 = Next Save Slot\nbind f5 = Toggle Frameskip\nbind f7 = Show/Hide FPS\nbind f8 = Switch Renderer\nbind f11 = Toggle fullscreen\nbind f12 = Take Screenshot", 
            "title": "pcsx-rearmed Controls"
        }, 
        {
            "location": "/Playstation-1/#video-guide", 
            "text": "", 
            "title": "Video Guide"
        }, 
        {
            "location": "/Playstation-1/#enhanced-graphics", 
            "text": "lr-pcsx-rearmed has a core option to improve graphical fidelity by doubling the normal resolution. On a Pi 2 this introduces some slowdown and audio skipping, but on a Pi 3 it appears to work without issue. The 'speed hack' option is required for good results, but has some minor visual glitches.  To enable this, edit the  retroarch-core-options.cfg  file, found in:  /opt/retropie/configs/all/  The option is:  pcsx_rearmed_neon_enhancement_enable =  enabled \npcsx_rearmed_neon_enhancement_no_main =  enabled", 
            "title": "Enhanced Graphics"
        }, 
        {
            "location": "/Playstation-1/#multitap-3-8-player", 
            "text": "The latest version of lr-pcsx-rearmed has the ability to emulate up to two Multitaps, allowing 3-8 player support in games that permit it. It does this via core options. However, just as with the original hardware, many games do not support the multitap and will not recognise  any  inputs with it turned on, so it is recommended to only enable multitaps for games that support it, via the 'Game Specific Options' retroarch functionality which allows you to create core options files for specific games. To enable this, use the [[Configuration Editor]]    Advanced Configuration     Configure Libretro options     psx/retroarch.cfg    Set  game_specific_options  to  true .  Alternatively, you can manually edit  retroarch.cfg  in:  /opt/retropie/configs/psx/  The option is:  game_specific_options =  true   Then, within a multiplayer game, load up the Retroarch menu via the menu hotkey combination (select   X/Triangle, by default), go to  Quick Menu     Options    Find the  Multitap 1  and  Multitap 2  options and turn them on, as appropriate. Then scroll to the top, and choose  Create game options file . Once this is completed, restart the game, and multiplayer options should become available.", 
            "title": "Multitap (3-8 player)"
        }, 
        {
            "location": "/Playstation-1/#analog-controller-type", 
            "text": "lr-pcsc-rearmed controller type can be changed in-game and in a configuration file to support games that require the analog/dualshock controller type.  NOTE:  Games that do not support analog controls will be unresponsive in this mode.  Use the Retroarch GUI hotkey(default select+X) in-game  Navigate to Quick Menu -  Core Options  Change Pad # Type from standard to analog   retroarch-core-options.cfg  will be updated automatically when a game is exited, so there is no need to set save on exit  Retroarch Core options can be located in  /opt/retropie/configs/all/retroarch-core-options.cfg  for changing manually outside of a game.  pcsx_rearmed_pad1type =  analog \npcsx_rearmed_pad2type =  standard   The standalone pcsx-rearmed controller type can be changed in the in-game menu.  Enter the in-game menu using ESC on a keyboard  Navigate to the controls menu\n* Change Port # device from Standard to Analog", 
            "title": "Analog Controller Type"
        }, 
        {
            "location": "/Playstation-1/#disc-swapping-for-multi-disc-games-in-retroarch", 
            "text": "To change disks in-game, go to Core Disk Options   Disk Image Append.  Some games like Metal Gear Solid require the disk tray to be opened before changing disks. To do this, change 'Disk Index' to 'No Disk' first.", 
            "title": "Disc Swapping for Multi-disc Games in RetroArch"
        }, 
        {
            "location": "/Playstation-1/#multi-disc-games-or-cd-image-not-working", 
            "text": "Note that all the emulators accept  .pbp  files, which are EBOOT-format PlayStation executables. These are also known as PSX2PSP files, used to play PlayStation 1 games on the PSP.  This is the easiest way to play multi-disc PlayStation games on RetroPie.  If a CD image such as  .iso  or  .bin/.cue  does not work, try the EBOOT version.  CD images can be converted to EBOOT  .pbp  files with the  PSX2PSP v1.4.2  application for Windows.  EBOOTs are also often smaller than CD images, so could be a good option if you're tight on space.", 
            "title": "Multi-disc games or CD image not working"
        }, 
        {
            "location": "/Playstation-1/#importing-save-files", 
            "text": "On sites like  GameFAQs  you can find many save files for PlayStation games, these are either disk images of peoples' memory cards or hacked memory cards with a save file that gets you to a certain point in the game or gives you a character with many levels/gold/items, however the game works.  All the different PlayStation emulators (ePSXe, PCSX, Bleem, PSEmu, etc) and memory card dumper hardware (DexDrive, MadCatz Data Deck) use a different memory card save format, so you often can't just copy these downloaded save files right onto the Pi.  First you must use a memory card manager utility to convert from one format to the format suitable for RetroPie's PCSX-based emulators. One such tool is  Memory Card Manager 1.4 by Aldo Vargas . Download this and  MSVBVM50.DLL , and run  MemManager.exe . It looks like this:   Press the  New  button at the bottom and create a file the same name as your PSX ROM. For example, if you are using  Diablo.pbp  or  Diablo.cue  then call the new memory card file  Diablo.mcr . Ensure you select the  Other - AdriPSX, FPSE, pcsx  format in the dropdown menu, then press  Save .  Press the   at the bottom of the window which opens a second pane on the right. In the new pane, press the  ...  at the top and open the save file you have downloaded.  Hopefully  you'll see valid memory card blocks, similar to what you'd see on an actual PSX. (some saves may not show expected/valid contents, in which case you're probably out of luck trying to use that save file, download a different one)  Click on the block in the right hand column you wish to import, and press the   arrow to copy it into your new memory card on the left hand column. The screenshot above demonstrates the way to select the correct block and the correct button to press.  In your memory card on the left, click  Save As  and save over the blank card you just created.  Quit MemManager and rename your new memory card from  .mcr  to  .srm . Following our example above, we'd now have a file called  Diablo.srm . Copy this memory card file to your RetroPie ROMs directory.  Now go to RetroPie and run your game in the PSX emulator. You should be able to see the contents of the memory card and load the saved game which you downloaded.", 
            "title": "Importing Save Files"
        }, 
        {
            "location": "/Playstation-1/#alternative-bios-files", 
            "text": "Add different bios' that you've tested and tell the community if it works or not.     Name  Description  md5  CRC32  Comment       ps-10j  SCPH-1000/DTL-H1000 (Version 1.0 J)  239665b1a3dade1b5a52c06338011044  3b601fc8      ps-11j  SCPH-3000/DTL-H1000H (Version 1.1 01/22/95)  849515939161e62f6b866f6853006780  3539def6      ps-20a  DTL-H1001 (Version 2.0 05/07/95 A)  dc2b9bf8da62ec93e868cfd29f0d067d  55847d8c      ps-20e  DTL-H1002/SCPH-1002 (Version 2.0 05/10/95 E)  54847e693405ffeb0359c6287434cbef  9bb87c4b      ps-21j  SCPH-3500 (Version 2.1 07/17/95 J)  cba733ceeff5aef5c32254f1d617fa62  bc190209      ps-21a  DTL-H1101 (Version 2.1 07/17/95 A)  da27e8b6dab242d8f91a9b25d80c63b8  aff00f2f      ps-21e  SCPH-1002/DTL-H1102 (Version 2.1 07/17/95 E)  417b34706319da7cf001e76e40136c23  86c30531      ps-22j  SCPH-5000/DTL-H1200/DTL-H3000 (Version 2.2 12/04/95 J)  57a06303dfa9cf9351222dfcbb4a29d9  24fc7e17      ps-22a  SCPH-1001/DTL-H1201/DTL-H3001 (Version 2.2 12/04/95 A)  924e392ed05558ffdb115408c263dccf  37157331      ps-22e  SCPH-1002/DTL-H1202/DTL-H3002 (Version 2.2 12/04/95 E)  e2110b8a2b97a8e0b857a45d32f7e187  1e26792f      ps-22d  DTL-H1100 (Version 2.2 03/06/96 D)  ca5cfc321f916756e3f0effbfaeba13b  decb22f5      ps-30j  SCPH-5500 (Version 3.0 09/09/96 J)  8dd7d5296a650fac7319bce665a6a53c  ff3eeb8c      ps-30a  SCPH-5501/SCPH-5503/SCPH-7003 (Version 3.0 11/18/96 A)  490f666e1afb15b7362b406ed1cea246  8d8cb7e4      ps-30e  SCPH-5502/SCPH-5552 (Version 3.0 01/06/97 E)  32736f17079d0b2b7024407c39bd3050  d786f0b9      ps-40j  SCPH-7000/SCPH-7500/SCPH-9000 (Version 4.0 08/18/97 J)  8e4c14f567745eff2f0408c8129f72a6  ec541cd0      ps-41a  SCPH-7001/SCPH-7501/SCPH-7503/SCPH-9001/SCPH-9003/SCPH-9903 (Version 4.1 12/16/97 A)  1e68c231d0896b7eadcad1d7d8e76129  502224b6      ps-41e  SCPH-7002/SCPH-7502/SCPH-9002 (Version 4.1 12/16/97 E)  b9d9a0286c33dc6b7237bb13cd46fdee  318178bf      psone-43j  SCPH-100 (Version 4.3 03/11/00 J)  8abc1b549a4a80954addc48ef02c4521  f2af798b      psone-44e  SCPH-102 (Version 4.4 03/24/00 E)  b10f5e0e3d9eb60e5159690680b1e774  0bad7ea9      psone-45a  SCPH-101 (Version 4.5 05/25/00 A)  6e3735ff4c7dc899ee98981385f6f3d0  171bdcec      psone-45e  SCPH-102 (Version 4.5 05/25/00 E)  de93caec13d1a141a40a79f5c86168d6  76b880e5", 
            "title": "Alternative BIOS files"
        }, 
        {
            "location": "/Playstation-2/", 
            "text": "The PlayStation 2 is a home video game console released by Sony in 2000.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nPCSX2\n\n\nps2\n\n\n.iso .img .bin .mdf .z .z2 .bz2 .dump .cso .ima .gz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:exclamation: This is only for x86 builds- Not the Raspberry Pi!.\n\n\n\n\nEmulators: \nPCSX2\n\n\nROMS\n\n\nAccepted File Extensions: \n.iso .img .bin .mdf .z .z2 .bz2 .dump .cso .ima .gz\n\n\nPlace your PlayStation 2 ROMs in \n\n\n/home/pi/RetroPie/roms/ps2\n\n\n\n\nBIOS\n\n\nPlace your Playstation 2 BIOS in \n\n\n/home/pi/.config/PCSX2/bios/\n\n\n\n\nOn First run the GUI will run it will ask you to select which BIOS to use.  Select the Appropriate one and use iso' that match that region. \n\n\nControls", 
            "title": "Playstation 2"
        }, 
        {
            "location": "/Playstation-2/#emulators-pcsx2", 
            "text": "", 
            "title": "Emulators: PCSX2"
        }, 
        {
            "location": "/Playstation-2/#roms", 
            "text": "Accepted File Extensions:  .iso .img .bin .mdf .z .z2 .bz2 .dump .cso .ima .gz  Place your PlayStation 2 ROMs in   /home/pi/RetroPie/roms/ps2", 
            "title": "ROMS"
        }, 
        {
            "location": "/Playstation-2/#bios", 
            "text": "Place your Playstation 2 BIOS in   /home/pi/.config/PCSX2/bios/  On First run the GUI will run it will ask you to select which BIOS to use.  Select the Appropriate one and use iso' that match that region.", 
            "title": "BIOS"
        }, 
        {
            "location": "/Playstation-2/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/PSP/", 
            "text": "The PlayStation Portable or PSP is a handheld video game system released by Sony in 2004.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nppsspp\n\n\npsp\n\n\n.cso .iso .pbp\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\nlr-ppsspp\n\n\npsp\n\n\n.cso .iso .pbp\n\n\nnone\n\n\n/opt/retropie/configs/psp/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulators: \nlr-ppsspp\n, \nppsspp\n\n\nNot available for the Raspberry Pi 1. Lr-ppsspp has the convenience of retroarch controller configs, but standalone ppsspp has the best performance and compatibility.\n\n\nROMS\n\n\nAccepted File Extensions: \n.cso .iso .pbp\n\n\nPlace your PSP ROMs in \n\n\n/home/pi/RetroPie/roms/psp\n````\n#### [**PSP COMPATIBILITY LIST**](https://docs.google.com/spreadsheets/d/1V-MEx1tOXqCcJL1fQzGh9xLHny-qL-PSWqvY7F80Y90/edit?usp=sharing) feel free to contribute!\n\n## Controls\n\n### lr-ppsspp\n\nlr-ppsspp utilises Retroarch configurations\n\nAdd custom retroarch controls to the retroarch.cfg file in\n```shell\n/opt/retropie/configs/psp/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nppsspp\n\n\nControls can be mapped from the main menu under Settings \n Controls \n Control Mapping . To access this, connect a keyboard and press Esc during a game.", 
            "title": "PSP"
        }, 
        {
            "location": "/PSP/#emulators-lr-ppsspp-ppsspp", 
            "text": "Not available for the Raspberry Pi 1. Lr-ppsspp has the convenience of retroarch controller configs, but standalone ppsspp has the best performance and compatibility.", 
            "title": "Emulators: lr-ppsspp, ppsspp"
        }, 
        {
            "location": "/PSP/#roms", 
            "text": "Accepted File Extensions:  .cso .iso .pbp  Place your PSP ROMs in   /home/pi/RetroPie/roms/psp\n````\n#### [**PSP COMPATIBILITY LIST**](https://docs.google.com/spreadsheets/d/1V-MEx1tOXqCcJL1fQzGh9xLHny-qL-PSWqvY7F80Y90/edit?usp=sharing) feel free to contribute!\n\n## Controls\n\n### lr-ppsspp\n\nlr-ppsspp utilises Retroarch configurations\n\nAdd custom retroarch controls to the retroarch.cfg file in\n```shell\n/opt/retropie/configs/psp/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "ROMS"
        }, 
        {
            "location": "/PSP/#ppsspp", 
            "text": "Controls can be mapped from the main menu under Settings   Controls   Control Mapping . To access this, connect a keyboard and press Esc during a game.", 
            "title": "ppsspp"
        }, 
        {
            "location": "/Sam-Coupe/", 
            "text": "The SAM Coup\u00e9 was an 8 bit computer released in 1989.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nSimCoupe\n\n\nsamcoupe\n\n\n.dsk .mgt .sbt .sad\n\n\nnone\n\n\nkeyboard /opt/retropie/configs/simcoupe/SimCoupe.cfg\n\n\n\n\n\n\n\n\nEmulator: \nSimCoupe\n\n\nROMS\n\n\nAccepted File Extensions: \n.dsk .mgt .sbt .sad\n\n\nPlace your SAM Coup\u00e9 ROMs in:\n\n\n/home/pi/RetroPie/roms/samcoupe\n\n\n\n\nControls:\n\n\nKEYBOARD INPUT\n\nThe default SAM keyboard mode allows letters, digits and symbols to be typed\nas normal on your keyboard, with SimCoupe automatically converting them to the\nappropriate SAM key sequence. There's also a Spectrum mapping mode to use when\nrunning Spectrum software, and a raw mode to disable the mappings.\n\nThe SAM has a keypad of function keys from F0 to F9 located on the right-side\nof the keyboard. For similar key positions in SimCoupe, the SAM keypad is\nmapped to the numeric keypad on your keyboard. You'll need to have Numlock\nenabled for these keys to be recognised. Don't forget that when SAM software\nrefers to function keys, you must use the numeric keypad instead!\n\nF1 to F12 keys on your keyboard are used for emulator functions, with the\ndefault mappings shown below. Under OS X, keys F9 to F12 are used by Expose\nand Dashboard, so you'll need to hold the Command key in addition to the\ncombinations below to access them.\n\n             F1 = Open disk 1\n       Shift-F1 = Eject disk 1\n        Ctrl-F1 = Save disk 1\n         Alt-F1 = New disk 1\n             F2 = Open disk 2\n       Shift-F2 = Eject disk 2\n        Ctrl-F2 = Save disk 2\n         Alt-F2 = New disk 2\n             F3 = Tape browser\n             F4 = Import data\n       Shift-F4 = Export data\n         Alt-F4 = Exit application\n             F5 = Toggle 5:4 display\n             F6 = Toggle display smoothing\n             F7 = Toggle CRT scanlines\n       Shift-F7 = Toggle hi-res scanlines\n             F8 = Toggle full-screen\n             F9 = Debugger\n       Shift-F9 = Save screenshot\n            F10 = Options\n            F11 = NMI Button\n            F12 = Reset button\n       Ctrl-F12 = Exit application\n\n      PrintScrn = Save SAM screenshot in PNG format\n          Pause = Pause emulation\n    Scroll Lock = Pause emulation\n     Ctrl-Break = Reset\n  Ctrl-Keypad * = Reset\n  Ctrl-Keypad - = Normal emulation speed\n       Keypad - = Reduce emulation speed\n       Keypad + = Increase emulation speed\n       Keypad * = Turbo speed\n\nTurbo speed disables the frame sync and sound, and limits the display to just\n5 frames per second. This usually gives a big speed boost, which is useful for\nzooming through slow sections in games and demos, etc.\n\n\nSAM shift modifier keys and special symbols are mapped as follows:\n\n         Insert = Inv\n      Left-Ctrl = Symbol\n     Right-Ctrl = Cntrl\n       Left-Alt = Cntrl (if enabled)\n      Right-Alt = Edit  (if enabled)\n       Menu Key = Edit\n  ` (backtick)  = (c)\n  . (on keypad) = (c)\n    \u00a7 (section) = #\n\nThe following additional combinations are also provided for convenience, since\nthey map common keys to the equivalent function on the SAM:\n\n     Native key   SAM key\n     ----------   -------\n         Delete = Shift-Delete\n        Numlock = Symbol-Edit  (toggles SAM BASIC keypad mode)\n           Home = Cntrl-Left\n            End = Cntrl-Right\n        Page Up = F4\n      Page Down = F1\n\n\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *", 
            "title": "Sam Coupe"
        }, 
        {
            "location": "/Sam-Coupe/#emulator-simcoupe", 
            "text": "", 
            "title": "Emulator: SimCoupe"
        }, 
        {
            "location": "/Sam-Coupe/#roms", 
            "text": "Accepted File Extensions:  .dsk .mgt .sbt .sad  Place your SAM Coup\u00e9 ROMs in:  /home/pi/RetroPie/roms/samcoupe", 
            "title": "ROMS"
        }, 
        {
            "location": "/Sam-Coupe/#controls", 
            "text": "KEYBOARD INPUT\n\nThe default SAM keyboard mode allows letters, digits and symbols to be typed\nas normal on your keyboard, with SimCoupe automatically converting them to the\nappropriate SAM key sequence. There's also a Spectrum mapping mode to use when\nrunning Spectrum software, and a raw mode to disable the mappings.\n\nThe SAM has a keypad of function keys from F0 to F9 located on the right-side\nof the keyboard. For similar key positions in SimCoupe, the SAM keypad is\nmapped to the numeric keypad on your keyboard. You'll need to have Numlock\nenabled for these keys to be recognised. Don't forget that when SAM software\nrefers to function keys, you must use the numeric keypad instead!\n\nF1 to F12 keys on your keyboard are used for emulator functions, with the\ndefault mappings shown below. Under OS X, keys F9 to F12 are used by Expose\nand Dashboard, so you'll need to hold the Command key in addition to the\ncombinations below to access them.\n\n             F1 = Open disk 1\n       Shift-F1 = Eject disk 1\n        Ctrl-F1 = Save disk 1\n         Alt-F1 = New disk 1\n             F2 = Open disk 2\n       Shift-F2 = Eject disk 2\n        Ctrl-F2 = Save disk 2\n         Alt-F2 = New disk 2\n             F3 = Tape browser\n             F4 = Import data\n       Shift-F4 = Export data\n         Alt-F4 = Exit application\n             F5 = Toggle 5:4 display\n             F6 = Toggle display smoothing\n             F7 = Toggle CRT scanlines\n       Shift-F7 = Toggle hi-res scanlines\n             F8 = Toggle full-screen\n             F9 = Debugger\n       Shift-F9 = Save screenshot\n            F10 = Options\n            F11 = NMI Button\n            F12 = Reset button\n       Ctrl-F12 = Exit application\n\n      PrintScrn = Save SAM screenshot in PNG format\n          Pause = Pause emulation\n    Scroll Lock = Pause emulation\n     Ctrl-Break = Reset\n  Ctrl-Keypad * = Reset\n  Ctrl-Keypad - = Normal emulation speed\n       Keypad - = Reduce emulation speed\n       Keypad + = Increase emulation speed\n       Keypad * = Turbo speed\n\nTurbo speed disables the frame sync and sound, and limits the display to just\n5 frames per second. This usually gives a big speed boost, which is useful for\nzooming through slow sections in games and demos, etc.\n\n\nSAM shift modifier keys and special symbols are mapped as follows:\n\n         Insert = Inv\n      Left-Ctrl = Symbol\n     Right-Ctrl = Cntrl\n       Left-Alt = Cntrl (if enabled)\n      Right-Alt = Edit  (if enabled)\n       Menu Key = Edit\n  ` (backtick)  = (c)\n  . (on keypad) = (c)\n    \u00a7 (section) = #\n\nThe following additional combinations are also provided for convenience, since\nthey map common keys to the equivalent function on the SAM:\n\n     Native key   SAM key\n     ----------   -------\n         Delete = Shift-Delete\n        Numlock = Symbol-Edit  (toggles SAM BASIC keypad mode)\n           Home = Cntrl-Left\n            End = Cntrl-Right\n        Page Up = F4\n      Page Down = F1\n\n\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *", 
            "title": "Controls:"
        }, 
        {
            "location": "/Saturn/", 
            "text": "The Sega Saturn is a 32 bit 5th generation home video game console released by Sega in 1994. It has a total of 8 processors which makes it one of the most difficult consoles to emulate.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-Yabause\n\n\nsaturn\n\n\n.bin .iso .mdf\n\n\nsaturn_bios.bin\n\n\n/opt/retropie/configs/saturn/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-Yabause\n :small_red_triangle:\n\n\nYabause stands for: Yet Another Buggy And Uncomplete Sega Emulator. It stands by its name. Currently you need to install it from the setup script under experimental builds. Any Raspberry Pi model will achieve only 1-2 frames-per-second, rendering it unplayable on those systems.\n\n\nROMS\n\n\nAccepted File Extensions: \n.bin .iso .mdf\n\n\nPlace your Sega Saturn ROMs in \n\n\n/home/pi/RetroPie/roms/saturn\n\n\n\n\nBIOS\n\n\nThe BIOS file needed is \nsaturn_bios.bin\n\n\nPlace your BIOS in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nControls\n\n\nlr-yabause utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/saturn/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nStandalone\n\n\nThe standalone version runs faster but requires X, QT, etc. Even then, it manages 10FPS so probably not worth adding to the scripts. If you're curious, here's the basic instructions to get it installed:\n\n\nsudo apt-get update\nsudo apt-get install xinit qt4-dev-tools build-essential libgl1-mesa-dev\n\n\n\n\nmake some directory, and go in it\n\n\nmkdir tempdev\ncd tempdev\n\n\n\n\ngit clone https://github.com/Yabause/yabause.git\n\ncd yabause/yabause/src\n\ncmake -DYAB_WANT_OPENGL=NO $SOURCES\n\nmake\n\n\n\n\ngo into a terminal on your pi itself\n\n\nnavigate to /your_directory/yabause/yabausesrc/qt\n\n\nsudo xinit ./yabause", 
            "title": "Saturn"
        }, 
        {
            "location": "/Saturn/#emulator-lr-yabause-small_red_triangle", 
            "text": "Yabause stands for: Yet Another Buggy And Uncomplete Sega Emulator. It stands by its name. Currently you need to install it from the setup script under experimental builds. Any Raspberry Pi model will achieve only 1-2 frames-per-second, rendering it unplayable on those systems.", 
            "title": "Emulator: lr-Yabause :small_red_triangle:"
        }, 
        {
            "location": "/Saturn/#roms", 
            "text": "Accepted File Extensions:  .bin .iso .mdf  Place your Sega Saturn ROMs in   /home/pi/RetroPie/roms/saturn", 
            "title": "ROMS"
        }, 
        {
            "location": "/Saturn/#bios", 
            "text": "The BIOS file needed is  saturn_bios.bin  Place your BIOS in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/Saturn/#controls", 
            "text": "lr-yabause utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/saturn/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Saturn/#standalone", 
            "text": "The standalone version runs faster but requires X, QT, etc. Even then, it manages 10FPS so probably not worth adding to the scripts. If you're curious, here's the basic instructions to get it installed:  sudo apt-get update\nsudo apt-get install xinit qt4-dev-tools build-essential libgl1-mesa-dev  make some directory, and go in it  mkdir tempdev\ncd tempdev  git clone https://github.com/Yabause/yabause.git\n\ncd yabause/yabause/src\n\ncmake -DYAB_WANT_OPENGL=NO $SOURCES\n\nmake  go into a terminal on your pi itself  navigate to /your_directory/yabause/yabausesrc/qt  sudo xinit ./yabause", 
            "title": "Standalone"
        }, 
        {
            "location": "/ScummVM/", 
            "text": "ScummVM stands for Script Creation Utility for Maniac Mansion (VM stands for virtual machine). ScummVM is a program which allows you to run certain classic graphical point-and-click adventure games, provided you already have their data files\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nScummVM\n\n\nscummvm\n\n\nsee below\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nScummVM\n\n\nROMS\n\n\nAccepted File Extensions: This is a tricky question as ScummVM has it's own particular filesets and method of loading- but when all is said and done \n.sh .svm\n are the filetypes EmulationStation will read.\n\n\nScummVM is much different than most romsets in that there are a set of files for each game. \n\n\nSee the list here: http://wiki.scummvm.org/index.php/Datafiles\n\n\nPlace Your folders of game files in\n\n\n/home/pi/RetroPie/roms/scummvm\n\n\n\n\nQuick Start\n\n\n-After you've added you files into the scummvm rom folder, open up the +LAUNCH GUI\n\n\n-then hold down shift and click mass add\n\n\n-Navigate to the scummvm folder and select it to add all of your files\n\n\n-quit out of the GUI\n\n\n-Press F4 to get out of emulationstation\n\n\n-Type in emulationstation to open up emulationstation\n\n\n-navigate to scummvm and your games will all be there on the list and you'll have no need of a GUI\n\n\nTroublshooting\n\n\nFUZZY MENU?\n\n\nYou can open the \noptions\n in the scummvm launcher and change the graphics mode to \nopengl\n and it will make the menu and your games clear and crisp! There are also other rendering modes as well that can be changed.\n\n\nVideo Tutorial:", 
            "title": "ScummVM"
        }, 
        {
            "location": "/ScummVM/#emulator-scummvm", 
            "text": "", 
            "title": "Emulator: ScummVM"
        }, 
        {
            "location": "/ScummVM/#roms", 
            "text": "Accepted File Extensions: This is a tricky question as ScummVM has it's own particular filesets and method of loading- but when all is said and done  .sh .svm  are the filetypes EmulationStation will read.  ScummVM is much different than most romsets in that there are a set of files for each game.   See the list here: http://wiki.scummvm.org/index.php/Datafiles  Place Your folders of game files in  /home/pi/RetroPie/roms/scummvm  Quick Start  -After you've added you files into the scummvm rom folder, open up the +LAUNCH GUI  -then hold down shift and click mass add  -Navigate to the scummvm folder and select it to add all of your files  -quit out of the GUI  -Press F4 to get out of emulationstation  -Type in emulationstation to open up emulationstation  -navigate to scummvm and your games will all be there on the list and you'll have no need of a GUI", 
            "title": "ROMS"
        }, 
        {
            "location": "/ScummVM/#troublshooting", 
            "text": "", 
            "title": "Troublshooting"
        }, 
        {
            "location": "/ScummVM/#fuzzy-menu", 
            "text": "You can open the  options  in the scummvm launcher and change the graphics mode to  opengl  and it will make the menu and your games clear and crisp! There are also other rendering modes as well that can be changed.", 
            "title": "FUZZY MENU?"
        }, 
        {
            "location": "/ScummVM/#video-tutorial", 
            "text": "", 
            "title": "Video Tutorial:"
        }, 
        {
            "location": "/Sega-32X/", 
            "text": "The Sega 32X was released as an add-on for the Sega Genesis in 1994. There was a whopping total of 40 games for this console- it was considered a commercial failure.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-picodrive\n\n\nsega32x\n\n\n.32x .smd .bin .md\n\n\nnone\n\n\n/opt/retropie/configs/sega32x/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-picodrive\n\n\nROMS\n\n\nAccepted File Extensions: \n.32x .smd .bin .md\n\n\nPlace your Sega 32X ROMs in\n\n\n/home/pi/RetroPie/roms/sega32x\n\n\n\n\nControls\n\n\nlr-picodrive utilise RetroArch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/sega32x/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nConfiguring a 6 button controller\n\n\nFirst you need to tell retroarch to use 6 buttons, because the default is to use 3.\n\n\nLaunch a Sega 32X game and go to the Retroarch menu (default mapping: \nselect + x\n). Go to \nQuick Menu -\n Core Options\n and set the two input devices to \n6 button pad\n. Then exit the Retroarch menu. Once you quit the game, the configuration will be saved within the \nretroarch-core-options.cfg\n file under \n/opt/retropie/configs/all\n. You do not need to edit this file. These core options will also take affect on any other system which you may use lr-picodrive for (eg. Sega Megadrive, Sega CD).\n\n\n3 Button Genesis/MegaDrive Controller\n\n\n\n\n6 Button Genesis/MegaDrive Wireless Controller\n\n\n\n\n6 Button Genesis/MegaDrive ArcadePad Controller", 
            "title": "Sega 32X"
        }, 
        {
            "location": "/Sega-32X/#emulator-lr-picodrive", 
            "text": "", 
            "title": "Emulator: lr-picodrive"
        }, 
        {
            "location": "/Sega-32X/#roms", 
            "text": "Accepted File Extensions:  .32x .smd .bin .md  Place your Sega 32X ROMs in  /home/pi/RetroPie/roms/sega32x", 
            "title": "ROMS"
        }, 
        {
            "location": "/Sega-32X/#controls", 
            "text": "lr-picodrive utilise RetroArch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/sega32x/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Sega-32X/#configuring-a-6-button-controller", 
            "text": "First you need to tell retroarch to use 6 buttons, because the default is to use 3.  Launch a Sega 32X game and go to the Retroarch menu (default mapping:  select + x ). Go to  Quick Menu -  Core Options  and set the two input devices to  6 button pad . Then exit the Retroarch menu. Once you quit the game, the configuration will be saved within the  retroarch-core-options.cfg  file under  /opt/retropie/configs/all . You do not need to edit this file. These core options will also take affect on any other system which you may use lr-picodrive for (eg. Sega Megadrive, Sega CD).", 
            "title": "Configuring a 6 button controller"
        }, 
        {
            "location": "/Sega-32X/#3-button-genesismegadrive-controller", 
            "text": "", 
            "title": "3 Button Genesis/MegaDrive Controller"
        }, 
        {
            "location": "/Sega-32X/#6-button-genesismegadrive-wireless-controller", 
            "text": "", 
            "title": "6 Button Genesis/MegaDrive Wireless Controller"
        }, 
        {
            "location": "/Sega-32X/#6-button-genesismegadrive-arcadepad-controller", 
            "text": "", 
            "title": "6 Button Genesis/MegaDrive ArcadePad Controller"
        }, 
        {
            "location": "/Sega-CD/", 
            "text": "The Sega CD was yet another add-on to the Sega Genesis. It was released in 1991.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-genesis-plus-gx\n\n\nsegacd\n\n\n.cue .iso\n\n\nbios_CD_U.bin, bios_CD_E.bin, bios_CD_J.bin\n\n\n/opt/retropie/configs/segacd/retroarch.cfg\n\n\n\n\n\n\nlr-picodrive\n\n\nsegacd\n\n\n.cue .iso\n\n\nus_scd1_9210.bin, eu_mcd1_9210.bin, jp_mcd1_9112.bin\n\n\n/opt/retropie/configs/segacd/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulators: \nlr-genesis-plus-gx\n, \nlr-picodrive\n\n\nGenesis-Plus-GX is recommended for the Pi 2/3 as it has better accuracy.\n\n\nROMS\n\n\nAccepted File Extensions: \n .cue .bin .iso\n\nNote: .bin files wont be displayed within Emulation Station, they will be referenced via the .cue.\n\n\nPlace your Sega CD ROMS (.bin AND .cue) in\n\n\n/home/pi/RetroPie/roms/segacd\n\n\n\n\nIf you don't have the corresponding .cue file in the same folder as your .bin file, your game may not have sound.\n\n\nBIOS\n\n\nlr-picodrive\n\n\nThe BIOS filename is: \nus_scd1_9210.bin\n \n\n\nPlace this lr-Picodrive BIOS file in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nBIOS files that may also work are: eu_mcd1_9210.bin, jp_mcd1_9112.bin (Europe and Japan respectively)\n\n\nlr-Genesis-Plus-GX\n\n\nThe BIOS filename is: \nbios_CD_U.bin\n (can be renamed from the above BIOS)\n\n\nPlace this lr-Genesis-Plus-GX BIOS file in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nthe alternate BIOS files above can be renamed: bios_CD_E.bin, bios_CD_J.bin (Europe and Japan respectively)  \n\n\nVideo Guide using lr-genesis-plus-gx: https://www.youtube.com/watch?v=PkktRuK8uWU\n\n\nChecksums\n\n\n\n\n\n\n\n\nlr-picodrive filename\n\n\nlr-Genesis-Plus-GX filename\n\n\nNo-Intro filename\n\n\nmd5sum\n\n\n\n\n\n\n\n\n\n\nus_scd1_9210.bin\n\n\nbios_CD_U.bin\n\n\n[BIOS] Sega CD (USA) (v1.10).md\n\n\n2efd74e3232ff260e371b99f84024f7f\n\n\n\n\n\n\neu_mcd1_9210.bin\n\n\nbios_CD_E.bin\n\n\n[BIOS] Mega-CD (Europe) (v1.00).md\n\n\ne66fa1dc5820d254611fdcdba0662372\n\n\n\n\n\n\njp_mcd1_9112.bin\n\n\nbios_CD_J.bin\n\n\n[BIOS] Mega-CD (Asia) (v1.00S).md\n\n\nbdeb4c47da613946d422d97d98b21cda\n\n\n\n\n\n\n\n\nControls\n\n\nlr-picodrive and lr-genesis-plus-gx utilise RetroArch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/segacd/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nConfiguring a 6 button controller\n\n\nFirst you need to tell retroarch to use 6 buttons, because the default is to use 3.\n\n\nlr-picodrive\n\n\nLaunch a Sega CD game and go to the Retroarch menu (default mapping: \nselect + x\n). Go to \nQuick Menu -\n Core Options\n and set the two input devices to \n6 button pad\n. Then exit the Retroarch menu. Once you quit the game, the configuration will be saved within the \nretroarch-core-options.cfg\n file under \n/opt/retropie/configs/all\n. You do not need to edit this file. These core options will also take affect on any other system which you may use lr-picodrive for (eg. Sega 32X, Sega Megadrive).\n\n\nlr-genesis-plus-gx\n\n\nThere are two ways to achieve this:\n\n\nOption 1\n\n\nYou can edit the file \n/opt/retropie/configs/segacd/retroarch.cfg\n and add in the following:\n\n\ninput_libretro_device_p1 = \"513\"\ninput_libretro_device_p2 = \"513\"\n\n\n\nThis will set the controller type to a 6 button pad, and will reload this configuration every time the emulator is launched.\n\n\nOption 2\n\n\nYou can save a Core Remap File which reloads every time the emulator is launched:\n\n\nGo to the Retroarch menu (default mapping: \nselect + x\n). Go to \nQuick Menu -\n Core Input Options\n and set the User 1 and User 2 Device Type to be MD Joypad 6 Button.\n\n\nScroll down on the same page and select Save Core Remap File. This will save a core remap file (.rmp) to a folder called \"Genesis Plus GX\" in the \n/opt/retropie/configs/segacd\n folder. By default this remap file will load every time the emulator is launched.\n\n\n3 Button Genesis/MegaDrive Controller\n\n\n\n\n6 Button Genesis/MegaDrive Wireless Controller\n\n\n\n\n6 Button Genesis/MegaDrive ArcadePad Controller", 
            "title": "Sega CD"
        }, 
        {
            "location": "/Sega-CD/#emulators-lr-genesis-plus-gx-lr-picodrive", 
            "text": "Genesis-Plus-GX is recommended for the Pi 2/3 as it has better accuracy.", 
            "title": "Emulators: lr-genesis-plus-gx, lr-picodrive"
        }, 
        {
            "location": "/Sega-CD/#roms", 
            "text": "Accepted File Extensions:   .cue .bin .iso \nNote: .bin files wont be displayed within Emulation Station, they will be referenced via the .cue.  Place your Sega CD ROMS (.bin AND .cue) in  /home/pi/RetroPie/roms/segacd  If you don't have the corresponding .cue file in the same folder as your .bin file, your game may not have sound.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Sega-CD/#bios", 
            "text": "", 
            "title": "BIOS"
        }, 
        {
            "location": "/Sega-CD/#lr-picodrive", 
            "text": "The BIOS filename is:  us_scd1_9210.bin    Place this lr-Picodrive BIOS file in  /home/pi/RetroPie/BIOS  BIOS files that may also work are: eu_mcd1_9210.bin, jp_mcd1_9112.bin (Europe and Japan respectively)", 
            "title": "lr-picodrive"
        }, 
        {
            "location": "/Sega-CD/#lr-genesis-plus-gx", 
            "text": "The BIOS filename is:  bios_CD_U.bin  (can be renamed from the above BIOS)  Place this lr-Genesis-Plus-GX BIOS file in  /home/pi/RetroPie/BIOS  the alternate BIOS files above can be renamed: bios_CD_E.bin, bios_CD_J.bin (Europe and Japan respectively)    Video Guide using lr-genesis-plus-gx: https://www.youtube.com/watch?v=PkktRuK8uWU", 
            "title": "lr-Genesis-Plus-GX"
        }, 
        {
            "location": "/Sega-CD/#checksums", 
            "text": "lr-picodrive filename  lr-Genesis-Plus-GX filename  No-Intro filename  md5sum      us_scd1_9210.bin  bios_CD_U.bin  [BIOS] Sega CD (USA) (v1.10).md  2efd74e3232ff260e371b99f84024f7f    eu_mcd1_9210.bin  bios_CD_E.bin  [BIOS] Mega-CD (Europe) (v1.00).md  e66fa1dc5820d254611fdcdba0662372    jp_mcd1_9112.bin  bios_CD_J.bin  [BIOS] Mega-CD (Asia) (v1.00S).md  bdeb4c47da613946d422d97d98b21cda", 
            "title": "Checksums"
        }, 
        {
            "location": "/Sega-CD/#controls", 
            "text": "lr-picodrive and lr-genesis-plus-gx utilise RetroArch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/segacd/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Sega-CD/#configuring-a-6-button-controller", 
            "text": "First you need to tell retroarch to use 6 buttons, because the default is to use 3.", 
            "title": "Configuring a 6 button controller"
        }, 
        {
            "location": "/Sega-CD/#lr-picodrive_1", 
            "text": "Launch a Sega CD game and go to the Retroarch menu (default mapping:  select + x ). Go to  Quick Menu -  Core Options  and set the two input devices to  6 button pad . Then exit the Retroarch menu. Once you quit the game, the configuration will be saved within the  retroarch-core-options.cfg  file under  /opt/retropie/configs/all . You do not need to edit this file. These core options will also take affect on any other system which you may use lr-picodrive for (eg. Sega 32X, Sega Megadrive).", 
            "title": "lr-picodrive"
        }, 
        {
            "location": "/Sega-CD/#lr-genesis-plus-gx_1", 
            "text": "There are two ways to achieve this:", 
            "title": "lr-genesis-plus-gx"
        }, 
        {
            "location": "/Sega-CD/#option-1", 
            "text": "You can edit the file  /opt/retropie/configs/segacd/retroarch.cfg  and add in the following:  input_libretro_device_p1 = \"513\"\ninput_libretro_device_p2 = \"513\"  This will set the controller type to a 6 button pad, and will reload this configuration every time the emulator is launched.", 
            "title": "Option 1"
        }, 
        {
            "location": "/Sega-CD/#option-2", 
            "text": "You can save a Core Remap File which reloads every time the emulator is launched:  Go to the Retroarch menu (default mapping:  select + x ). Go to  Quick Menu -  Core Input Options  and set the User 1 and User 2 Device Type to be MD Joypad 6 Button.  Scroll down on the same page and select Save Core Remap File. This will save a core remap file (.rmp) to a folder called \"Genesis Plus GX\" in the  /opt/retropie/configs/segacd  folder. By default this remap file will load every time the emulator is launched.", 
            "title": "Option 2"
        }, 
        {
            "location": "/Sega-CD/#3-button-genesismegadrive-controller", 
            "text": "", 
            "title": "3 Button Genesis/MegaDrive Controller"
        }, 
        {
            "location": "/Sega-CD/#6-button-genesismegadrive-wireless-controller", 
            "text": "", 
            "title": "6 Button Genesis/MegaDrive Wireless Controller"
        }, 
        {
            "location": "/Sega-CD/#6-button-genesismegadrive-arcadepad-controller", 
            "text": "", 
            "title": "6 Button Genesis/MegaDrive ArcadePad Controller"
        }, 
        {
            "location": "/SG-1000/", 
            "text": "The Sega SG-1000 is the first home video game console released by Sega in 1983.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-genesis-plus-gx\n\n\nsg-1000\n\n\n.sg .zip\n\n\nnone\n\n\n/opt/retropie/configs/sg-1000/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-genesis-plus-gx\n\n\nROMS\n\n\nAccepted File Extensions: \n.sg .zip\n\n\nPlace your Sega SG-1000 ROMs in \n\n\n/home/pi/RetroPie/roms/sg-1000\n\n\n\n\nControls\n\n\nlr-genesis-plus-gx utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/sg-1000/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "SG 1000"
        }, 
        {
            "location": "/SG-1000/#emulator-lr-genesis-plus-gx", 
            "text": "", 
            "title": "Emulator: lr-genesis-plus-gx"
        }, 
        {
            "location": "/SG-1000/#roms", 
            "text": "Accepted File Extensions:  .sg .zip  Place your Sega SG-1000 ROMs in   /home/pi/RetroPie/roms/sg-1000", 
            "title": "ROMS"
        }, 
        {
            "location": "/SG-1000/#controls", 
            "text": "lr-genesis-plus-gx utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/sg-1000/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/", 
            "text": "The Super Nintendo Entertainment System (or SNES) was a 4th generation video game console released by Nintendo in 1991. It is one of the most popular consoles.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-snes9x-next\n\n\nsnes\n\n\n.zip .smc .sfc .fig .swc\n\n\nnone\n\n\n/opt/retropie/configs/snes/retroarch.cfg\n\n\n\n\n\n\nlr-armsnes\n\n\nsnes\n\n\n.zip .smc .sfc .fig .swc\n\n\nnone\n\n\n/opt/retropie/configs/snes/retroarch.cfg\n\n\n\n\n\n\nlr-catsfc\n\n\nsnes\n\n\n.zip .smc .sfc .fig .swc\n\n\nnone\n\n\n/opt/retropie/configs/snes/retroarch.cfg\n\n\n\n\n\n\nlr-pocketsnes\n\n\nsnes\n\n\n.zip .smc .sfc .fig .swc\n\n\nnone\n\n\n/opt/retropie/configs/snes/retroarch.cfg\n\n\n\n\n\n\nsnes9x-rpi\n\n\nsnes\n\n\n.zip .smc .sfc .fig .swc\n\n\nnone\n\n\n/opt/retropie/configs/snes/snes9x.cfg\n\n\n\n\n\n\nPiSNES\n\n\nsnes\n\n\n.zip .smc .sfc .fig .swc\n\n\nnone\n\n\n/opt/retropie/configs/snes/snes9x.cfg\n\n\n\n\n\n\n\n\nEmulators: \nlr-snes9x-next\n, \nPiSNES\n, \nsnes9x-rpi\n, \nlr-armsnes\n, \nlr-catsfc\n, \nlr-pocketsnes\n\n\nRetroPie comes included with multiple SNES emulators. If you have a Pi 2, the preference is \nlr-SNES9x-Next\n due to better speed and sound emulation. PocketSnes is recommended for Super FX chip games.\n\n\nROMS\n\n\nAccepted File Extensions: \n.zip .smc .sfc .fig .swc\n\n\nPlace your SNES ROMs in\n\n\n/home/pi/RetroPie/roms/snes\n\n\n\n\nControls\n\n\nlr-armsnes, lr-catsfc, lr-pocketsnes, lr-snes9x-next\n\n\nlr-armsnes, lr-catsfc, lr-pocketsnes, lr-snes9x-next all utilise RetroArch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/snes/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nPiSNES\n\n\nController configurations are kept in a file named snes9x.cfg located in \n\n\n/opt/retropie/emulators/pisnes\n\n\n\n\nExample Configurations\n\n\n[Keyboard]\n# Get codes from /usr/include/SDL/SDL_keysym.h\nA_1=100\nB_1=99\nX_1=115\nY_1=120\nL_1=97\nR_1=102\nSTART_1=13\nSELECT_1=9\nLEFT_1=276\nRIGHT_1=275\nUP_1=273\nDOWN_1=274\nQUIT=27\nACCEL=8\n\n[Joystick]\n# Get codes from \njstest /dev/input/js0\n\n# from package \njoystick\n\nA_1=3\nB_1=2\nX_1=1\nY_1=0\nL_1=4\nR_1=6\nSTART_1=9\nSELECT_1=8\nQUIT=99\nACCEL=7\nQLOAD=10\nQSAVE=11\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n\n\n\n3-5 Players\n\n\nSome games allow more than 2 player. Currently, the only emulator which support this is \nlr-snes9x-next\n. In order to active this feature, you'll need to enable \nMulti-tap\n by adding this line to the \nretroarch.cfg\n:\n\n\ninput_libretro_device_p2 = \n257", 
            "title": "Super Nintendo Entertainment System"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/#emulators-lr-snes9x-next-pisnes-snes9x-rpi-lr-armsnes-lr-catsfc-lr-pocketsnes", 
            "text": "RetroPie comes included with multiple SNES emulators. If you have a Pi 2, the preference is  lr-SNES9x-Next  due to better speed and sound emulation. PocketSnes is recommended for Super FX chip games.", 
            "title": "Emulators: lr-snes9x-next, PiSNES, snes9x-rpi, lr-armsnes, lr-catsfc, lr-pocketsnes"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/#roms", 
            "text": "Accepted File Extensions:  .zip .smc .sfc .fig .swc  Place your SNES ROMs in  /home/pi/RetroPie/roms/snes", 
            "title": "ROMS"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/#lr-armsnes-lr-catsfc-lr-pocketsnes-lr-snes9x-next", 
            "text": "lr-armsnes, lr-catsfc, lr-pocketsnes, lr-snes9x-next all utilise RetroArch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/snes/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "lr-armsnes, lr-catsfc, lr-pocketsnes, lr-snes9x-next"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/#pisnes", 
            "text": "Controller configurations are kept in a file named snes9x.cfg located in   /opt/retropie/emulators/pisnes  Example Configurations  [Keyboard]\n# Get codes from /usr/include/SDL/SDL_keysym.h\nA_1=100\nB_1=99\nX_1=115\nY_1=120\nL_1=97\nR_1=102\nSTART_1=13\nSELECT_1=9\nLEFT_1=276\nRIGHT_1=275\nUP_1=273\nDOWN_1=274\nQUIT=27\nACCEL=8\n\n[Joystick]\n# Get codes from  jstest /dev/input/js0 \n# from package  joystick \nA_1=3\nB_1=2\nX_1=1\nY_1=0\nL_1=4\nR_1=6\nSTART_1=9\nSELECT_1=8\nQUIT=99\nACCEL=7\nQLOAD=10\nQSAVE=11\n#Joystick axis\nJA_LR=0\nJA_UD=1", 
            "title": "PiSNES"
        }, 
        {
            "location": "/Super-Nintendo-Entertainment-System/#3-5-players", 
            "text": "Some games allow more than 2 player. Currently, the only emulator which support this is  lr-snes9x-next . In order to active this feature, you'll need to enable  Multi-tap  by adding this line to the  retroarch.cfg :  input_libretro_device_p2 =  257", 
            "title": "3-5 Players"
        }, 
        {
            "location": "/TI99/", 
            "text": "The TI-99/4A was a home computer originally released by the Texas Instruments in 1981.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nti99sim\n\n\nti99\n\n\n.ctg\n\n\nTI-994A.ctg\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nti99sim\n\n\nROMS\n\n\nAccepted File Extensions: \n.ctg\n\n\nPlace your TI-99 ROMs in\n\n\n/home/pi/RetroPie/roms/ti99\n\n\n\n\nBIOS\n\n\nThe file needed is \nTI-994A.ctg\n (CASE SENSITIVE!)\n\n\nPlace your TI-994A.ctg BIOS file in\n\n\n/home/pi/RetroPie/BIOS/ti99\n\n\n\n\nINSTALLATION INSTRUCTIONS (VERSION 2.0)\n\n\nTI-99/Sim v0.14.0 and RetroPie V3.8.1\n\n\nUpdated Installation Instruction V.20\n\n\nVideo Installation Overview\n\n\nInstallation Instructions v1.0 (AtariAge)", 
            "title": "TI99"
        }, 
        {
            "location": "/TI99/#emulator-ti99sim", 
            "text": "", 
            "title": "Emulator: ti99sim"
        }, 
        {
            "location": "/TI99/#roms", 
            "text": "Accepted File Extensions:  .ctg  Place your TI-99 ROMs in  /home/pi/RetroPie/roms/ti99", 
            "title": "ROMS"
        }, 
        {
            "location": "/TI99/#bios", 
            "text": "The file needed is  TI-994A.ctg  (CASE SENSITIVE!)  Place your TI-994A.ctg BIOS file in  /home/pi/RetroPie/BIOS/ti99", 
            "title": "BIOS"
        }, 
        {
            "location": "/TI99/#installation-instructions-version-20", 
            "text": "TI-99/Sim v0.14.0 and RetroPie V3.8.1  Updated Installation Instruction V.20  Video Installation Overview  Installation Instructions v1.0 (AtariAge)", 
            "title": "INSTALLATION INSTRUCTIONS (VERSION 2.0)"
        }, 
        {
            "location": "/TRS-80/", 
            "text": "The TRS-80 was a home computer originally released by the Tandy Corporation in 1977. T=Tandy RS=Radio Shack 80=Z-80 microprocessor.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nsdltrs\n\n\ntrs-80\n\n\n.dsk\n\n\nlevel2.rom\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nsdltrs\n\n\nROMS\n\n\nAccepted File Extensions: \n.dsk\n\n\nPlace your TRS-80 ROMs in\n\n\n/home/pi/RetroPie/roms/trs-80\n\n\n\n\nBIOS\n\n\nThe file needed is \nlevel2.rom\n\n\nPlace your level2.rom BIOS file in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nAdvanced Configuration\n\n\nFor more detailed information on autolaunching disks and games see this guide \nHERE", 
            "title": "TRS-80"
        }, 
        {
            "location": "/TRS-80/#emulator-sdltrs", 
            "text": "", 
            "title": "Emulator: sdltrs"
        }, 
        {
            "location": "/TRS-80/#roms", 
            "text": "Accepted File Extensions:  .dsk  Place your TRS-80 ROMs in  /home/pi/RetroPie/roms/trs-80", 
            "title": "ROMS"
        }, 
        {
            "location": "/TRS-80/#bios", 
            "text": "The file needed is  level2.rom  Place your level2.rom BIOS file in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/TRS-80/#advanced-configuration", 
            "text": "For more detailed information on autolaunching disks and games see this guide  HERE", 
            "title": "Advanced Configuration"
        }, 
        {
            "location": "/Vectrex/", 
            "text": "The Vectrex is a vector display-based home video game console released in 1982\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-vecx\n\n\nvectrex\n\n\n.vec .gam .bin\n\n\nnone\n\n\n/opt/retropie/configs/vectrex/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-vecx\n\n\nROMS\n\n\nAccepted File Extensions: \n.vec .gam .bin\n\n\nPlace your Vectrex ROMs in \n\n\n/home/pi/RetroPie/roms/vectrex\n\n\n\n\nControls\n\n\nlr-vecx utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/vectrex/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Vectrex"
        }, 
        {
            "location": "/Vectrex/#emulator-lr-vecx", 
            "text": "", 
            "title": "Emulator: lr-vecx"
        }, 
        {
            "location": "/Vectrex/#roms", 
            "text": "Accepted File Extensions:  .vec .gam .bin  Place your Vectrex ROMs in   /home/pi/RetroPie/roms/vectrex", 
            "title": "ROMS"
        }, 
        {
            "location": "/Vectrex/#controls", 
            "text": "lr-vecx utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/vectrex/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/VideoPac-Odyssey-2/", 
            "text": "The Magnavox Odyssey2 known in Europe as the Philips Videopac G7000 (and a bunch of other names a bunch of other places) is a home video game console released in 1978. One of the earliest gaming consoles, it is one of the least known today. Games are quite similar in detail to that of Atari 2600... except worse.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-o2em\n\n\nvideopac\n\n\n.bin\n\n\no2rom.bin\n\n\n/opt/retropie/configs/videopac/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-o2em\n\n\nROMS:\n\n\nAccepted File Extensions: \n.bin\n\n\nPlace your ROMs here:\n\n\n/home/pi/RetroPie/roms/videopac\n\n\n\n\nBIOS\n\n\nThe BIOS file required is \no2rom.bin\n\n\nPlace your BIOS in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nControls\n\n\nReally it says it uses Retroarch configurations and some gamepads work but for almost all of your games you will need a keyboard. Typically you will press 1 to start a game- for people who grew up in the 70's controls might be more intuitive, but they can be tricky to figure out as they change for each game...\n\n\nlr-o2em utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/videopac/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\n\n\nSwitching Emulation Station to the Odyssey\u00b2 logo:\n\n\nIf you are from the United States it is likely that you had the Odyssey\u00b2 rather than the Videopac. If you want EmulationStation to show the Odyssey\u00b2 graphics instead of Videopac then you should create a file \n/opt/retropie/configs/all/platforms.cfg\n with the following contents (note this requires at least v4.1.6 of the RetroPie-Setup script).\n\n\nvideopac_theme=\nodyssey2\n\nvideopac_platform=\nodyssey2\n\n\n\n\n\nOnce this is done, please update the currently installed Videopac emulator from RetroPie-Setup and Emulation Station will now use the Odyssey\u00b2 logo. Scraping from within Emulation Station should also return Odyssey\u00b2 artwork.", 
            "title": "VideoPac / Odyssey 2"
        }, 
        {
            "location": "/VideoPac-Odyssey-2/#emulator-lr-o2em", 
            "text": "", 
            "title": "Emulator: lr-o2em"
        }, 
        {
            "location": "/VideoPac-Odyssey-2/#roms", 
            "text": "Accepted File Extensions:  .bin  Place your ROMs here:  /home/pi/RetroPie/roms/videopac", 
            "title": "ROMS:"
        }, 
        {
            "location": "/VideoPac-Odyssey-2/#bios", 
            "text": "The BIOS file required is  o2rom.bin  Place your BIOS in  /home/pi/RetroPie/BIOS", 
            "title": "BIOS"
        }, 
        {
            "location": "/VideoPac-Odyssey-2/#controls", 
            "text": "Really it says it uses Retroarch configurations and some gamepads work but for almost all of your games you will need a keyboard. Typically you will press 1 to start a game- for people who grew up in the 70's controls might be more intuitive, but they can be tricky to figure out as they change for each game...  lr-o2em utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/videopac/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/VideoPac-Odyssey-2/#switching-emulation-station-to-the-odyssey2-logo", 
            "text": "If you are from the United States it is likely that you had the Odyssey\u00b2 rather than the Videopac. If you want EmulationStation to show the Odyssey\u00b2 graphics instead of Videopac then you should create a file  /opt/retropie/configs/all/platforms.cfg  with the following contents (note this requires at least v4.1.6 of the RetroPie-Setup script).  videopac_theme= odyssey2 \nvideopac_platform= odyssey2   Once this is done, please update the currently installed Videopac emulator from RetroPie-Setup and Emulation Station will now use the Odyssey\u00b2 logo. Scraping from within Emulation Station should also return Odyssey\u00b2 artwork.", 
            "title": "Switching Emulation Station to the Odyssey\u00b2 logo:"
        }, 
        {
            "location": "/Virtual-Boy/", 
            "text": "The Virtual Boy was Nintendo's attempt at virtual reality in 1995 and it was a horrid commercial failure.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-beetle-vb\n\n\nvirtualboy\n\n\n.vb\n\n\nnone\n\n\n/opt/retropie/configs/virtualboy/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-beetle-vb\n\n\nROMS\n\n\nAccepted File Extension: \n.vb\n\n\nPlace your Virtual Boy ROMs in \n\n\n/home/pi/RetroPie/roms/virtualboy\n\n\n\n\nControls\n\n\nlr-beetle-vb utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/virtualboy/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Virtual Boy"
        }, 
        {
            "location": "/Virtual-Boy/#emulator-lr-beetle-vb", 
            "text": "", 
            "title": "Emulator: lr-beetle-vb"
        }, 
        {
            "location": "/Virtual-Boy/#roms", 
            "text": "Accepted File Extension:  .vb  Place your Virtual Boy ROMs in   /home/pi/RetroPie/roms/virtualboy", 
            "title": "ROMS"
        }, 
        {
            "location": "/Virtual-Boy/#controls", 
            "text": "lr-beetle-vb utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/virtualboy/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Wii/", 
            "text": "The Wii is a home video game console that was released by Nintendo on November 19, 2006. This console is primarily used by senior homes and retirement communities.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\ndolphin\n\n\nwii\n\n\n.iso\n\n\nnone\n\n\n/opt/retropie/configs/wii/Config\n\n\n\n\n\n\n\n\n\n\n:exclamation: This is only for x86 builds- Not the Raspberry Pi!.\n\n\n\n\nEmulator: \ndolphin\n\n\nROMS\n\n\nAccepted File Extensions: \n.iso\n\n\nPlace your Wii ROMs in\n\n\n/home/pi/RetroPie/roms/wii\n\n\n\n\nControls", 
            "title": "Wii"
        }, 
        {
            "location": "/Wii/#emulator-dolphin", 
            "text": "", 
            "title": "Emulator: dolphin"
        }, 
        {
            "location": "/Wii/#roms", 
            "text": "Accepted File Extensions:  .iso  Place your Wii ROMs in  /home/pi/RetroPie/roms/wii", 
            "title": "ROMS"
        }, 
        {
            "location": "/Wii/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/Wonderswan-Color/", 
            "text": "WonderSwan Color is a handheld gaming device that was released by Bandai in 2000. \n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-beetle-wswan\n\n\nwonderswancolor\n\n\n.wsc\n\n\nnone\n\n\n/opt/retropie/configs/wonderswancolor/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-beetle-wswan\n\n\nROMS\n\n\nAccepted File Extensions \n.wsc\n\n\nPlace your WonderSwan Color ROMs in\n\n\n/home/pi/RetroPie/roms/wonderswancolor\n\n\n\n\nControls\n\n\nlr-beetle-wswan utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/wonderswancolor/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Wonderswan Color"
        }, 
        {
            "location": "/Wonderswan-Color/#emulator-lr-beetle-wswan", 
            "text": "", 
            "title": "Emulator: lr-beetle-wswan"
        }, 
        {
            "location": "/Wonderswan-Color/#roms", 
            "text": "Accepted File Extensions  .wsc  Place your WonderSwan Color ROMs in  /home/pi/RetroPie/roms/wonderswancolor", 
            "title": "ROMS"
        }, 
        {
            "location": "/Wonderswan-Color/#controls", 
            "text": "lr-beetle-wswan utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/wonderswancolor/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/WonderSwan/", 
            "text": "WonderSwan is a handheld gaming device that was released by Bandai solely in Japan in 1998. \n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-beetle-wswan\n\n\nwonderswan\n\n\n.ws\n\n\nnone\n\n\n/opt/retropie/configs/wonderswan/retroarch.cfg\n\n\n\n\n\n\n\n\nEmulator: \nlr-beetle-wswan\n\n\nROMS\n\n\nAccepted File Extensions \n.ws\n\n\nPlace your WonderSwan ROMs in\n\n\n/home/pi/RetroPie/roms/wonderswan\n\n\n\n\nControls\n\n\nlr-beetle-wswan utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/wonderswan/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "WonderSwan"
        }, 
        {
            "location": "/WonderSwan/#emulator-lr-beetle-wswan", 
            "text": "", 
            "title": "Emulator: lr-beetle-wswan"
        }, 
        {
            "location": "/WonderSwan/#roms", 
            "text": "Accepted File Extensions  .ws  Place your WonderSwan ROMs in  /home/pi/RetroPie/roms/wonderswan", 
            "title": "ROMS"
        }, 
        {
            "location": "/WonderSwan/#controls", 
            "text": "lr-beetle-wswan utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/wonderswan/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Zmachine/", 
            "text": "Infocom created a bunch of text based adventure games to be utilised by a Z-Machine interpreter (i.e. an emulator). Notable titles include the Zork Series and The Hitchhikers Guide to the Galaxy.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nFrotz\n\n\nzmachine\n\n\n.dat .zip .z1 .z2 .z3 .z4 .z5 .z6 .z7 .z8\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulator: \nFrotz\n\n\nROMS\n\n\nAccepted File Extensions: \n.dat .zip .z1 .z2 .z3 .z4 .z5 .z6 .z7 .z8\n\n\nPlace your Infocom interactive fiction ROMs in \n\n\n/home/pi/RetroPie/roms/zmachine\n\n\n\n\nControls\n\n\nIt's a very different type of gameplay than typical gaming systems. It is more of an interactive storybook than it is a video game.\n\n\nBy default 3 versions of Zork are already in the Z-Machine ROM folder\n\n\nFollow the onscreen instructions and type responses- So for example it narrates that it is dark- in turn you type \nlight\n or \nturn on light\n and then it will progress in the story. \n\n\nif you get tired of the story:\n\n\nto quit type: \nquit\n\n\nLarger Font Size\n\n\nIf you are on a high resolution screen and the font size is tiny you can change the framebuffer's resolution using the \nruncommand\n menu to 640x480 and it should make the font more visible.", 
            "title": "Zmachine"
        }, 
        {
            "location": "/Zmachine/#emulator-frotz", 
            "text": "", 
            "title": "Emulator: Frotz"
        }, 
        {
            "location": "/Zmachine/#roms", 
            "text": "Accepted File Extensions:  .dat .zip .z1 .z2 .z3 .z4 .z5 .z6 .z7 .z8  Place your Infocom interactive fiction ROMs in   /home/pi/RetroPie/roms/zmachine", 
            "title": "ROMS"
        }, 
        {
            "location": "/Zmachine/#controls", 
            "text": "It's a very different type of gameplay than typical gaming systems. It is more of an interactive storybook than it is a video game.  By default 3 versions of Zork are already in the Z-Machine ROM folder  Follow the onscreen instructions and type responses- So for example it narrates that it is dark- in turn you type  light  or  turn on light  and then it will progress in the story.   if you get tired of the story:  to quit type:  quit", 
            "title": "Controls"
        }, 
        {
            "location": "/Zmachine/#larger-font-size", 
            "text": "If you are on a high resolution screen and the font size is tiny you can change the framebuffer's resolution using the  runcommand  menu to 640x480 and it should make the font more visible.", 
            "title": "Larger Font Size"
        }, 
        {
            "location": "/ZX-Spectrum/", 
            "text": "The ZX Spectrum was an 8 bit series of home computers released by Sinclair Research in 1982.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nlr-fuse\n\n\nzxspectrum\n\n\nsna .szx .z80 .tap .tzx .gz .udi .mgt .img .trd .scl .dsk\n\n\nnone\n\n\n/opt/retropie/configs/zxspectrum/retroarch.cfg\n\n\n\n\n\n\nFBZX\n\n\nzxspectrum\n\n\nsna .szx .z80 .tap .tzx .gz .udi .mgt .img .trd .scl .dsk\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\nFuse\n\n\nzxspectrum\n\n\nsna .szx .z80 .tap .tzx .gz .udi .mgt .img .trd .scl .dsk\n\n\nnone\n\n\nhardcoded\n\n\n\n\n\n\n\n\nEmulators: \nlr-fuse\n, \nFBZX\n, \nFuse\n\n\nROMS\n\n\nAccepted File Extensions: \nsna .szx .z80 .tap .tzx .gz .udi .mgt .img .trd .scl .dsk\n\n\nPlace your ZX Spectrum ROMs in\n\n\n/home/pi/RetroPie/roms/zxspectrum\n\n\n\n\nVideo Overview:\n\n\n\n\nControls\n\n\nlr-fuse\n\n\nlr-fuse utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/zxspectrum/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nBy default, \n\n\n\n\nButtons A, X and Y are mapped to the joystick's fire button, and button B is mapped to the UP directional button. \n\n\nButtons L1 and R1 are mapped to RETURN and SPACE, respectively. \n\n\nThe SELECT button brings up the embedded, on-screen keyboard.\n\n\n\n\nIf you are using more than one joystick, then it is worth reading the \nofficial documentation\n at lr-fuse Github page.\n\n\nThe default joystick emulated by lr-fuse is the Cursor joystick. If you wish to set Kempston as your default, then add the following line to the file \n/opt/retropie/configs/all/zxspectrum/retroarch.cfg\n:\n\n\ninput_libretro_device_p1 = \"513\"", 
            "title": "ZX Spectrum"
        }, 
        {
            "location": "/ZX-Spectrum/#emulators-lr-fuse-fbzx-fuse", 
            "text": "", 
            "title": "Emulators: lr-fuse, FBZX, Fuse"
        }, 
        {
            "location": "/ZX-Spectrum/#roms", 
            "text": "Accepted File Extensions:  sna .szx .z80 .tap .tzx .gz .udi .mgt .img .trd .scl .dsk  Place your ZX Spectrum ROMs in  /home/pi/RetroPie/roms/zxspectrum", 
            "title": "ROMS"
        }, 
        {
            "location": "/ZX-Spectrum/#video-overview", 
            "text": "", 
            "title": "Video Overview:"
        }, 
        {
            "location": "/ZX-Spectrum/#controls", 
            "text": "", 
            "title": "Controls"
        }, 
        {
            "location": "/ZX-Spectrum/#lr-fuse", 
            "text": "lr-fuse utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/zxspectrum/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration  By default,    Buttons A, X and Y are mapped to the joystick's fire button, and button B is mapped to the UP directional button.   Buttons L1 and R1 are mapped to RETURN and SPACE, respectively.   The SELECT button brings up the embedded, on-screen keyboard.   If you are using more than one joystick, then it is worth reading the  official documentation  at lr-fuse Github page.  The default joystick emulated by lr-fuse is the Cursor joystick. If you wish to set Kempston as your default, then add the following line to the file  /opt/retropie/configs/all/zxspectrum/retroarch.cfg :  input_libretro_device_p1 = \"513\"", 
            "title": "lr-fuse"
        }, 
        {
            "location": "/Adventure-Game-Studio/", 
            "text": "Adventure Game Studio is an open source development tool that is primarily used to create graphic adventure games.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nAGS\n\n\nags\n\n\n.exe\n\n\nnone\n\n\nmouse\n\n\n\n\n\n\n## Emulator: \nAGS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nROMS\n\n\nAccepted File Extensions: \n.exe\n\n\nPlace your AGS files in\n\n\n/home/pi/RetroPie/roms/ags\n\n\n\n\nConfig changes\n\n\nIn RetroPie 3.5, you need to install xinit\n\n\nsudo apt-get install xinit\n\n\n\n\nAlso edit the following file\n\n\n/opt/retropie/configs/ags/emulators.cfg\n\n\n\n\nso that it reads\n\n\nags=\nsudo xinit /opt/retropie/emulators/ags/bin/ags --fullscreen %ROM%\n\n\n\n\n\n--or-- \nAlternatively to adding \"sudo\" to the command in \"emulators.cfg\", you can instead run\n\n\nsudo dpkg-reconfigure x11-common\n\n\n\n\nThen choose \"anybody\" from the provided menu options. This will allow AGS to load from within EmulationStation.\n\n\nVideo Guide\n\n\n  \n\n\nControls\n\n\nAGS requires a mouse attached to the Raspberry Pi\n\n\nUseful Links\n\n\nhttp://www.adventuregamestudio.co.uk/\n\nhttps://github.com/adventuregamestudio/ags/tree/master/debian\n\nhttps://en.wikipedia.org/wiki/Adventure_Game_Studio\n\nhttps://wiki.ubuntuusers.de/Adventure_Game_Studio/", 
            "title": "Adventure Game Studio"
        }, 
        {
            "location": "/Adventure-Game-Studio/#roms", 
            "text": "Accepted File Extensions:  .exe  Place your AGS files in  /home/pi/RetroPie/roms/ags", 
            "title": "ROMS"
        }, 
        {
            "location": "/Adventure-Game-Studio/#config-changes", 
            "text": "In RetroPie 3.5, you need to install xinit  sudo apt-get install xinit  Also edit the following file  /opt/retropie/configs/ags/emulators.cfg  so that it reads  ags= sudo xinit /opt/retropie/emulators/ags/bin/ags --fullscreen %ROM%   --or-- \nAlternatively to adding \"sudo\" to the command in \"emulators.cfg\", you can instead run  sudo dpkg-reconfigure x11-common  Then choose \"anybody\" from the provided menu options. This will allow AGS to load from within EmulationStation.", 
            "title": "Config changes"
        }, 
        {
            "location": "/Adventure-Game-Studio/#video-guide", 
            "text": "", 
            "title": "Video Guide"
        }, 
        {
            "location": "/Adventure-Game-Studio/#controls", 
            "text": "AGS requires a mouse attached to the Raspberry Pi", 
            "title": "Controls"
        }, 
        {
            "location": "/Adventure-Game-Studio/#useful-links", 
            "text": "http://www.adventuregamestudio.co.uk/ \nhttps://github.com/adventuregamestudio/ags/tree/master/debian \nhttps://en.wikipedia.org/wiki/Adventure_Game_Studio \nhttps://wiki.ubuntuusers.de/Adventure_Game_Studio/", 
            "title": "Useful Links"
        }, 
        {
            "location": "/Cannonball/", 
            "text": "Cannonball is a program which allows you to play an enhanced version of Yu Suzuki's seminal arcade racer, OutRun, on a variety of systems.\n\n\n\n\nEmulator: \nCannonball\n\n\nRoms:\n\n\nPlace the OutRun Revision B MAME rom in\n\n\n/home/pi/RetroPie/roms/ports/cannonball\n\n\n\n\nSee \nHERE\n for exact rom info.\n\n\nSee \nHERE\n for more complete documentation", 
            "title": "Cannonball"
        }, 
        {
            "location": "/Cannonball/#emulator-cannonball", 
            "text": "", 
            "title": "Emulator: Cannonball"
        }, 
        {
            "location": "/Cannonball/#roms", 
            "text": "Place the OutRun Revision B MAME rom in  /home/pi/RetroPie/roms/ports/cannonball  See  HERE  for exact rom info.  See  HERE  for more complete documentation", 
            "title": "Roms:"
        }, 
        {
            "location": "/CaveStory/", 
            "text": "Cave Story (doukutsu monogatari) is a Freeware Platform-Adventure Video Game Released in 2004 for the PC. It was developed over 5 years by Daisuke \"Pixel\" Amaya in his free time. It is one of the greatest most beautifully crafted games, particularly because of its compelling plot and musical genius.\n\n\n\n\nEmulator: \nnxengine-libretro\n\n\nROMs\n\n\n:warning: You must install the optional \"lr-nxengine\" package via the RetroPie setup tool, otherwise, Cave Story will not show up in the list of available games.\n\n\nCreate a folder called \nCaveStory\n in\n\n\n/home/pi/RetroPie/roms/ports/\n\n\n\n\nAdd all of the game files into the CaveStory folder- particularly Doukotsu.exe into\n\n\n/home/pi/RetroPie/roms/ports/CaveStory\n\n\n\n\nIf it is in Japanese, there is a game patch by Aeon Genesis that will make it English.\nDue to Copyrights we can't provide sources, but Google is your friend.\n\n\nControls\n\n\nnxengine-libretro utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/cavestory/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nSaves\n\n\nnxengine-libretro does not support save states, but Cave Story itself includes many in-game save points and multiple profiles. Save profile files will be be saved as:\n\n\n/home/pi/RetroPie/roms/ports/CaveStory/profile.dat\n/home/pi/RetroPie/roms/ports/CaveStory/profile2.dat\n/home/pi/RetroPie/roms/ports/CaveStory/profile3.dat\n...", 
            "title": "CaveStory"
        }, 
        {
            "location": "/CaveStory/#emulator-nxengine-libretro", 
            "text": "", 
            "title": "Emulator: nxengine-libretro"
        }, 
        {
            "location": "/CaveStory/#roms", 
            "text": ":warning: You must install the optional \"lr-nxengine\" package via the RetroPie setup tool, otherwise, Cave Story will not show up in the list of available games.  Create a folder called  CaveStory  in  /home/pi/RetroPie/roms/ports/  Add all of the game files into the CaveStory folder- particularly Doukotsu.exe into  /home/pi/RetroPie/roms/ports/CaveStory  If it is in Japanese, there is a game patch by Aeon Genesis that will make it English.\nDue to Copyrights we can't provide sources, but Google is your friend.", 
            "title": "ROMs"
        }, 
        {
            "location": "/CaveStory/#controls", 
            "text": "nxengine-libretro utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/cavestory/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/CaveStory/#saves", 
            "text": "nxengine-libretro does not support save states, but Cave Story itself includes many in-game save points and multiple profiles. Save profile files will be be saved as:  /home/pi/RetroPie/roms/ports/CaveStory/profile.dat\n/home/pi/RetroPie/roms/ports/CaveStory/profile2.dat\n/home/pi/RetroPie/roms/ports/CaveStory/profile3.dat\n...", 
            "title": "Saves"
        }, 
        {
            "location": "/Commander-Keen/", 
            "text": "Commander Keen was a video game series originally on DOS. \n\n\n\n\nEmulator: \nCommander Genius\n\n\nROMS\n\n\nPlace your Commander Keen Games in:\n\n\n/home/pi/RetroPie/roms/ports/cgenius/games/gamename/\n\n\n\n\nBy default the emulator comes with 3 Commander Keen games, follow the file format of the games that are there when adding new games. You can then select them from the Commander Genius Launch Menu.\n\n\nControls:\n\n\nKeyboard", 
            "title": "Commander Keen"
        }, 
        {
            "location": "/Commander-Keen/#emulator-commander-genius", 
            "text": "", 
            "title": "Emulator: Commander Genius"
        }, 
        {
            "location": "/Commander-Keen/#roms", 
            "text": "Place your Commander Keen Games in:  /home/pi/RetroPie/roms/ports/cgenius/games/gamename/  By default the emulator comes with 3 Commander Keen games, follow the file format of the games that are there when adding new games. You can then select them from the Commander Genius Launch Menu.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Commander-Keen/#controls", 
            "text": "Keyboard", 
            "title": "Controls:"
        }, 
        {
            "location": "/Descent/", 
            "text": "Descent and Descent 2 are first person shooter games that were developed in the 90's for PC. DXX-Rebirth is a Source Port of the Descent and Descent 2 Engines for Windows, Mac OS, Linux (most *NIX systems), offering OpenGL graphics and effects, advanced Multiplayer, many improvements and new features.\n\n\n\n\nDXX-Rebirth is currently an experimental build that can be installed from the experimental menu of the setup script.  It will build from the current \nsource\n.  Build time make take up to 30 minutes or more. It may have some issues with sound.\n\n\nDescent 1\n\n\n\n\nEmulator: \nD1X-Rebirth\n\n\nGame Files\n\n\nAdd all of the core game files into the \ndescent1\n folder\n\n\n~/RetroPie/roms/ports/descent1\n\n\n\n\nAdd all add-on mission files into the \nmissions\n folder\n\n\n~/RetroPie/roms/ports/descent1/missions\n\n\n\n\nAll player profiles, game settings, and save files are located in the config folder\n\n\n/opt/retropie/configs/descent1\n\n\n\n\nwhich should be symbolic linked from\n\n\n~/.d1x-rebirth\n\n\n\n\nAdd all demo files into the \ndemos\n folder\n\n\n/opt/retropie/configs/descent1/demos\n\n\n\n\nControls\n\n\n\n\n\n\n\n\nAction\n\n\nKey\n\n\n\n\n\n\n\n\n\n\nPitch Forward\n\n\nUp or Numpad 8\n\n\n\n\n\n\nPitch Backward\n\n\nDown or Numpad 2\n\n\n\n\n\n\nTurn Left\n\n\nLeft or Numpad 4\n\n\n\n\n\n\nTurn Right\n\n\nRight or Numpad 6\n\n\n\n\n\n\nSlide On\n\n\nLeft Alt\n\n\n\n\n\n\nSlide Left\n\n\nNumpad 1\n\n\n\n\n\n\nSlide Right\n\n\nNumpad 3\n\n\n\n\n\n\nSlide Up\n\n\nNumpad -\n\n\n\n\n\n\nSlide Down\n\n\nNumpad +\n\n\n\n\n\n\nBank Left\n\n\nQ or Numpad 7\n\n\n\n\n\n\nBank Right\n\n\nE or Numpad 9\n\n\n\n\n\n\nCycle Primary\n\n\n,\n\n\n\n\n\n\nCycle Secondary\n\n\n.\n\n\n\n\n\n\nFire Primary\n\n\nCTRL\n\n\n\n\n\n\nFire Secondary\n\n\nSpace\n\n\n\n\n\n\nFire Flare\n\n\nF\n\n\n\n\n\n\nDrop Bomb\n\n\nB\n\n\n\n\n\n\nRear View\n\n\nRight or Numpad 6\n\n\n\n\n\n\nAutomap\n\n\nTAB\n\n\n\n\n\n\nAccelerate\n\n\nA\n\n\n\n\n\n\nReverse\n\n\nZ\n\n\n\n\n\n\n\n\nDescent 2\n\n\n\n\nEmulator: \nD2X-Rebirth\n\n\nGame Files\n\n\nAdd all of the core game files into the \ndescent2\n folder\n\n\n~/RetroPie/roms/ports/descent2\n\n\n\n\nAdd all add-on mission files into the \nmissions\n folder\n\n\n~/RetroPie/roms/ports/descent2/missions\n\n\n\n\nAll player profiles, game settings, and save files are located in the config folder\n\n\n/opt/retropie/configs/descent2\n\n\n\n\nwhich should be symbolic linked from\n\n\n~/.d2x-rebirth\n\n\n\n\nAdd all demo files into the \ndemos\n folder\n\n\n/opt/retropie/configs/descent2/demos\n\n\n\n\nControls\n\n\n\n\n\n\n\n\nAction\n\n\nKey\n\n\n\n\n\n\n\n\n\n\nPitch Forward\n\n\nUp or Numpad 8\n\n\n\n\n\n\nPitch Backward\n\n\nDown or Numpad 2\n\n\n\n\n\n\nTurn Left\n\n\nLeft or Numpad 4\n\n\n\n\n\n\nTurn Right\n\n\nRight or Numpad 6\n\n\n\n\n\n\nSlide On\n\n\nLeft Alt\n\n\n\n\n\n\nSlide Left\n\n\nNumpad 1\n\n\n\n\n\n\nSlide Right\n\n\nNumpad 3\n\n\n\n\n\n\nSlide Up\n\n\nNumpad -\n\n\n\n\n\n\nSlide Down\n\n\nNumpad +\n\n\n\n\n\n\nBank Left\n\n\nQ or Numpad 7\n\n\n\n\n\n\nBank Right\n\n\nE or Numpad 9\n\n\n\n\n\n\nCycle Primary\n\n\n,\n\n\n\n\n\n\nCycle Secondary\n\n\n.\n\n\n\n\n\n\nFire Primary\n\n\nCTRL\n\n\n\n\n\n\nFire Secondary\n\n\nSpace\n\n\n\n\n\n\nFire Flare\n\n\nF\n\n\n\n\n\n\nDrop Bomb\n\n\nB\n\n\n\n\n\n\nRear View\n\n\nRight or Numpad 6\n\n\n\n\n\n\nAutomap\n\n\nTAB\n\n\n\n\n\n\nAccelerate\n\n\nA\n\n\n\n\n\n\nReverse\n\n\nZ\n\n\n\n\n\n\nAfterburner\n\n\nS\n\n\n\n\n\n\nHeadlight\n\n\nH\n\n\n\n\n\n\nEnergy\nShield\n\n\nT", 
            "title": "Descent"
        }, 
        {
            "location": "/Descent/#descent-1", 
            "text": "", 
            "title": "Descent 1"
        }, 
        {
            "location": "/Descent/#emulator-d1x-rebirth", 
            "text": "", 
            "title": "Emulator: D1X-Rebirth"
        }, 
        {
            "location": "/Descent/#game-files", 
            "text": "Add all of the core game files into the  descent1  folder  ~/RetroPie/roms/ports/descent1  Add all add-on mission files into the  missions  folder  ~/RetroPie/roms/ports/descent1/missions  All player profiles, game settings, and save files are located in the config folder  /opt/retropie/configs/descent1  which should be symbolic linked from  ~/.d1x-rebirth  Add all demo files into the  demos  folder  /opt/retropie/configs/descent1/demos", 
            "title": "Game Files"
        }, 
        {
            "location": "/Descent/#controls", 
            "text": "Action  Key      Pitch Forward  Up or Numpad 8    Pitch Backward  Down or Numpad 2    Turn Left  Left or Numpad 4    Turn Right  Right or Numpad 6    Slide On  Left Alt    Slide Left  Numpad 1    Slide Right  Numpad 3    Slide Up  Numpad -    Slide Down  Numpad +    Bank Left  Q or Numpad 7    Bank Right  E or Numpad 9    Cycle Primary  ,    Cycle Secondary  .    Fire Primary  CTRL    Fire Secondary  Space    Fire Flare  F    Drop Bomb  B    Rear View  Right or Numpad 6    Automap  TAB    Accelerate  A    Reverse  Z", 
            "title": "Controls"
        }, 
        {
            "location": "/Descent/#descent-2", 
            "text": "", 
            "title": "Descent 2"
        }, 
        {
            "location": "/Descent/#emulator-d2x-rebirth", 
            "text": "", 
            "title": "Emulator: D2X-Rebirth"
        }, 
        {
            "location": "/Descent/#game-files_1", 
            "text": "Add all of the core game files into the  descent2  folder  ~/RetroPie/roms/ports/descent2  Add all add-on mission files into the  missions  folder  ~/RetroPie/roms/ports/descent2/missions  All player profiles, game settings, and save files are located in the config folder  /opt/retropie/configs/descent2  which should be symbolic linked from  ~/.d2x-rebirth  Add all demo files into the  demos  folder  /opt/retropie/configs/descent2/demos", 
            "title": "Game Files"
        }, 
        {
            "location": "/Descent/#controls_1", 
            "text": "Action  Key      Pitch Forward  Up or Numpad 8    Pitch Backward  Down or Numpad 2    Turn Left  Left or Numpad 4    Turn Right  Right or Numpad 6    Slide On  Left Alt    Slide Left  Numpad 1    Slide Right  Numpad 3    Slide Up  Numpad -    Slide Down  Numpad +    Bank Left  Q or Numpad 7    Bank Right  E or Numpad 9    Cycle Primary  ,    Cycle Secondary  .    Fire Primary  CTRL    Fire Secondary  Space    Fire Flare  F    Drop Bomb  B    Rear View  Right or Numpad 6    Automap  TAB    Accelerate  A    Reverse  Z    Afterburner  S    Headlight  H    Energy Shield  T", 
            "title": "Controls"
        }, 
        {
            "location": "/Dinothawr/", 
            "text": "Dinothawr is a block pushing puzzle game on slippery surfaces. Our hero is a dinosaur whose friends are trapped in ice. Through puzzles it is your task to free the dinos from their ice prison.\n\n\n\n\nEmulator: \nlibretro-dinothawr\n\n\nControls\n\n\nlibretro-dinothawr utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/dinothawr/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration", 
            "title": "Dinothawr"
        }, 
        {
            "location": "/Dinothawr/#emulator-libretro-dinothawr", 
            "text": "", 
            "title": "Emulator: libretro-dinothawr"
        }, 
        {
            "location": "/Dinothawr/#controls", 
            "text": "libretro-dinothawr utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/dinothawr/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Doom/", 
            "text": "Doom was the one game that popularised First Person Shooting as a genre. It was developed by Id Software in 1993.\n\n\n\n\nEmulator: \nlibretro-prboom\n, \nZDOOM\n\n\nControls\n\n\nlibretro-prboom utilises Retroarch configurations\n\n\nAdd custom retroarch controls to the retroarch.cfg file in\n\n\n/opt/retropie/configs/doom/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\nHow to Launch Doom IWADs and Mods (PWADs) from Emulationstation using lr-prboom\n\n\nTo Launch Doom, Ultimate Doom, Doom 2, TNT, Plutonia, Final Doom (IWADS)\n\n\nPlace your WADs in the doom rom folder, \n/home/pi/RetroPie/roms/ports/doom\n.\n\n\nCreate a script to launch your WAD. For example, for The Plutonia Expriment, create a script, \n/home/pi/RetroPie/roms/ports/The Plutonia Experiment.sh\n, which contains the following:\n\n\n#!/bin/bash\n/opt/retropie/supplementary/runcommand/runcommand.sh 0 \n/opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/ports/doom/retroarch.cfg /home/pi/RetroPie/roms/ports/doom/Plutonia.wad\n \nlr-prboom\n\n\n\n\n\nCreate a copy of the script for each WAD, replacing the name of the WAD for each one.\n\n\nTo Launch Doom Mods (PWADS)\n\n\nIn the doom rom folder, you will need prboom.wad and the Doom IWADs (doom.wad and/or doom2.wad).\n\n\nCreate a folder for the custom PWAD and extract your custom PWAD(s) there. For example, for the Batman Doom mod, create a folder called batman.\n\n\nCreate symlinks to prboom.wad and Doom2 WAD in the batman folder with the following commands. If you have problems creating these links, you can also just copy these files.\n\n\nln -s /home/pi/RetroPie/roms/ports/doom/prboom.wad /home/pi/RetroPie/roms/ports/batman/prboom.wad\n\n\n\n\nln -s /home/pi/RetroPie/roms/ports/doom/doom2.wad /home/pi/RetroPie/roms/ports/batman/doom2.wad\n\n\n\n\nCopy prboom.cfg from the Doom folder to the custom WAD folder. Add the name(s) of the custom WADs to #Files section (line 15/16).\n\n\nCreate a shell script, Batman Doom.sh to launch the custom WAD as below. It's the same as Doom 2 script but it points to the Doom 2 IWAD in the batman folder instead.\n\n\n#!/bin/bash\n/opt/retropie/supplementary/runcommand/runcommand.sh 0 \n/opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/ports/doom/retroarch.cfg /home/pi/RetroPie/roms/doom/batman/doom2.wad\n \nlr-prboom\n\n\n\n\n\nRepeat for each mod (PWAD), creating a new folder for each one and a copy of the script above replacing the folder name as required.\n\n\nPermission Denied Errors\n\n\nA permission denied error after launching a script from EmulationStation means the script is not executable. This can be fixed with the following command (using Batman Doom as an example):\n\n\nsudo chmod +x \"/home/pi/RetroPie/roms/ports/Batman Doom.sh\"\n\n\n\nHow to Launch Doom IWADs and Mods (PWADs) from Emulationstation using ZDOOM.\n\n\nFirst off, you will want to go into RetroPie-Setup, and install ZDOOM from Experimental Packages. \n\n\nOnce installed, we will employ \nRex Claussen's, The Darkest Hour\n.\n\n\nGo ahead and \nDownload The Darkest Hour\n. Once downloaded, go ahead and extract it's contents to somewhere on your hard drive so that you know where to find it as we will come back to it here shortly.\n\n\nNext you will either want to SSH into your Pi, or drop out of EmulationStation using F4 on your keyboard. \nAt the command line, type the following to navigate to your \nports\n directory.\n\n\ncd /home/pi/RetroPie/roms/ports/\n\n\nNext, let's create a directory called \nzdoom\n. To do so, type the following:\n\n\nmkdir zdoom\n\n\nNow type the following in order to enter the \"zdoom\" directory.\n\n\ncd zdoom\n\n\nOnce inside of \"zdoom\", type the following command to create a folder where The Darkest Hour's files will reside. \n\n\nmkdir DarkestHour\n\n\nNext you will want navigate back to the ports directory by typing the following:\n\n\ncd ~/RetroPie/roms/ports/\n\n\nFrom here you will want to create a new script that we will use to launch The Darkest Hour from EmulationStation.\n\n\nTo do this, type the following to open into the Nano text editor.\n\n\nsudo nano Darkest Hour.sh\n\n\nNext we will want type out the following so that it appears exactly as you see it here:\n\n\n#!/bin/bash\n\"/opt/retropie/supplementary/runcommand/runcommand.sh\" 0 _SYS_ darkesthour\n\n\nIn order to save your work, hold Down \nCONTROL + X\n. Type \nY\n to confirm, then give it the title of \nDarkest Hour.sh\n, then confirm the save. \n\n\nOnce that is complete you will want to type the following so that you have proper permissions within EmulationStation to launch The Darkest Hour. \n\n\nsudo chmod 775 Darkest\\ Hour.sh\n\n\nNow we will need to navigate to the /opt/retropie/configs/ folder by typing the following:\n\n\ncd /opt/retropie/configs/\n\n\nFrom here you will want to create a folder in call lower case titled \ndarkesthour\n, by typing the following:\n\n\nmkdir darkesthour\n\n\nOnce this is complete you will want to copy the files from the \ndoom\n folder into the \ndarkesthour\n folder by typing the following:\n\n\ncp doom/*.* darkesthour/\n\n\nThen you will need to navigate into the \ndarkesthour\n directory by typing:\n\n\ncd darkesthour\n\n\nFrom within the folder you will want to edit the file \nretroarch.cfg\n by typing:\n\n\nsudo nano retroarch.cfg\n\n\nOne inside of Nano, you will see the following:\n\n\n# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/doom/\n\n#include \n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n\nChange it so that it reads as follows:\n\n\n# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/darkesthour/\n\n#include \n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n\nSave your work by holding Down \nCONTROL + X\n. Then keep hitting \nY\n to confirm each step until save. \n\n\nNext you will want to edit \nemulators.cfg\n. To do this type:\n\n\nsudo nano emulators.cfg\n\n\nNano will open and you will see the following:\n\n\nlr-prboom=\"/opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/doom/retroarch.cfg /ho$\ndefault=\"zdoom\"\nzdoom=\"/opt/retropie/ports/zdoom/zdoom -iwad /home/pi/RetroPie/roms/ports/doom/doom1.wad\"\n\n\nEdit it so that it looks like this:\n\n\nlr-prboom=\"/opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/darkesthour/retroarch.cfg /ho$\ndefault=\"zdoom\"\nzdoom=\"/opt/retropie/ports/zdoom/zdoom -iwad /home/pi/RetroPie/roms/ports/doom/doom2.wad -file /home/pi/RetroPie/roms/ports/zdoom/DarkestHour/DarkHour.wad\"\n\n\nSave your work by holding Down \nCONTROL + X\n. Then keep hitting \nY\n to confirm each step until save. \n\n\nReturning to your computer you will want to navigate to your /home/pi/RetroPie/roms/ports/zdoom/DarkestHour/ folder on the Pi, via SFTP or Samba.\n\n\nNext copy over the \nDarkHour.wad\n file from your PC into the \nDarkestHour\n directory on the Pi. \n\n\nNow that this is complete you will want to go back two directories so that we are in the \nports\n directory. Next advance one folder so that you are inside of the \ndoom\n directory. Now copy over a fully upgraded original DOOM II iWAD, or one from DOOM 3. It should be titled \ndoom2.wad\n, and should be in all lower case.  \n\n\nHaving completed this step, you will now want to reboot EmulationStation, navigate to \nPorts\n and test your new \nDarkest Hour\n entry.\n\n\nMusic\n\n\nThe most ideal and authentic way to listen to the the original Doom (1\n2) tracks is to google 'doom 1 and 2 midis' and download them. You can then convert the midi files into MP3s.\n\n\nTo enable music in your Doom game(s) you need to copy MP3s with specific names into the same folder as your ROMs are located. You can find a list of names \nhere\n: They follow the scheme e1m1.mp3, e1m2.mp3, ..., e2m1.mp, e2m2.mp3, ... . There are freely available tracks available - find them by searching for \"PSX Doom Music\".\n\n\nIf you are having trouble with the audio not playing after you have renamed all the MP3s, try clearing all the ID3 tag information for each of the MP3s.\n\n\nBelow are the corresponding tracks if the MP3s are named:\n\n\n\n\n\n\n\n\nFile Name\n\n\nmp3\n\n\n\n\n\n\n\n\n\n\n* mus_e1m1\n\n\n\"level 01 (hangar).mp3\"\n\n\n\n\n\n\n* mus_e1m2\n\n\n\"level 02 (plant).mp3\"\n\n\n\n\n\n\n* mus_e1m3\n\n\n\"level 03 (toxin refinery).mp3\"\n\n\n\n\n\n\n* mus_e1m4\n\n\n\"level 04 (command control).mp3\"\n\n\n\n\n\n\n* mus_e1m5\n\n\n\"level 05 (phobos lab).mp3\"\n\n\n\n\n\n\n* mus_e1m6\n\n\n\"level 06 (central processing).mp3\"\n\n\n\n\n\n\n* mus_e1m7\n\n\n\"level 07 (computer station).mp3\"\n\n\n\n\n\n\n* mus_e1m8\n\n\n\"level 08 (phobos anomaly).mp3\"\n\n\n\n\n\n\n* mus_e1m9\n\n\n\"level 06 (fistula).mp3\"\n\n\n\n\n\n\n* mus_e2m1\n\n\n\"level 09 (deimos anomaly).mp3\"\n\n\n\n\n\n\n* mus_e2m2\n\n\n\"level 10 (containment area).mp3\"\n\n\n\n\n\n\n* mus_e2m3\n\n\n\"level 11 (refinery).mp3\"\n\n\n\n\n\n\n* mus_e2m4\n\n\n\"level 12 (deimos lab).mp3\"\n\n\n\n\n\n\n* mus_e2m5\n\n\n\"level 13 (command center).mp3\"\n\n\n\n\n\n\n* mus_e2m6\n\n\n\"level 02 (plant).mp3\"\n\n\n\n\n\n\n* mus_e2m7\n\n\n\"level 01 (hangar).mp3\"\n\n\n\n\n\n\n* mus_e2m8\n\n\n\"level 03 (toxin refinery).mp3\"\n\n\n\n\n\n\n* mus_e2m9\n\n\n\"level 02 (virgil).mp3\"\n\n\n\n\n\n\n* mus_e3m1\n\n\n\"level 17 (hell keep).mp3\"\n\n\n\n\n\n\n* mus_e3m2\n\n\n\"level 03 (canyon).mp3\"\n\n\n\n\n\n\n* mus_e3m3\n\n\n\"level 18 (pandemonium).mp3\"\n\n\n\n\n\n\n* mus_e3m4\n\n\n\"level 06 (central processing).mp3\"\n\n\n\n\n\n\n* mus_e3m5\n\n\n\"level 20 (unholy cathedral).mp3\"\n\n\n\n\n\n\n* mus_e3m6\n\n\n\"level 21 (mt erebus).mp3\"\n\n\n\n\n\n\n* mus_e3m7\n\n\n\"level 22 (limbo).mp3\"\n\n\n\n\n\n\n* mus_e3m8\n\n\n\"level 09 (nessus).mp3\"\n\n\n\n\n\n\n* mus_e3m9\n\n\n\"level 10 (paradox).mp3\"\n\n\n\n\n\n\n* mus_inter\n\n\n\"e2m3.mp3\"\n\n\n\n\n\n\n* mus_intro\n\n\n\"track 02 title screen.mp3\"\n\n\n\n\n\n\n* mus_bunny\n\n\n\"track 03 main menu.mp3\"\n\n\n\n\n\n\n* mus_victor\n\n\n\"track 09 endgame.mp3\"\n\n\n\n\n\n\n* mus_introa\n\n\n\"track 02 title screen.mp3\"\n\n\n\n\n\n\n* mus_runnin\n\n\n\"level 01 (hangar).mp3\"\n\n\n\n\n\n\n* mus_stalks\n\n\n\"level 10 (containment area).mp3\"\n\n\n\n\n\n\n* mus_countd\n\n\n\"level 22 (limbo).mp3\"\n\n\n\n\n\n\n* mus_betwee\n\n\n\"level 16 (hell gate).mp3\"\n\n\n\n\n\n\n* mus_doom\n\n\n\"level 08 (phobos anomaly).mp3\"\n\n\n\n\n\n\n* mus_the_da\n\n\n\"level 21 (mt erebus).mp3\"\n\n\n\n\n\n\n* mus_shawn\n\n\n\"level 20 (unholy cathedral).mp3\"\n\n\n\n\n\n\n* mus_ddtblu\n\n\n\"level 24 (hell beneath).mp3\"\n\n\n\n\n\n\n* mus_in_cit\n\n\n\"level 11 (refinery).mp3\"\n\n\n\n\n\n\n* mus_dead\n\n\n\"level 13 (command center).mp3\"\n\n\n\n\n\n\n* mus_stlks2\n\n\n\"level 09 (deimos anomaly).mp3\"\n\n\n\n\n\n\n* mus_theda2\n\n\n\"level 17 (hell keep).mp3\"\n\n\n\n\n\n\n* mus_doom2\n\n\n\"level 08 (minos).mp3\"\n\n\n\n\n\n\n* mus_ddtbl2\n\n\n\"level 16 (hell gate).mp3\"\n\n\n\n\n\n\n* mus_runni2\n\n\n\"level 04 (combine).mp3\"\n\n\n\n\n\n\n* mus_dead2\n\n\n\"level 18 (pandemonium).mp3\"\n\n\n\n\n\n\n* mus_stlks3\n\n\n\"level 06 (central processing).mp3\"\n\n\n\n\n\n\n* mus_romero\n\n\n\"level 05 (phobos lab).mp3\"\n\n\n\n\n\n\n* mus_shawn2\n\n\n\"level 10 (containment area).mp3\"\n\n\n\n\n\n\n* mus_messag\n\n\n\"level 01 (attack).mp3\"\n\n\n\n\n\n\n* mus_count2\n\n\n\"level 02 (plant).mp3\"\n\n\n\n\n\n\n* mus_ddtbl3\n\n\n\"level 03 (toxin refinery).mp3\"\n\n\n\n\n\n\n* mus_ampie\n\n\n\"level 01 (hangar).mp3\"\n\n\n\n\n\n\n* mus_theda3\n\n\n\"level 06 (fistula).mp3\"\n\n\n\n\n\n\n* mus_adrian\n\n\n\"level 07 (computer station).mp3\"\n\n\n\n\n\n\n* mus_messg2\n\n\n\"level 08 (phobos anomaly).mp3\"\n\n\n\n\n\n\n* mus_romer2\n\n\n\"level 11 (refinery).mp3\"\n\n\n\n\n\n\n* mus_tense\n\n\n\"level 07 (geryon).mp3\"\n\n\n\n\n\n\n* mus_shawn3\n\n\n\"level 05 (catwalk).mp3\"\n\n\n\n\n\n\n* mus_openin\n\n\n\"level 04 (command control).mp3\"\n\n\n\n\n\n\n* mus_evil\n\n\n\"level 16 (hell gate).mp3\"\n\n\n\n\n\n\n* mus_ultima\n\n\n\"level 03 (toxin refinery).mp3\"\n\n\n\n\n\n\n* mus_read_m\n\n\n\"track 03 main menu.mp3\"\n\n\n\n\n\n\n* mus_dm2ttl\n\n\n\"track 02 title screen.mp3\"\n\n\n\n\n\n\n* mus_dm2int\n\n\n\"track 05 stats screen.mp3\"", 
            "title": "Doom"
        }, 
        {
            "location": "/Doom/#emulator-libretro-prboom-zdoom", 
            "text": "", 
            "title": "Emulator: libretro-prboom, ZDOOM"
        }, 
        {
            "location": "/Doom/#controls", 
            "text": "libretro-prboom utilises Retroarch configurations  Add custom retroarch controls to the retroarch.cfg file in  /opt/retropie/configs/doom/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration", 
            "title": "Controls"
        }, 
        {
            "location": "/Doom/#how-to-launch-doom-iwads-and-mods-pwads-from-emulationstation-using-lr-prboom", 
            "text": "", 
            "title": "How to Launch Doom IWADs and Mods (PWADs) from Emulationstation using lr-prboom"
        }, 
        {
            "location": "/Doom/#to-launch-doom-ultimate-doom-doom-2-tnt-plutonia-final-doom-iwads", 
            "text": "Place your WADs in the doom rom folder,  /home/pi/RetroPie/roms/ports/doom .  Create a script to launch your WAD. For example, for The Plutonia Expriment, create a script,  /home/pi/RetroPie/roms/ports/The Plutonia Experiment.sh , which contains the following:  #!/bin/bash\n/opt/retropie/supplementary/runcommand/runcommand.sh 0  /opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/ports/doom/retroarch.cfg /home/pi/RetroPie/roms/ports/doom/Plutonia.wad   lr-prboom   Create a copy of the script for each WAD, replacing the name of the WAD for each one.", 
            "title": "To Launch Doom, Ultimate Doom, Doom 2, TNT, Plutonia, Final Doom (IWADS)"
        }, 
        {
            "location": "/Doom/#to-launch-doom-mods-pwads", 
            "text": "In the doom rom folder, you will need prboom.wad and the Doom IWADs (doom.wad and/or doom2.wad).  Create a folder for the custom PWAD and extract your custom PWAD(s) there. For example, for the Batman Doom mod, create a folder called batman.  Create symlinks to prboom.wad and Doom2 WAD in the batman folder with the following commands. If you have problems creating these links, you can also just copy these files.  ln -s /home/pi/RetroPie/roms/ports/doom/prboom.wad /home/pi/RetroPie/roms/ports/batman/prboom.wad  ln -s /home/pi/RetroPie/roms/ports/doom/doom2.wad /home/pi/RetroPie/roms/ports/batman/doom2.wad  Copy prboom.cfg from the Doom folder to the custom WAD folder. Add the name(s) of the custom WADs to #Files section (line 15/16).  Create a shell script, Batman Doom.sh to launch the custom WAD as below. It's the same as Doom 2 script but it points to the Doom 2 IWAD in the batman folder instead.  #!/bin/bash\n/opt/retropie/supplementary/runcommand/runcommand.sh 0  /opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/ports/doom/retroarch.cfg /home/pi/RetroPie/roms/doom/batman/doom2.wad   lr-prboom   Repeat for each mod (PWAD), creating a new folder for each one and a copy of the script above replacing the folder name as required.", 
            "title": "To Launch Doom Mods (PWADS)"
        }, 
        {
            "location": "/Doom/#permission-denied-errors", 
            "text": "A permission denied error after launching a script from EmulationStation means the script is not executable. This can be fixed with the following command (using Batman Doom as an example):  sudo chmod +x \"/home/pi/RetroPie/roms/ports/Batman Doom.sh\"", 
            "title": "Permission Denied Errors"
        }, 
        {
            "location": "/Doom/#how-to-launch-doom-iwads-and-mods-pwads-from-emulationstation-using-zdoom", 
            "text": "First off, you will want to go into RetroPie-Setup, and install ZDOOM from Experimental Packages.   Once installed, we will employ  Rex Claussen's, The Darkest Hour .  Go ahead and  Download The Darkest Hour . Once downloaded, go ahead and extract it's contents to somewhere on your hard drive so that you know where to find it as we will come back to it here shortly.  Next you will either want to SSH into your Pi, or drop out of EmulationStation using F4 on your keyboard. \nAt the command line, type the following to navigate to your  ports  directory.  cd /home/pi/RetroPie/roms/ports/  Next, let's create a directory called  zdoom . To do so, type the following:  mkdir zdoom  Now type the following in order to enter the \"zdoom\" directory.  cd zdoom  Once inside of \"zdoom\", type the following command to create a folder where The Darkest Hour's files will reside.   mkdir DarkestHour  Next you will want navigate back to the ports directory by typing the following:  cd ~/RetroPie/roms/ports/  From here you will want to create a new script that we will use to launch The Darkest Hour from EmulationStation.  To do this, type the following to open into the Nano text editor.  sudo nano Darkest Hour.sh  Next we will want type out the following so that it appears exactly as you see it here:  #!/bin/bash\n\"/opt/retropie/supplementary/runcommand/runcommand.sh\" 0 _SYS_ darkesthour  In order to save your work, hold Down  CONTROL + X . Type  Y  to confirm, then give it the title of  Darkest Hour.sh , then confirm the save.   Once that is complete you will want to type the following so that you have proper permissions within EmulationStation to launch The Darkest Hour.   sudo chmod 775 Darkest\\ Hour.sh  Now we will need to navigate to the /opt/retropie/configs/ folder by typing the following:  cd /opt/retropie/configs/  From here you will want to create a folder in call lower case titled  darkesthour , by typing the following:  mkdir darkesthour  Once this is complete you will want to copy the files from the  doom  folder into the  darkesthour  folder by typing the following:  cp doom/*.* darkesthour/  Then you will need to navigate into the  darkesthour  directory by typing:  cd darkesthour  From within the folder you will want to edit the file  retroarch.cfg  by typing:  sudo nano retroarch.cfg  One inside of Nano, you will see the following:  # Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/doom/\n\n#include  /opt/retropie/configs/all/retroarch.cfg   Change it so that it reads as follows:  # Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/darkesthour/\n\n#include  /opt/retropie/configs/all/retroarch.cfg   Save your work by holding Down  CONTROL + X . Then keep hitting  Y  to confirm each step until save.   Next you will want to edit  emulators.cfg . To do this type:  sudo nano emulators.cfg  Nano will open and you will see the following:  lr-prboom=\"/opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/doom/retroarch.cfg /ho$\ndefault=\"zdoom\"\nzdoom=\"/opt/retropie/ports/zdoom/zdoom -iwad /home/pi/RetroPie/roms/ports/doom/doom1.wad\"  Edit it so that it looks like this:  lr-prboom=\"/opt/retropie/emulators/retroarch/bin/retroarch -L /opt/retropie/libretrocores/lr-prboom/prboom_libretro.so --config /opt/retropie/configs/darkesthour/retroarch.cfg /ho$\ndefault=\"zdoom\"\nzdoom=\"/opt/retropie/ports/zdoom/zdoom -iwad /home/pi/RetroPie/roms/ports/doom/doom2.wad -file /home/pi/RetroPie/roms/ports/zdoom/DarkestHour/DarkHour.wad\"  Save your work by holding Down  CONTROL + X . Then keep hitting  Y  to confirm each step until save.   Returning to your computer you will want to navigate to your /home/pi/RetroPie/roms/ports/zdoom/DarkestHour/ folder on the Pi, via SFTP or Samba.  Next copy over the  DarkHour.wad  file from your PC into the  DarkestHour  directory on the Pi.   Now that this is complete you will want to go back two directories so that we are in the  ports  directory. Next advance one folder so that you are inside of the  doom  directory. Now copy over a fully upgraded original DOOM II iWAD, or one from DOOM 3. It should be titled  doom2.wad , and should be in all lower case.    Having completed this step, you will now want to reboot EmulationStation, navigate to  Ports  and test your new  Darkest Hour  entry.", 
            "title": "How to Launch Doom IWADs and Mods (PWADs) from Emulationstation using ZDOOM."
        }, 
        {
            "location": "/Doom/#music", 
            "text": "The most ideal and authentic way to listen to the the original Doom (1 2) tracks is to google 'doom 1 and 2 midis' and download them. You can then convert the midi files into MP3s.  To enable music in your Doom game(s) you need to copy MP3s with specific names into the same folder as your ROMs are located. You can find a list of names  here : They follow the scheme e1m1.mp3, e1m2.mp3, ..., e2m1.mp, e2m2.mp3, ... . There are freely available tracks available - find them by searching for \"PSX Doom Music\".  If you are having trouble with the audio not playing after you have renamed all the MP3s, try clearing all the ID3 tag information for each of the MP3s.  Below are the corresponding tracks if the MP3s are named:     File Name  mp3      * mus_e1m1  \"level 01 (hangar).mp3\"    * mus_e1m2  \"level 02 (plant).mp3\"    * mus_e1m3  \"level 03 (toxin refinery).mp3\"    * mus_e1m4  \"level 04 (command control).mp3\"    * mus_e1m5  \"level 05 (phobos lab).mp3\"    * mus_e1m6  \"level 06 (central processing).mp3\"    * mus_e1m7  \"level 07 (computer station).mp3\"    * mus_e1m8  \"level 08 (phobos anomaly).mp3\"    * mus_e1m9  \"level 06 (fistula).mp3\"    * mus_e2m1  \"level 09 (deimos anomaly).mp3\"    * mus_e2m2  \"level 10 (containment area).mp3\"    * mus_e2m3  \"level 11 (refinery).mp3\"    * mus_e2m4  \"level 12 (deimos lab).mp3\"    * mus_e2m5  \"level 13 (command center).mp3\"    * mus_e2m6  \"level 02 (plant).mp3\"    * mus_e2m7  \"level 01 (hangar).mp3\"    * mus_e2m8  \"level 03 (toxin refinery).mp3\"    * mus_e2m9  \"level 02 (virgil).mp3\"    * mus_e3m1  \"level 17 (hell keep).mp3\"    * mus_e3m2  \"level 03 (canyon).mp3\"    * mus_e3m3  \"level 18 (pandemonium).mp3\"    * mus_e3m4  \"level 06 (central processing).mp3\"    * mus_e3m5  \"level 20 (unholy cathedral).mp3\"    * mus_e3m6  \"level 21 (mt erebus).mp3\"    * mus_e3m7  \"level 22 (limbo).mp3\"    * mus_e3m8  \"level 09 (nessus).mp3\"    * mus_e3m9  \"level 10 (paradox).mp3\"    * mus_inter  \"e2m3.mp3\"    * mus_intro  \"track 02 title screen.mp3\"    * mus_bunny  \"track 03 main menu.mp3\"    * mus_victor  \"track 09 endgame.mp3\"    * mus_introa  \"track 02 title screen.mp3\"    * mus_runnin  \"level 01 (hangar).mp3\"    * mus_stalks  \"level 10 (containment area).mp3\"    * mus_countd  \"level 22 (limbo).mp3\"    * mus_betwee  \"level 16 (hell gate).mp3\"    * mus_doom  \"level 08 (phobos anomaly).mp3\"    * mus_the_da  \"level 21 (mt erebus).mp3\"    * mus_shawn  \"level 20 (unholy cathedral).mp3\"    * mus_ddtblu  \"level 24 (hell beneath).mp3\"    * mus_in_cit  \"level 11 (refinery).mp3\"    * mus_dead  \"level 13 (command center).mp3\"    * mus_stlks2  \"level 09 (deimos anomaly).mp3\"    * mus_theda2  \"level 17 (hell keep).mp3\"    * mus_doom2  \"level 08 (minos).mp3\"    * mus_ddtbl2  \"level 16 (hell gate).mp3\"    * mus_runni2  \"level 04 (combine).mp3\"    * mus_dead2  \"level 18 (pandemonium).mp3\"    * mus_stlks3  \"level 06 (central processing).mp3\"    * mus_romero  \"level 05 (phobos lab).mp3\"    * mus_shawn2  \"level 10 (containment area).mp3\"    * mus_messag  \"level 01 (attack).mp3\"    * mus_count2  \"level 02 (plant).mp3\"    * mus_ddtbl3  \"level 03 (toxin refinery).mp3\"    * mus_ampie  \"level 01 (hangar).mp3\"    * mus_theda3  \"level 06 (fistula).mp3\"    * mus_adrian  \"level 07 (computer station).mp3\"    * mus_messg2  \"level 08 (phobos anomaly).mp3\"    * mus_romer2  \"level 11 (refinery).mp3\"    * mus_tense  \"level 07 (geryon).mp3\"    * mus_shawn3  \"level 05 (catwalk).mp3\"    * mus_openin  \"level 04 (command control).mp3\"    * mus_evil  \"level 16 (hell gate).mp3\"    * mus_ultima  \"level 03 (toxin refinery).mp3\"    * mus_read_m  \"track 03 main menu.mp3\"    * mus_dm2ttl  \"track 02 title screen.mp3\"    * mus_dm2int  \"track 05 stats screen.mp3\"", 
            "title": "Music"
        }, 
        {
            "location": "/Duke-Nukem-3D/", 
            "text": "Duke Nukem 3D is a First Person Shooter game developed by 3D Realms in 1996.\n\n\nPort: \nEduke32\n\n\nROMs\n\n\nShareware versions of \nduke3d.grp\n and \nduke.rts\n are provided via symlinks in\n\n\n/home/pi/RetroPie/roms/ports/duke3d\n\n\n\n\nThe shareware files are physically located in a different directory, but if you just replace the links in the folder above with your full version game data, it should work.\n\n\nControls:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nW or NUMPAD 8\n\n\nMove Forward\n\n\n\n\n\n\nS or NUMPAD 2\n\n\nMove Backward\n\n\n\n\n\n\nLeft or NUMPAD 4\n\n\nTurn Left\n\n\n\n\n\n\nRight or NUMPAD 6\n\n\nTurn Right\n\n\n\n\n\n\nALT\n\n\nStrafe\n\n\n\n\n\n\nRight CTRL or Left Click\n\n\nFire\n\n\n\n\n\n\nE\n\n\nOpen/Use\n\n\n\n\n\n\nShift\n\n\nRun\n\n\n\n\n\n\nCaps Lock\n\n\nAutorun\n\n\n\n\n\n\nSpace or /\n\n\nJump\n\n\n\n\n\n\nLeft CTRL\n\n\nCrouch\n\n\n\n\n\n\nPGUP or NUMPAD 9\n\n\nLook Up\n\n\n\n\n\n\nPGDN or NUMPAD 3\n\n\nLook Down\n\n\n\n\n\n\nINS or NUMPAD 0\n\n\nLook Left\n\n\n\n\n\n\nDEL or NUMPAD .\n\n\nLook Right\n\n\n\n\n\n\nA\n\n\nStrafe Left\n\n\n\n\n\n\nD\n\n\nStrafe Right\n\n\n\n\n\n\nHOME or NUMPAD 7\n\n\nAim Up\n\n\n\n\n\n\nEND or NUMPAD 1\n\n\nAim Down\n\n\n\n\n\n\n0-9\n\n\nWeapons\n\n\n\n\n\n\nEnter\n\n\nInventory\n\n\n\n\n\n\n[\n\n\nInventory Left\n\n\n\n\n\n\n]\n\n\nInventory Right\n\n\n\n\n\n\nH\n\n\nHolo Duke\n\n\n\n\n\n\nJ\n\n\nJetpack\n\n\n\n\n\n\nN\n\n\nNightvision\n\n\n\n\n\n\nM\n\n\nMedkit\n\n\n\n\n\n\nBackspace\n\n\nTurnaround\n\n\n\n\n\n\nT\n\n\nSend Message\n\n\n\n\n\n\nTab\n\n\nMap\n\n\n\n\n\n\n-\n\n\nShrink Screen\n\n\n\n\n\n\n+\n\n\nEnlarge Screen\n\n\n\n\n\n\n5\n\n\nCenter View\n\n\n\n\n\n\nScroll Lock\n\n\nHolster Weapon\n\n\n\n\n\n\nY\n\n\nShow Opponents Weapon\n\n\n\n\n\n\nF\n\n\nMap Follow Mode\n\n\n\n\n\n\nK\n\n\nSee Co-op View\n\n\n\n\n\n\nU\n\n\nMouse Aiming\n\n\n\n\n\n\nI\n\n\nToggle Crosshair\n\n\n\n\n\n\nR\n\n\nSteroids\n\n\n\n\n\n\nQ\n\n\nQuick Kick\n\n\n\n\n\n\n\"\n\n\nNext Weapon\n\n\n\n\n\n\n:\n\n\nPrevious Weapon\n\n\n\n\n\n\n`\n\n\nShow Console\n\n\n\n\n\n\nF1\n\n\nHelp\n\n\n\n\n\n\nF2\n\n\nSave\n\n\n\n\n\n\nF3\n\n\nLoad\n\n\n\n\n\n\nF4\n\n\nSound/Music\n\n\n\n\n\n\nF5\n\n\nChange Music\n\n\n\n\n\n\nF6\n\n\nQuicksave\n\n\n\n\n\n\nF7\n\n\nChase View\n\n\n\n\n\n\nF8\n\n\nMessages\n\n\n\n\n\n\nF9\n\n\nQuickload\n\n\n\n\n\n\nF10\n\n\nQuit\n\n\n\n\n\n\nF11\n\n\nBrightness\n\n\n\n\n\n\nF12\n\n\nSave PCX\n\n\n\n\n\n\nESC\n\n\nMenu\n\n\n\n\n\n\n\n\nIf you start EDuke32 and it is not recognizing your controller bring down the console and type:\n\n\nin_joystick 1", 
            "title": "Duke Nukem 3D"
        }, 
        {
            "location": "/Duke-Nukem-3D/#port-eduke32", 
            "text": "", 
            "title": "Port: Eduke32"
        }, 
        {
            "location": "/Duke-Nukem-3D/#roms", 
            "text": "Shareware versions of  duke3d.grp  and  duke.rts  are provided via symlinks in  /home/pi/RetroPie/roms/ports/duke3d  The shareware files are physically located in a different directory, but if you just replace the links in the folder above with your full version game data, it should work.", 
            "title": "ROMs"
        }, 
        {
            "location": "/Duke-Nukem-3D/#controls", 
            "text": "Key  Action      W or NUMPAD 8  Move Forward    S or NUMPAD 2  Move Backward    Left or NUMPAD 4  Turn Left    Right or NUMPAD 6  Turn Right    ALT  Strafe    Right CTRL or Left Click  Fire    E  Open/Use    Shift  Run    Caps Lock  Autorun    Space or /  Jump    Left CTRL  Crouch    PGUP or NUMPAD 9  Look Up    PGDN or NUMPAD 3  Look Down    INS or NUMPAD 0  Look Left    DEL or NUMPAD .  Look Right    A  Strafe Left    D  Strafe Right    HOME or NUMPAD 7  Aim Up    END or NUMPAD 1  Aim Down    0-9  Weapons    Enter  Inventory    [  Inventory Left    ]  Inventory Right    H  Holo Duke    J  Jetpack    N  Nightvision    M  Medkit    Backspace  Turnaround    T  Send Message    Tab  Map    -  Shrink Screen    +  Enlarge Screen    5  Center View    Scroll Lock  Holster Weapon    Y  Show Opponents Weapon    F  Map Follow Mode    K  See Co-op View    U  Mouse Aiming    I  Toggle Crosshair    R  Steroids    Q  Quick Kick    \"  Next Weapon    :  Previous Weapon    `  Show Console    F1  Help    F2  Save    F3  Load    F4  Sound/Music    F5  Change Music    F6  Quicksave    F7  Chase View    F8  Messages    F9  Quickload    F10  Quit    F11  Brightness    F12  Save PCX    ESC  Menu     If you start EDuke32 and it is not recognizing your controller bring down the console and type:  in_joystick 1", 
            "title": "Controls:"
        }, 
        {
            "location": "/GameMaker-Games/", 
            "text": "YoYo Games has teamed up with Vlambeer, Jesse Venbrux and Locomalito, to give you a taste of what we hope will soon follow. With the help of these amazing developers, YoYo Games is proud to present to you 3 astounding, full games. Absolutely FREE.\n\n\n\n\nThey Need To Be Fed\n\n\n\n\n\n\nRun and jump through 11 crazy worlds to feed the monsters in this 360\u00b0 gravity platformer. It doesn't matter which way you go; up or down, left or right, you can't fall off because of the 360\u00b0 gravity! Jump from rotating planes to moving platforms, avoiding dangers and collecting diamonds.\n\n\n\n\nEmulator: \nGameMaker: Studio\n\n\nControls:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nLeft Mouse Click\n\n\nNavigate HUD\n\n\n\n\n\n\nSpace\n\n\nJump\n\n\n\n\n\n\nArrow Keys\n\n\nMove\n\n\n\n\n\n\nESC\n\n\nReturn to Menu/Quit\n\n\n\n\n\n\n\n\n\n\nSuper Crate Box\n\n\n\n\n\n\nGrab your baseball cap and loosen your pants, it's time to fight endless hordes of enemies and collect every weapon crate you can. Prepare for an arcade delight with tight controls, refreshing game mechanics, cracking retro art and a terribly hip chiptune soundtrack.\n\n\n\n\nEmulator: \nGameMaker: Studio\n\n\nControls:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nArrow Keys\n\n\nNavigate HUD/Move\n\n\n\n\n\n\nZ/Up Arrow\n\n\nJump\n\n\n\n\n\n\nX\n\n\nFire\n\n\n\n\n\n\nESC\n\n\nReturn to Menu/Quit\n\n\n\n\n\n\n\n\n\n\nMaldita Castilla\n\n\n\n\n\n\nMaldita Castilla (Cursed/damn Castile) is an action arcade game full of myths from Spain and the rest of Europe. The graphic style is raw, made pixel by pixel with a limited color palette, like in the old days, and displayed through a dirty old monitor effect.\n\n\n\n\nEmulator: \nGameMaker: Studio\n\n\nControls:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nArrow Keys\n\n\nNavigate HUD/Move/Aim\n\n\n\n\n\n\nZ\n\n\nAttack\n\n\n\n\n\n\nX\n\n\nJump\n\n\n\n\n\n\nESC\n\n\nReturn to Menu\n\n\n\n\n\n\nALT+ENTER\n\n\nToggle Fullscreen\n\n\n\n\n\n\nALT+F4\n\n\nQuit\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nHere's a module for the GameMaker Games. Just create a file called \ngamemaker.sh\n in \n/home/pi/RetroPie-Setup/scriptmodules/ports\n with the following contents:\n\n\n#!/usr/bin/env bash\n\n# This file is part of The RetroPie Project\n# \n# The RetroPie Project is the legal property of its developers, whose names are\n# too numerous to list here. Please refer to the COPYRIGHT.md file distributed with this source.\n# \n# See the LICENSE.md file at the top-level directory of this distribution and \n# at https://raw.githubusercontent.com/RetroPie/RetroPie-Setup/master/LICENSE.md\n#\n\nrp_module_id=\ngamemaker\n\nrp_module_desc=\nGameMaker - Games for the Raspberry Pi\n\nrp_module_section=\nexp\n\nrp_module_flags=\n!mali !x86\n\n\nfunction depends_gamemaker() {\n    getDepends libopenal-dev\n}\n\nfunction install_bin_gamemaker() {\n    # Install They Need To Be Fed Game\n    wget -O- -q https://www.yoyogames.com/download/pi/tntbf | tar -xvz -C \n$md_inst\n\n    # Install Super Crate Box Game\n    wget -O- -q https://www.yoyogames.com/download/pi/crate | tar -xvz -C \n$md_inst\n\n    # Install Maldita Castilla Game\n    wget -O- -q https://www.yoyogames.com/download/pi/castilla | tar -xvz -C \n$md_inst\n\n}\n\nfunction configure_gamemaker() {\n    mkRomDir \nports\n\n\n    addPort \n$md_id\n \nTheyNeedToBeFed\n \nTheyNeedToBeFed\n \n$md_inst/TheyNeedToBeFed/TheyNeedToBeFed\n\n    addPort \n$md_id\n \nSuperCrateBox\n \nSuperCrateBox\n \n$md_inst/SuperCrateBox/SuperCrateBox\n\n    addPort \n$md_id\n \nMalditaCastilla\n \nMalditaCastilla\n \n$md_inst/MalditaCastilla/MalditaCastilla\n\n}", 
            "title": "GameMaker Games"
        }, 
        {
            "location": "/GameMaker-Games/#they-need-to-be-fed", 
            "text": "Run and jump through 11 crazy worlds to feed the monsters in this 360\u00b0 gravity platformer. It doesn't matter which way you go; up or down, left or right, you can't fall off because of the 360\u00b0 gravity! Jump from rotating planes to moving platforms, avoiding dangers and collecting diamonds.", 
            "title": "They Need To Be Fed"
        }, 
        {
            "location": "/GameMaker-Games/#emulator-gamemaker-studio", 
            "text": "", 
            "title": "Emulator: GameMaker: Studio"
        }, 
        {
            "location": "/GameMaker-Games/#controls", 
            "text": "Key  Action      Left Mouse Click  Navigate HUD    Space  Jump    Arrow Keys  Move    ESC  Return to Menu/Quit", 
            "title": "Controls:"
        }, 
        {
            "location": "/GameMaker-Games/#super-crate-box", 
            "text": "Grab your baseball cap and loosen your pants, it's time to fight endless hordes of enemies and collect every weapon crate you can. Prepare for an arcade delight with tight controls, refreshing game mechanics, cracking retro art and a terribly hip chiptune soundtrack.", 
            "title": "Super Crate Box"
        }, 
        {
            "location": "/GameMaker-Games/#emulator-gamemaker-studio_1", 
            "text": "", 
            "title": "Emulator: GameMaker: Studio"
        }, 
        {
            "location": "/GameMaker-Games/#controls_1", 
            "text": "Key  Action      Arrow Keys  Navigate HUD/Move    Z/Up Arrow  Jump    X  Fire    ESC  Return to Menu/Quit", 
            "title": "Controls:"
        }, 
        {
            "location": "/GameMaker-Games/#maldita-castilla", 
            "text": "Maldita Castilla (Cursed/damn Castile) is an action arcade game full of myths from Spain and the rest of Europe. The graphic style is raw, made pixel by pixel with a limited color palette, like in the old days, and displayed through a dirty old monitor effect.", 
            "title": "Maldita Castilla"
        }, 
        {
            "location": "/GameMaker-Games/#emulator-gamemaker-studio_2", 
            "text": "", 
            "title": "Emulator: GameMaker: Studio"
        }, 
        {
            "location": "/GameMaker-Games/#controls_2", 
            "text": "Key  Action      Arrow Keys  Navigate HUD/Move/Aim    Z  Attack    X  Jump    ESC  Return to Menu    ALT+ENTER  Toggle Fullscreen    ALT+F4  Quit", 
            "title": "Controls:"
        }, 
        {
            "location": "/GameMaker-Games/#installation", 
            "text": "Here's a module for the GameMaker Games. Just create a file called  gamemaker.sh  in  /home/pi/RetroPie-Setup/scriptmodules/ports  with the following contents:  #!/usr/bin/env bash\n\n# This file is part of The RetroPie Project\n# \n# The RetroPie Project is the legal property of its developers, whose names are\n# too numerous to list here. Please refer to the COPYRIGHT.md file distributed with this source.\n# \n# See the LICENSE.md file at the top-level directory of this distribution and \n# at https://raw.githubusercontent.com/RetroPie/RetroPie-Setup/master/LICENSE.md\n#\n\nrp_module_id= gamemaker \nrp_module_desc= GameMaker - Games for the Raspberry Pi \nrp_module_section= exp \nrp_module_flags= !mali !x86 \n\nfunction depends_gamemaker() {\n    getDepends libopenal-dev\n}\n\nfunction install_bin_gamemaker() {\n    # Install They Need To Be Fed Game\n    wget -O- -q https://www.yoyogames.com/download/pi/tntbf | tar -xvz -C  $md_inst \n    # Install Super Crate Box Game\n    wget -O- -q https://www.yoyogames.com/download/pi/crate | tar -xvz -C  $md_inst \n    # Install Maldita Castilla Game\n    wget -O- -q https://www.yoyogames.com/download/pi/castilla | tar -xvz -C  $md_inst \n}\n\nfunction configure_gamemaker() {\n    mkRomDir  ports \n\n    addPort  $md_id   TheyNeedToBeFed   TheyNeedToBeFed   $md_inst/TheyNeedToBeFed/TheyNeedToBeFed \n    addPort  $md_id   SuperCrateBox   SuperCrateBox   $md_inst/SuperCrateBox/SuperCrateBox \n    addPort  $md_id   MalditaCastilla   MalditaCastilla   $md_inst/MalditaCastilla/MalditaCastilla \n}", 
            "title": "Installation"
        }, 
        {
            "location": "/KODI/", 
            "text": "Kodi is a Home Media Server (basically your own personal netflix) formerly known as XBMC. Kodi is currently an optional build that can be installed from the optional menu of the setup script.\n\n\n\n\nGeneral Information\n\n\nSee here for more info: http://kodi.tv/\n\n\nSee \nhere\n for more information on setting up Kodi\n\n\nInstallation\n\n\nVisit the RetroPie-Setup Screen, select Optional Packages, and select Kodi.  Installation can take 10 minutes.  After installation, you will be able to go to the Ports section and view Kodi as an option.\n\n\nRetroPie currently installs Kodi 16.1 Jarvis\n\n\nPVRs Installation\n\n\nBy default, RetroPie doesn't install any PVRs. If you want to install them, run the following commands in a terminal:\n\n\nSearch available PVRs:\n\n\napt-cache search kodi-pvr\n\n\n\n\nInstall one PVR, in this case IPTV Simple Client:\n\n\nsudo apt-get install kodi-pvr-iptvsimple\n\n\n\n\nInstall all PVRs:\n\n\nsudo apt-get install kodi-pvr*\n\n\n\n\nJoypad Support\n\n\nThe latest Kodi module (Kodi 16/16.1) includes joypad support by default. Some joypads are detected and work out-of-the-box like PS3, Xbox360, Logitech, Ibuffalo, Retrolink Snes and more. If your joypad doesn't work OOTB or you prefer to add your custom keymap, create the file \n/home/pi/.kodi/userdata/keymaps/joystick.xml\n like the following\n\n\nExample\n \njoystick.xml\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nkeymap\n\n  \nglobal\n\n    \njoystick name=\nUSB gamepad           \n\n      \nbutton id=\n3\nSelect\n/button\n\n      \nbutton id=\n2\nBack\n/button\n\n      \naxis id=\n1\n limit=\n+1\nRight\n/axis\n\n      \naxis id=\n1\n limit=\n-1\nLeft\n/axis\n\n      \naxis id=\n2\n limit=\n-1\nUp\n/axis\n\n      \naxis id=\n2\n limit=\n+1\nDown\n/axis\n\n    \n/joystick\n\n  \n/global\n\n\n/keymap\n\n\n\n\n\nYou can see what your joystick name is with \ncat /proc/bus/input/devices\n\n\nFor more information on how to create your custom keymaps for Kodi, check \nhere\n\n\nXbox 360:\n\n\nIf you are experiencing problems with your Xbox controls, see the following examples and adapt for your version of controller\n- \nHERE\n \n- \nExample 1\n\n- \nExample 2\n\n- \nExample 3\n\n\nRecommended Smartphone App to control Kodi: \nYatse\n\n\n\n\nKodi as its own system instead of in ports\n\n\nThe first method here is a cleaner method that wont mess with the RetroPie setup script updates (note that in the future you will have to manually update the es_systems.cfg in .emulationstation as they arent overwritten on updates from RetroPie). Once you've installed kodi from the experimental menu of the setup script, Drop into a terminal with f4 or access the pi over \nSSH\n\n\ncreate an es_systems.cfg file so that kodi will show up in emulationstation\n\n\nsudo cp /etc/emulationstation/es_systems.cfg /home/pi/.emulationstation/es_systems.cfg\nsudo nano /home/pi/.emulationstation/es_systems.cfg\n\n\n\n\nadd the following codeblock anywhere after \nsystemList\n:\n\n\n  \nsystem\n\n    \nfullname\nKodi\n/fullname\n\n    \nname\nkodi\n/name\n\n    \npath\n~/RetroPie/roms/kodi\n/path\n\n    \nextension\n.sh .SH\n/extension\n\n    \ncommand\nbash %ROM%\n/command\n\n    \nplatform\nkodi\n/platform\n\n    \ntheme\nkodi\n/theme\n\n  \n/system\n\n\n\n\n\nsave you changes with \nctrl+x\n , \ny\n , \nenter\n\n\nThen make a kodi rom directory\n\n\nmkdir /home/pi/RetroPie/roms/kodi\n\n\n\n\nmake a launch script:\n\n\nsudo nano /home/pi/RetroPie/roms/kodi/kodi.sh\n\n\n\n\nadd the following line:\n\n\nkodi-standalone\n\n\n\n\nsave you changes with \nctrl+x\n , \ny\n , \nenter\n\n\nmake the launch script executable:\n\n\nsudo chmod +x /home/pi/RetroPie/roms/kodi/kodi.sh\n\n\n\n\ntype \nemulationstation\n to go back into emulationstation and kodi should be there as its own system. \n\n\nOld configs\n\n\n# Kodi on Raspbian Wheezy\n## Black Screen Freeze Fix\n\nIf you find yourself having troubles with your screen freezing when you exit kodi, you can replace the code in `/roms/ports/kodi.sh` with\n\n#!/bin/bash\n\nLOG_FILE=$HOME/.kodi/temp/kodi.log\n\nrm $LOG_FILE 2\n /dev/null\n\n/usr/lib/kodi/kodi.bin --standalone \n\n\nwhile [[ ! -f $LOG_FILE ]] ; do\n  sleep 1s\ndone\n\nwhile read line ; do\n  if [[ ${line} =~ \napplication stopped\n ]] ; then\n    echo \nKilling kodi\n\n    break\n  fi\ndone \n \n(tail --pid=$$ -f -n0 $LOG_FILE)\n\nkillall kodi.bin\n\nfbset -depth 8 \n fbset -depth 16\n\n(note there may be some issues with the framebuffer but its the only functioning fix at the moment short of compiling Kodi 15)", 
            "title": "KODI"
        }, 
        {
            "location": "/KODI/#general-information", 
            "text": "See here for more info: http://kodi.tv/  See  here  for more information on setting up Kodi", 
            "title": "General Information"
        }, 
        {
            "location": "/KODI/#installation", 
            "text": "Visit the RetroPie-Setup Screen, select Optional Packages, and select Kodi.  Installation can take 10 minutes.  After installation, you will be able to go to the Ports section and view Kodi as an option.  RetroPie currently installs Kodi 16.1 Jarvis", 
            "title": "Installation"
        }, 
        {
            "location": "/KODI/#pvrs-installation", 
            "text": "By default, RetroPie doesn't install any PVRs. If you want to install them, run the following commands in a terminal:  Search available PVRs:  apt-cache search kodi-pvr  Install one PVR, in this case IPTV Simple Client:  sudo apt-get install kodi-pvr-iptvsimple  Install all PVRs:  sudo apt-get install kodi-pvr*", 
            "title": "PVRs Installation"
        }, 
        {
            "location": "/KODI/#joypad-support", 
            "text": "The latest Kodi module (Kodi 16/16.1) includes joypad support by default. Some joypads are detected and work out-of-the-box like PS3, Xbox360, Logitech, Ibuffalo, Retrolink Snes and more. If your joypad doesn't work OOTB or you prefer to add your custom keymap, create the file  /home/pi/.kodi/userdata/keymaps/joystick.xml  like the following  Example   joystick.xml  ?xml version= 1.0  encoding= UTF-8 ?  keymap \n   global \n     joystick name= USB gamepad            \n       button id= 3 Select /button \n       button id= 2 Back /button \n       axis id= 1  limit= +1 Right /axis \n       axis id= 1  limit= -1 Left /axis \n       axis id= 2  limit= -1 Up /axis \n       axis id= 2  limit= +1 Down /axis \n     /joystick \n   /global  /keymap   You can see what your joystick name is with  cat /proc/bus/input/devices  For more information on how to create your custom keymaps for Kodi, check  here", 
            "title": "Joypad Support"
        }, 
        {
            "location": "/KODI/#xbox-360", 
            "text": "If you are experiencing problems with your Xbox controls, see the following examples and adapt for your version of controller\n-  HERE  \n-  Example 1 \n-  Example 2 \n-  Example 3", 
            "title": "Xbox 360:"
        }, 
        {
            "location": "/KODI/#recommended-smartphone-app-to-control-kodi-yatse", 
            "text": "", 
            "title": "Recommended Smartphone App to control Kodi: Yatse"
        }, 
        {
            "location": "/KODI/#kodi-as-its-own-system-instead-of-in-ports", 
            "text": "The first method here is a cleaner method that wont mess with the RetroPie setup script updates (note that in the future you will have to manually update the es_systems.cfg in .emulationstation as they arent overwritten on updates from RetroPie). Once you've installed kodi from the experimental menu of the setup script, Drop into a terminal with f4 or access the pi over  SSH  create an es_systems.cfg file so that kodi will show up in emulationstation  sudo cp /etc/emulationstation/es_systems.cfg /home/pi/.emulationstation/es_systems.cfg\nsudo nano /home/pi/.emulationstation/es_systems.cfg  add the following codeblock anywhere after  systemList :     system \n     fullname Kodi /fullname \n     name kodi /name \n     path ~/RetroPie/roms/kodi /path \n     extension .sh .SH /extension \n     command bash %ROM% /command \n     platform kodi /platform \n     theme kodi /theme \n   /system   save you changes with  ctrl+x  ,  y  ,  enter  Then make a kodi rom directory  mkdir /home/pi/RetroPie/roms/kodi  make a launch script:  sudo nano /home/pi/RetroPie/roms/kodi/kodi.sh  add the following line:  kodi-standalone  save you changes with  ctrl+x  ,  y  ,  enter  make the launch script executable:  sudo chmod +x /home/pi/RetroPie/roms/kodi/kodi.sh  type  emulationstation  to go back into emulationstation and kodi should be there as its own system.", 
            "title": "Kodi as its own system instead of in ports"
        }, 
        {
            "location": "/KODI/#old-configs", 
            "text": "# Kodi on Raspbian Wheezy\n## Black Screen Freeze Fix\n\nIf you find yourself having troubles with your screen freezing when you exit kodi, you can replace the code in `/roms/ports/kodi.sh` with\n\n#!/bin/bash\n\nLOG_FILE=$HOME/.kodi/temp/kodi.log\n\nrm $LOG_FILE 2  /dev/null\n\n/usr/lib/kodi/kodi.bin --standalone  \n\nwhile [[ ! -f $LOG_FILE ]] ; do\n  sleep 1s\ndone\n\nwhile read line ; do\n  if [[ ${line} =~  application stopped  ]] ; then\n    echo  Killing kodi \n    break\n  fi\ndone    (tail --pid=$$ -f -n0 $LOG_FILE)\n\nkillall kodi.bin\n\nfbset -depth 8   fbset -depth 16\n\n(note there may be some issues with the framebuffer but its the only functioning fix at the moment short of compiling Kodi 15)", 
            "title": "Old configs"
        }, 
        {
            "location": "/Limelight/", 
            "text": "Quickguide for configuring limelight with Retropie and Emulation Station\n\n\nNote: Limelight no longer works for newer Geforce Experience versions.\n\n\nSee: https://github.com/irtimmer/moonlight-embedded/issues/169.\n\n\nLimelight has been supplanted by \nMoonlight\n, for which there is no current, official support.\n\n\nGuide\n\n\nThis guide will enable your Raspberry PI to work with NVIDIA Gamestream to stream Steam games to your Raspberry pi. To use this Guide you must have a Gamestream ready PC with a Gamestream enabled NVIDIA GPU. Geforce experience app should be version 2.2.2 or newer!\n\n\nWith this guide you get limelight integrated to Emulation station for quick access and the games will run 1080p / 30FPS with basically zero input lag (tested with a wired connection and Raspberry pi 2)\n\n\nThis guide is intended for Rasperry Pi 2 with Retropie, but should also work on a Pi B+\n\n\nI strongly suggest you configure your host PC to use a static IP-address, before you start!\n\n\nIn the shell with the PI-user\n\n\ninstall limelight:\n\n\npi@retropie ~ $ \nmkdir limelight\n\n\npi@retropie ~ $ \ncd limelight\n\n\npi@retropie ~/limelight $ \nsudo apt-get update \n sudo apt-get install oracle-java8-jdk\n \n\ufeff\npi@retropie ~/limelight $ \nwget https://github.com/irtimmer/limelight-embedded/releases/download/v1.2.1/libopus.so\n\n\npi@retropie ~/limelight $ \nwget https://github.com/irtimmer/limelight-embedded/releases/download/v1.2.1/limelight.jar\n\n\nNext pair your computer with limelight\n\n\nLookup your Nvidia Gamestream PC:s IP address\n\n\npi@retropie ~/limelight $ \njava -jar limelight.jar discover\n\n\npi@retropie ~/limelight $ \njava -jar limelight.jar pair XXX.XXX.XXX.XXX\n\n\n(for xxx.xxx.xxx.xxx use the ip-address found with discover)\n\n\nNow input the displayed number on the host PC\n\n\nNext we configure a key map for the USB-controller used with limelight (if event0 does not give you the proper device you can try next event1-event3)\n\n\npi@retropie ~/limelight $ \njava -jar limelight.jar map -input /dev/input/event0 mapfile.map\n\n\nAdd limelight to the ports section of Emulation station for easy access\n\n\npi@retropie ~ $ \ncd /home/pi/RetroPie/roms/ports/\n\n\npi@retropie ~/RetroPie/roms/ports $ \nnano limelight.sh\n\n\nin nano add this text:\n\n\n#!/bin/bash\n\n\ncd /home/pi/limelight/ \n java -jar limelight.jar stream -1080 -30fps XXX.XXX.XXX.XXX -app Steam -mapping mapfile.map\n\n\n(for xxx.xxx.xxx.xxx use the ip-address from before)\n\n\npress ctrl+x and press y and enter\n\n\npi@retropie ~/RetroPie/roms/ports $ \nchmod +x limelight.sh\n\n\nrestart the raspberry pi and limelight will be available from the ports section.\n\n\n\n\nExtra Tip!\n\n\nAlternatively you can also try 60fps with 720p by modifying the limelight.sh with this command\n\n\ncd /home/pi/limelight/ \n java -jar limelight.jar stream -720 -60fps XXX.XXX.XXX.XXX -app Steam -mapping mapfile.map\n\n\n(sadly 1080 and 60fps causes unplayable input lag, and mostly crashes without returning to emulation station on exit)\n\n\nExtra Tip2!\n\n\nCreate two .sh files named limelight720.sh and limelight1080.sh in the ports folder with both setups for fast access to both resolutions and framerates\n\n\n\n\nAdvanced configuration\n\n\nTo get 1080p 60FPS streaming running without lag on the PI2 you can try these overclock settings that resolved the issues:\n\n\narm_freq=1100\ncore_freq=500\nsdram_freq=500\nh264_freq=500\nover_voltage=8\nforce_turbo=1\ntemp_limit=80\n\n\nDISCLAIMER: Force_turbo will void your warranty since its keeps the clock on 100% without throttling, so you should use a heatsink with these settings.\n\n\n\n\nThe Guide is quite outdated in a few days, I made an installer script to make things really easy to anyone wanting to try this out:\n\n\nhttps://github.com/stsfin/RetropieLimelightInstaller\n\n\nPlease use the script its a turnkey solution", 
            "title": "Limelight"
        }, 
        {
            "location": "/Limelight/#quickguide-for-configuring-limelight-with-retropie-and-emulation-station", 
            "text": "", 
            "title": "Quickguide for configuring limelight with Retropie and Emulation Station"
        }, 
        {
            "location": "/Limelight/#note-limelight-no-longer-works-for-newer-geforce-experience-versions", 
            "text": "See: https://github.com/irtimmer/moonlight-embedded/issues/169.  Limelight has been supplanted by  Moonlight , for which there is no current, official support.", 
            "title": "Note: Limelight no longer works for newer Geforce Experience versions."
        }, 
        {
            "location": "/Limelight/#guide", 
            "text": "This guide will enable your Raspberry PI to work with NVIDIA Gamestream to stream Steam games to your Raspberry pi. To use this Guide you must have a Gamestream ready PC with a Gamestream enabled NVIDIA GPU. Geforce experience app should be version 2.2.2 or newer!  With this guide you get limelight integrated to Emulation station for quick access and the games will run 1080p / 30FPS with basically zero input lag (tested with a wired connection and Raspberry pi 2)  This guide is intended for Rasperry Pi 2 with Retropie, but should also work on a Pi B+  I strongly suggest you configure your host PC to use a static IP-address, before you start!  In the shell with the PI-user  install limelight:  pi@retropie ~ $  mkdir limelight  pi@retropie ~ $  cd limelight  pi@retropie ~/limelight $  sudo apt-get update   sudo apt-get install oracle-java8-jdk  \n\ufeff\npi@retropie ~/limelight $  wget https://github.com/irtimmer/limelight-embedded/releases/download/v1.2.1/libopus.so  pi@retropie ~/limelight $  wget https://github.com/irtimmer/limelight-embedded/releases/download/v1.2.1/limelight.jar  Next pair your computer with limelight  Lookup your Nvidia Gamestream PC:s IP address  pi@retropie ~/limelight $  java -jar limelight.jar discover  pi@retropie ~/limelight $  java -jar limelight.jar pair XXX.XXX.XXX.XXX  (for xxx.xxx.xxx.xxx use the ip-address found with discover)  Now input the displayed number on the host PC  Next we configure a key map for the USB-controller used with limelight (if event0 does not give you the proper device you can try next event1-event3)  pi@retropie ~/limelight $  java -jar limelight.jar map -input /dev/input/event0 mapfile.map  Add limelight to the ports section of Emulation station for easy access  pi@retropie ~ $  cd /home/pi/RetroPie/roms/ports/  pi@retropie ~/RetroPie/roms/ports $  nano limelight.sh  in nano add this text:  #!/bin/bash  cd /home/pi/limelight/   java -jar limelight.jar stream -1080 -30fps XXX.XXX.XXX.XXX -app Steam -mapping mapfile.map  (for xxx.xxx.xxx.xxx use the ip-address from before)  press ctrl+x and press y and enter  pi@retropie ~/RetroPie/roms/ports $  chmod +x limelight.sh  restart the raspberry pi and limelight will be available from the ports section.   Extra Tip!  Alternatively you can also try 60fps with 720p by modifying the limelight.sh with this command  cd /home/pi/limelight/   java -jar limelight.jar stream -720 -60fps XXX.XXX.XXX.XXX -app Steam -mapping mapfile.map  (sadly 1080 and 60fps causes unplayable input lag, and mostly crashes without returning to emulation station on exit)  Extra Tip2!  Create two .sh files named limelight720.sh and limelight1080.sh in the ports folder with both setups for fast access to both resolutions and framerates   Advanced configuration  To get 1080p 60FPS streaming running without lag on the PI2 you can try these overclock settings that resolved the issues:  arm_freq=1100\ncore_freq=500\nsdram_freq=500\nh264_freq=500\nover_voltage=8\nforce_turbo=1\ntemp_limit=80  DISCLAIMER: Force_turbo will void your warranty since its keeps the clock on 100% without throttling, so you should use a heatsink with these settings.   The Guide is quite outdated in a few days, I made an installer script to make things really easy to anyone wanting to try this out:  https://github.com/stsfin/RetropieLimelightInstaller  Please use the script its a turnkey solution", 
            "title": "Guide"
        }, 
        {
            "location": "/Lincity/", 
            "text": "Lincity is yet another Sim City clone.\n\n\n\n\nPort: \nLincity\n\n\nControls:\n\n\nKeyboard and Mouse", 
            "title": "Lincity"
        }, 
        {
            "location": "/Lincity/#port-lincity", 
            "text": "", 
            "title": "Port: Lincity"
        }, 
        {
            "location": "/Lincity/#controls", 
            "text": "Keyboard and Mouse", 
            "title": "Controls:"
        }, 
        {
            "location": "/Marathon/", 
            "text": "Marathon is the Apple version of DOOM.\n\n\n\n\nEmulator: \nAleph One\n\n\nROMS:\n\n\nGames are downloaded with the script.\n\n\nTo get the games running, make sure to set each game to use the software renderer and disable the enhanced HUD from the Plugins section of the Environment menu. For Marathon 1, disable both HUDs from the Plugins menu, start a game, quit back to the title screen and enable Enhanced HUD and it will work and properly.\n\n\nControls:\n\n\nKeyboard, mouse and joystick all supported.", 
            "title": "Marathon"
        }, 
        {
            "location": "/Marathon/#emulator-aleph-one", 
            "text": "", 
            "title": "Emulator: Aleph One"
        }, 
        {
            "location": "/Marathon/#roms", 
            "text": "Games are downloaded with the script.  To get the games running, make sure to set each game to use the software renderer and disable the enhanced HUD from the Plugins section of the Environment menu. For Marathon 1, disable both HUDs from the Plugins menu, start a game, quit back to the title screen and enable Enhanced HUD and it will work and properly.", 
            "title": "ROMS:"
        }, 
        {
            "location": "/Marathon/#controls", 
            "text": "Keyboard, mouse and joystick all supported.", 
            "title": "Controls:"
        }, 
        {
            "location": "/Micropolis/", 
            "text": "Micropolis is essentially an open source version of the game Sim City.\n\n\n\n\nEmulator: \nMicropolis\n\n\nControls:\n\n\nMouse and Keyboard", 
            "title": "Micropolis"
        }, 
        {
            "location": "/Micropolis/#emulator-micropolis", 
            "text": "", 
            "title": "Emulator: Micropolis"
        }, 
        {
            "location": "/Micropolis/#controls", 
            "text": "Mouse and Keyboard", 
            "title": "Controls:"
        }, 
        {
            "location": "/Minecraft/", 
            "text": "Minecraft was created by Markus \"Notch\" Persson and his company Mojang which was later sold to Microsoft for 2.5 billion dollars- which explains why there has been pretty much no development on Minecraft Pi edition for more than 2 years now. Minecraft for Pi is based off of Minecraft Pocket Edition, and as such lacks creatures, adventures, night time, etc. It is unfortunately incredibly basic.\n\n\n\n\nThis emulator is experimental and can be installed from the experimental menu of the \nretropie setup script\n\n\nNote\n in order to run after it has been installed you need to go into the terminal and type:\n\n\nsudo dpkg-reconfigure x11-common\n\n\n\n\nand then change it to \nanyone\n alternatively you can put sudo in front of the launch script.\n\n\nControls\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nW\n\n\nForward\n\n\n\n\n\n\nA\n\n\nLeft\n\n\n\n\n\n\nS\n\n\nDown\n\n\n\n\n\n\nD\n\n\nRight\n\n\n\n\n\n\nE\n\n\nInventory\n\n\n\n\n\n\nSpace\n\n\nJump\n\n\n\n\n\n\nDouble Space\n\n\nFly / Fall\n\n\n\n\n\n\nEsc\n\n\nPause / Game menu\n\n\n\n\n\n\nTab\n\n\nRelease mouse cursor\n\n\n\n\n\n\n1-8\n\n\nBlock selection\n\n\n\n\n\n\nMouse\n\n\nDirection of Movement\n\n\n\n\n\n\nLeft-Click\n\n\nRemove Block\n\n\n\n\n\n\nRight-Click\n\n\nPlace Block\n\n\n\n\n\n\nScroll-Wheel\n\n\nSelect Block\n\n\n\n\n\n\n\n\nImportant notes:\n \n\n\nIn order to work with fullscreen, a window manager called Matchbox is used, but it has a side effect of the mouse not quite working right in the menu so you need to use a keyboard to start up a world. Once you are in the world, the mouse works just fine. \n\n\nTo exit, you can either click the x in the upper right of the screen or you can reboot your pi.", 
            "title": "Minecraft"
        }, 
        {
            "location": "/Minecraft/#controls", 
            "text": "Key  Action      W  Forward    A  Left    S  Down    D  Right    E  Inventory    Space  Jump    Double Space  Fly / Fall    Esc  Pause / Game menu    Tab  Release mouse cursor    1-8  Block selection    Mouse  Direction of Movement    Left-Click  Remove Block    Right-Click  Place Block    Scroll-Wheel  Select Block     Important notes:    In order to work with fullscreen, a window manager called Matchbox is used, but it has a side effect of the mouse not quite working right in the menu so you need to use a keyboard to start up a world. Once you are in the world, the mouse works just fine.   To exit, you can either click the x in the upper right of the screen or you can reboot your pi.", 
            "title": "Controls"
        }, 
        {
            "location": "/OpenTTD/", 
            "text": "OpenTTD\n\n\n\n\n\n\nOpenTTD is an OpenSource Port of Transport Tycoon Deluxe\n\n\n\n\nOfficial OpenTTD Wiki: \nhttps://wiki.openttd.org/OpenTTD\n\n\nThis emulator is \nexperimental\n and can be installed from the experimental menu of the \nretropie setup script\n\n\nGetting Started\n\n\nYou will need a keyboard and a mouse - gamepads will not work for this game\n\n\nWhen you first start up the game you will be greeted by the following screen: \n\n\n\n\nDownload the graphics and then select check online content\n\n\n\n\nIf you don't have the original Transport Tycoon Deluxe files you'll want to at the very least download \nOpenMSX\n and \nOpenSFX\n packs so you have sound effects and music.\n\n\n\n\nOnce you've downloaded \nOpenMSX\n and \nOpenSFX\n you have to enable them in the game options as follows:\n\n\n\n\n\n\nThen finally, in order to get your music playing you have to start a new game and turn on the jukebox:\n\n\n\n\nFor more information on how to play the game see the Official OpenTTD Wiki: \nhttps://wiki.openttd.org/OpenTTD", 
            "title": "OpenTTD"
        }, 
        {
            "location": "/OpenTTD/#openttd", 
            "text": "OpenTTD is an OpenSource Port of Transport Tycoon Deluxe   Official OpenTTD Wiki:  https://wiki.openttd.org/OpenTTD  This emulator is  experimental  and can be installed from the experimental menu of the  retropie setup script", 
            "title": "OpenTTD"
        }, 
        {
            "location": "/OpenTTD/#getting-started", 
            "text": "You will need a keyboard and a mouse - gamepads will not work for this game  When you first start up the game you will be greeted by the following screen:    Download the graphics and then select check online content   If you don't have the original Transport Tycoon Deluxe files you'll want to at the very least download  OpenMSX  and  OpenSFX  packs so you have sound effects and music.   Once you've downloaded  OpenMSX  and  OpenSFX  you have to enable them in the game options as follows:    Then finally, in order to get your music playing you have to start a new game and turn on the jukebox:   For more information on how to play the game see the Official OpenTTD Wiki:  https://wiki.openttd.org/OpenTTD", 
            "title": "Getting Started"
        }, 
        {
            "location": "/OpenTyrian/", 
            "text": "OpenTyrian is a port of the DOS shoot-em-up Tyrian. Jason Emery generously gave the OpenTyrian developers a copy of the Tyrian 2.1 source code, which has since been ported from Turbo Pascal to C. The port uses SDL, making it easily cross-platform.\n\n\n\n\nEmulator: \nOpenTyrian\n\n\nControls:\n\n\nctrl-backspace -- kill OpenTyrian\nalt-enter      -- fullscreen\nctrl-f10       -- ungrab mouse\n\narrow keys     -- ship movement\nspace          -- fire weapons\nenter          -- toggle rear weapon mode\nctrl/alt       -- fire left/right sidekick\n\n\n\n\nConfiguring Game Controllers\n\n\nYou can configure controllers in-game by starting a game in any mode, episode or difficulty - it doesn't matter which. From the pre-game menu, choose \nOptions\n and then \nJoystick\n. If you have a game controller plugged in, then you will see a screen as below with buttons and axes already assigned.\n\n\n\n\nBear in mind that the button and axes numbering in OpenTyrian is the number as reported by \njstest\n +1. For example, button 0 on your controller will register as \nBTN 1\n.\n\n\nTo re-configure, use the arrow keys on a keyboard to select an action, FIRE, CHANGE FIRE etc. Press ENTER on a keyboard to highlight and then the button on your game controller that you wish to map. Repeat for other buttons.\n\n\nTo remove a default setting, press the relevant button for the action. For example, to remove the default setting of \nBTN 1\n for FIRE, navigate to FIRE with a keyboard, press ENTER and then press button 0 on your controller.\n\n\nThe settings will be saved to a configuration file, \nopentyrian.cfg\n, in the \n/opt/retropie/configs/ports/opentyrian\n folder. It is possible to manually edit this file if you prefer, just remember to add one to the button or axis number as reported by jstest.", 
            "title": "OpenTyrian"
        }, 
        {
            "location": "/OpenTyrian/#emulator-opentyrian", 
            "text": "", 
            "title": "Emulator: OpenTyrian"
        }, 
        {
            "location": "/OpenTyrian/#controls", 
            "text": "ctrl-backspace -- kill OpenTyrian\nalt-enter      -- fullscreen\nctrl-f10       -- ungrab mouse\n\narrow keys     -- ship movement\nspace          -- fire weapons\nenter          -- toggle rear weapon mode\nctrl/alt       -- fire left/right sidekick", 
            "title": "Controls:"
        }, 
        {
            "location": "/OpenTyrian/#configuring-game-controllers", 
            "text": "You can configure controllers in-game by starting a game in any mode, episode or difficulty - it doesn't matter which. From the pre-game menu, choose  Options  and then  Joystick . If you have a game controller plugged in, then you will see a screen as below with buttons and axes already assigned.   Bear in mind that the button and axes numbering in OpenTyrian is the number as reported by  jstest  +1. For example, button 0 on your controller will register as  BTN 1 .  To re-configure, use the arrow keys on a keyboard to select an action, FIRE, CHANGE FIRE etc. Press ENTER on a keyboard to highlight and then the button on your game controller that you wish to map. Repeat for other buttons.  To remove a default setting, press the relevant button for the action. For example, to remove the default setting of  BTN 1  for FIRE, navigate to FIRE with a keyboard, press ENTER and then press button 0 on your controller.  The settings will be saved to a configuration file,  opentyrian.cfg , in the  /opt/retropie/configs/ports/opentyrian  folder. It is possible to manually edit this file if you prefer, just remember to add one to the button or axis number as reported by jstest.", 
            "title": "Configuring Game Controllers"
        }, 
        {
            "location": "/Ports/", 
            "text": "Current software ported to RetroPie:\n\n\n\n\nBaldur's Gate\n \n(GemRB)\n (EXPERIMENTAL)\n\n\nCave Story\n \n(nxengine-libretro)\n\n\nDescent\n \n(DXX-Rebirth)\n (EXPERIMENTAL) \n\n\nDOOM\n \n(lr-prboom)\n, \n(ZDOOM)\n\n\nDuke Nukem 3D\n \n(Eduke32)\n\n\nL\u00f6ve\n \n(L\u00f6ve)\n (EXPERIMENTAL)\n\n\nKODI\n (EXPERIMENTAL)\n\n\nMinecraft Pi Edition\n (EXPERIMENTAL)\n\n\nOpenBOR\n \n(OpenBOR)\n (EXPERIMENTAL)\n\n\nOpenTTD\n (EXPERIMENTAL)\n\n\nOpenTyrian\n \n(OpenTyrian)\n (EXPERIMENTAL)\n\n\nOutRun Engine\n \n(Cannonball)\n (EXPERIMENTAL)\n\n\nQuake Series\n \n(lr-tyrquake)\n, \n(Tyrquake)\n, \n(ioQuake3)\n\n\nResidualVM\n \nResidualVM\n (EXPERIMENTAL)\n\n\nRick Dangerous\n \n(Xrick)\n (EXPERIMENTAL)\n\n\nPrince of Persia\n \n(SDLPoP)\n (EXPERIMENTAL)\n\n\nSuper Mario War\n \n(Super Mario War)\n\n\nSuperTux\n (EXPERIMENTAL)\n\n\nThe-Ur-Quan-Masters\n \n(UQM)\n (EXPERIMENTAL)\n\n\nWarcraft/Starcraft\n \n(Stratagus)\n (EXPERIMENTAL)\n\n\nWolfenstein 3D\n \n(Wolf4SDL)\n (EXPERIMENTAL)\n\n\nZelda Engine\n \n(Solarus)\n (EXPERIMENTAL)\n\n\n\n\nOverview\n\n\nThis page describes the process of adding software to the ports menu of EmulationStation. This is not to be taken lightly by Linux new-comers as this requires installing the software from the command-line and then making a shell script that EmulationStation will call to start it all up.\n\n\nPlease don't get scared off, this is a great introduction to some basic things in Linux, and for the most part it is a simple when you have the parts explained.\n\n\nInstalling Ports from apt-get\n\n\nAny game in the raspbian \nrepos\n can be installed from a script based on the following (This is provided that they do not need x server to run. a good portion will not run and those that do will likely require a keyboard.) Just do a find and replace on \nsupertux\n and save the file as a shell script with the same name as the game (i.e. supertux.sh) in \n/home/pi/RetroPie-Setup/scriptmodules/ports\n and then you should be able to install it from the experimental menu of the setup script:\n\n\n#!/usr/bin/env bash\n\n# This file is part of The RetroPie Project\n#\n# The RetroPie Project is the legal property of its developers, whose names are\n# too numerous to list here. Please refer to the COPYRIGHT.md file distributed with this source.\n#\n# See the LICENSE.md file at the top-level directory of this distribution and\n# at https://raw.githubusercontent.com/RetroPie/RetroPie-Setup/master/LICENSE.md\n#\n\nrp_module_id=\nsupertux\n\nrp_module_desc=\nSuperTux 2d scrolling platform\n\nrp_module_menus=\n4+\n\nrp_module_flags=\nnobin\n\n\nfunction install_supertux() {\n    aptInstall supertux\n}\n\nfunction configure_supertux() {\n    mkRomDir \nports\n\n\n    addPort \n$md_id\n \nsupertux\n \nSuperTux\n \nsupertux\n\n}\n\n\n\n\nInstalling the software\n\n\nTo install the software, typically find the website that hosts the project that works on the software. They may mention how to install it. It may be in the repositories already which makes installing super simple. We are going to use quake as an example on this page. The package is acctually called darkplaces. Exit to the commandline to begin.\n\n\n# update the pi before installing\nsudo rpi-update\nsudo reboot\n\n# make a folder to install the game to\nsudo mkdir /opt/retropie/emulators/darkplaces\n\n\n\n\nWe are now ready to download the game. The file is located here[https://github.com/autonomous1/darkplacesrpi/archive/dprpi_v1.1.zip]. You can just download the file directly to your Pi with the first command below if it is conected to the internet. For copying it off a flashdrive, you will have to google mounting for linux. You may just want to download the file and place it directly on the storage section of the SD card as it is the simplest option. \n\n\n# download the file\nsudo wget https://github.com/autonomous1/darkplacesrpi/archive/dprpi_v1.1.zip\n# unzip the file so that we can use the things inside of it\nsudo unzip darkplacesrpi-dprpi_v1.1.zip -d /opt/retropie/emulators/darkplaces\n\n#move the files from the zip to the proper location\nsudo mv /opt/retropie/emulators/darkplaces/darkplacesrpi*/* /opt/retropie/emulators/darkplaces\nsudo rmdir /opt/retropie/emulators/darkplaces/darkplacesrpi*\n\n#install the acctual game\nsudo dpkg -i /opt/retropie/emulators/darkplaces/darkplaces-rpi.deb\n\n\n\n\nNow time to find another file. Google for quake106.zip and put that in the folder \n/opt/retropie/emulators/darkplaces\n\n\n#unzip the file\nsudo unzip quake106.zip -d /opt/retropie/emulators/darkplaces\n#install some other dependencies\nsudo apt-get install lhasa\nsudo lhasa e resource.1\n\n#make the files accesable to all people so that we can load this later\nsudo chmod a+rwx /opt/retropie/emulators/darkplaces/ -R\n\n\n\n\nLinking the Game\n\n\nNow that we have installed quake, it is time to link the game to EmulationStation. Go to the home directory with \ncd ~\n and then cd into the \nroms/ports\n folder. We are now going to make a shell script that will tell EmulationStation how to start the game.\n\n\ntouch quake.sh\nchmod a+rwx quake.sh\nnano quake.sh\n\n\n\n\nInformation to put in the file:\n\n\n#!/bin/bash\nsudo darkplaces-sdl -quake -basedir /opt/retropie/emulators/darkplaces/\n\n\n\n\nHow to adapt to other games/software\n\n\nThere are only 2 parts to having software appear in the ports menu and have it work. The first is that you must have installed the software, however it gets done. You need to make sure it runs from the command-line before the next part. The second part is simply making a shell script that does the command line arguments to start the game/software. EmulationStation will launch it and then wait for it to exit. \n\n\nGameMaker Games\n\n\nHere's a module for the GameMaker Games. Just create a file called \ngamemaker.sh\n in \n/home/pi/RetroPie-Setup/scriptmodules/ports\n\n\nWith the following contents:\n\n\n#!/usr/bin/env bash\n\n# This file is part of The RetroPie Project\n# \n# The RetroPie Project is the legal property of its developers, whose names are\n# too numerous to list here. Please refer to the COPYRIGHT.md file distributed with this source.\n# \n# See the LICENSE.md file at the top-level directory of this distribution and \n# at https://raw.githubusercontent.com/RetroPie/RetroPie-Setup/master/LICENSE.md\n#\n\nrp_module_id=\ngamemaker\n\nrp_module_desc=\nGameMaker - Games for the Raspberry Pi\n\nrp_module_section=\nexp\n\nrp_module_flags=\n!mali !x86\n\n\nfunction install_bin_gamemaker() {\n# Install They Need To Be Fed Game\nwget -O- -q https://www.yoyogames.com/download/pi/tntbf | tar -xvz -C \n$md_inst\n\n# Install Super Crate Box Game\nwget -O- -q https://www.yoyogames.com/download/pi/crate | tar -xvz -C \n$md_inst\n\n# Install Maldita Castilla Game\nwget -O- -q https://www.yoyogames.com/download/pi/castilla | tar -xvz -C \n$md_inst\n\n}\n\nfunction configure_gamemaker() {\n    mkRomDir \nports\n\n\n    addPort \n$md_id\n \nTheyNeedToBeFed\n \nTheyNeedToBeFed\n \n$md_inst/TheyNeedToBeFed/TheyNeedToBeFed\n\n    addPort \n$md_id\n \nSuperCrateBox\n \nSuperCrateBox\n \n$md_inst/SuperCrateBox/SuperCrateBox\n\n    addPort \n$md_id\n \nMalditaCastilla\n \nMalditaCastilla\n \n$md_inst/MalditaCastilla/MalditaCastilla\n\n}", 
            "title": "Ports"
        }, 
        {
            "location": "/Ports/#overview", 
            "text": "This page describes the process of adding software to the ports menu of EmulationStation. This is not to be taken lightly by Linux new-comers as this requires installing the software from the command-line and then making a shell script that EmulationStation will call to start it all up.  Please don't get scared off, this is a great introduction to some basic things in Linux, and for the most part it is a simple when you have the parts explained.", 
            "title": "Overview"
        }, 
        {
            "location": "/Ports/#installing-ports-from-apt-get", 
            "text": "Any game in the raspbian  repos  can be installed from a script based on the following (This is provided that they do not need x server to run. a good portion will not run and those that do will likely require a keyboard.) Just do a find and replace on  supertux  and save the file as a shell script with the same name as the game (i.e. supertux.sh) in  /home/pi/RetroPie-Setup/scriptmodules/ports  and then you should be able to install it from the experimental menu of the setup script:  #!/usr/bin/env bash\n\n# This file is part of The RetroPie Project\n#\n# The RetroPie Project is the legal property of its developers, whose names are\n# too numerous to list here. Please refer to the COPYRIGHT.md file distributed with this source.\n#\n# See the LICENSE.md file at the top-level directory of this distribution and\n# at https://raw.githubusercontent.com/RetroPie/RetroPie-Setup/master/LICENSE.md\n#\n\nrp_module_id= supertux \nrp_module_desc= SuperTux 2d scrolling platform \nrp_module_menus= 4+ \nrp_module_flags= nobin \n\nfunction install_supertux() {\n    aptInstall supertux\n}\n\nfunction configure_supertux() {\n    mkRomDir  ports \n\n    addPort  $md_id   supertux   SuperTux   supertux \n}", 
            "title": "Installing Ports from apt-get"
        }, 
        {
            "location": "/Ports/#installing-the-software", 
            "text": "To install the software, typically find the website that hosts the project that works on the software. They may mention how to install it. It may be in the repositories already which makes installing super simple. We are going to use quake as an example on this page. The package is acctually called darkplaces. Exit to the commandline to begin.  # update the pi before installing\nsudo rpi-update\nsudo reboot\n\n# make a folder to install the game to\nsudo mkdir /opt/retropie/emulators/darkplaces  We are now ready to download the game. The file is located here[https://github.com/autonomous1/darkplacesrpi/archive/dprpi_v1.1.zip]. You can just download the file directly to your Pi with the first command below if it is conected to the internet. For copying it off a flashdrive, you will have to google mounting for linux. You may just want to download the file and place it directly on the storage section of the SD card as it is the simplest option.   # download the file\nsudo wget https://github.com/autonomous1/darkplacesrpi/archive/dprpi_v1.1.zip\n# unzip the file so that we can use the things inside of it\nsudo unzip darkplacesrpi-dprpi_v1.1.zip -d /opt/retropie/emulators/darkplaces\n\n#move the files from the zip to the proper location\nsudo mv /opt/retropie/emulators/darkplaces/darkplacesrpi*/* /opt/retropie/emulators/darkplaces\nsudo rmdir /opt/retropie/emulators/darkplaces/darkplacesrpi*\n\n#install the acctual game\nsudo dpkg -i /opt/retropie/emulators/darkplaces/darkplaces-rpi.deb  Now time to find another file. Google for quake106.zip and put that in the folder  /opt/retropie/emulators/darkplaces  #unzip the file\nsudo unzip quake106.zip -d /opt/retropie/emulators/darkplaces\n#install some other dependencies\nsudo apt-get install lhasa\nsudo lhasa e resource.1\n\n#make the files accesable to all people so that we can load this later\nsudo chmod a+rwx /opt/retropie/emulators/darkplaces/ -R", 
            "title": "Installing the software"
        }, 
        {
            "location": "/Ports/#linking-the-game", 
            "text": "Now that we have installed quake, it is time to link the game to EmulationStation. Go to the home directory with  cd ~  and then cd into the  roms/ports  folder. We are now going to make a shell script that will tell EmulationStation how to start the game.  touch quake.sh\nchmod a+rwx quake.sh\nnano quake.sh  Information to put in the file:  #!/bin/bash\nsudo darkplaces-sdl -quake -basedir /opt/retropie/emulators/darkplaces/", 
            "title": "Linking the Game"
        }, 
        {
            "location": "/Ports/#how-to-adapt-to-other-gamessoftware", 
            "text": "There are only 2 parts to having software appear in the ports menu and have it work. The first is that you must have installed the software, however it gets done. You need to make sure it runs from the command-line before the next part. The second part is simply making a shell script that does the command line arguments to start the game/software. EmulationStation will launch it and then wait for it to exit.", 
            "title": "How to adapt to other games/software"
        }, 
        {
            "location": "/Ports/#gamemaker-games", 
            "text": "Here's a module for the GameMaker Games. Just create a file called  gamemaker.sh  in  /home/pi/RetroPie-Setup/scriptmodules/ports  With the following contents:  #!/usr/bin/env bash\n\n# This file is part of The RetroPie Project\n# \n# The RetroPie Project is the legal property of its developers, whose names are\n# too numerous to list here. Please refer to the COPYRIGHT.md file distributed with this source.\n# \n# See the LICENSE.md file at the top-level directory of this distribution and \n# at https://raw.githubusercontent.com/RetroPie/RetroPie-Setup/master/LICENSE.md\n#\n\nrp_module_id= gamemaker \nrp_module_desc= GameMaker - Games for the Raspberry Pi \nrp_module_section= exp \nrp_module_flags= !mali !x86 \n\nfunction install_bin_gamemaker() {\n# Install They Need To Be Fed Game\nwget -O- -q https://www.yoyogames.com/download/pi/tntbf | tar -xvz -C  $md_inst \n# Install Super Crate Box Game\nwget -O- -q https://www.yoyogames.com/download/pi/crate | tar -xvz -C  $md_inst \n# Install Maldita Castilla Game\nwget -O- -q https://www.yoyogames.com/download/pi/castilla | tar -xvz -C  $md_inst \n}\n\nfunction configure_gamemaker() {\n    mkRomDir  ports \n\n    addPort  $md_id   TheyNeedToBeFed   TheyNeedToBeFed   $md_inst/TheyNeedToBeFed/TheyNeedToBeFed \n    addPort  $md_id   SuperCrateBox   SuperCrateBox   $md_inst/SuperCrateBox/SuperCrateBox \n    addPort  $md_id   MalditaCastilla   MalditaCastilla   $md_inst/MalditaCastilla/MalditaCastilla \n}", 
            "title": "GameMaker Games"
        }, 
        {
            "location": "/Quake/", 
            "text": "Quake was a First Person Shooter series originally developed for the PC by Id Software. It is a successor to the Doom Series.\n\n\nThere are 4 Quake games: Quake, Quake II, and Quake III Arena and Quake 4. RetroPie includes Quake, TyrQuake (an optimised build of the original Quake Engine), and Quake III Arena.\n\n\nThe source code to the original Quake engine was released under the GPLv2 license on December 21st 1999. This has enabled a wide variety of source ports and improvements to be made and for the game to run on alternative operating systems and architectures.\n\n\n\n\nQuake\n\n\n\n\n\n\nThe RetroPie Setup Script automatically installs the Quake 1 shareware game data.\n\n\n\n\nEmulator\n\n\n\n\nlibretro-tyrquake\n (recommended)\n\n\ntyrquake\n\n\n\n\nControls\n\n\nlibretro-tyrquake\n utilises Retroarch configurations and is the recommended port.\n\n\nAdd custom RetroArch controls to the \nretroarch.cfg\n file in\n\n\n/opt/retropie/configs/quake/retroarch.cfg\n\n\n\n\nFor more information on custom RetroArch controls see: \nRetroArch Configuration\n\n\ntyrquake\n does not support joystick/gamepad input, so is suitable only for those with a keyboard and mouse.\n\n\nUpgrading Shareware to Registered\n\n\nDuring installation of the port, the setup script places the shareware version of the Quake data files at:\n\n\n/home/pi/RetroPie/roms/ports/quake/id1/pak0.pak\n\n\n\n\nIf you own the registered version, you may add the registered version data file at:\n\n\n/home/pi/RetroPie/roms/ports/quake/id1/pak1.pak\n\n\n\n\nThe shareware version is Quake v1.06. It is recommended your registered data file be from v1.06 or v1.08 versions of the game, earlier versions may not be compatible.\n\n\nThere is no difference between the data files of v1.06 and v1.08, this was an update to the game engine only, not the data files.\n\n\nQuake Mission Packs\n\n\nIn addition to many community maps, Quake had some commercial add-ons which are considered \"official\".\n\n\nMission Pack 1: Scourge of Armagon\n\n\nScourge of Armagon (aka \nhipnotic\n) was the first official Quake Mission Pack, sold by Hipnotic Interactive in 1997.\n\n\nPlace the data file at:\n\n\n/home/pi/RetroPie/roms/ports/quake/id1/hipnotic/pak0.pak\n\n\n\n\nReinstall the Quake port from the Setup Script, and a new option \nQuake Mission Pack 1 (hipnotic)\n will be created.\n\n\nMission Pack 2 - Dissolution of Eternity\n\n\nDissolution of Eternity (aka \nrogue\n) is the second official Quake Mission Pack, sold by Rogue Entertainment in 1997.\n\n\nPlace the data file at:\n\n\n/home/pi/RetroPie/roms/ports/quake/id1/rogue/pak0.pak\n\n\n\n\nReinstall the Quake port from the Setup Script, and a new option \nQuake Mission Pack 2 (rogue)\n will be created.\n\n\nEpisode 5 - Dimension of the Past\n\n\nTo celebrate Quake's 20th anniversary, MachineGames (developer of Wolfenstein: The New Order) created a new 10-level pack named \nEpisode 5 - Dimension of the Past\n and released it for free at https://cdn.bethsoft.com/quake/dopa.rar\n\n\nTo get DOPA working in the RetroPie Quake ports, create a directory at:\n\n\n/home/pi/RetroPie/roms/ports/quake/dopa/\n\n\n\n\nCopy the DOPA \npak0.pak\n file into this directory then rename it to \npak2.pak\n, so you have:\n\n\n/home/pi/RetroPie/roms/ports/quake/dopa/pak2.pak\n\n\n\n\nNow copy the original shareware and registered data files into this directory as well. Your files should look like:\n\n\n/home/pi/RetroPie/roms/ports/quake/dopa/pak0.pak  ## shareware\n/home/pi/RetroPie/roms/ports/quake/dopa/pak1.pak  ## registered\n/home/pi/RetroPie/roms/ports/quake/dopa/pak2.pak  ## dopa\n\n\n\n\nThe extra episode can now be launched with a launcher script at:\n\n\n/home/pi/RetroPie/roms/ports/Quake Episode 5 (dopa).sh\n\n\n\n\nWith the contents:\n\n\n#!/bin/bash\n\n/opt/retropie/supplementary/runcommand/runcommand.sh\n 0 _PORT_ \nquake\n \n/home/pi/RetroPie/roms/ports/quake/dopa/pak0.pak\n\n\n\n\n\nReferences\n\n\n\n\nhttps://retropie.org.uk/forum/topic/2431/solved-partly-issue-with-joypad-control-how-to-start-doom-doom2-heretic-and-all-episodes-of-quake-dopa-rogue-hipnotic\n\n\nhttps://twitter.com/machinegames/status/746363189768650752\n\n\n\n\nQuake III Arena\n\n\n\n\n\n\nQuake III Arena is the 3rd game in the Quake Series. It differs from the others in the sense that it is all multiplayer.\n\n\n\n\nPort: \nioQuake3\n\n\nControls:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nCtrl or Left Mouse Click\n\n\nAttack\n\n\n\n\n\n\n/\n\n\nNext Weapon\n\n\n\n\n\n\n1-9\n\n\nWeapons\n\n\n\n\n\n\nSpace\n\n\nJump\n\n\n\n\n\n\nUp Arrow or W\n\n\nWalk Forward\n\n\n\n\n\n\nDown Arrow or S\n\n\nBackpedal\n\n\n\n\n\n\nLeft Arrow\n\n\nTurn Left\n\n\n\n\n\n\nRight Arrow\n\n\nTurn Right\n\n\n\n\n\n\nALT\n\n\nSidestep\n\n\n\n\n\n\nPGDN\n\n\nLook Up\n\n\n\n\n\n\nDEL\n\n\nLook Down\n\n\n\n\n\n\nEND\n\n\nCenter View\n\n\n\n\n\n\nMouse Movement\n\n\nMouse Look\n\n\n\n\n\n\nD\n\n\nStrafe Right\n\n\n\n\n\n\nA\n\n\nStrafe Left\n\n\n\n\n\n\nMouse Scroll Wheel Click\n\n\nZoom\n\n\n\n\n\n\nC\n\n\nCrouch\n\n\n\n\n\n\nTAB\n\n\nStats\n\n\n\n\n\n\nT\n\n\nChat\n\n\n\n\n\n\nF11\n\n\nTake Screenshot\n\n\n\n\n\n\nESC\n\n\nMenu", 
            "title": "Quake"
        }, 
        {
            "location": "/Quake/#quake", 
            "text": "The RetroPie Setup Script automatically installs the Quake 1 shareware game data.", 
            "title": "Quake"
        }, 
        {
            "location": "/Quake/#emulator", 
            "text": "libretro-tyrquake  (recommended)  tyrquake", 
            "title": "Emulator"
        }, 
        {
            "location": "/Quake/#controls", 
            "text": "libretro-tyrquake  utilises Retroarch configurations and is the recommended port.  Add custom RetroArch controls to the  retroarch.cfg  file in  /opt/retropie/configs/quake/retroarch.cfg  For more information on custom RetroArch controls see:  RetroArch Configuration  tyrquake  does not support joystick/gamepad input, so is suitable only for those with a keyboard and mouse.", 
            "title": "Controls"
        }, 
        {
            "location": "/Quake/#upgrading-shareware-to-registered", 
            "text": "During installation of the port, the setup script places the shareware version of the Quake data files at:  /home/pi/RetroPie/roms/ports/quake/id1/pak0.pak  If you own the registered version, you may add the registered version data file at:  /home/pi/RetroPie/roms/ports/quake/id1/pak1.pak  The shareware version is Quake v1.06. It is recommended your registered data file be from v1.06 or v1.08 versions of the game, earlier versions may not be compatible.  There is no difference between the data files of v1.06 and v1.08, this was an update to the game engine only, not the data files.", 
            "title": "Upgrading Shareware to Registered"
        }, 
        {
            "location": "/Quake/#quake-mission-packs", 
            "text": "In addition to many community maps, Quake had some commercial add-ons which are considered \"official\".", 
            "title": "Quake Mission Packs"
        }, 
        {
            "location": "/Quake/#mission-pack-1-scourge-of-armagon", 
            "text": "Scourge of Armagon (aka  hipnotic ) was the first official Quake Mission Pack, sold by Hipnotic Interactive in 1997.  Place the data file at:  /home/pi/RetroPie/roms/ports/quake/id1/hipnotic/pak0.pak  Reinstall the Quake port from the Setup Script, and a new option  Quake Mission Pack 1 (hipnotic)  will be created.", 
            "title": "Mission Pack 1: Scourge of Armagon"
        }, 
        {
            "location": "/Quake/#mission-pack-2-dissolution-of-eternity", 
            "text": "Dissolution of Eternity (aka  rogue ) is the second official Quake Mission Pack, sold by Rogue Entertainment in 1997.  Place the data file at:  /home/pi/RetroPie/roms/ports/quake/id1/rogue/pak0.pak  Reinstall the Quake port from the Setup Script, and a new option  Quake Mission Pack 2 (rogue)  will be created.", 
            "title": "Mission Pack 2 - Dissolution of Eternity"
        }, 
        {
            "location": "/Quake/#episode-5-dimension-of-the-past", 
            "text": "To celebrate Quake's 20th anniversary, MachineGames (developer of Wolfenstein: The New Order) created a new 10-level pack named  Episode 5 - Dimension of the Past  and released it for free at https://cdn.bethsoft.com/quake/dopa.rar  To get DOPA working in the RetroPie Quake ports, create a directory at:  /home/pi/RetroPie/roms/ports/quake/dopa/  Copy the DOPA  pak0.pak  file into this directory then rename it to  pak2.pak , so you have:  /home/pi/RetroPie/roms/ports/quake/dopa/pak2.pak  Now copy the original shareware and registered data files into this directory as well. Your files should look like:  /home/pi/RetroPie/roms/ports/quake/dopa/pak0.pak  ## shareware\n/home/pi/RetroPie/roms/ports/quake/dopa/pak1.pak  ## registered\n/home/pi/RetroPie/roms/ports/quake/dopa/pak2.pak  ## dopa  The extra episode can now be launched with a launcher script at:  /home/pi/RetroPie/roms/ports/Quake Episode 5 (dopa).sh  With the contents:  #!/bin/bash /opt/retropie/supplementary/runcommand/runcommand.sh  0 _PORT_  quake   /home/pi/RetroPie/roms/ports/quake/dopa/pak0.pak", 
            "title": "Episode 5 - Dimension of the Past"
        }, 
        {
            "location": "/Quake/#references", 
            "text": "https://retropie.org.uk/forum/topic/2431/solved-partly-issue-with-joypad-control-how-to-start-doom-doom2-heretic-and-all-episodes-of-quake-dopa-rogue-hipnotic  https://twitter.com/machinegames/status/746363189768650752", 
            "title": "References"
        }, 
        {
            "location": "/Quake/#quake-iii-arena", 
            "text": "Quake III Arena is the 3rd game in the Quake Series. It differs from the others in the sense that it is all multiplayer.", 
            "title": "Quake III Arena"
        }, 
        {
            "location": "/Quake/#port-ioquake3", 
            "text": "", 
            "title": "Port: ioQuake3"
        }, 
        {
            "location": "/Quake/#controls_1", 
            "text": "Key  Action      Ctrl or Left Mouse Click  Attack    /  Next Weapon    1-9  Weapons    Space  Jump    Up Arrow or W  Walk Forward    Down Arrow or S  Backpedal    Left Arrow  Turn Left    Right Arrow  Turn Right    ALT  Sidestep    PGDN  Look Up    DEL  Look Down    END  Center View    Mouse Movement  Mouse Look    D  Strafe Right    A  Strafe Left    Mouse Scroll Wheel Click  Zoom    C  Crouch    TAB  Stats    T  Chat    F11  Take Screenshot    ESC  Menu", 
            "title": "Controls:"
        }, 
        {
            "location": "/ResidualVM/", 
            "text": "ResidualVM is a game engine for the games Grim Fandango, Escape From Monkey Island, and Myst III: Exile.\n\n\n\n\nEmulator: \nResidualVM\n (EXPERIMENTAL)\n\n\nROMS:\n\n\nSee what files you need \nHERE\n and place them in:\n\n\n/home/pi/RetroPie/roms/residualvm\n\n\n\n\nIt functions very similarly to \nScummVM\n\n\nNotes:\n\n\nFrom the GUI options, select \"software\" for the game renderer.", 
            "title": "ResidualVM"
        }, 
        {
            "location": "/ResidualVM/#emulator-residualvm-experimental", 
            "text": "", 
            "title": "Emulator: ResidualVM (EXPERIMENTAL)"
        }, 
        {
            "location": "/ResidualVM/#roms", 
            "text": "See what files you need  HERE  and place them in:  /home/pi/RetroPie/roms/residualvm  It functions very similarly to  ScummVM", 
            "title": "ROMS:"
        }, 
        {
            "location": "/ResidualVM/#notes", 
            "text": "From the GUI options, select \"software\" for the game renderer.", 
            "title": "Notes:"
        }, 
        {
            "location": "/SDLPoP/", 
            "text": "SDLPoP is an open source port of the game Prince of Persia.\n\n\n\n\nEmulator: \nSDLPoP\n\n\nControls:\n\n\nControlling the kid:\n* left: turn or run left\n* right: turn or run right\n* up: jump or climb up\n* down: crouch or climb down\n* shift: pick up things\n* shift+left/right: careful step\n* home or up+left: jump left\n* page up or up+right: jump right\nYou can also use the numeric keypad.\n\nGamepad equivalents:\n* left/right = left/right\n* A = down\n* B = quit\n* X = shift\n* Y = up\n\nControlling the game:\n* Esc: pause game\n* Space: show time left\n* Ctrl-A: restart level\n* Ctrl-G: save game (on levels 3..13)\n* Ctrl-J: joystick mode (implemented by segrax) / gamepad mode (implemented by Norbert)\n* Ctrl-K: keyboard mode\n* Ctrl-R: return to intro\n* Ctrl-S: sound on/off\n* Ctrl-V: show version\n* Ctrl-Q: quit game\n* Ctrl-L: load game (when in the intro)\n* Alt-Enter: toggle fullscreen\n* F6: quicksave\n* F9: quickload\n\nViewing or recording replays:\n* Ctrl+Tab (in game): start or stop recording\n* Tab (on title screen): view/cycle through the saved replays in the SDLPoP directory\n\nCheats: (Note: Cheats only work if you start the game with the command line option: \nmegahit\n)\n\n* Shift-L: go to next level\n* c: show numbers of current and adjacent rooms\n* Shift-C: show numbers of diagonally adjacent rooms\n* -: less remaining time\n* +: more remaining time\n* r: resurrect kid\n* k: kill guard\n* Shift-I: flip screen upside-down\n* Shift-W: slow falling\n* h: look at room to the left\n* j: look at room to the right\n* u: look at room above\n* n: look at room below\n* Shift-B: toggle hiding of non-animated objects\n* Shift-S: Restore lost hit-point. (Like a small red potion.)\n* Shift-T: Give more hit-points. (Like a big red potion.)\n\nA nice way to start it from the menu is to make a new .sh file for it, so you can decide if you \nlike starting it with cheats or without. Simply make an new \nprince_with_cheats.sh\n file in the folder\n/home/pi/RetroPie/roms/ports and let it change the directory to: /opt/retropie/ports/sdlpop \nbefore starting the game with \n./prince megahit\n.\n\nTroubleshooting / Tweaking / Saving the game:\n\nYou can change the in-game behavior of this game in the following way:\n\nGo to the folder: /opt/retropie/configs/ports/sdlpop\n\nThere should be an file called \nSDLPoP.ini\n. If not, copy the file SDLPoP.ini.def \nover it. When you open this file you can edit some of the configurations of the game, \nlike from which level onward you are allowed to save the game (default = 3). \nThere are many other tweaks possible, the file will explain itself.", 
            "title": "SDLPoP"
        }, 
        {
            "location": "/SDLPoP/#emulator-sdlpop", 
            "text": "", 
            "title": "Emulator: SDLPoP"
        }, 
        {
            "location": "/SDLPoP/#controls", 
            "text": "Controlling the kid:\n* left: turn or run left\n* right: turn or run right\n* up: jump or climb up\n* down: crouch or climb down\n* shift: pick up things\n* shift+left/right: careful step\n* home or up+left: jump left\n* page up or up+right: jump right\nYou can also use the numeric keypad.\n\nGamepad equivalents:\n* left/right = left/right\n* A = down\n* B = quit\n* X = shift\n* Y = up\n\nControlling the game:\n* Esc: pause game\n* Space: show time left\n* Ctrl-A: restart level\n* Ctrl-G: save game (on levels 3..13)\n* Ctrl-J: joystick mode (implemented by segrax) / gamepad mode (implemented by Norbert)\n* Ctrl-K: keyboard mode\n* Ctrl-R: return to intro\n* Ctrl-S: sound on/off\n* Ctrl-V: show version\n* Ctrl-Q: quit game\n* Ctrl-L: load game (when in the intro)\n* Alt-Enter: toggle fullscreen\n* F6: quicksave\n* F9: quickload\n\nViewing or recording replays:\n* Ctrl+Tab (in game): start or stop recording\n* Tab (on title screen): view/cycle through the saved replays in the SDLPoP directory\n\nCheats: (Note: Cheats only work if you start the game with the command line option:  megahit )\n\n* Shift-L: go to next level\n* c: show numbers of current and adjacent rooms\n* Shift-C: show numbers of diagonally adjacent rooms\n* -: less remaining time\n* +: more remaining time\n* r: resurrect kid\n* k: kill guard\n* Shift-I: flip screen upside-down\n* Shift-W: slow falling\n* h: look at room to the left\n* j: look at room to the right\n* u: look at room above\n* n: look at room below\n* Shift-B: toggle hiding of non-animated objects\n* Shift-S: Restore lost hit-point. (Like a small red potion.)\n* Shift-T: Give more hit-points. (Like a big red potion.)\n\nA nice way to start it from the menu is to make a new .sh file for it, so you can decide if you \nlike starting it with cheats or without. Simply make an new  prince_with_cheats.sh  file in the folder\n/home/pi/RetroPie/roms/ports and let it change the directory to: /opt/retropie/ports/sdlpop \nbefore starting the game with  ./prince megahit .\n\nTroubleshooting / Tweaking / Saving the game:\n\nYou can change the in-game behavior of this game in the following way:\n\nGo to the folder: /opt/retropie/configs/ports/sdlpop\n\nThere should be an file called  SDLPoP.ini . If not, copy the file SDLPoP.ini.def \nover it. When you open this file you can edit some of the configurations of the game, \nlike from which level onward you are allowed to save the game (default = 3). \nThere are many other tweaks possible, the file will explain itself.", 
            "title": "Controls:"
        }, 
        {
            "location": "/Solarus/", 
            "text": "Solarus is a game engine for Zeldaesque games.\n\n\n\n\nEmulator: \nSolarus\n (EXPERIMENTAL)\n\n\nROMS\n\n\nGames are already added through the script though extra games can be added manually. \n\n\nControls:\n\n\nKeyboard and Mouse\n\n\nConfiguration\n\n\nSpecify 640X480 video resolution in the \nRuncommand Menu\n to get it to fill your screen instead of sitting at the bottom left corner of your screen.\n\nOr press F11 after launching a Solarus game, it will switch to fullscreen mode and the setting will be saved.", 
            "title": "Solarus"
        }, 
        {
            "location": "/Solarus/#roms", 
            "text": "Games are already added through the script though extra games can be added manually.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Solarus/#controls", 
            "text": "Keyboard and Mouse", 
            "title": "Controls:"
        }, 
        {
            "location": "/Solarus/#configuration", 
            "text": "Specify 640X480 video resolution in the  Runcommand Menu  to get it to fill your screen instead of sitting at the bottom left corner of your screen. \nOr press F11 after launching a Solarus game, it will switch to fullscreen mode and the setting will be saved.", 
            "title": "Configuration"
        }, 
        {
            "location": "/Stratagus/", 
            "text": "Stratagus is a free cross-platform real-time strategy gaming engine. Besides many open source strategy games, it supports extracted datafiles from Warcraft 1, Warcraft 2, and Starcraft 1.\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nRom Folder\n\n\nExtension\n\n\nBIOS\n\n\nController Config\n\n\n\n\n\n\n\n\n\n\nStratagus\n\n\nstratagus\n\n\n.data\n\n\nnone\n\n\nmouse+keyboard only\n\n\n\n\n\n\n\n\nEmulator: \nStratagus\n\n\nROMS\n\n\nStratagus runs games from properly configured game directories. For the Warcraft and Starcraft titles, run the appropriate extraction tools to extract the original data into a Stratagus game folder. You can get the extraction tools from https://github.com/Wargus/wargus for Warcraft 2, https://github.com/Wargus/war1gus for Warcraft 1, https://github.com/Wargus/stargus for Starcraft. Copy the extracted folder to the roms directory, adding a \".data\" to the folder name.\n\n\nPlace your folders of game files in\n\n\n/home/pi/RetroPie/roms/stratagus\n\n\n\n\nAfter you've added you files into the stratagus rom folder, the folder names appear in the selection UI and you can start them from there directly. All graphics settings are done in-game.\n\n\nHow to install Warcraft II using Wargus for Stratagus\n\n\nWargus is a Warcraft II Mod that allows you to play Warcraft II with the Stratagus engine. The game looks and sounds exactly like Warcraft II.\n\n\nNote: this will not work with the Battle.net Edition of Warcraft II\n\n\nWindows XP users might have trouble extracting the data needed from the Warcraft II installation location.\nhttp://wargus.github.io/faq.html#winxp\n\n\nFirst, you don't get it to work just by copying your Warcraft II CD over to your Raspberry Pi. You actually run the Wargus installer from either Windows, Mac OS X or Linux (not sure if it works on an ARM Linux). I did the Windows route and this is how I did it:\n\n\n\n\nGo to the \nofficial Wargus website\n and download the Windows version of Wargus v2.4.1 or newer (there is also a \nYouTube video\n showing you how to install this)\n\n\nNow install Wargus and the installation will ask for your Warcraft II data so point it to your CD (or if you have your data copied to your hard drive then point to that directory)\n\n\n(Optional) if you have the Expansion Pack \"Beyond the Dark Portal\" then point the installer to that data (this can be skipped if you don't have the Expansion Pack)\n\n\nAt the end of the install you can go ahead and launch Warcraft II to make sure it works and if it does then we're ready to start copying data over to your Raspberry Pi\n\n\nIn Windows navigate to \"C:\\Program Files (x86)\\Wargus\" or \"C:\\Program Files\\Wargus\" and only copy the sub-directories to \n/home/pi/RetroPie/roms/stratagus/warcraft2.data\n on your Raspberry Pi\n\n\n\n\nThe sub-directories that need to be copied are as followed:\n\n\n\n\ncampaigns\n\n\ngraphics\n\n\nmaps\n\n\nmusic\n\n\nscripts\n\n\nsounds\n\n\nvideos\n\n\n\n\nWargus/Warcraft II settings file Location for Stratagus\n\n\n/home/pi/.stratagus/wc2/preferences.lua\n\n\nStratagus Hotkeys\n\n\n\n\n\n\n\n\nHotkeys\n\n\nAction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF1\n\n\nHelp Menu\n\n\n\n\n\n\n\n\n\n\nCtrl + H\n\n\nHelp Menu\n\n\n\n\n\n\n\n\n\n\nAlt + H\n\n\nHelp Menu\n\n\n\n\n\n\n\n\n\n\nShift + F2\n\n\nSave Map Location 1\n\n\n\n\n\n\n\n\n\n\nShift + F3\n\n\nSave Map Location 2\n\n\n\n\n\n\n\n\n\n\nShift + F4\n\n\nSave Map Location 3\n\n\n\n\n\n\n\n\n\n\nF2\n\n\nRecall Map Location 1\n\n\n\n\n\n\n\n\n\n\nF3\n\n\nRecall Map Location 2\n\n\n\n\n\n\n\n\n\n\nF4\n\n\nRecall Map Location 3\n\n\n\n\n\n\n\n\n\n\nF5\n\n\nGame Options Menu\n\n\n\n\n\n\n\n\n\n\nF6\n\n\nSpeed Options\n\n\n\n\n\n\n\n\n\n\nF7\n\n\nSound Options\n\n\n\n\n\n\n\n\n\n\nF8\n\n\nPreferences\n\n\n\n\n\n\n\n\n\n\nF9\n\n\nDiplomacy\n\n\n\n\n\n\n\n\n\n\nF10\n\n\nGame Menu\n\n\n\n\n\n\n\n\n\n\nF11\n\n\nSave\n\n\n\n\n\n\n\n\n\n\nF12\n\n\nLoad\n\n\n\n\n\n\n\n\n\n\nCtrl + X\n\n\nExit Stratagus\n\n\n\n\n\n\n\n\n\n\nAlt + X\n\n\nExit Stratagus\n\n\n\n\n\n\n\n\n\n\nCtrl + Q\n\n\nQuit to Menu\n\n\n\n\n\n\n\n\n\n\nAlt + Q\n\n\nQuit to Menu\n\n\n\n\n\n\n\n\n\n\nCtrl + R\n\n\nRestart Scenario\n\n\n\n\n\n\n\n\n\n\nCtrl + M\n\n\nToggle Music\n\n\n\n\n\n\n\n\n\n\nCtrl + S\n\n\nToggle Sound\n\n\n\n\n\n\n\n\n\n\nAlt + C\n\n\nCenter Map on Currently Selected Unit(s)\n\n\n\n\n\n\n\n\n\n\nTab\n\n\nToggle Terrain\n\n\n\n\n\n\n\n\n\n\n+\n\n\nIncrease Game speed\n\n\n\n\n\n\n\n\n\n\n-\n\n\nDecrease Game speed", 
            "title": "Stratagus"
        }, 
        {
            "location": "/Stratagus/#emulator-stratagus", 
            "text": "", 
            "title": "Emulator: Stratagus"
        }, 
        {
            "location": "/Stratagus/#roms", 
            "text": "Stratagus runs games from properly configured game directories. For the Warcraft and Starcraft titles, run the appropriate extraction tools to extract the original data into a Stratagus game folder. You can get the extraction tools from https://github.com/Wargus/wargus for Warcraft 2, https://github.com/Wargus/war1gus for Warcraft 1, https://github.com/Wargus/stargus for Starcraft. Copy the extracted folder to the roms directory, adding a \".data\" to the folder name.  Place your folders of game files in  /home/pi/RetroPie/roms/stratagus  After you've added you files into the stratagus rom folder, the folder names appear in the selection UI and you can start them from there directly. All graphics settings are done in-game.", 
            "title": "ROMS"
        }, 
        {
            "location": "/Stratagus/#how-to-install-warcraft-ii-using-wargus-for-stratagus", 
            "text": "Wargus is a Warcraft II Mod that allows you to play Warcraft II with the Stratagus engine. The game looks and sounds exactly like Warcraft II.  Note: this will not work with the Battle.net Edition of Warcraft II  Windows XP users might have trouble extracting the data needed from the Warcraft II installation location.\nhttp://wargus.github.io/faq.html#winxp  First, you don't get it to work just by copying your Warcraft II CD over to your Raspberry Pi. You actually run the Wargus installer from either Windows, Mac OS X or Linux (not sure if it works on an ARM Linux). I did the Windows route and this is how I did it:   Go to the  official Wargus website  and download the Windows version of Wargus v2.4.1 or newer (there is also a  YouTube video  showing you how to install this)  Now install Wargus and the installation will ask for your Warcraft II data so point it to your CD (or if you have your data copied to your hard drive then point to that directory)  (Optional) if you have the Expansion Pack \"Beyond the Dark Portal\" then point the installer to that data (this can be skipped if you don't have the Expansion Pack)  At the end of the install you can go ahead and launch Warcraft II to make sure it works and if it does then we're ready to start copying data over to your Raspberry Pi  In Windows navigate to \"C:\\Program Files (x86)\\Wargus\" or \"C:\\Program Files\\Wargus\" and only copy the sub-directories to  /home/pi/RetroPie/roms/stratagus/warcraft2.data  on your Raspberry Pi   The sub-directories that need to be copied are as followed:   campaigns  graphics  maps  music  scripts  sounds  videos", 
            "title": "How to install Warcraft II using Wargus for Stratagus"
        }, 
        {
            "location": "/Stratagus/#warguswarcraft-ii-settings-file-location-for-stratagus", 
            "text": "/home/pi/.stratagus/wc2/preferences.lua", 
            "title": "Wargus/Warcraft II settings file Location for Stratagus"
        }, 
        {
            "location": "/Stratagus/#stratagus-hotkeys", 
            "text": "Hotkeys  Action        F1  Help Menu      Ctrl + H  Help Menu      Alt + H  Help Menu      Shift + F2  Save Map Location 1      Shift + F3  Save Map Location 2      Shift + F4  Save Map Location 3      F2  Recall Map Location 1      F3  Recall Map Location 2      F4  Recall Map Location 3      F5  Game Options Menu      F6  Speed Options      F7  Sound Options      F8  Preferences      F9  Diplomacy      F10  Game Menu      F11  Save      F12  Load      Ctrl + X  Exit Stratagus      Alt + X  Exit Stratagus      Ctrl + Q  Quit to Menu      Alt + Q  Quit to Menu      Ctrl + R  Restart Scenario      Ctrl + M  Toggle Music      Ctrl + S  Toggle Sound      Alt + C  Center Map on Currently Selected Unit(s)      Tab  Toggle Terrain      +  Increase Game speed      -  Decrease Game speed", 
            "title": "Stratagus Hotkeys"
        }, 
        {
            "location": "/Super-Mario-War/", 
            "text": "Super Mario War V. 1.8\n\n\n2004-2008 (c) Florian Hufsky, Two52, and many others.\n\n\nLast ReadMe update: February 9 2016\n\n\nOfficial Super Mario War Website\n\n\nOfficial Super Mario War Forums\n\n\nOfficial Fan-Made Content Website\n\n\n\n\nA quick note\n\n\nSuper Mario War was developed by Florian Hufsky, Two52 and many more contributors. For a complete list of all these wonderful people, please see the file THANKS.txt which was included in this distribution. A list of changes to the game can also be found in WHATSNEW.txt, which should be in the same place.\n\n\nIf you create a map or some other content that you would like to share, or if you would like to share your comments in general, please visit the \nSuper Mario War website\n and post a message in our \nforums\n. New content is posted all the time, and your feedback and user-content is always welcome and appreciated, so please come visit!\n\n\nAlso, we have an official outlet for fan-made content like maps, music packs, skins, announcers, etc. Head on over to the \nSuper Mario War Stuff\n website. It's full of the latest content released by fans of the game. Don't like how the menu looks? Try downloading a new menu pack! Tired of playing the same maps over and over? There are hundreds more available! More skins? We've got tons! Need somewhere to post content of your own? That's what it's there for! Take a moment and check it out!\n\n\nGetting Started\n\n\n\n\nSuper Mario War is a game for up to four players with many different modes of play. The basic goal of the game is to be the last player standing, and to accomplish this goal you must jump on your opponents' heads to kill them. There are many Mario-themed items you can use to help you kill your opponents, as well. In addition, there are several variations on this basic gameplay mechanic which you can try, such as Chicken, Capture The Flag, and so on. Plus, for those who enjoy customization, there are several aspects of the game which you can tweak to your liking through the Options menus, and if you like, you can make your own maps, skins, and other custom content to use (or download others' to use), too!\n\n\nThis section of the manual explains how to navigate the game's menus, and contains a short explanation of Tournaments and Tours as well. Please note that all of the controls listed in this section are defaults, and can be reconfigured if you like.\n\n\nThe Main Menu\n\n\n\n\nFrom this menu, you can access everything else in the game.\n\n\n\n\nStart\n will take you to the Match Type Menu (see below). \n\n\nPlayers\n allows you to change players between Player (human), Bot (computer), and None. You can't have less than two players active at any one time.\n\n\nOptions\n takes you to the Options menu. For more information, check its section towards the end of this manual.  \n\n\nControls\n lets you configure the players' control schemes to your liking. For more info, check the Controls section of this manual.\n\n\nExit\n causes the game to exit.\n\n\n\n\nMatch Type Menu\n\n\n\n\nFrom this screen, you can choose which type of match you'd like to play.\n\n\n\n\nYou can change the type of match by selecting the Match option and pressing Enter.   \n\n\n(If you're using a joystick, press Jump to lock in your selection.)  \n\n\nThe match choices available are Single Game, Tournament, Tour, and the new World Map mode.  \n\n\nOnce the Match option has been selected, you can choose the type of match with Left and Right. \n\n\nAfter you've decided on a match type, select Start and press Enter (or Jump using a joystick) to go to the Team and Character Selection Menu.\n\n\n\n\nTeam and Character Selection\n\n\n\n\nFrom this screen, you can configure who is using which character and is on which team.\n\n\n\n\nYou can select what character you'd like to be, out of all the skins you have on your machine, with Up and Down.   \n\n\nYou can select what team you want to be on with Left and Right.   \n\n\nIf you want to have the game select a skin for you at random, press Up and Down together (or if using a joystick, press the Random button).\n\n\nIf you want to have a different random skin at the beginning of each match, without being able to see it beforehand, press Left and Right together (or with a joystick, press the Fast-Scroll and Random buttons together), which will change your skin into a flashing letter R.   \n\n\nPress your Turbo key to lock in your selection, unless you're Player 1, who uses Enter. (If you're using a joystick, press Jump to lock in your selection, no matter which player you are.) \n\n\nAfter all players have locked in, you can press Enter on this screen to start your selected match type.\n\n\n\n\nSingle Game Menu\n\n\n\n\nFrom this menu, you can select your game mode, select the map you wish to use, change various mode settings, and tag your maps for easy selection. (When playing a Tour or World Map, all options on this screen, besides Start, are disabled.)\n\n\n\n\nStart\n starts the game.   \n\n\nMode\n allows you to change game modes. For info on these, please refer to the Game Modes section of this manual.   \n\n\nLives/Kills/Time/Etc.\n allows you to change the current game mode's basic parameter (i.e. the game length).  \n\n\nMap\n allows you to change the map you want to use. You can press Left or Right to pick another map, or hold Left Shift and press Left or Right to go forward or backward 10 maps at a time. You can also repeatedly press a letter or a number to cycle through maps whose names start with it, or quickly type in part of a map's name to search for it.  \n\n\nFilters\n allows you to select maps that only meet certain criteria. You can select one or more categories (such as whether or not the map contains moving platforms) and the game will only give you maps that meet all the criteria established. The bottom category, Simple, can be used as a custom filter by selecting the green question mark icon, which will give you a thumbnail view (see below) of all the maps. From there, maps can be toggled on (signified by a little coin) and off.\n\n\nThumbs\n allows you to view many maps at once with a \"thumbnail\"-style view. To view other pages, scroll up or down off the screen, or hold Left Shift and press Up or Down.\n\n\n\n\nPlaying the Game\n\n\n\n\nThe main goal of the game is to stomp on your opponents' heads to kill them, although depending on the map you're playing on, you may be able to kill them in other ways, such as with items. There may also be additional rules or a different way of winning, depending on the mode you are playing; for information on these, you can check the Game Modes section of this manual. For information on the controls you'll be using to play the game, check out the section on Controls, below. And to learn about the different items and map elements you can use to turn the tables on your opponents, take a look at the Items and Special Blocks sections, towards the middle of the manual.\n\n\nTournaments, Tours, and World Maps\n\n\n\n\nIn a Tournament, players play games until one player has amassed a certain number of wins. The number of the Tournament determines how many wins are required (so, if you pick Tournament 4, you have to win four times). Each time a player wins, they will receive an icon on the scoreboard (first picture, above). This icon will be representative of the mode played.\n\n\nIn a Tour, players play a series of predetermined games (\"tour stops\"). At the end of each game, players receive points based on how well they placed, and icons will be displayed on the scoreboard (second picture, above) to show just how each player placed in that round. Tours can be created by making a text file in the game's Tours subdirectory, following the correct format (check out simple.txt for more info). It is possible to designate how valuable each individual tour stop is (this information is displayed along the top of the scoreboard - see the screenshot), as well as which tour stops grant a bonus item to the winner.\n\n\nIn a World Map, a random player is given control of the board to start. Players navigate the map and play predetermined games to compete for the best score. To check and/or play a game on the map, press Turbo on the game's tile. (Enter for Player 1.) The screen preceding a game shows the name of the Map Stop, map, mode, and goal. Also shown are any items rewarded after the game and the point value for the Map Stop. The winner of the game gains control of the board. Items gained from Mushroom Houses, game rewards, etc., can be accessed by pressing Use Item. To use an item in your inventory, select it and press Turbo. \n\n\n\n\nFor a list of the World Map items, take a look at the Items and Special Blocks section towards the middle of the manual. Mushroom Houses can be found on many World Maps, so make good use of them! Each Mushroom House can hold up to five items to choose from. The items may be in order, or they may be random, depending on how it's set up in the world's txt file. To open a chest, simply stand in front of it and press Turbo.\n\n\n\n\nIn addition to predetermined games and Mushroom Houses, there are vehicle tiles, which move after every game or Mushroom House. Upon landing on one, it will automatically start the game set to it. In some maps, there are bridges that rise and lower with each game, blocking players from travelling across. There are also warp pipes that can be used to travel. Along with those, there are locked doors, which can be opened with a key obtained through one of the games on the map. The World Map match ends when the game marked \"End Stage\" has been played. There can be more than one of these per map.\n\n\nAt the end of a Tournament, or after every game within the Tournament if that option is set (see the Options section towards the end of this manual), the winner will get a chance to spin the bonus wheel to acquire an item that they can use in the next game or games. However, in Tours, the bonus wheel will only appear in places where the tour's creator designates it, regardless of any current settings. Tour stops with this opportunity are represented on the scoreboard as small winged yellow boxes.\n\n\nControls\n\n\nThe following are the default controls. Controls can be configured within the Controls menu, accessible from the main menu. From there, you can also switch your input devices to joysticks (see the next section for information on joystick controls).\n\n\nGame controls\n\n\n\n\n\n\n\n\nAction\n\n\nPlayer 1\n\n\nPlayer 2\n\n\nPlayer 3\n\n\nPlayer 4\n\n\n\n\n\n\n\n\n\n\nLeft\n\n\nLeft Arrow\n\n\nA\n\n\nG\n\n\nL\n\n\n\n\n\n\nRight\n\n\nRight Arrow\n\n\nD\n\n\nJ\n\n\n'\n\n\n\n\n\n\nJump\n\n\nUp Arrow\n\n\nW\n\n\nY\n\n\nP\n\n\n\n\n\n\nDown\n\n\nDown Arrow\n\n\nS\n\n\nH\n\n\n;\n\n\n\n\n\n\nTurbo\n\n\nR. Ctrl\n\n\nE\n\n\nU\n\n\n[\n\n\n\n\n\n\nUse Item\n\n\nR. Shift\n\n\nQ\n\n\nT\n\n\nO\n\n\n\n\n\n\nPause\n\n\nEnter\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\nExit\n\n\nEsc\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\n\n\nPress \nLeft\n or \nRight\n to move left or right.   \n\n\nPress \nJump\n to jump. Press \nDown\n to jump down through certain platforms.   \n\n\nPress \nTurbo\n to fire your weapon or to explode if you are a Bob-Omb. Hold \nTurbo\n and press \nLeft\n or \nRight\n to run. While running, you can pick up shells and blue blocks that are not moving. To throw these items forward, release the Turbo key. To drop shells without throwing them, hold \nDown\n and release the Turbo key.   \n\n\nPress \nUse Item\n to use whatever item is stored in your Item box. For more information on items, see their section below.  \n\n\nPress \nPause\n to pause the game. Press it a second time to resume.   \n\n\nPress \nExit\n to pause the game and bring up a dialog box. From there, you can either resume play or quit the game and return to the Single Game Menu or Scoreboard if in a Tournament, Tour, or World Map.   \n\n\nOnce the game has ended and the victory fanfare has played, pressing either \nPause\n or \nExit\n will exit the game and return you to the Game Selection menu (or to the Scoreboard if in a Tournament, Tour, or World Map).\n\n\n\n\nMenu controls\n\n\n\n\n\n\n\n\nAction\n\n\nPlayer 1\n\n\nPlayer 2\n\n\nPlayer 3\n\n\nPlayer 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUp\n\n\nUp Arrow\n\n\nW\n\n\nY\n\n\nP\n\n\n\n\n\n\n\n\n\n\nDown\n\n\nDown Arrow\n\n\nS\n\n\nH\n\n\n:\n\n\n\n\n\n\n\n\n\n\nLeft\n\n\nLeft Arrow\n\n\nA\n\n\nG\n\n\nL\n\n\n\n\n\n\n\n\n\n\nRight\n\n\nRight Arrow\n\n\nD\n\n\nJ\n\n\n'\n\n\n\n\n\n\n\n\n\n\nSelect\n\n\nEnter\n\n\nE\n\n\nU\n\n\n[\n\n\n\n\n\n\n\n\n\n\nCancel\n\n\nEscape\n\n\nQ\n\n\nT\n\n\nO\n\n\n\n\n\n\n\n\n\n\nRandom\n\n\nSpace Bar\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\n\n\nFast Scroll\n\n\nL. Shift\n\n\nn/a\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\n\n\n\n\n\n\nOnly Player 1's menu controls may be used in most menus.\n\n\nUse \nUp\n, \nDown\n, \nLeft\n, and \nRight\n to navigate through menu choices, map thumbnails, etc.\n\n\nPress \nSelect\n to select options and confirm choices.\n\n\nPress \nCancel\n to return to the previous menu.\n\n\nTo change a configurable choice, highlight it and press \nSelect\n. Use \nLeft\n or \nRight\n to cycle between available options, or press \nRandom\n to have the computer select an available option at random. Press \nSelect\n or \nCancel\n to lock in your selection. When using a slider, like the ones on the Item Selection screen, you can also hold \nFast Scroll\n and press \nLeft\n or \nRight\n to jump from to one end or the other.  \n\n\nOn the main menu, to change player settings, press \nLeft\n or \nRight\n to select a player, and \nUp\n or \nDown\n to change between Player, Bot, and Off.   \n\n\nOn the Player Select screen, press \nUp\n or \nDown\n to select a skin to use. Press \nLeft\n or \nRight\n to select the team you want to be on. Press \nSelect\n to lock in your choice. If you want to cancel your selection and pick something else, press \nCancel\n. Once everyone has locked in their choices, have Player 1 press Select to advance to the Game Select menu.   \n\n\nWhen selecting a skin, press \nUp\n and \nDown\n together to have the computer pick one for you at random. Press \nLeft\n and \nRight\n together to make the computer pick a skin for you at random at the beginning of each round, even in the middle of a Tournament or Tour.  \n\n\nWhen selecting a map, hold \nFast Map\n and press \nLeft\n or \nRight\n to go 10 maps at a time. When viewing maps by thumbnails, hold \nFast Scroll\n and press \nUp\n or \nDown\n to quickly scroll through pages.\n\n\n\n\nPC - Joystick\n\n\nWhen using joysticks, it is important to note that there are a couple of differences in some basic controls. It is also important to note that the default settings for inputs are, most likely, \nnot\n the ones you want, since every joystick internally numbers and names its buttons differently (for example, on Joystick A, \"button 1\" might be the A button, whereas on Joystick B it's the left trigger). So when you set the game up to use a joystick, be sure to configure the buttons to something you like. (For this reason, the default controls will not be listed here.)\n\n\nThe following are the changes to the controls when using a joystick. For information on controls not listed here, see the Keyboard section.\n\n\n\n\nIn-game, to jump down through platforms, you have to hold \nDown\n and press \nJump\n, instead of just pressing Down. \n\n\nAll players with joysticks have \nRandom\n and \nFast Map\n menu controls. In addition, all players with joysticks have control in menus, not just Player 1.\n\n\nWhen selecting skins, to have the game select one at random, you must press \nRandom\n instead of Up and Down together. Similarly, instead of pressing Left and Right toegether to get a random skin for each match, you have to hold \nFast Map\n and press \nRandom\n.\n\n\n\n\nXbox\n\n\nWhen playing on the Xbox, each player is \"locked in\" to their joystick - in other words, Player 1 will always use the joystick plugged into the first port, etc.\n\n\nThe following are the default controls. All controls can be reconfigured via the Controls menu, accessible from the main menu.\n\n\nGame controls\n\n\nAll Players\n\n\n\n\n\n\n\n\nAction\n\n\nControl\n\n\n\n\n\n\n\n\n\n\nLeft\n\n\nLeft (D-Pad)\n\n\n\n\n\n\nRight\n\n\nRight (D-Pad)\n\n\n\n\n\n\nJump\n\n\nA\n\n\n\n\n\n\nDown\n\n\nDown (D-Pad)\n\n\n\n\n\n\nTurbo\n\n\nX\n\n\n\n\n\n\nUse Item\n\n\nY\n\n\n\n\n\n\nPause\n\n\nStart\n\n\n\n\n\n\nExit\n\n\nBack\n\n\n\n\n\n\n\n\n\n\nPress \nLeft\n or \nRight\n to move left or right. \n\n\nPress \nJump\n to jump. Hold \nDown\n and press \nJump\n to jump down through certain platforms.   \n\n\nPress \nTurbo\n to fire your weapon or to explode if you are a Bob-Omb. Hold \nTurbo\n and press \nLeft\n or \nRight\n to run. While running, you can pick up shells and blue blocks that are not moving. To throw these items forward, release the Turbo key. To drop shells without throwing them, hold \nDown\n and release the Turbo key.   \n\n\nPress \nUse Item\n to use whatever item is stored in your Item box. For more information on items, see their section below.*   Press \nPause\n to pause the game. Press it a second time to resume.   \n\n\nPress \nExit\n to pause the game and bring up a dialog box. From there, you can either resume play or quit the game and return to the Game Selection menu or Scoreboard if in a Tournament, Tour, or World Map.  \n\n\nOnce the game has ended and the victory fanfare has played, pressing either \nPause\n or \nExit\n will exit the game and return you to the Game Selection menu (or to the Scoreboard if in a Tournament, Tour, or World Map).\n\n\n\n\nMenu controls\n\n\nAll Players\n\n\n\n\n\n\n\n\nAction\n\n\nControl\n\n\n\n\n\n\n\n\n\n\nUp\n\n\nUp (D-Pad)\n\n\n\n\n\n\nDown\n\n\nDown (D-Pad)\n\n\n\n\n\n\nLeft\n\n\nLeft (D-Pad)\n\n\n\n\n\n\nRight\n\n\nRight (D-Pad)\n\n\n\n\n\n\nSelect\n\n\nA\n\n\n\n\n\n\nCancel\n\n\nBack\n\n\n\n\n\n\nRandom\n\n\nX\n\n\n\n\n\n\nFast Scroll\n\n\nY\n\n\n\n\n\n\n\n\n\n\nUse \nUp\n, \nDown\n, \nLeft\n, and \nRight\n to navigate through menu choices, map thumbnails, etc.\n\n\nPress \nSelect\n to select options and confirm choices.*   Press \nCancel\n to return to the previous menu.\n\n\nTo change a configurable choice, highlight it and press \nSelect\n. Use \nLeft\n or \nRight\n to cycle between available options, or press \nRandom\n to have the computer select an available option at random. Press \nSelect\n or \nCancel\n to lock in your selection. When using a slider, like the ones on the Item Selection screen, you can also hold \nFast Scroll\n and press \nLeft\n or \nRight\n to jump from to one end or the other.\n\n\nOn the main menu, to change player settings, press \nLeft\n or \nRight\n to select a player, and \nUp\n or \nDown\n to change between Player, Bot, and Off.\n\n\nOn the Player Select screen, press \nUp\n or \nDown\n to select a skin to use. Press \nLeft\n or \nRight\n to select the team you want to be on. Press \nSelect\n to lock in your choice. If you want to cancel your selection and pick something else, press \nCancel\n. Once everyone has locked in their choices, press Select to advance to the Game Select menu.\n\n\nWhen selecting a skin, press \nRandom\n to have the computer pick one for you at random. Hold \nFast Scroll\n and press \nRandom\n to make the computer pick a skin for you at random at the beginning of each round, even in the middle of a Tournament or Tour.*   When selecting a map, hold \nFast Scroll\n and press \nLeft\n or \nRight\n to go 10 maps at a time. When viewing maps by thumbnails, hold \nFast Scroll\n and press \nUp\n or \nDown\n to quickly scroll through pages.\n\n\n\n\nGame Modes\n\n\nThere are many different ways to play Super Mario War. Each one is a little different than all the others, and each one requires different strategies. In addition, some modes have additional options that you can use to customize your game further. In the listings of possible options below, the defaults are shown in bold.\n\n\nAn option common to all modes (and subsequently not listed under each one) is the ability to set the basic parameter to \"Unlimited\", or Free Play.\n\n\nClassic\n\n\nThis is the original Mario War game where each player starts with X lives and the last player with any lives left is the winner. Touching a hazard (such as spikes) causes you to lose a life; collecting a 1UP mushroom gives you an extra life.\n\n\nBasic Parameter: \nLives\n (5 to 100 by 5s, \n10\n default)\n\n\nAdditional Parameters:\n\n\n\n\nOn Kill\n (whether you respawn upon death):\nRespawn\n default, Shield\n\n\n\n\nFrag Limit\n\n\nThis is the standard frag limit game where the first player to kill X players wins. Dying on a hazard causes you to lose a frag; collecting a 1UP mushroom gives you an extra frag.\n\n\nBasic Parameter: \nKills\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nOn Kill\n (whether you respawn upon death):\nRespawn\n default, Shield\n\n\nScoring\n (what type of kills count): \nAll Kills\n default, Push Kills Only\n\n\n\n\nTime Limit\n\n\nThis is a timed game played to the number of seconds you select. The player with the most frags at the end of this time is the winner. Dying on a hazard causes you to lose a frag; collecting a 1UP mushroom gives you an extra frag.\n\n\nBasic Parameter: \nTime\n (30 to 600 by 30s, \n60\n default)\n\n\nAdditional Parameters:\n\n\n\n\nOn Kill\n (whether you respawn upon death):\nRespawn\n default, Shield\n\n\nScoring\n (what type of kills count): \nAll Kills\n default, Push Kills Only*   \n\n\nExtra Time Slider\n (how often an extra time powerup appears from item blocks): 0 to 20 (default of ?)\n\n\n\n\nJail\n\n\nThis mode is similar to Frag Limit, but with a couple of modifications. Each player you kill in this mode will spawn in jail. When a player is in jail, their movement is slowed down and their jumping ability is hampered. If all the players on other teams are jailed, you earn extra points and everyone (both on your team and other teams) is freed. (This bonus is disabled in a 1v1 match, however, due to complete pointlessness.) If a player on your team tags you while in jail, you are freed. You are also freed if you spend enough time in jail.\n\n\nBasic Parameter: \nKills\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nStyle\n (jailed player behavior): \nFree For All\n default, Classic, Owned\n\n\nFree Timer\n (# of seconds to get out of jail): None, 5, 10, 15, \n20\n, 25, 30, 35, 40, 45, 50, 55, 60\n\n\nTag Free\n (whether you can tag your teammates to free them): \nOn\n, Off\n\n\nJail Key Slider\n (how often a jail key powerup appears from item blocks): 0 to 20 (default of ?)\n\n\n\n\nCoin Collection\n\n\nThis game isn't about killing other players, it is about collecting coins. One or more coins will appear somewhere on the map. If someone grabs a coin, or if nobody can get to one within a certain amount of time, a new one will appear somewhere else. The first player to collect X coins wins. Whether dying has an effect can be set in this mode's options, and collecting a 1UP counts as collecting a coin.\n\n\nBasic Parameter: \nCoins\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nPenalty\n (whether there is a -1 penalty for death): On, \nOff\n\n\nQuantity\n (how many coins will appear at once): \n1\n, 2, 3, 4, 5\n\n\n\n\nStomp\n\n\nIn this mode, Goombas, Cheep Cheeps, Green and Red Koopas, Spinies, Buzzy Beetles, Paragoombas, and Green and Red Parakoopas will randomly spawn; the goal is to stomp or shoot as many as you can. The first player to kill X enemies wins. Stomping other players does nothing; neither does getting killed on hazards. Collecting a 1UP counts as an extra kill.\n\n\nBasic Parameter: \nKills\n (10 to 200 by 10s, \n10\n default)\n\n\nAdditional Parameters:\n\n\n\n\nRate\n (how often, in general, enemies appear): Very Slow, Slow, \nModerate\n, Fast, Very Fast\n\n\nGoomba, Koopa, Cheep Cheep, Red Koopa, Spiny, Buzzy Beetle, Paragoomba, Parakoopa, and Red Parakoopa Sliders\n (comparative rates of each enemy appearing): 0 to 10 each (defaults of 1, 1, 2, ?, ?, ?, ?, ?, and ? respectively)\n\n\n\n\nYoshi's Eggs\n\n\nIn this mode, up to 16 colored Yoshis and up to 16 bouncy little spotted eggs will randomly spawn. Players can pick the eggs up by holding the Turbo button and bring it back to a Yoshi of that color to gain a point. The first person to return X eggs to Yoshi wins the game. If you die, of course, you will lose the egg; collecting a 1UP gives you an additional point. If an egg is not grabbed for a long enough period of time or it explodes, it will move to another random location.\n\n\nBasic Parameter: \nEggs\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nEgg and Yoshi Sliders\n (how many of each color egg and Yoshi will appear at once): 0 to 4 each (defaults of ?, ?, ?, ?, ?, ?, ?, and ? respectively)\n\n\nExplosion Timer\n (# of seconds before eggs explode): \nOff\n, 3, 5, 8, 10, 15, 20\n\n\n\n\nCapture The Flag\n\n\nIn this mode, each team has a base and a flag. The goal is to protect your flag from being stolen and at the same time steal other teams' flags and bring them back to your base. The first team to return X enemy flags to their base wins. You can also bring your own flags back to your base if you can retrieve them from an opponent. Collecting a 1UP counts as having collected an enemy flag; dying in any way has no effect on your score.\n\n\nBasic Parameter: \nFlags\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nSpeed Slider\n (for adjusting the speed of the bases' movement): 0 to 8 (default of 0)\n\n\nTouch Return\n (whether you can return your own flag to base just by touching it): On, \nOff\n\n\nPoint Move\n (whether your base moves after you score): \nOn\n, Off\n\n\nAuto Return\n (seconds before your flag returns itself): None, 5, 10, 15, \n20\n, 25, 30, 35, 40, 45, 50, 55, 60\n\n\nNeed Home\n (whether your flag has to be in the base for you to score): On, \nOff\n\n\nCenter Flag\n (whether you have to steal other teams' flags or return a single flag to your base): On, \nOff\n\n\n\n\nChicken\n\n\nIn this mode, the first person to kill another person will turn into the chicken. The player that is the chicken will constantly rack up points. The first player to X points wins. Dying on spikes will cause you to stop being the chicken, if you are; collecting a 1UP mushroom will give you 10 points no matter who you are. Killing another player while you're the chicken will also give you a bonus of 5 points.\n\n\nBasic Parameter: \nPoints\n (50 to 1000 by 50s, \n200\n default)\n\n\nAdditional Parameters:\n\n\n\n\nShow Target\n (whether an extra crosshair is displayed around the chicken): \nOn\n, Off\n\n\nChicken Glide\n (whether the chicken has a floating ability): On, \nOff\n\n\n\n\nTag\n\n\nTag is essentially the opposite of Chicken mode. At the start, one player will randomly be chosen as the tagged player (they will turn bright green with a white border). It is the job of the tagged one to kill (or touch) somebody else to transfer the tag. The tagged player gets a speed boost to help him catch the other players. When you're the tagged player, you'll constantly be losing points. When you hit 0, you are removed from the game and the player with the highest points will then become tagged. Being killed or killing yourself takes 5 points off your score and collecting a 1UP mushroom restores 10 points.\n\n\nBasic Parameter: \nPoints\n (50 to 1000 by 50s, \n200\n default)\n\n\nAdditional Parameters:\n\n\n\n\nTouch Tag\n (whether you can transfer the tag by just touching): \nOn\n, Off\n\n\n\n\nStar\n\n\nIn this mode, there will either be a Ztar, a Shine Sprite, or Multi Stars, depending on how the options are set. One player will be designated to be the owner of one of these objects, and if other players touch it, they will steal the object's ownership status. There is also a timer that gradually counts down.\n\n\n\n\nIf the object in play is a Ztar, whoever has it when the clock hits 0 will lose a life. The clock will reset, and the same person will own the Ztar next time. Once a player is eliminated, the Ztar will go to the next player who has the most lives remaining (chosen at random if there is a tie). If you own the Ztar, you should try to hit other people with it (either by tagging or by throwing) so that they will take ownership.*   \n\n\nIf the object in play is a Shine, whoever \ndoesn't\n have it when the clock hits 0 will lose a life. The clock will reset, and the Shine will change owners to whoever has the least number of lives remaining (chosen at random if there is a tie). If you own the Shine, you should try to keep it away from other players so that they can't take ownership.*   \n\n\nIf the objects in play are Multi Stars, all but one player will have ownership of a colored star. Whoever is left without a star when the clock hits 0 will lose a life. The clock will reset, and whoever has the most lives will lose ownership of their star. If you own a Multi Star, you should try to keep it away from the player without one.*   \n\n\nIn all three cases, if the object in play stays out of its owner's hands for too long, it will warp right to them so they can start using it/keeping it away again.\n\n\n\n\nDying in any way other than from the countdown ending has no effect on your score. It's also important to know that in this mode, since the number of lives you start with is quite small, and extra lives are very valuable, 2UPs and 3UPs are only worth 1 extra life, and 5UPs are worth only 2.\n\n\nBasic Parameter: \nLives\n (1 to 20, \n5\n default)\n\n\nAdditional Parameters:\n\n\n\n\nTime\n (# of seconds on the timer): 5, 10, 15, 20, 25, \n30\n, 35, 40, 45, 50, 55, 60\n\n\nStar Type\n (which object is used): \nZtar\n, Shine, Multi Star, Random\n\n\nExtra Time Slider\n (how often an extra time powerup appears from item blocks): 0 to 20 (default of ?)\n\n\n\n\nDomination\n\n\nThis mode is like the domination mode from many FPSs. There will be several bases randomly placed around the map and it is the goal to control as many of them as possible. You control them by tagging them. The more you control, the faster you accumulate points; the first player to accumulate X points wins. Additionally, every so often the bases will automatically relocate themselves to new, random positions. Collecting a 1UP gives you 10 points; what happens when you die (by any means) can be set in this mode's options.\n\n\nBasic Parameter: \nPoints\n (50 to 1000 by 50s, \n200\n default)\n\n\nAdditional Parameters:\n\n\n\n\nQuantity\n (the number of bases that appear): 1 to 10, # Players - 1, # Players, \n# Players + 1\n, # Players + 2 to 6, 2x Players - 3 to 1, 2x Players, 2x Players + 1 or 2\n\n\nRelocate\n (time between relocations): Never, 5, 10, 15, \n20\n, 25, 30, or 45 seconds, 1, 1.5, 2, 2.5, or 3 minutes \n\n\n\n\nOn Death:\n\n\n\n\nLose Bases\n (whether your bases reset to neutral): \nOn\n, Off\n\n\nMove Bases\n (whether your bases move): On, \nOff\n\n\nSteal Bases\n (whether your bases are taken by who killed you): On, \nOff\n Steal Bases overrides Lose Bases when it is on.\n\n\n\n\nKing Of The Hill\n\n\nIn this mode there is a small zone, \"the hill,\" designated by a chainlink fence design. While your team is the only one with players in this zone, you have control of the hill; its border will change to your team's color and your team will gain points at a constant rate. However, the hill will occasionally relocate itself to a new, random position. First team to X points wins. Collecting a 1UP grants 10 points; dying does not affect your score.\n\n\nBasic Parameter: \nPoints\n (50 to 1000 by 50s, \n200\n default)\n\n\nAdditional Parameters:\n\n\n\n\nSize\n (size of the scoring zone): 2x2, \n3x3\n, 4x4, 5x5*   \n\n\nRelocate\n (time between relocations): Never, 5, 10, 15, \n20\n, 25, 30, or 45 seconds, 1, 1.5, 2, 2.5, or 3 minutes\n\n\nMax Multiplier\n (increase in point gain over control time): \nNone\n, 2, 3, 4, 5\n\n\n\n\nRace\n\n\nIn this mode, you must race around the map tagging moving targets in numerical order (you must tag \"1\" first, then \"2\", and so on). As you tag targets, your team indicator will appear on them. Once you tag all the numbered targets, head to the finish line (the checkered flag) to score a point. Collecting a 1UP gives you one extra lap; the penalty for dying can be configured in this mode's options. (It should be noted that in Race mode, 2UPs and 3UPs are only worth 1 extra lap, and 5UPs are worth only two, due to the usual small size of the goal score.)\n\n\nBasic Parameter: \nLaps\n (5 to 100 by 5s, \n10\n default)\n\n\nAdditional Parameters:\n\n\n\n\nQuantity\n (the number of targets, including the checkered flag): 2, 3, \n4\n, 5, 6, 7, 8\n\n\nSpeed\n (how fast the targets move): Stationary, Very Slow, Slow, \nModerate\n, Fast, Very Fast\n\n\nPenalty\n (what you lose when you die): None, One Goal, \nAll Goals\n\n\n\n\nOwned\n\n\nThis mode is similar to Domination, except the players are your targets. Each player that you kill will spawn with a circle of your color behind them. For every player you have \"Owned\", the faster you accumulate points. If you are killed, you lose all your owned players. Collecting a 1UP gives you 10 points. Also, if you kill one of the players you already own, you will receive an extra 5 points.\n\n\nBasic Parameter: \nPoints\n (50 to 1000 by 50s, \n200\n default)\n\n\nAdditional Parameters: None\n\n\nFrenzy\n\n\nThis mode has the same rules as Frag Limit, except special powerup cards will randomly spawn around the map. Collecting one of these cards has the same effect as getting that item out of an item box, for the most part. This just makes the basic deathmatch just a little more exciting, not to mention that it lets you have items on maps that usually don't. There are eighteen items that can appear on the cards: Bob-Ombs, Fire Flowers, Hammers, Feathers, Boomerangs, Ice Wands, Bombs, Raccoon Leaves, P Wings, Tanooki Suits, POWs, MOds, Bullet Bills, Podobos, and all four different types of Shells. There is also a nineteenth ? card that gives a powerup at random.\n\n\nBasic Parameter: \nKills\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nLimit\n (the number of item cards shown at once): Single Powerup, 1 to 5 Powerups, \n# Players - 1\n, # Players, # Players + 1 to 3\n\n\nRate\n (how long it takes for new cards to appear when they can): Instant, 1, 2, \n3\n, 5, 10, 15, 20, 25, or 30 seconds*   \nStore Shells\n (see note): \nOn\n, Off\n\n\n\n\nSliders for Items\n (comparative frequencies of each one appearing on cards): 0 to 10 each (defaults of 1 for Fire Flowers and Hammers, and 0 for everything else)\n\n\n\n\n\n\nIf Limit is set to Single Item, no more cards will appear until the person who picked up the first one uses it (in the case of Stored items or the Bob-Omb), no longer has it (in the case of Weapon items or the Bob-Omb), or has touched it (in case of Shells). In either case there is no delay for the card to appear after the first time. (This is the same way that the card in Bob-Omb mode worked in version 1.5.)\n\n\n\n\nIf Store Shells is set to On, then when you touch a shell card, the shell will become a Stored item. If it is set to Off, then touching a shell card has the same effect as touching a regular shell (i.e. if you are holding Turbo then you will grab the shell; otherwise you will just kick it out of midair).\n\n\n\n\nSurvival\n\n\nThis mode has the same rules as Classic, except now, Thwomps will rain down from the sky, Podobos will pop up from the bottom, and fireballs will shoot in from the sides. Hitting any of these hazards will kill you. Just as in Classic, the last player alive wins.\n\n\nBasic Parameter: \nLives\n (5 to 100 by 5s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nThwomp, Podoboo, and Fireball sliders\n (comparative frequencies of each one appearing): 0 to 10 each (defaults of 1, 0, and 0 respectively)\n\n\nDensity\n (how often hazards appear overall): Very Low, Low, \nMedium\n, High, Very High   \n\n\nSpeed\n (how fast Thwomps fall down): Very Slow, Slow, \nModerate\n, Fast, Very Fast   \n\n\nShield\n (allows you to set a separate shield setting for this mode): \nOn\n, Off\n\n\n\n\nGreed\n\n\nThis mode is basically a twist on Coin Collection mode. You now start with a number of coins, and being stomped, shot, or dying on spikes or lava makes you drop coins. The last player left holding any coins wins.\n\n\nBasic Parameter: \nCoins\n (10 to 200 by 10s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nCoin Life\n (# of seconds before dropped coins disappear): 1 to 10, 12, 15, 18, 20, 25, \n30\n\n\n\n\nHealth\n\n\nThis mode has the same rules as Classic, except now, players have a set number of health points. These health points are shown in half and full hearts. When a player loses reaches 0 hearts, they lose a life. Collecting the 1, 2, 3, and 5UPs restore health. Just like Classic, the last player alive wins.\n\n\nBasic Parameter: \nLives\n (1 to 20 \n5\n default)\n\n\nAdditional Parameters:\n\n\n\n\nStart Life\n (# of health points players start a match with): \n2\n, 3, 4, 5, 6, 7, 8, 9, 10*   \n\n\nMax Life\n (max # of health points players can have in a match): \n2\n, 3, 4, 5, 6, 7, 8, 9, 10*   \n\n\nExtra Life Slider\n (how often a heart powerup appears from item blocks): 0 to 20 (default of 10)\n\n\n\n\nCard Collection\n\n\nLike Coin Collection, this mode is about collecting, but instead of coins, you collect cards. One or more cards will appear somewhere on the map. If someone grabs a card, it reveals either a star, flower, or mushroom on the other side of it. Collecting a combination of any 3 cards results in 1 point. Players can gain more points by collecting three of the same card. Collecting 3 mushroom cards results in 2 points, 3 flower cards results in 3 points, and 3 star cards results in 5 points. Dying causes your player to drop the last card picked up, which other players can steal. The first to reach the point limit is the winner.\n\n\nBasic Parameter: \nPoints\n (10 to 200 by 10s, \n20\n default)\n\n\nAdditional Parameters:\n\n\n\n\nLimit\n (the number of item cards shown at once): 1 to 5, \n# Players -1\n, # Players, # Players +1 to 3*   \n\n\nRate\n (# of seconds for new cards to appear when they can): Instant, 1 to \n3\n, 5, 10, 15, 20, 25, 30*   \n\n\nBank Time\n (how long players have to swap their third card): Instant, 1 to 10 (default of 3)\n\n\n\n\nPhanto\n\n\nIn this mode, players compete for ownership of a key. However, as long as a player is carrying the key, a number of Phantos will chase after the player. While carrying the key, the player's score constantly increases. Not only the key carrier has to be careful of the Phantos this time, though! In addition to the original Phantos, there are now green Phantos that can kill any player and red Phantos that drop the key carrier's score if one manages to catch the player. The first to reach the point limit is the winner.\n\n\nBasic Parameter: \nPoints\n (50 to 1000 by 50's, \n500\n default)\n\n\nAdditional Parameters:\n\n\n\n\nSpeed\n (how fast the Phantos travel): Very Slow, Slow, \nModerate\n, Fast, Very Fast, Extremely Fast, Insanely Fast\n\n\nPhanto Sliders\n (how many plain, green, and red Phantos chase the key carrier): 0 to 5 (defaults of 1, 0, and 0 respectively)\n\n\n\n\nSpecial Blocks\n\n\nBricks\n\n\nIf you hit these from underneath, from the side with a shell, or flip them with a cape or tail, they will break. If anything is standing on these when you break them from below, you will kill it.\n\n\nNote Blocks\n\n\nThese make you bounce. If you time your jump off them, you can go really high!\n\n\nOrange Note Blocks\n\n\nLike regular Note Blocks, these make you bounce, but you can go even higher!\n\n\nBlue Note Blocks\n\n\nLike regular Note Blocks, these make you bounce, but you can't high jump from them.\n\n\nItem Boxes\n\n\nIf you hit one of these from underneath, from the side with a shell, or flip them with a cape or tail, a random item will pop out of it. You can also kill things on top of these by bumping them.\n\n\nView Blocks\n\n\nThese are almost identical to Item Blocks, except you can see the item inside!\n\n\nFlip Blocks\n\n\nIf you hit these from underneath, they will start spinning. While they are spinning, you can go through them as if they weren't there. If they aren't spinning, and you hit these with shells, flip them with a cape or tail, or super smash them, they will break.\n\n\nBounce Blocks\n\n\nIf something is standing on one of these, and you hit it from underneath, you will kill what was standing there. Don't stand on these too much if you can avoid it!\n\n\nDonut Blocks\n\n\nIf you stand on these too long they will fall off the map. Watch out for traps underneath! Falling donut blocks can kill other players if they hit them, so try it if you get a chance!\n\n\nItem Breakable Blocks\n\n\nThese blocks can only be destroyed by using the item shown on the front of the block. They come in Fire Flower, Cape Feather, Shell, Bomb, Boomerang, Hammer, Goomba's Shoe, P Wing, Star, and Raccoon Leaf varieties. The Bomb variety can be destroyed with any explosion. The Cape Feather and Raccoon Leaf varieties can be destroyed by flipping them. The Goomba's Shoe variety can be destroyed by the Goomba Shoe and Tanooki Statue's super smash. The P Wing variety can be destroyed from below during P Wing flight. The Shell variety can be destroyed by any shell.\n\n\nBlue Throw Blocks\n\n\nYou can pick these up and throw them at other players with the Turbo button. They will break when they hit a wall or another player. They will also disappear by themselves if you hold them for too long.\n\n\nGrey Throw Blocks\n\n\nYou can pick these up and throw them at other players with the Turbo button. Unlike the Blue Throw Block, these can kill multiple players, but they still break when they hit walls. They will also disappear by themselves if you hold them for too long.\n\n\nRed Throw Blocks\n\n\nYou can pick these up and throw them at other players with the Turbo button. Unlike the Blue and Grey Throw Blocks, these can kill multiple players and bounce off of walls. They will also disappear by themselves if you hold them for too long.\n\n\nON/OFF Switches\n\n\nThese come in four colors. While they are ON, all corresponding Switch Blocks on the map will be solid; similarly, while they are OFF, their Switch Blocks will be transparent. When you hit one of these from underneath, with a shell from the side, or spin them with a cape or tail, they will switch states. You can also kill people standing on Switches by bumping them from underneath. Players caught in Switch Blocks when turned on are killed.\n\n\nSwitch Blocks\n\n\nLike the Switches, these come in four colors. When you can see their outlines, you can travel right through them; while they are completely visible, they act as a regular solid tile.\n\n\nSome of the blocks in the game are able to be hidden in maps. To reveal a hidden block, simply jump and hit it from below. Hidden blocks can rehide themselves after a set amount of time, depending on how they're set in the options menu. (See the Item Settings menu section further down.)\n\n\nItems\n\n\nItems in the game can be acquired in three ways: from item boxes (\"?\" blocks), from Bonus Wheel spins, or in the World Map Mode. When collecting an item from an item box, it may be used instantly or it may be stored for later use, depending on the item. Items that are acquired by spinning the Bonus Wheel will always become a stored item at the beginning of each game you play, until they are overridden by another wheel spin or are cleared via the options menu. Items acquired in the World Map modes are accessed and used on the map from your inventory.\n\n\nHere are the classes of items:\n\n\n\n\nInstant\n - These will be used immediately by the player upon picking it up.\n\n\nStored\n - These will be stored in the player's item box and can be used at any time by pressing the Item button.\n\n\nCollectable\n - These will be treated as Instant items if the player doesn't already have them; otherwise they will be treated as Stored items.\n\n\nWeapon\n - These are just like Collectables, except that if you already have another Weapon, the one you already had becomes stored instead of the one you just got. Each player's current Weapon is displayed on top of their player icon on the score display.\n\n\nThrowable\n - These items cannot be gathered like other items, but you can pick them up when they are not moving by holding the Turbo button. When you release the button, you will throw the item.   \n\n\nMap Items\n - These items are like throwable items, but they are a part of the map itself. They have different uses, depending on the map item.\n\n\nWorld Map\n - These items can only be found and used in a World Map match. Their uses range from score alteration to stealing control of the board!\n\n\n\n\n1UP Mushroom\n\n\nType: Instant\n\n\nIn game modes where the score is a measure of lives, frags, Goomba kills, etc., this item will grant you an extra life, frag, lap, etc. In all other modes, this item will grant you 10 extra points.\n\n\n2UP Mushroom\n\n\nType: Instant\n\n\nCatching this pretty pink 'shroom counts as having collected 2 1UP Mushrooms (so you will receive either 2 extra lives, frags, etc., or 20 points towards the goal, with the exception of Race and Star modes in which this item still grants only 1 extra point). However, it moves a little faster than a 1UP.\n\n\n3UP Mushroom\n\n\nType: Instant\n\n\nGrabbing a blue mushie counts as having collected 3 1UP Mushrooms (so you will receive either 3 extra lives, frags, etc., or 30 points towards the goal, with the exception of Race and Star modes in which this item still grants only 1 extra point). However, it moves quite a bit faster than a 1UP.\n\n\n5UP Mushroom\n\n\nType: Instant\n\n\nSnagging this golden treat counts as having collected 5 1UP Mushrooms (so you will receive either 5 extra lives, frags, etc., or a whopping 50 points towards the goal, with the exception of Race and Star modes in which this item grants only 2 extra points). However, it is the fastest-moving of all the mushrooms, as well as the rarest item in the game!\n\n\nPoison Mushroom\n\n\nType: Instant\n\n\nUpon collecting this item, unless you are invincible, you will die. This will have the same effect on your score as hitting spikes or lava.\n\n\nMystery Mushroom\n\n\nType: Instant\n\n\nWhen you grab this item, everyone on the map will immediately switch positions and stored items with each other. The actual switching is random, so you could swap with Player 2 one time and with Player 3 the next. If whoever takes your place dies within one second of getting there, you will be credited with a kill. Additionally, whoever's place you take, you will also take their stored item in place of yours, even if they didn't have anything (in which case you will then have nothing stored). The effect used when players switch can be changed in the Options menu under Item Settings.\n\n\nExtra Time \n(Mode Specific Powerup)\n\n\nType: Instant\n\n\nWhen you grab this item in Timed or Star modes, an additional amount of time is added to the clock. How often this item appears can be set in the Additional Parameters for each mode.\n\n\nHeart \n(Mode Specific Powerup)\n\n\nType: Instant\n\n\nThis item only appears in Health mode. When you grab this item, an extra half-heart is added to your player's health, depending on the Max Health option. How often this item appears can be set in the Additional Parameters.\n\n\nFire Flower\n\n\nType: Weapon\n\n\nThis item gives you the ability to shoot deadly fireballs with the turbo button. Fireballs bounce along the ground for a while until they disappear, but they will also disappear if they hit a wall or another player.\n\n\nHammer\n\n\nType: Weapon\n\n\nThis item will give you the ability to throw hammers. Hammers travel in an arc whose lateral distance is determined by how fast you are moving, and as a result, hammers are not very easy to aim - but they can give you a big advantage over players who are trying to jump you if you can use them well.\n\n\nBoomerang\n\n\nType: Weapon\n\n\nThis item gives you the ability to shoot boomerangs. Using the default behavior, Boomerangs will travel ahead in a long arc before turning around and going in a straight line until they disappear. However, there are other trajectory types you can choose, under the Options menu (see below), if you don't like the default. Boomerangs, like hammers, can be shot through solid walls.\n\n\nFeather\n\n\nType: Weapon\n\n\nWhen you grab this item, you will don a cape and be granted the ability to jump a second time in midair! The second jump will be weaker than the first, though. This item is great for reaching high ledges, items, and targets. You can even attack enemies with a spin move! (Note that the Feather counts as a Weapon, so you can't combine it with others.)\n\n\nP-Wings\n\n\nType: Weapon\n\n\nWhen you grab this item, you will don a pair of wings and be granted the ability to take flight after a jump! The flight lasts for a limited time or until you release Jump. Like the Feather, this item is great for reaching high ledges, items, and targets. (Note that, the P-Wings don't allow you to shoot anything, but it also counts as a Weapon.)\n\n\nRaccoon Leaf\n\n\nType: Weapon\n\n\nWhen you grab this item, you will don a tail and be granted the ability to float safely to the ground after a jump! How slowly you float down depends on how fast you tap Jump. There is a limit to how slowly you can float down, though. Like the Feather, you can attack enemies with a spin move. (Like the Feather and P-Wings, the Raccoon Leaf also counts as a weapon.)\n\n\nBomb\n\n\nType: Weapon\n\n\nThis item gives you the ability to throw bombs. Pressing the turbo button causes you to spawn a bomb in your player's hands, which you can throw or carry around. The bombs take a few seconds to explode, but do so with the force of a Bob-Omb explosion.\n\n\nIce Wand\n\n\nType: Weapon\n\n\nThis item gives you the ability to shoot a Magikoopa wand blast across the screen. The wand blast freezes any players it hits in a block of ice. Frozen players can be shattered simply by touching them. The Ice Wand can go through walls and hit multiple players, but it doesn't work on the enemies of Stomp Mode.\n\n\nInvincibility Star\n\n\nType: Collectable\n\n\nGives the player invincibility for 10 seconds. During this time, the player can walk on spikes/lava, stay above the map as long as they want, continually fall without burning up, and kill other players just by touching them.\n\n\nBob-Omb\n\n\nType: Collectable\n\n\nThis item turns you into a Bob-Omb. Pressing the turbo button causes you to explode and kill players around you. However, you can only explode once before you return to normal again. If you kill a player who is a Bob-Omb, and you aren't one already (which includes if you were one and just exploded), you will steal their Bob-Omb status.\n\n\nTanooki Suit\n\n\nType: Collectable\n\n\nThis item gives you the ability to become a statue. While your player is a statue, you cannot be killed by stomping, projectiles, enemies, map hazards, spikes, and lava. If you change your player into a statue in midair, the player will do a super smash like with the Goomba's Shoe. This can be used to drop down quickly for an item or to crush another player. Upon landing, the impact clouds can kill other players at close range. Statue players can still be crushed.\n\n\nClock\n\n\nType: Stored\n\n\nWhen you use this item, all players that are not on your team will be slowed down and will only be able to jump 2 blocks high. These effects last for 10 seconds.\n\n\nBullet Bill\n\n\nType: Stored\n\n\nWhen this item is used, Bullet Bills of your team color will fire in from the sides of the screen for about 5 seconds. Players on the opposing team must dodge or jump on the Bullet Bills to avoid death. Additionally, If two players' Bullet Bills collide, they will explode. This explosion will kill anyone it touches, including the owners of the Bullet Bills.\n\n\nPOW Block\n\n\nType: Stored\n\n\nWhen this item is used, the screen shakes for about half a second and any players that touch the ground during this time are killed. You should watch for when an opponent uses one of these, and make sure you make a big jump so you don't die.\n\n\nMOd Block\n\n\nType: Stored\n\n\nThis item acts exactly like the POW block, except that when you use it, instead of killing players on the \nground\n, you kill players in the \nair\n. So, when an opponent is using one of these, you should stay on the ground for a bit to avoid getting killed.\n\n\nGolden Podobo\n\n\nType: Stored\n\n\nWhen this item is used, a single wave of podobos rise from the bottom of the screen, killing anything they touch that isn't on your team. When an opponent is using one of these, make sure you get to high ground, and fast!\n\n\nJail Key \n(Mode Specific Powerup)\n\n\nType: Stored\n\n\nThis item only appears in Jail mode. When you use this item, your player is instantly released from jail, if not already free. Even if you don't need it, grab the Jail Key so others can't use it! How often this item appears can be set in the Additional Parameters.\n\n\nGreen Shell\n\n\nType: Throwable\n\n\nWhen this item is thrown or stomped on, it will start bouncing around the map. It can be jumped a second time to stop it. It will kill the first person it hits while it is moving, and will disappear afterwards. It will also disappear if it stays moving for too long without hitting anyone. You can also kill Green Shells with projectile weapons such as fireballs. Green shells will not disappear by themselves if they are not moving or if someone is carrying them.\n\n\nRed Shell\n\n\nType: Throwable\n\n\nThis item is exactly like a Green Shell except for one detail: it doesn't stop when it hits one player, and will instead plow through as many things as are in its way until its time runs out or until someone shoots it.\n\n\nSpiny Shell\n\n\nType: Throwable\n\n\nThis item is exactly like the Red Shell, except that it is covered in spikes and so it can't be jumped on to stop it once it's going. It can still be shot, though.\n\n\nBuzzy Shell\n\n\nType: Throwable\n\n\nThis item is exactly like the Red Shell, except that it is immune to projectile weapons. It can still be jumped, though.\n\n\nA couple notes about Shells\n\n\nWhen two shells collide, if they are both the same \"strength\" (i.e. if they are both green or if they are both multikilling shells) then both of them will die. Otherwise, only the green shell will die (the multikilling shell will kill it and keep going). Also, when you win a shell from the Bonus Wheel, it will become a stored item. When you use it, if you are holding the Turbo button, the shell will appear in your hands so you can kick it; otherwise, it will appear in front of you and start moving right away.\n\n\nGreen Springboard\n\n\nType: Map Items\n\n\nThis item can be carried through the map and used as a portable Note Block. The Green Springboard allows you to make timed jumps like regular Note Blocks. Keep in mind that if the Green Springboard gets destroyed by lava or spikes, it is gone for the rest of the match.\n\n\nGold Springboard\n\n\nType: Map Items\n\n\nThis item can be carried through the map and used as a portable Note Block. The Green Springboard allows you to make timed jumps like the Orange Note Blocks. Keep in mind that if the Green Springboard gets destroyed by lava or spikes, it is gone for the rest of the match.\n\n\nCarryable Spike\n\n\nType: Map Items\n\n\nThis item can be carried through the map and used as a weapon over and over. The Carryable Spike allows you to turn areas of a map into a small trap. The Carryable Spike does \nnot\n protect you from being stomped, so be careful. Keep in mind that if the Carryable Spike gets destroyed by lava or spikes, it is gone for the rest of the match.\n\n\nGoomba's Shoe\n\n\nType: Map Items\n\n\nJumping into the Goomba's Shoe allows you to perform a super smash move in midair. This can be used to drop down quickly for an item or to crush other players. Your player also gets a weight boost, allowing you to bump opponents much farther than normal! Unlike the other map items, the Goomba's Shoe can also travel safely over lava and spikes!\n\n\nMusic Box\n\n\nType: World Map\n\n\nUsing one of these will stop the movement of all vehicles on the World Map for a few turns. During this time, you won't be pulled into the levels upon passing over them. If you want to play the level anyways, just enter it like a normal level.\n\n\nLakitu's Cloud\n\n\nType: World Map\n\n\nThis item allows you to pass over a level without playing it. Great for bypassing a level with a mode you're not very good at!\n\n\nSwap Badge\n\n\nType: World Map\n\n\nThis useful item allows you to take control of the board from another player! Great for making sure you get a Mushroom House!\n\n\nHourglass\n\n\nType: World Map\n\n\nThis item can be used to advance the map one turn. This will cause vehicles to move and bridges to lower or rise.\n\n\nReplay Block\n\n\nType: World Map\n\n\nThis item can be used to revive any level that's already been played. This includes Pipe Minigame levels and Mushroom Houses!\n\n\nRed Key\n\n\nType: World Map\n\n\nThis item is used to unlock red doors on a map. This key can only be used to open one door.\n\n\nYellow Key\n\n\nType: World Map\n\n\nThis item is used to unlock yellow doors on a map. This key can only be used to open one door.\n\n\nGreen Key\n\n\nType: World Map\n\n\nThis item is used to unlock green doors on a map. This key can only be used to open one door.\n\n\nBlue Key\n\n\nType: World Map\n\n\nThis item is used to unlock blue doors on a map. This key can only be used to open one door.\n\n\nX Coin\n\n\nType: World Map\n\n\nThis item can be used to negate the point value for a level. Simply use it on the map, and the next level played will have no point value. Keep in mind that using other score coins after using an X Coin cancels it out, and vice versa.\n\n\n+1 Coin\n\n\nType: World Map\n\n\nThis item can be used to add one to the point value for a level. Simply use it on the map, and the next level played will have a single point higher value. Keep in mind that using other score coins after using a +1 Coin cancels it out, and vice versa.\n\n\n+2 Coin\n\n\nType: World Map\n\n\nThis item can be used to add two to the point value for a level. Simply use it on the map, and the next level played will have a two point higher value. Keep in mind that using other score coins after using a +2 Coin cancels it out, and vice versa.\n\n\n+3 Coin\n\n\nType: World Map\n\n\nThis item can be used to add three to the point value for a level. Simply use it on the map, and the next level played will have a three point higher value. Keep in mind that using other score coins after using a +3 Coin cancels it out, and vice versa.\n\n\nx2 Coin\n\n\nType: World Map\n\n\nThis item can be used to double the point value for a level. Simply use it on the map, and the next level played will have twice the point value. Keep in mind that using other score coins after using a x2 Coin cancels it out, and vice versa.\n\n\nx3 Coin\n\n\nType: World Map\n\n\nThis item can be used to triple the point value for a level. Simply use it on the map, and the next level played will have three times the point value. Keep in mind that using other score coins after using a x3 Coin cancels it out, and vice versa.\n\n\n1-10 Green Spheres\n\n\nType: World Map\n\n\nThese items can only be obtained from Mushroom Houses, and are very useful. Getting any of the Green Spheres from a chest adds the number on the Sphere to your total points!\n\n\n1-10 Red Spheres\n\n\nType: World Map\n\n\nThese items can only be obtained from Mushroom Houses, and should be avoided! Getting any of the Red Spheres from a chest subtracts the number on the Sphere from your total points!\n\n\nGame Options\n\n\nGameplay\n\n\nRespawn Time\n\n\nThis option allows you to configure how long it takes your character to respawn after dying. It can be set to any value between 0 (instant) and 10 seconds, in increments of 0.5 seconds.\n\n\nShield Style\n\n\nThis allows you to change the way the shield behaves. It can be set to No Shield, Soft (pass through players), Soft With Stomp (pass through players, but you can stomp them), and Hard (stomp players but you can't pass through them).\n\n\nShield Time\n\n\nThis allows you to change the amount of time for which you are invincible right after spawning or warping. It can be set to any value between 0 (none) and 5 seconds, in increments of 0.5 seconds.\n\n\nBounds Time\n\n\nIn play, if someone stays above the top edge of the screen for too long, they will be penalized by dying. This option allows you to configure how much time is allowed before being penalized. It can be set between 1 and 10 seconds, in increments of 1 second, or you can disable it altogether by setting it to Infinite.\n\n\nSuicide Time\n\n\nIn play, if someone remains still for too long, they will be penalized by dying. This option allows you to configure how much time is allowed before being penalized. It can be set to 3, 5, 8, 10, 15, and 20 seconds, or you can disable it altogether by setting it to Off.\n\n\nWarp Lock Style\n\n\nThis allows you to change how the warp locks behave in play. It can be set to Entire Connection, All Warps, Entrance Only, Exit Only, and Entrance and Exit.\n\n\nWarp Lock Time\n\n\nThis can be set to any value between 1 and 10 seconds, in increments of 1 second, or it can be set to Off. When set to anything other than Off, after one player uses a warp, the warp or warps will be locked for the specified time to prevent other players from using them, depending on how the Warp Lock Style is set. When set to Off, warps can be used freely.\n\n\nBot Difficulty\n\n\nYou can choose what difficulty level you want the AI to be here, between Very Easy, Easy, Moderate, Hard, and Very Hard. Very Hard is equivalent to the AI strength from version 1.6 and before.\n\n\nPoint Speed\n\n\nThis can be set to Very Slow, Slow, Moderate, Fast, or Very Fast. It controls how fast players gain or lose points in point-based modes such as Domination or Tag. Moderate is equivalent to the point speed from version 1.6 and before.\n\n\nTeam\n\n\nPlayer Collision\n\n\nWhen this is on, you can jump on and shoot your own teammates. When it is off, you and your projectiles will go through your teammates. This does \nnot\n apply to shells or throw blocks, however! When this is set to Assist, teammates can use each other as a springboard by holding Jump. This allows you to work together as a team!\n\n\nColors\n\n\nWhen this is set to Team, all teammates will be set to the same color. (It is recommended that teammates choose different-looking skins, in this case.) When set to Individual, player 1 will always be red, Player 2 will be green, and so on.\n\n\nItem Selection\n\n\n\n\nOn this screen, there are 26 sliders, each corresponding to one of the different items that can appear from a \"?\" block, as well as the relative frequency of that one popping out. Each slider can be set from 0 to 10 inclusive, with 0 meaning the item will not appear at all.\n\n\nUse Settings From\n\n\nThis option allows you to choose whether item weights are selected from the maps, the game's settings, a basic average of the two, or a weighted average of the two.\n\n\nItem Set\n\n\nThis option allows you to select preset powerup weights. You can choose from 5 Custom Sets, Balanced Set, Weapons Only, Koopa Bros Weapons, Support Items, Booms and Shakes, Fly and Glide, Shells Only, Mushrooms Only, Super Mario Bros 1, Super Mario Bros 2, Super Mario Bros3, and Super Mario World. Each set has different weights for the various powerups.\n\n\nBelow the 26 sliders are the Defaults and Clear buttons. The Defaults button returns the currently selected set to it's default values. The Clear button sets all the powerup weights to 0 for the currently selected set.\n\n\nAs an example, the defaults for 1UP Mushrooms, Poison Mushrooms, POW Blocks, and MOd Blocks are 10, 5, 2, and 2 respectively. That means a 1UP is twice as likely to appear as a Poison Mushroom and 5 times as likely to appear as a POW, by default, and that POWs and MOds appear with equal frequency since they have the same number.\n\n\nItem Settings\n\n\nItem Use Speed\n\n\nThis affects how long of a delay there is between pressing the item button and using your stored item. The higher the delay, the more reaction time your opponents have. This can be set to Very Slow (where it takes around two full seconds to use items), Slow, Moderate, Fast, and Very Fast (less than half a second).\n\n\nItem Spawn\n\n\nThis allows you to set how long it takes for item boxes to generate another item after one gets knocked out of them. It can be set to any value between 5 and 60 seconds, in increments of 5 seconds, or turned Off.\n\n\nHidden Block Hide\n\n\nThis allows you to set how long it takes for hidden blocks to rehide after being made visible. It can be set to any value between 5 and 60 seconds, in increments of 5 seconds, or turned Off.\n\n\nSwap Style\n\n\nThis allows you to change the style of swap used with the Mystery Mushroom. Blink causes the players to blink back and forth. Walk causes them to walk in a straight line to their new destinations. Instant eliminates the delay caused by the other two animations and is the most chaotic of the three options.\n\n\nBonus Wheel\n\n\nThis can be set to Tournament Win, Every Game, or Off. When on Tournament Win, the bonus wheel appears after the end of a tournament and grants the winner an item. When on Every Game, the wheel appears after every game instead of just tournament-winning ones. When set to Off, the wheel does not appear.\n\n\nBonus Item\n\n\nWhen set to Until Next Spin, players will keep items that they won from the bonus wheel until the someone spins the wheel again (i.e. there will only ever be one bonus item in play). When set to Keep Always, players will keep their bonus wheel items until they spin for new ones (so there can be multiple bonus items in play).\n\n\nReset Stored Items\n\n\nIf someone has an item from the bonus wheel, this will allow you to get rid of it.\n\n\nWeapons \n Projectiles\n\n\nFireball Life\n\n\nThis can be set between 1 and 10 seconds, in increments of 1 second. Fireballs will automatically disappear after they have stayed onscreen for this long.\n\n\nFeather Jumps\n\n\nThis can be set between 1 and 5, and it simply determines how many extra midair jumps the Feather grants.\n\n\nBoomerang Style\n\n\nWith this, you can switch between Flat, SMB3, and Zelda styles.\n\n\n\n\nFlat style makes the boomerangs travel straight forward until they hit the edge of the screen, after which they \"bounce\" back and travel straight towards the other edge of the screen.  \n\n\nSMB3 style makes the boomerangs travel in a long forward arc before turning around and coming back in a straight line. \n\n\nZelda style makes the boomerangs travel straight forward for a short distance before turning around and seeking out the player that shot them.\n\n\n\n\nBoomerang Life\n\n\nThis can be set between 1 and 10 seconds, in increments of 1 second. Like the Fireball Life setting, boomerangs will automatically disappear after staying onscreen for this long.\n\n\nShell Life\n\n\nThis setting allows you to change how long shells last before they automatically disappear. It can be set to 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, or 30 seconds, or you can set it to Unlimited.\n\n\nWand Freeze\n\n\nThis setting allows you to change how long players are frozen when hit with an Ice Wand blast. It can be set to 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, or 20 seconds.\n\n\nHammer Life\n\n\nThis can be set between 0.5 and 1.2 seconds, in increments of 0.1 second, or you can set it to No Limit. Like the Fireball Life setting, hammers will automatically disappear after staying onscreen for this long. If you set this to No Limit, then hammers will disappear off the bottom of the screen.\n\n\nHammer Delay\n\n\nBecause hammers are so powerful, there is a delay after firing one in which you are not allowed to fire another. Here, you can set this delay to between 0 (none) and 1 second, in increments of 0.1 second.\n\n\nHammer Power\n\n\nWhen this is set to One Kill, hammers disappear when they hit something. When set to Multiple Kills, hammers will go right through everything they touch!\n\n\nBlue Block Life\n\n\nSimilar to the Shell Life setting, this allows you to change how long Blue Blocks last before they disappear. Unlike the Shell setting, however, this also affects how long you can hold them before they disappear in your hands. The same options as for Shell Life are available.\n\n\nGrey Block Life\n\n\nSimilar to the Shell Life setting, this allows you to change how long Grey Blocks last before they disappear. Unlike the Shell setting, however, this also affects how long you can hold them before they disappear in your hands. The same options as for Shell Life are available.\n\n\nRed Block Life\n\n\nSimilar to the Shell Life setting, this allows you to change how long Red Blocks last before they disappear. Unlike the Shell setting, however, this also affects how long you can hold them before they disappear in your hands. The same options as for Shell Life are available.\n\n\nWeapon Use Limits\n\n\nFireball Limit\n\n\nThis allows you to limit the number of fireballs you can shoot with each flower you get. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.\n\n\nHammer Limit\n\n\nThis allows you to limit the number of hammers you can shoot with each item pickup. Like the Fireball limit, it can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.\n\n\nBoomerang Limit\n\n\nThis allows you to limit the number of boomerangs you can shoot with each pickup. Like the other Limit options, it can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited. Unlike other weapons, however, if you don't catch your own boomerangs, you are penalized by an extra shot.\n\n\nFeather Limit\n\n\nThis allows you to limit the number of times you can midair jump and use the spin move. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited. Bear in mind that if you do multiple midair jumps in a row (using the Feather Jumps setting above), every single one counts as a separate weapon use.\n\n\nLeaf Limit\n\n\nThis allows you to limit the number of times you can float and use the spin move. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited. Bear in mind that if you press Jump to float multiple times in a row, every single one counts as a separate weapon use.\n\n\nP-Wings Limit\n\n\nThis allows you to limit the number of times you can take flight. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.\n\n\nTanooki Limit\n\n\nThis allows you to limit the number of times you can become a statue. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.\n\n\nBomb Limit\n\n\nThis allows you to limit the number of bombs you can use. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.\n\n\nWand Limit\n\n\nThis allows you to limit the number of times you can use the Ice Wand. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.\n\n\nGraphics\n\n\nDraw Top Layer\n\n\nSome maps have layers of tiles which the players can move behind. When this is set to Foreground, the players and all the special blocks on the map will appear behind these tiles. When this is set to Background, the players, blocks, projectiles, etc. will appear in front of these tiles. Setting this to Background can improve performance on slower machines, but will often cause the game to look weird because the players will be walking in front of stuff they shouldn't be.\n\n\nFrame Limit\n\n\nThis allows you to change the speed at which the game runs. It can be set by FPS to 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 62 (Normal), 66, 71, 77, 83, 90, 100, 111, 125, 142, 166, 200, 250, 333, 500, and No Limit. This can be used to somewhat counteract slow machines, or just to get a slow-motion or high-speed effect.\n\n\nScreen Size\n\n\nThis simply allows you to change between Fullscreen and Windowed modes. (This doesn't appear on the Xbox version.)\n\n\nScreen Settings (Xbox version)\n\n\nThis will take you to a menu where you can change various screen settings. \nWe are NOT responsible if you screw up your TV with these - use at your own risk!!\n\n\n\n\nScreen Resize\n allows you to resize the picture on the screen so that it shows up better on your TV - use the left thumbstick to move the upper-left corner of the screen, the right thumbstick to move the lower-left corner of the screen, or press X to switch to a pre-set size.\n\n\nScreen Filter\n will change the method by which the picture is rendered on the screen. The different options are Point, Bilinear, Trilinear, Anisotropic, Quincunx, and Gaussian Cubic. The default is Bilinear. Different settings will look better or worse on different screens.   \n\n\nFlicker Filter\n will attempt to filter out the flicker which some TVs generate. It can be set between 0 and 5, with a default of 5. Different settings will look better on different screens.  \n\n\nSoften Filter\n will add a softening effect (a blur) to the screen. It can be set to On or Off, default to Off.\n\n\n\n\nMenu, World, and Game Graphics\n\n\nThis allows you to select custom graphics packs if you have any installed on your machine. Graphics packs are installed by unzipping them into the gfx/packs subfolder of the game. (Make sure that when you unzip the files, they stay in their original directories; otherwise the game will not recognize the new packs!)\n\n\nEye Candy\n\n\nSpawn Style\n\n\nThis allows you to change the way players appear on the map.\n\n\n\n\nWhen set to \nInstant\n, players will simply appear out of nowhere.   \n\n\nWhen set to \nDoor\n, players will drop out of doors, as in the original DOS Mario War. The door's appearance causes about one half second of extra delay between the start and end of spawning.  \n\n\nWhen set to \nSwirl\n, a large, colorful swirl will appear just before players spawn. This option makes the spawn very easy to spot, but also causes around one full second of extra delay.\n\n\n\n\nAward Style\n\n\nThis allows you to change the type of extra eyecandy shown on screen when a player gets three or more consecutive kills.\n\n\n\n\nFireworks\n causes basic eyecandy to shoot out of the player, like a fireworks display.   \n\n\nSpiral\n causes basic eyecandy to spiral out from the player.   \n\n\nRing\n causes small icons to circle the player. These icons represent the last 10 kill types (so, for example, when you hit someone with a fireball, you will receive a Fire Flower icon). When the player is killed, these icons will scatter.\n\n\nSouls\n causes nothing to be displayed until the player's chain of kills is broken, after which several icons will fly out of the dead player, representing the souls of the players he killed.  \n\n\nText\n causes a simple text indicator to pop out of the player. (This is also the only option which gives an award for only 2 consecutive kills.)  \n\n\nNone\n disables all effects.\n\n\n\n\nScore Location\n\n\nThis option enables you to change where the scores are displayed onscreen. Top and Bottom place all the scores in those places, and Corners will put one score in each corner of the screen.\n\n\nScreen Crunch\n\n\nWhen this is on, the screen will \"crunch\" each time someone dies, just as in the original DOS Mario War.\n\n\nLeader Crown\n\n\nWhen this is On, the crown that appears on the winner's head on the score display will also appear on their head in the actual game, so that they are more easily identifiable. When set to Off, the crown will only appear on the score display.\n\n\nStart Countdown\n\n\nWhen this is On, there is a \"3, 2, 1, GO!\" countdown before players spawn onto a map. When set to Off, player spawning starts immediately.\n\n\nDead Team Notice\n\n\nWhen this is On, a breif message is shown upon the elimination of a team. When this is Off, team elimination isn't notified.\n\n\nMusic \n Sound\n\n\nSound Volume\n\n\nThis allows you to alter the volume of the game's sound effects.\n\n\nMusic Volume\n\n\nThis allows you to alter the volume of the tunes in the background.\n\n\nNext Music\n\n\nWhen this is set to Off, whichever track the game picks for the map will loop indefinitely. When set to On, the game will switch to a different music track after the current one has ended.\n\n\nAnnouncer\n\n\nThis allows you to select an announcer, if you have any installed. Announcers are installed by unzipping them into the sfx/announcer subfolder of the game. (As with graphics packs, make sure the files get unzipped into the proper directories!)\n\n\nSound Pack\n\n\nThis allows you to select custom sound effects packs if you have any installed. They go into the sfx/packs subdirectory of the game. (As with graphics packs and announcers, make sure the files go in the right places!)\n\n\nGame Music Pack\n\n\nThis allows you to select custom music packs for levels if you have any installed. Music packs are installed by unzipping them into the music subfolder of the game. (As with graphics packs and announcers, make sure the files go in the right places!)\n\n\nWorld Music Pack\n\n\nThis allows you to select custom music packs for worlds if you have any installed. Music packs are installed by unzipping them into the music subfolder of the game. (You should know what this parenthetical note should say by now.)\n\n\nRefresh Maps\n\n\nThis will refresh all of the map thumbnails stored in the maps/cache subdirectory. Be warned that this can take quite a long time.\n\n\nLevel Editor\n\n\nStarting and Choosing a Map\n\n\nWhen the level editor starts, you will be viewing the last level in the map list that was edited, or 0smw if the last edited map was deleted.\n\n\nTo change which map you are looking at, press Page Up or Page Down. By switching the map in this way, you will lose any changes on the map that were you working on. So, before you switch maps, you should press S to save that map if you want to keep the changes.\n\n\nSaving the Map\n\n\nThe name of the map is in the upper right corner of the screen. If you want to save to a different map and not overwrite the current map, hold shift then press S. The \"save as\" text will come up and you can save it as something else.\n\n\nTaking Screenshots\n\n\nBefore putting up your maps for download, you might want to take some pictures so people can look at them before they try them out. Press the Insert key on the keyboard and three .png files of different sizes will be saved to the maps/screenshots subdirectory.\n\n\nSomething you might want to know\n\n\nMake sure you play around with the controls a bit before trying to create an important map. Just remember that pressing S saves instantly to what ever map name is in the upper right corner, overwriting whatever was there before.\n\n\nYou can also press \nF1\n in the editor to bring up a help screen, in case you need it.\n\n\nAs a general rule, if you want to place something, you should click with the left mouse button; to remove things, click the right mouse button.\n\n\nControls\n\n\n\n\nT\n\n\n\n\nBrings up the tileset - select a tile by left clicking on it. You can scroll through the selected tileset with the arrow keys. You can also go to another page of tiles by pressing the number keys. Pressing a number that doesn't have a tileset assigned or any key aside from the number keys will simply return you to your map. (DON'T RIGHT CLICK ON TILES unless you want to change the type of tile it is; however, changes to tile types will only affect how they act on your machine, NOT the machines you distribute the maps to). Now you're in \"Tile Mode\". Look to the upper left corner for the mode you're in. Tiles are collision detected blocks that don't move or background non-collision detected images.\n\n\n\n\nI\n\n\n\n\nThis brings up the interaction block set - select a block by left-clicking on it. Now you're in \"Block Mode\". For a list of blocks and their descriptions, see the Special Blocks section, above. Blocks can be placed over tiles without replacing the tile. So, for example, if a brick is placed over a tile block and in the game the player destroys the brick, then the tile block will become visible.\n\n\n\n\nO\n\n\n\n\nThis brings up the map items set - to select a map item, left click on it. Now you're in \"Map Item Mode\". Like interaction blocks, map items can be placed over tile blocks, but not over interaction blocks and vice versa.\n\n\n\n\nW\n\n\n\n\nThis brings up the warps set - select a warp by left clicking on it. Now you're in \"Warp Mode\". Warps face outward; this means that if you want a player to be able to warp down into a pipe below him, you should place an upward facing arrow on those blocks. All warps with the same number are considered connected, and players will randomly exit from another warp with the same number that they entered from.\n\n\n\n\nM\n\n\n\n\nThis puts you into \"Move Mode\" - you can now select areas and items on the map and move them around. Pressing \"M\" again switches between the \"Replace\" and \"Merge\" options. \"Replace\" overlaps any and all tile blocks the selected area is moved over. \"Merge\" blends the selected area in with any tile blocks already placed in the map. First select an area so it is highlighted in red. Now click and hold on that area and move the mouse to drag it around. There are some more tools you can use to make this more powerful:\n\n\n\n\nShift - This allows you to select multiple areas at once. Hold down the shift key then select areas on the map. All the areas will stay selected.  \n\n\nCtrl - This allows you to select areas freehand. Hold down the left control key then select areas on the map. The areas are now selected just under the mouse instead of the drag select box.   \n\n\nC - This will make a copy the areas currently selected. Move your mouse around to see what it will look like when you paste it back to the map. When you are happy with the placement of the copied areas, left click the mouse to add it to the map. If you want to abort the paste, right click the mouse.   \n\n\nDelete - If you want to delete certain areas of the map, simply select them and hit the Delete or Backspace key.\n\n\n\n\n\n\nL\n\n\n\n\nThis brings up the Tile Types set - pick one by clicking on it. Now you're in \"Tile Type Mode\". Left-click to set tiles to the type you picked, or right-click to clear tile-types (players can move freely through a tile if there is no tile-type associated with it). Pressing \"delete\" in Tile Type Mode clears all the tile types throughout the map.\n\n\n\n\nP\n\n\n\n\nThis puts you into \"Platform Mode\" - from here, you can set up all the moving parts of your map. Here are the things you can do:\n\n\n\n\nClick the \"New\" button and select a platform type to create a new platform. When creating a platform, the controls are more or less the same as when editing a map. (Bear in mind that you can create platforms anywhere on the screen. Also bear in mind that you can only put tiles into your platform - interactive blocks are not allowed.)   \n\n\nIf, instead of making a new platform, you'd like to edit an existing one, click on one of the numbered buttons.   \n\n\nWhile making a platform, press P to change the path the platform will take. Use the left mouse button to place the starting point (green), and the right mouse button to place the endpoint (red). Holding the shift key while pressing a mouse button will snap the platform to a grid. While editing the path, pressing T will allow you to change the platform type, should you change your mind.   \n\n\nA \"Line Segment\" type platform is the basic back and forth platform, it can travel at any angle that you choose.   \n\n\nA \"Continuous\" type platform is similar to a \"Line Segment\" type, but it loops across the map continuously. Press the left mouse button to place the platform, and the right mouse button to alter the angle of the path.   \n\n\nAn \"Ellipse\" type platform is similar to a \"Continuous\" type, but instead of looping across the map, it loops in a circular motion. Press the left mouse button to set the point that the path rotates around, and the right mouse button to set where the platform starts on that path. Holding X while pressing the mouse button allows you to alter the X radius (height) of the circular path. Holding Z allows you to alter the Y radius (width). Holding C allows you to change the size of the circular path.   \n\n\nWhile on the platform-making screen, press + or - to change the speed (and direction if you're making an Ellipse type) that the current platform will have. The current speed is shown at the top of the screen. If you're making an Ellipse type, the speed is shown as a slider between clockwise and counterclockwise.   \n\n\nPress Delete while working on a platform to delete it altogether.\n\n\n\n\n\n\nX\n\n\n\n\nThis puts you into \"No Player Spawn Mode\" - you can now select areas of the map that you don't want the players to spawn in, which will appear as grey boxes with grey Xs on them. This is useful if you have a part of your map that would cause problems if players could spawn there, such as places where it is impossible to get jumped on or to jump out of. While in No Player Spawn Mode, pressing 1-4 will allow you to designate team spawn areas. Pressing A will fill the map with marks for the selected spawn type. Pressing N will remove all marks for the selected spawn type.\n\n\n\n\nZ\n\n\n\n\nThis puts you into \"No Item Spawn Mode\" - you can now select places on the map that you don't want mode objects (such as coins, eggs, and bases) to appear. These areas will appear as green boxes with red Xs on them. These should be used to keep important things from appearing in places that players cannot reach.\n\n\n\n\nH\n\n\n\n\nThis puts you into \"Map Hazards Mode\" - from here, you can set up any dangerous elements you want in your map. Here are the things you can do:\n\n\n\n\nClick the \"New\" button and select a hazard type to create a new hazard. When creating a hazard, the controls are more or less the same as when editing a map. (Bear in mind that you can create hazards anywhere on the screen.)  \n\n\nIf, instead of making a new hazard, you'd like to edit an existing one, click on one of the numbered buttons.  \n\n\n\n\nKeep in mind that, like platforms, pressing delete while working on a hazard will delete it altogether.\n\n\n\n\n\n\nWhen making a \"Fireballs\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the starting point of the hazard's rotation, the radius, and the speed. Pressing L allows you to change the location of the hazard again, should you change your mind.   \n\n\n\n\nWhen making a \"Rotodisc\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the starting point of the hazard's rotation, the radius, the speed, and the number of Rotodiscs rotating around the selected point. Pressing L allows you to change the location of the hazard again, should you change your mind.   \n\n\nWhen making a \"Bullet Bill\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, the frequency at which it fires, and the speed. Pressing L allows you to change the location of the hazard again, should you change your mind.  \n\n\nWhen making a \"Flame\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it fires. Pressing L allows you to change the location of the hazard again, should you change your mind.  \n\n\nWhen making a \"Green Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.  \n\n\nWhen making a \"Red Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.   \n\n\nWhen making a \"Tall Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.   \n\n\nWhen making a \"Short Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.\n\n\n\n\n\n\nA\n\n\n\n\nPressing A will brings up the animated tileset. Select a tile by left clicking on it. This puts you into \"Animated Tile Mode\". Animated tiles are like regular tiles, but are really just for looks. They don't have a tile type of their own, so you have to place one over the animated tile yourself.\n\n\n\n\nK\n\n\n\n\nPressing K while holding the cursor over an Item Block, View Block, Note Block, Flip block, or Bounce Block will bring up a few options, depending on the block. Item and View Blocks will bring up an item weight menu, where you can set which items can be knocked out of the block. There is also an checkbox that, if marked, will make the block use the game's item weights. Along with the Item and View Block, all of the other blocks mentioned have a checkbox that, when marked, makes it a hidden block. For more information on hidden blocks, check the Special Blocks section further up.\n\n\n\n\nV\n\n\n\n\nPressing V will hide all the interactive blocks on the map so you can see what's behind them.\n\n\n\n\nY\n\n\n\n\nSince there are 4 layers to a map, you need to be able to select which layer you want to add tiles to. Use the \"Y\" key to do this. On the upper left, you'll see a little 0,1,2,3 icon. The colored number is the layer you are currently working with. When you add tiles, they will be added to this layer. The layers are ordered, with 0 being the bottom-most layer, and 3 being the top-most. You can use this key in conjuction with the \"U\" key to view just a single layer.\n\n\n\n\nU\n\n\n\n\nToggles viewing just the selected layer or all the layers at once. Sometimes it is helpful to just be able to modify a single layer without having to look at everything else.\n\n\n\n\nEnd\n\n\n\n\nOptimizes the layers. This essentially moves all solid tiles down to the deepest available layer. There is a performance hit for tiles in layers 2 and 3 of the map. You should try to place as many solid tiles that a player would never be behind in layers 0 and 1. This optimize tool helps you do that. Save your map prior to using this feature because it can split up tiles across layers which makes the map hard to work on after you optimize it. Optimized maps should behave in the game exactly the same way unoptimized maps do, except for the fact that they will not tax your machine as much.\n\n\n\n\nB\n\n\n\n\nThis will bring up a menu of background thumbnails. Press Page Up or Page Down to view more thumbs. Left-click a background to select it and use its music category as well, or right-click a background to select it without selecting its music category.\n\n\n\n\nG\n\n\n\n\nThis will change the current map's background image.\n\n\n\n\nR\n\n\n\n\nThis will change the current map's music category. This affects what songs, out of the current music pack, that the game will decide to play when you use this map.\n\n\n\n\nE\n\n\n\n\nThis will bring up a dialog which will allow you to select what kind, if any, of extra eyecandy you want on the map.\n\n\n\n\nCTRL + DELETE\n\n\n\n\nThis will clear all tiles and blocks from the current map.\n\n\n\n\nInsert\n\n\n\n\nAs mentioned before, this will take a set of three screenshots of the currently selected map.\n\n\n\n\nN\n\n\n\n\nCreates a new map with the current map's background. You will be prompted to enter a name for the new map.\n\n\n\n\nS\n\n\n\n\nAs stated above, this key will immediately save the map to the name in the upper right corner of the screen.\n\n\n\n\nShift + S\n\n\n\n\nThis allows you to save another copy of the map with a new name. However, the editor will not switch to that copy - if you want to work on the new map, you'll have to go select it yourself (although you can use Shift + F to find it, as explained below).\n\n\n\n\nShift + F\n\n\n\n\nFind a map by name - This will bring up a dialog where you can enter part of a map name and it will open the first map whose filename contains a match for that string (if no map matches, the program will stay on the current map). You can then repeatedly press F to view all the maps that match that string.\n\n\n\n\nF\n\n\n\n\nRepeatedly press the F key to view all the maps that match the current find string. If you haven't used \"Shift + F\" yet, pressing F will bring up the find dialog.\n\n\n\n\nPage Up/Page Down\n\n\n\n\nThis will immediately go to the previous or next map in the list, respectively. Don't forget to save before using these!\n\n\n\n\nLeft click\n\n\n\n\nThis will simply place a tile in the currently selected layer, or place a block in the block layer.\n\n\n\n\nRight click\n\n\n\n\nThis will remove tiles and blocks from the currently selected layer.\n\n\n\n\nESC\n\n\n\n\nExits back to Tile Mode if in any other mode. If in Tile Mode, ESC exits the level editor.\n\n\nWorld Editor\n\n\nStarting and Choosing a World Map\n\n\nWhen the world map editor starts, you will be viewing the 00small world map.\n\n\nTo change which world map you are looking at, press Page Up or Page Down. By switching the world map in this way, you will lose any changes on the world map that were you working on. So, before you switch world map, you should press S to save that world map if you want to keep the changes.\n\n\nSaving the World Map\n\n\nThe name of the world map is in the upper right corner of the screen. If you want to save to a different world map and not overwrite the current world, hold shift then press S. The \"save as\" text will come up and you can save it as something else.\n\n\nSomething you might want to know\n\n\nMake sure you play around with the controls a bit before trying to create an important world map. Just remember that pressing S saves instantly to whatever world map name is in the upper right corner, overwriting whatever was there before.\n\n\nYou can also press \nF1\n in the editor to bring up a help screen, in case you need it.\n\n\nAs a general rule, if you want to place something, you should click with the left mouse button; to remove things, click the right mouse button.\n\n\nControls\n\n\n\n\n1\n\n\n\n\nBrings up the choice of water types to place on a world map. After you select a water type, click on the world map to place the selected water type. This can be used to make areas of light water, dark water, or lava in a world map.\n\n\n\n\n2\n\n\n\n\nBrings up the choice of land types to place on a world map. There are two pages you can choose from by pressing the number for that page. After you select a land type, the world map editor changes to Background Mode. This is used to place the land that players travel along to play through a world map.\n\n\n\n\n3\n\n\n\n\nBrings up the choice of objects you can place on a world map. There are six pages you can choose from by pressing the number for that page. After you select an object type, the world map editor changes to Foreground Mode. This is used to place level tiles, hills, and more across the land players travel along.\n\n\n\n\n4\n\n\n\n\nBrings up the choice of paths you can place on a world map. After you select a path type, the world editor changes to Path Mode. This is used to place the paths players travel along on a world map.\n\n\n\n\nP\n\n\n\n\nBrings up the choice of connection paths you can place on a world map. After you select a path type, the world editor changes to Path Sprite Mode. This is used to place the actual paths players travel along. Without these, players cannot move through a world map, so be sure to place these along the paths on your world map!\n\n\n\n\nW\n\n\n\n\nBrings up a choice of 10 warp connections. After you select a connection, the world editor changes to Warp Mode. This is used to set up warp pipes on a world map for players to use.\n\n\n\n\nV\n\n\n\n\nBrings up a choice of vehicles to place on a world map. After you select a vehicle, the world editor changes to Vehicle Mode. This is used to place mobile levels on a world map. Keep in mind that these require further editing in the txt file.\n\n\n\n\nT\n\n\n\n\nBrings up a choice of start tiles and locks to place on a world map. After you select a tile or lock, the world editor changes to Stage Mode. This is used to place start tiles or locks on a world map. This is used to place levels onto a world map after you've edited a list of levels into the txt file.\n\n\n\n\nB\n\n\n\n\nBrings up a choice of vehicle boundaries to place on a world map. After you select a vehicle boundary, the world editor changes to Boundary Mode. This is used to place limits on the movement range of vehicles.\n\n\n\n\nN\n\n\n\n\nCreates a new world map. You will be prompted to enter a name and set the height and width for the new world map.\n\n\n\n\nS\n\n\n\n\nAs stated above, this key will immediately save the world map to the name in the upper right corner of the screen.\n\n\n\n\nShift + S\n\n\n\n\nThis allows you to save another copy of the world map with a new name. However, the editor will not switch to that copy - if you want to work on the new world map, you'll have to go select it yourself (although you can use Shift + F to find it, as explained below).\n\n\n\n\nShift + F\n\n\n\n\nFind a world map by name - This will bring up a dialog where you can enter part of a world map name and it will open the first world map whose filename contains a match for that string (if no world map matches, the program will stay on the current world map). You can then repeatedly press F to view all the world maps that match that string.\n\n\n\n\nF\n\n\n\n\nRepeatedly press the F key to view all the world maps that match the current find string. If you haven't used \"Shift + F\" yet, pressing F will bring up the find dialog.\n\n\n\n\nPage Up/Page Down\n\n\n\n\nThis will immediately go to the previous or next world map in the list, respectively. Don't forget to save before using these!\n\n\n\n\nLeft click\n\n\n\n\nThis will simply place the select tile in the currently selected mode. Foreground objects, path graphics, and start tiles are on the same layers, so they can't be placed over each other.\n\n\n\n\nRight click\n\n\n\n\nThis will remove objects from the world map in the currently selected mode.\n\n\n\n\nR\n\n\n\n\nThis changes the music category for the selected world map. This affects what songs, out of the current music pack, that the game will decide to play when you use this world map.\n\n\n\n\nArrow Keys\n\n\n\n\nThis is used to navigate the currrently selected world map.\n\n\n\n\nA\n\n\n\n\nThis is used to toggle the Auto Paint option for connection paths and land. This can be used to gain more control over the layout of the land and path connections you place on a world map.\n\n\n\n\nCTRL + DELETE\n\n\n\n\nThis is used to clear everything from a world map and start over from scratch.\n\n\n\n\nESC\n\n\n\n\nExits back to Background Mode. If already in Background Mode, ESC exits out of the world map editor.\n\n\n\n\nHave fun, and don't forget to \nvisit our website!", 
            "title": "Super Mario War"
        }, 
        {
            "location": "/Super-Mario-War/#a-quick-note", 
            "text": "Super Mario War was developed by Florian Hufsky, Two52 and many more contributors. For a complete list of all these wonderful people, please see the file THANKS.txt which was included in this distribution. A list of changes to the game can also be found in WHATSNEW.txt, which should be in the same place.  If you create a map or some other content that you would like to share, or if you would like to share your comments in general, please visit the  Super Mario War website  and post a message in our  forums . New content is posted all the time, and your feedback and user-content is always welcome and appreciated, so please come visit!  Also, we have an official outlet for fan-made content like maps, music packs, skins, announcers, etc. Head on over to the  Super Mario War Stuff  website. It's full of the latest content released by fans of the game. Don't like how the menu looks? Try downloading a new menu pack! Tired of playing the same maps over and over? There are hundreds more available! More skins? We've got tons! Need somewhere to post content of your own? That's what it's there for! Take a moment and check it out!", 
            "title": "A quick note"
        }, 
        {
            "location": "/Super-Mario-War/#getting-started", 
            "text": "Super Mario War is a game for up to four players with many different modes of play. The basic goal of the game is to be the last player standing, and to accomplish this goal you must jump on your opponents' heads to kill them. There are many Mario-themed items you can use to help you kill your opponents, as well. In addition, there are several variations on this basic gameplay mechanic which you can try, such as Chicken, Capture The Flag, and so on. Plus, for those who enjoy customization, there are several aspects of the game which you can tweak to your liking through the Options menus, and if you like, you can make your own maps, skins, and other custom content to use (or download others' to use), too!  This section of the manual explains how to navigate the game's menus, and contains a short explanation of Tournaments and Tours as well. Please note that all of the controls listed in this section are defaults, and can be reconfigured if you like.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Super-Mario-War/#the-main-menu", 
            "text": "From this menu, you can access everything else in the game.   Start  will take you to the Match Type Menu (see below).   Players  allows you to change players between Player (human), Bot (computer), and None. You can't have less than two players active at any one time.  Options  takes you to the Options menu. For more information, check its section towards the end of this manual.    Controls  lets you configure the players' control schemes to your liking. For more info, check the Controls section of this manual.  Exit  causes the game to exit.", 
            "title": "The Main Menu"
        }, 
        {
            "location": "/Super-Mario-War/#match-type-menu", 
            "text": "From this screen, you can choose which type of match you'd like to play.   You can change the type of match by selecting the Match option and pressing Enter.     (If you're using a joystick, press Jump to lock in your selection.)    The match choices available are Single Game, Tournament, Tour, and the new World Map mode.    Once the Match option has been selected, you can choose the type of match with Left and Right.   After you've decided on a match type, select Start and press Enter (or Jump using a joystick) to go to the Team and Character Selection Menu.", 
            "title": "Match Type Menu"
        }, 
        {
            "location": "/Super-Mario-War/#team-and-character-selection", 
            "text": "From this screen, you can configure who is using which character and is on which team.   You can select what character you'd like to be, out of all the skins you have on your machine, with Up and Down.     You can select what team you want to be on with Left and Right.     If you want to have the game select a skin for you at random, press Up and Down together (or if using a joystick, press the Random button).  If you want to have a different random skin at the beginning of each match, without being able to see it beforehand, press Left and Right together (or with a joystick, press the Fast-Scroll and Random buttons together), which will change your skin into a flashing letter R.     Press your Turbo key to lock in your selection, unless you're Player 1, who uses Enter. (If you're using a joystick, press Jump to lock in your selection, no matter which player you are.)   After all players have locked in, you can press Enter on this screen to start your selected match type.", 
            "title": "Team and Character Selection"
        }, 
        {
            "location": "/Super-Mario-War/#single-game-menu", 
            "text": "From this menu, you can select your game mode, select the map you wish to use, change various mode settings, and tag your maps for easy selection. (When playing a Tour or World Map, all options on this screen, besides Start, are disabled.)   Start  starts the game.     Mode  allows you to change game modes. For info on these, please refer to the Game Modes section of this manual.     Lives/Kills/Time/Etc.  allows you to change the current game mode's basic parameter (i.e. the game length).    Map  allows you to change the map you want to use. You can press Left or Right to pick another map, or hold Left Shift and press Left or Right to go forward or backward 10 maps at a time. You can also repeatedly press a letter or a number to cycle through maps whose names start with it, or quickly type in part of a map's name to search for it.    Filters  allows you to select maps that only meet certain criteria. You can select one or more categories (such as whether or not the map contains moving platforms) and the game will only give you maps that meet all the criteria established. The bottom category, Simple, can be used as a custom filter by selecting the green question mark icon, which will give you a thumbnail view (see below) of all the maps. From there, maps can be toggled on (signified by a little coin) and off.  Thumbs  allows you to view many maps at once with a \"thumbnail\"-style view. To view other pages, scroll up or down off the screen, or hold Left Shift and press Up or Down.", 
            "title": "Single Game Menu"
        }, 
        {
            "location": "/Super-Mario-War/#playing-the-game", 
            "text": "The main goal of the game is to stomp on your opponents' heads to kill them, although depending on the map you're playing on, you may be able to kill them in other ways, such as with items. There may also be additional rules or a different way of winning, depending on the mode you are playing; for information on these, you can check the Game Modes section of this manual. For information on the controls you'll be using to play the game, check out the section on Controls, below. And to learn about the different items and map elements you can use to turn the tables on your opponents, take a look at the Items and Special Blocks sections, towards the middle of the manual.", 
            "title": "Playing the Game"
        }, 
        {
            "location": "/Super-Mario-War/#tournaments-tours-and-world-maps", 
            "text": "In a Tournament, players play games until one player has amassed a certain number of wins. The number of the Tournament determines how many wins are required (so, if you pick Tournament 4, you have to win four times). Each time a player wins, they will receive an icon on the scoreboard (first picture, above). This icon will be representative of the mode played.  In a Tour, players play a series of predetermined games (\"tour stops\"). At the end of each game, players receive points based on how well they placed, and icons will be displayed on the scoreboard (second picture, above) to show just how each player placed in that round. Tours can be created by making a text file in the game's Tours subdirectory, following the correct format (check out simple.txt for more info). It is possible to designate how valuable each individual tour stop is (this information is displayed along the top of the scoreboard - see the screenshot), as well as which tour stops grant a bonus item to the winner.  In a World Map, a random player is given control of the board to start. Players navigate the map and play predetermined games to compete for the best score. To check and/or play a game on the map, press Turbo on the game's tile. (Enter for Player 1.) The screen preceding a game shows the name of the Map Stop, map, mode, and goal. Also shown are any items rewarded after the game and the point value for the Map Stop. The winner of the game gains control of the board. Items gained from Mushroom Houses, game rewards, etc., can be accessed by pressing Use Item. To use an item in your inventory, select it and press Turbo.    For a list of the World Map items, take a look at the Items and Special Blocks section towards the middle of the manual. Mushroom Houses can be found on many World Maps, so make good use of them! Each Mushroom House can hold up to five items to choose from. The items may be in order, or they may be random, depending on how it's set up in the world's txt file. To open a chest, simply stand in front of it and press Turbo.   In addition to predetermined games and Mushroom Houses, there are vehicle tiles, which move after every game or Mushroom House. Upon landing on one, it will automatically start the game set to it. In some maps, there are bridges that rise and lower with each game, blocking players from travelling across. There are also warp pipes that can be used to travel. Along with those, there are locked doors, which can be opened with a key obtained through one of the games on the map. The World Map match ends when the game marked \"End Stage\" has been played. There can be more than one of these per map.  At the end of a Tournament, or after every game within the Tournament if that option is set (see the Options section towards the end of this manual), the winner will get a chance to spin the bonus wheel to acquire an item that they can use in the next game or games. However, in Tours, the bonus wheel will only appear in places where the tour's creator designates it, regardless of any current settings. Tour stops with this opportunity are represented on the scoreboard as small winged yellow boxes.", 
            "title": "Tournaments, Tours, and World Maps"
        }, 
        {
            "location": "/Super-Mario-War/#controls", 
            "text": "The following are the default controls. Controls can be configured within the Controls menu, accessible from the main menu. From there, you can also switch your input devices to joysticks (see the next section for information on joystick controls).", 
            "title": "Controls"
        }, 
        {
            "location": "/Super-Mario-War/#game-controls", 
            "text": "Action  Player 1  Player 2  Player 3  Player 4      Left  Left Arrow  A  G  L    Right  Right Arrow  D  J  '    Jump  Up Arrow  W  Y  P    Down  Down Arrow  S  H  ;    Turbo  R. Ctrl  E  U  [    Use Item  R. Shift  Q  T  O    Pause  Enter  n/a  n/a  n/a    Exit  Esc  n/a  n/a  n/a      Press  Left  or  Right  to move left or right.     Press  Jump  to jump. Press  Down  to jump down through certain platforms.     Press  Turbo  to fire your weapon or to explode if you are a Bob-Omb. Hold  Turbo  and press  Left  or  Right  to run. While running, you can pick up shells and blue blocks that are not moving. To throw these items forward, release the Turbo key. To drop shells without throwing them, hold  Down  and release the Turbo key.     Press  Use Item  to use whatever item is stored in your Item box. For more information on items, see their section below.    Press  Pause  to pause the game. Press it a second time to resume.     Press  Exit  to pause the game and bring up a dialog box. From there, you can either resume play or quit the game and return to the Single Game Menu or Scoreboard if in a Tournament, Tour, or World Map.     Once the game has ended and the victory fanfare has played, pressing either  Pause  or  Exit  will exit the game and return you to the Game Selection menu (or to the Scoreboard if in a Tournament, Tour, or World Map).", 
            "title": "Game controls"
        }, 
        {
            "location": "/Super-Mario-War/#menu-controls", 
            "text": "Action  Player 1  Player 2  Player 3  Player 4         Up  Up Arrow  W  Y  P      Down  Down Arrow  S  H  :      Left  Left Arrow  A  G  L      Right  Right Arrow  D  J  '      Select  Enter  E  U  [      Cancel  Escape  Q  T  O      Random  Space Bar  n/a  n/a  n/a      Fast Scroll  L. Shift  n/a  n/a  n/a       Only Player 1's menu controls may be used in most menus.  Use  Up ,  Down ,  Left , and  Right  to navigate through menu choices, map thumbnails, etc.  Press  Select  to select options and confirm choices.  Press  Cancel  to return to the previous menu.  To change a configurable choice, highlight it and press  Select . Use  Left  or  Right  to cycle between available options, or press  Random  to have the computer select an available option at random. Press  Select  or  Cancel  to lock in your selection. When using a slider, like the ones on the Item Selection screen, you can also hold  Fast Scroll  and press  Left  or  Right  to jump from to one end or the other.    On the main menu, to change player settings, press  Left  or  Right  to select a player, and  Up  or  Down  to change between Player, Bot, and Off.     On the Player Select screen, press  Up  or  Down  to select a skin to use. Press  Left  or  Right  to select the team you want to be on. Press  Select  to lock in your choice. If you want to cancel your selection and pick something else, press  Cancel . Once everyone has locked in their choices, have Player 1 press Select to advance to the Game Select menu.     When selecting a skin, press  Up  and  Down  together to have the computer pick one for you at random. Press  Left  and  Right  together to make the computer pick a skin for you at random at the beginning of each round, even in the middle of a Tournament or Tour.    When selecting a map, hold  Fast Map  and press  Left  or  Right  to go 10 maps at a time. When viewing maps by thumbnails, hold  Fast Scroll  and press  Up  or  Down  to quickly scroll through pages.", 
            "title": "Menu controls"
        }, 
        {
            "location": "/Super-Mario-War/#pc-joystick", 
            "text": "When using joysticks, it is important to note that there are a couple of differences in some basic controls. It is also important to note that the default settings for inputs are, most likely,  not  the ones you want, since every joystick internally numbers and names its buttons differently (for example, on Joystick A, \"button 1\" might be the A button, whereas on Joystick B it's the left trigger). So when you set the game up to use a joystick, be sure to configure the buttons to something you like. (For this reason, the default controls will not be listed here.)  The following are the changes to the controls when using a joystick. For information on controls not listed here, see the Keyboard section.   In-game, to jump down through platforms, you have to hold  Down  and press  Jump , instead of just pressing Down.   All players with joysticks have  Random  and  Fast Map  menu controls. In addition, all players with joysticks have control in menus, not just Player 1.  When selecting skins, to have the game select one at random, you must press  Random  instead of Up and Down together. Similarly, instead of pressing Left and Right toegether to get a random skin for each match, you have to hold  Fast Map  and press  Random .", 
            "title": "PC - Joystick"
        }, 
        {
            "location": "/Super-Mario-War/#xbox", 
            "text": "When playing on the Xbox, each player is \"locked in\" to their joystick - in other words, Player 1 will always use the joystick plugged into the first port, etc.  The following are the default controls. All controls can be reconfigured via the Controls menu, accessible from the main menu.", 
            "title": "Xbox"
        }, 
        {
            "location": "/Super-Mario-War/#game-controls_1", 
            "text": "", 
            "title": "Game controls"
        }, 
        {
            "location": "/Super-Mario-War/#all-players", 
            "text": "Action  Control      Left  Left (D-Pad)    Right  Right (D-Pad)    Jump  A    Down  Down (D-Pad)    Turbo  X    Use Item  Y    Pause  Start    Exit  Back      Press  Left  or  Right  to move left or right.   Press  Jump  to jump. Hold  Down  and press  Jump  to jump down through certain platforms.     Press  Turbo  to fire your weapon or to explode if you are a Bob-Omb. Hold  Turbo  and press  Left  or  Right  to run. While running, you can pick up shells and blue blocks that are not moving. To throw these items forward, release the Turbo key. To drop shells without throwing them, hold  Down  and release the Turbo key.     Press  Use Item  to use whatever item is stored in your Item box. For more information on items, see their section below.*   Press  Pause  to pause the game. Press it a second time to resume.     Press  Exit  to pause the game and bring up a dialog box. From there, you can either resume play or quit the game and return to the Game Selection menu or Scoreboard if in a Tournament, Tour, or World Map.    Once the game has ended and the victory fanfare has played, pressing either  Pause  or  Exit  will exit the game and return you to the Game Selection menu (or to the Scoreboard if in a Tournament, Tour, or World Map).", 
            "title": "All Players"
        }, 
        {
            "location": "/Super-Mario-War/#menu-controls_1", 
            "text": "", 
            "title": "Menu controls"
        }, 
        {
            "location": "/Super-Mario-War/#all-players_1", 
            "text": "Action  Control      Up  Up (D-Pad)    Down  Down (D-Pad)    Left  Left (D-Pad)    Right  Right (D-Pad)    Select  A    Cancel  Back    Random  X    Fast Scroll  Y      Use  Up ,  Down ,  Left , and  Right  to navigate through menu choices, map thumbnails, etc.  Press  Select  to select options and confirm choices.*   Press  Cancel  to return to the previous menu.  To change a configurable choice, highlight it and press  Select . Use  Left  or  Right  to cycle between available options, or press  Random  to have the computer select an available option at random. Press  Select  or  Cancel  to lock in your selection. When using a slider, like the ones on the Item Selection screen, you can also hold  Fast Scroll  and press  Left  or  Right  to jump from to one end or the other.  On the main menu, to change player settings, press  Left  or  Right  to select a player, and  Up  or  Down  to change between Player, Bot, and Off.  On the Player Select screen, press  Up  or  Down  to select a skin to use. Press  Left  or  Right  to select the team you want to be on. Press  Select  to lock in your choice. If you want to cancel your selection and pick something else, press  Cancel . Once everyone has locked in their choices, press Select to advance to the Game Select menu.  When selecting a skin, press  Random  to have the computer pick one for you at random. Hold  Fast Scroll  and press  Random  to make the computer pick a skin for you at random at the beginning of each round, even in the middle of a Tournament or Tour.*   When selecting a map, hold  Fast Scroll  and press  Left  or  Right  to go 10 maps at a time. When viewing maps by thumbnails, hold  Fast Scroll  and press  Up  or  Down  to quickly scroll through pages.", 
            "title": "All Players"
        }, 
        {
            "location": "/Super-Mario-War/#game-modes", 
            "text": "There are many different ways to play Super Mario War. Each one is a little different than all the others, and each one requires different strategies. In addition, some modes have additional options that you can use to customize your game further. In the listings of possible options below, the defaults are shown in bold.  An option common to all modes (and subsequently not listed under each one) is the ability to set the basic parameter to \"Unlimited\", or Free Play.", 
            "title": "Game Modes"
        }, 
        {
            "location": "/Super-Mario-War/#classic", 
            "text": "This is the original Mario War game where each player starts with X lives and the last player with any lives left is the winner. Touching a hazard (such as spikes) causes you to lose a life; collecting a 1UP mushroom gives you an extra life.  Basic Parameter:  Lives  (5 to 100 by 5s,  10  default)  Additional Parameters:   On Kill  (whether you respawn upon death): Respawn  default, Shield", 
            "title": "Classic"
        }, 
        {
            "location": "/Super-Mario-War/#frag-limit", 
            "text": "This is the standard frag limit game where the first player to kill X players wins. Dying on a hazard causes you to lose a frag; collecting a 1UP mushroom gives you an extra frag.  Basic Parameter:  Kills  (5 to 100 by 5s,  20  default)  Additional Parameters:   On Kill  (whether you respawn upon death): Respawn  default, Shield  Scoring  (what type of kills count):  All Kills  default, Push Kills Only", 
            "title": "Frag Limit"
        }, 
        {
            "location": "/Super-Mario-War/#time-limit", 
            "text": "This is a timed game played to the number of seconds you select. The player with the most frags at the end of this time is the winner. Dying on a hazard causes you to lose a frag; collecting a 1UP mushroom gives you an extra frag.  Basic Parameter:  Time  (30 to 600 by 30s,  60  default)  Additional Parameters:   On Kill  (whether you respawn upon death): Respawn  default, Shield  Scoring  (what type of kills count):  All Kills  default, Push Kills Only*     Extra Time Slider  (how often an extra time powerup appears from item blocks): 0 to 20 (default of ?)", 
            "title": "Time Limit"
        }, 
        {
            "location": "/Super-Mario-War/#jail", 
            "text": "This mode is similar to Frag Limit, but with a couple of modifications. Each player you kill in this mode will spawn in jail. When a player is in jail, their movement is slowed down and their jumping ability is hampered. If all the players on other teams are jailed, you earn extra points and everyone (both on your team and other teams) is freed. (This bonus is disabled in a 1v1 match, however, due to complete pointlessness.) If a player on your team tags you while in jail, you are freed. You are also freed if you spend enough time in jail.  Basic Parameter:  Kills  (5 to 100 by 5s,  20  default)  Additional Parameters:   Style  (jailed player behavior):  Free For All  default, Classic, Owned  Free Timer  (# of seconds to get out of jail): None, 5, 10, 15,  20 , 25, 30, 35, 40, 45, 50, 55, 60  Tag Free  (whether you can tag your teammates to free them):  On , Off  Jail Key Slider  (how often a jail key powerup appears from item blocks): 0 to 20 (default of ?)", 
            "title": "Jail"
        }, 
        {
            "location": "/Super-Mario-War/#coin-collection", 
            "text": "This game isn't about killing other players, it is about collecting coins. One or more coins will appear somewhere on the map. If someone grabs a coin, or if nobody can get to one within a certain amount of time, a new one will appear somewhere else. The first player to collect X coins wins. Whether dying has an effect can be set in this mode's options, and collecting a 1UP counts as collecting a coin.  Basic Parameter:  Coins  (5 to 100 by 5s,  20  default)  Additional Parameters:   Penalty  (whether there is a -1 penalty for death): On,  Off  Quantity  (how many coins will appear at once):  1 , 2, 3, 4, 5", 
            "title": "Coin Collection"
        }, 
        {
            "location": "/Super-Mario-War/#stomp", 
            "text": "In this mode, Goombas, Cheep Cheeps, Green and Red Koopas, Spinies, Buzzy Beetles, Paragoombas, and Green and Red Parakoopas will randomly spawn; the goal is to stomp or shoot as many as you can. The first player to kill X enemies wins. Stomping other players does nothing; neither does getting killed on hazards. Collecting a 1UP counts as an extra kill.  Basic Parameter:  Kills  (10 to 200 by 10s,  10  default)  Additional Parameters:   Rate  (how often, in general, enemies appear): Very Slow, Slow,  Moderate , Fast, Very Fast  Goomba, Koopa, Cheep Cheep, Red Koopa, Spiny, Buzzy Beetle, Paragoomba, Parakoopa, and Red Parakoopa Sliders  (comparative rates of each enemy appearing): 0 to 10 each (defaults of 1, 1, 2, ?, ?, ?, ?, ?, and ? respectively)", 
            "title": "Stomp"
        }, 
        {
            "location": "/Super-Mario-War/#yoshis-eggs", 
            "text": "In this mode, up to 16 colored Yoshis and up to 16 bouncy little spotted eggs will randomly spawn. Players can pick the eggs up by holding the Turbo button and bring it back to a Yoshi of that color to gain a point. The first person to return X eggs to Yoshi wins the game. If you die, of course, you will lose the egg; collecting a 1UP gives you an additional point. If an egg is not grabbed for a long enough period of time or it explodes, it will move to another random location.  Basic Parameter:  Eggs  (5 to 100 by 5s,  20  default)  Additional Parameters:   Egg and Yoshi Sliders  (how many of each color egg and Yoshi will appear at once): 0 to 4 each (defaults of ?, ?, ?, ?, ?, ?, ?, and ? respectively)  Explosion Timer  (# of seconds before eggs explode):  Off , 3, 5, 8, 10, 15, 20", 
            "title": "Yoshi's Eggs"
        }, 
        {
            "location": "/Super-Mario-War/#capture-the-flag", 
            "text": "In this mode, each team has a base and a flag. The goal is to protect your flag from being stolen and at the same time steal other teams' flags and bring them back to your base. The first team to return X enemy flags to their base wins. You can also bring your own flags back to your base if you can retrieve them from an opponent. Collecting a 1UP counts as having collected an enemy flag; dying in any way has no effect on your score.  Basic Parameter:  Flags  (5 to 100 by 5s,  20  default)  Additional Parameters:   Speed Slider  (for adjusting the speed of the bases' movement): 0 to 8 (default of 0)  Touch Return  (whether you can return your own flag to base just by touching it): On,  Off  Point Move  (whether your base moves after you score):  On , Off  Auto Return  (seconds before your flag returns itself): None, 5, 10, 15,  20 , 25, 30, 35, 40, 45, 50, 55, 60  Need Home  (whether your flag has to be in the base for you to score): On,  Off  Center Flag  (whether you have to steal other teams' flags or return a single flag to your base): On,  Off", 
            "title": "Capture The Flag"
        }, 
        {
            "location": "/Super-Mario-War/#chicken", 
            "text": "In this mode, the first person to kill another person will turn into the chicken. The player that is the chicken will constantly rack up points. The first player to X points wins. Dying on spikes will cause you to stop being the chicken, if you are; collecting a 1UP mushroom will give you 10 points no matter who you are. Killing another player while you're the chicken will also give you a bonus of 5 points.  Basic Parameter:  Points  (50 to 1000 by 50s,  200  default)  Additional Parameters:   Show Target  (whether an extra crosshair is displayed around the chicken):  On , Off  Chicken Glide  (whether the chicken has a floating ability): On,  Off", 
            "title": "Chicken"
        }, 
        {
            "location": "/Super-Mario-War/#tag", 
            "text": "Tag is essentially the opposite of Chicken mode. At the start, one player will randomly be chosen as the tagged player (they will turn bright green with a white border). It is the job of the tagged one to kill (or touch) somebody else to transfer the tag. The tagged player gets a speed boost to help him catch the other players. When you're the tagged player, you'll constantly be losing points. When you hit 0, you are removed from the game and the player with the highest points will then become tagged. Being killed or killing yourself takes 5 points off your score and collecting a 1UP mushroom restores 10 points.  Basic Parameter:  Points  (50 to 1000 by 50s,  200  default)  Additional Parameters:   Touch Tag  (whether you can transfer the tag by just touching):  On , Off", 
            "title": "Tag"
        }, 
        {
            "location": "/Super-Mario-War/#star", 
            "text": "In this mode, there will either be a Ztar, a Shine Sprite, or Multi Stars, depending on how the options are set. One player will be designated to be the owner of one of these objects, and if other players touch it, they will steal the object's ownership status. There is also a timer that gradually counts down.   If the object in play is a Ztar, whoever has it when the clock hits 0 will lose a life. The clock will reset, and the same person will own the Ztar next time. Once a player is eliminated, the Ztar will go to the next player who has the most lives remaining (chosen at random if there is a tie). If you own the Ztar, you should try to hit other people with it (either by tagging or by throwing) so that they will take ownership.*     If the object in play is a Shine, whoever  doesn't  have it when the clock hits 0 will lose a life. The clock will reset, and the Shine will change owners to whoever has the least number of lives remaining (chosen at random if there is a tie). If you own the Shine, you should try to keep it away from other players so that they can't take ownership.*     If the objects in play are Multi Stars, all but one player will have ownership of a colored star. Whoever is left without a star when the clock hits 0 will lose a life. The clock will reset, and whoever has the most lives will lose ownership of their star. If you own a Multi Star, you should try to keep it away from the player without one.*     In all three cases, if the object in play stays out of its owner's hands for too long, it will warp right to them so they can start using it/keeping it away again.   Dying in any way other than from the countdown ending has no effect on your score. It's also important to know that in this mode, since the number of lives you start with is quite small, and extra lives are very valuable, 2UPs and 3UPs are only worth 1 extra life, and 5UPs are worth only 2.  Basic Parameter:  Lives  (1 to 20,  5  default)  Additional Parameters:   Time  (# of seconds on the timer): 5, 10, 15, 20, 25,  30 , 35, 40, 45, 50, 55, 60  Star Type  (which object is used):  Ztar , Shine, Multi Star, Random  Extra Time Slider  (how often an extra time powerup appears from item blocks): 0 to 20 (default of ?)", 
            "title": "Star"
        }, 
        {
            "location": "/Super-Mario-War/#domination", 
            "text": "This mode is like the domination mode from many FPSs. There will be several bases randomly placed around the map and it is the goal to control as many of them as possible. You control them by tagging them. The more you control, the faster you accumulate points; the first player to accumulate X points wins. Additionally, every so often the bases will automatically relocate themselves to new, random positions. Collecting a 1UP gives you 10 points; what happens when you die (by any means) can be set in this mode's options.  Basic Parameter:  Points  (50 to 1000 by 50s,  200  default)  Additional Parameters:   Quantity  (the number of bases that appear): 1 to 10, # Players - 1, # Players,  # Players + 1 , # Players + 2 to 6, 2x Players - 3 to 1, 2x Players, 2x Players + 1 or 2  Relocate  (time between relocations): Never, 5, 10, 15,  20 , 25, 30, or 45 seconds, 1, 1.5, 2, 2.5, or 3 minutes    On Death:   Lose Bases  (whether your bases reset to neutral):  On , Off  Move Bases  (whether your bases move): On,  Off  Steal Bases  (whether your bases are taken by who killed you): On,  Off  Steal Bases overrides Lose Bases when it is on.", 
            "title": "Domination"
        }, 
        {
            "location": "/Super-Mario-War/#king-of-the-hill", 
            "text": "In this mode there is a small zone, \"the hill,\" designated by a chainlink fence design. While your team is the only one with players in this zone, you have control of the hill; its border will change to your team's color and your team will gain points at a constant rate. However, the hill will occasionally relocate itself to a new, random position. First team to X points wins. Collecting a 1UP grants 10 points; dying does not affect your score.  Basic Parameter:  Points  (50 to 1000 by 50s,  200  default)  Additional Parameters:   Size  (size of the scoring zone): 2x2,  3x3 , 4x4, 5x5*     Relocate  (time between relocations): Never, 5, 10, 15,  20 , 25, 30, or 45 seconds, 1, 1.5, 2, 2.5, or 3 minutes  Max Multiplier  (increase in point gain over control time):  None , 2, 3, 4, 5", 
            "title": "King Of The Hill"
        }, 
        {
            "location": "/Super-Mario-War/#race", 
            "text": "In this mode, you must race around the map tagging moving targets in numerical order (you must tag \"1\" first, then \"2\", and so on). As you tag targets, your team indicator will appear on them. Once you tag all the numbered targets, head to the finish line (the checkered flag) to score a point. Collecting a 1UP gives you one extra lap; the penalty for dying can be configured in this mode's options. (It should be noted that in Race mode, 2UPs and 3UPs are only worth 1 extra lap, and 5UPs are worth only two, due to the usual small size of the goal score.)  Basic Parameter:  Laps  (5 to 100 by 5s,  10  default)  Additional Parameters:   Quantity  (the number of targets, including the checkered flag): 2, 3,  4 , 5, 6, 7, 8  Speed  (how fast the targets move): Stationary, Very Slow, Slow,  Moderate , Fast, Very Fast  Penalty  (what you lose when you die): None, One Goal,  All Goals", 
            "title": "Race"
        }, 
        {
            "location": "/Super-Mario-War/#owned", 
            "text": "This mode is similar to Domination, except the players are your targets. Each player that you kill will spawn with a circle of your color behind them. For every player you have \"Owned\", the faster you accumulate points. If you are killed, you lose all your owned players. Collecting a 1UP gives you 10 points. Also, if you kill one of the players you already own, you will receive an extra 5 points.  Basic Parameter:  Points  (50 to 1000 by 50s,  200  default)  Additional Parameters: None", 
            "title": "Owned"
        }, 
        {
            "location": "/Super-Mario-War/#frenzy", 
            "text": "This mode has the same rules as Frag Limit, except special powerup cards will randomly spawn around the map. Collecting one of these cards has the same effect as getting that item out of an item box, for the most part. This just makes the basic deathmatch just a little more exciting, not to mention that it lets you have items on maps that usually don't. There are eighteen items that can appear on the cards: Bob-Ombs, Fire Flowers, Hammers, Feathers, Boomerangs, Ice Wands, Bombs, Raccoon Leaves, P Wings, Tanooki Suits, POWs, MOds, Bullet Bills, Podobos, and all four different types of Shells. There is also a nineteenth ? card that gives a powerup at random.  Basic Parameter:  Kills  (5 to 100 by 5s,  20  default)  Additional Parameters:   Limit  (the number of item cards shown at once): Single Powerup, 1 to 5 Powerups,  # Players - 1 , # Players, # Players + 1 to 3  Rate  (how long it takes for new cards to appear when they can): Instant, 1, 2,  3 , 5, 10, 15, 20, 25, or 30 seconds*    Store Shells  (see note):  On , Off   Sliders for Items  (comparative frequencies of each one appearing on cards): 0 to 10 each (defaults of 1 for Fire Flowers and Hammers, and 0 for everything else)    If Limit is set to Single Item, no more cards will appear until the person who picked up the first one uses it (in the case of Stored items or the Bob-Omb), no longer has it (in the case of Weapon items or the Bob-Omb), or has touched it (in case of Shells). In either case there is no delay for the card to appear after the first time. (This is the same way that the card in Bob-Omb mode worked in version 1.5.)   If Store Shells is set to On, then when you touch a shell card, the shell will become a Stored item. If it is set to Off, then touching a shell card has the same effect as touching a regular shell (i.e. if you are holding Turbo then you will grab the shell; otherwise you will just kick it out of midair).", 
            "title": "Frenzy"
        }, 
        {
            "location": "/Super-Mario-War/#survival", 
            "text": "This mode has the same rules as Classic, except now, Thwomps will rain down from the sky, Podobos will pop up from the bottom, and fireballs will shoot in from the sides. Hitting any of these hazards will kill you. Just as in Classic, the last player alive wins.  Basic Parameter:  Lives  (5 to 100 by 5s,  20  default)  Additional Parameters:   Thwomp, Podoboo, and Fireball sliders  (comparative frequencies of each one appearing): 0 to 10 each (defaults of 1, 0, and 0 respectively)  Density  (how often hazards appear overall): Very Low, Low,  Medium , High, Very High     Speed  (how fast Thwomps fall down): Very Slow, Slow,  Moderate , Fast, Very Fast     Shield  (allows you to set a separate shield setting for this mode):  On , Off", 
            "title": "Survival"
        }, 
        {
            "location": "/Super-Mario-War/#greed", 
            "text": "This mode is basically a twist on Coin Collection mode. You now start with a number of coins, and being stomped, shot, or dying on spikes or lava makes you drop coins. The last player left holding any coins wins.  Basic Parameter:  Coins  (10 to 200 by 10s,  20  default)  Additional Parameters:   Coin Life  (# of seconds before dropped coins disappear): 1 to 10, 12, 15, 18, 20, 25,  30", 
            "title": "Greed"
        }, 
        {
            "location": "/Super-Mario-War/#health", 
            "text": "This mode has the same rules as Classic, except now, players have a set number of health points. These health points are shown in half and full hearts. When a player loses reaches 0 hearts, they lose a life. Collecting the 1, 2, 3, and 5UPs restore health. Just like Classic, the last player alive wins.  Basic Parameter:  Lives  (1 to 20  5  default)  Additional Parameters:   Start Life  (# of health points players start a match with):  2 , 3, 4, 5, 6, 7, 8, 9, 10*     Max Life  (max # of health points players can have in a match):  2 , 3, 4, 5, 6, 7, 8, 9, 10*     Extra Life Slider  (how often a heart powerup appears from item blocks): 0 to 20 (default of 10)", 
            "title": "Health"
        }, 
        {
            "location": "/Super-Mario-War/#card-collection", 
            "text": "Like Coin Collection, this mode is about collecting, but instead of coins, you collect cards. One or more cards will appear somewhere on the map. If someone grabs a card, it reveals either a star, flower, or mushroom on the other side of it. Collecting a combination of any 3 cards results in 1 point. Players can gain more points by collecting three of the same card. Collecting 3 mushroom cards results in 2 points, 3 flower cards results in 3 points, and 3 star cards results in 5 points. Dying causes your player to drop the last card picked up, which other players can steal. The first to reach the point limit is the winner.  Basic Parameter:  Points  (10 to 200 by 10s,  20  default)  Additional Parameters:   Limit  (the number of item cards shown at once): 1 to 5,  # Players -1 , # Players, # Players +1 to 3*     Rate  (# of seconds for new cards to appear when they can): Instant, 1 to  3 , 5, 10, 15, 20, 25, 30*     Bank Time  (how long players have to swap their third card): Instant, 1 to 10 (default of 3)", 
            "title": "Card Collection"
        }, 
        {
            "location": "/Super-Mario-War/#phanto", 
            "text": "In this mode, players compete for ownership of a key. However, as long as a player is carrying the key, a number of Phantos will chase after the player. While carrying the key, the player's score constantly increases. Not only the key carrier has to be careful of the Phantos this time, though! In addition to the original Phantos, there are now green Phantos that can kill any player and red Phantos that drop the key carrier's score if one manages to catch the player. The first to reach the point limit is the winner.  Basic Parameter:  Points  (50 to 1000 by 50's,  500  default)  Additional Parameters:   Speed  (how fast the Phantos travel): Very Slow, Slow,  Moderate , Fast, Very Fast, Extremely Fast, Insanely Fast  Phanto Sliders  (how many plain, green, and red Phantos chase the key carrier): 0 to 5 (defaults of 1, 0, and 0 respectively)", 
            "title": "Phanto"
        }, 
        {
            "location": "/Super-Mario-War/#special-blocks", 
            "text": "", 
            "title": "Special Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#bricks", 
            "text": "If you hit these from underneath, from the side with a shell, or flip them with a cape or tail, they will break. If anything is standing on these when you break them from below, you will kill it.", 
            "title": "Bricks"
        }, 
        {
            "location": "/Super-Mario-War/#note-blocks", 
            "text": "These make you bounce. If you time your jump off them, you can go really high!", 
            "title": "Note Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#orange-note-blocks", 
            "text": "Like regular Note Blocks, these make you bounce, but you can go even higher!", 
            "title": "Orange Note Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#blue-note-blocks", 
            "text": "Like regular Note Blocks, these make you bounce, but you can't high jump from them.", 
            "title": "Blue Note Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#item-boxes", 
            "text": "If you hit one of these from underneath, from the side with a shell, or flip them with a cape or tail, a random item will pop out of it. You can also kill things on top of these by bumping them.", 
            "title": "Item Boxes"
        }, 
        {
            "location": "/Super-Mario-War/#view-blocks", 
            "text": "These are almost identical to Item Blocks, except you can see the item inside!", 
            "title": "View Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#flip-blocks", 
            "text": "If you hit these from underneath, they will start spinning. While they are spinning, you can go through them as if they weren't there. If they aren't spinning, and you hit these with shells, flip them with a cape or tail, or super smash them, they will break.", 
            "title": "Flip Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#bounce-blocks", 
            "text": "If something is standing on one of these, and you hit it from underneath, you will kill what was standing there. Don't stand on these too much if you can avoid it!", 
            "title": "Bounce Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#donut-blocks", 
            "text": "If you stand on these too long they will fall off the map. Watch out for traps underneath! Falling donut blocks can kill other players if they hit them, so try it if you get a chance!", 
            "title": "Donut Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#item-breakable-blocks", 
            "text": "These blocks can only be destroyed by using the item shown on the front of the block. They come in Fire Flower, Cape Feather, Shell, Bomb, Boomerang, Hammer, Goomba's Shoe, P Wing, Star, and Raccoon Leaf varieties. The Bomb variety can be destroyed with any explosion. The Cape Feather and Raccoon Leaf varieties can be destroyed by flipping them. The Goomba's Shoe variety can be destroyed by the Goomba Shoe and Tanooki Statue's super smash. The P Wing variety can be destroyed from below during P Wing flight. The Shell variety can be destroyed by any shell.", 
            "title": "Item Breakable Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#blue-throw-blocks", 
            "text": "You can pick these up and throw them at other players with the Turbo button. They will break when they hit a wall or another player. They will also disappear by themselves if you hold them for too long.", 
            "title": "Blue Throw Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#grey-throw-blocks", 
            "text": "You can pick these up and throw them at other players with the Turbo button. Unlike the Blue Throw Block, these can kill multiple players, but they still break when they hit walls. They will also disappear by themselves if you hold them for too long.", 
            "title": "Grey Throw Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#red-throw-blocks", 
            "text": "You can pick these up and throw them at other players with the Turbo button. Unlike the Blue and Grey Throw Blocks, these can kill multiple players and bounce off of walls. They will also disappear by themselves if you hold them for too long.", 
            "title": "Red Throw Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#onoff-switches", 
            "text": "These come in four colors. While they are ON, all corresponding Switch Blocks on the map will be solid; similarly, while they are OFF, their Switch Blocks will be transparent. When you hit one of these from underneath, with a shell from the side, or spin them with a cape or tail, they will switch states. You can also kill people standing on Switches by bumping them from underneath. Players caught in Switch Blocks when turned on are killed.", 
            "title": "ON/OFF Switches"
        }, 
        {
            "location": "/Super-Mario-War/#switch-blocks", 
            "text": "Like the Switches, these come in four colors. When you can see their outlines, you can travel right through them; while they are completely visible, they act as a regular solid tile.  Some of the blocks in the game are able to be hidden in maps. To reveal a hidden block, simply jump and hit it from below. Hidden blocks can rehide themselves after a set amount of time, depending on how they're set in the options menu. (See the Item Settings menu section further down.)", 
            "title": "Switch Blocks"
        }, 
        {
            "location": "/Super-Mario-War/#items", 
            "text": "Items in the game can be acquired in three ways: from item boxes (\"?\" blocks), from Bonus Wheel spins, or in the World Map Mode. When collecting an item from an item box, it may be used instantly or it may be stored for later use, depending on the item. Items that are acquired by spinning the Bonus Wheel will always become a stored item at the beginning of each game you play, until they are overridden by another wheel spin or are cleared via the options menu. Items acquired in the World Map modes are accessed and used on the map from your inventory.  Here are the classes of items:   Instant  - These will be used immediately by the player upon picking it up.  Stored  - These will be stored in the player's item box and can be used at any time by pressing the Item button.  Collectable  - These will be treated as Instant items if the player doesn't already have them; otherwise they will be treated as Stored items.  Weapon  - These are just like Collectables, except that if you already have another Weapon, the one you already had becomes stored instead of the one you just got. Each player's current Weapon is displayed on top of their player icon on the score display.  Throwable  - These items cannot be gathered like other items, but you can pick them up when they are not moving by holding the Turbo button. When you release the button, you will throw the item.     Map Items  - These items are like throwable items, but they are a part of the map itself. They have different uses, depending on the map item.  World Map  - These items can only be found and used in a World Map match. Their uses range from score alteration to stealing control of the board!", 
            "title": "Items"
        }, 
        {
            "location": "/Super-Mario-War/#1up-mushroom", 
            "text": "Type: Instant  In game modes where the score is a measure of lives, frags, Goomba kills, etc., this item will grant you an extra life, frag, lap, etc. In all other modes, this item will grant you 10 extra points.", 
            "title": "1UP Mushroom"
        }, 
        {
            "location": "/Super-Mario-War/#2up-mushroom", 
            "text": "Type: Instant  Catching this pretty pink 'shroom counts as having collected 2 1UP Mushrooms (so you will receive either 2 extra lives, frags, etc., or 20 points towards the goal, with the exception of Race and Star modes in which this item still grants only 1 extra point). However, it moves a little faster than a 1UP.", 
            "title": "2UP Mushroom"
        }, 
        {
            "location": "/Super-Mario-War/#3up-mushroom", 
            "text": "Type: Instant  Grabbing a blue mushie counts as having collected 3 1UP Mushrooms (so you will receive either 3 extra lives, frags, etc., or 30 points towards the goal, with the exception of Race and Star modes in which this item still grants only 1 extra point). However, it moves quite a bit faster than a 1UP.", 
            "title": "3UP Mushroom"
        }, 
        {
            "location": "/Super-Mario-War/#5up-mushroom", 
            "text": "Type: Instant  Snagging this golden treat counts as having collected 5 1UP Mushrooms (so you will receive either 5 extra lives, frags, etc., or a whopping 50 points towards the goal, with the exception of Race and Star modes in which this item grants only 2 extra points). However, it is the fastest-moving of all the mushrooms, as well as the rarest item in the game!", 
            "title": "5UP Mushroom"
        }, 
        {
            "location": "/Super-Mario-War/#poison-mushroom", 
            "text": "Type: Instant  Upon collecting this item, unless you are invincible, you will die. This will have the same effect on your score as hitting spikes or lava.", 
            "title": "Poison Mushroom"
        }, 
        {
            "location": "/Super-Mario-War/#mystery-mushroom", 
            "text": "Type: Instant  When you grab this item, everyone on the map will immediately switch positions and stored items with each other. The actual switching is random, so you could swap with Player 2 one time and with Player 3 the next. If whoever takes your place dies within one second of getting there, you will be credited with a kill. Additionally, whoever's place you take, you will also take their stored item in place of yours, even if they didn't have anything (in which case you will then have nothing stored). The effect used when players switch can be changed in the Options menu under Item Settings.", 
            "title": "Mystery Mushroom"
        }, 
        {
            "location": "/Super-Mario-War/#extra-time-mode-specific-powerup", 
            "text": "Type: Instant  When you grab this item in Timed or Star modes, an additional amount of time is added to the clock. How often this item appears can be set in the Additional Parameters for each mode.", 
            "title": "Extra Time (Mode Specific Powerup)"
        }, 
        {
            "location": "/Super-Mario-War/#heart-mode-specific-powerup", 
            "text": "Type: Instant  This item only appears in Health mode. When you grab this item, an extra half-heart is added to your player's health, depending on the Max Health option. How often this item appears can be set in the Additional Parameters.", 
            "title": "Heart (Mode Specific Powerup)"
        }, 
        {
            "location": "/Super-Mario-War/#fire-flower", 
            "text": "Type: Weapon  This item gives you the ability to shoot deadly fireballs with the turbo button. Fireballs bounce along the ground for a while until they disappear, but they will also disappear if they hit a wall or another player.", 
            "title": "Fire Flower"
        }, 
        {
            "location": "/Super-Mario-War/#hammer", 
            "text": "Type: Weapon  This item will give you the ability to throw hammers. Hammers travel in an arc whose lateral distance is determined by how fast you are moving, and as a result, hammers are not very easy to aim - but they can give you a big advantage over players who are trying to jump you if you can use them well.", 
            "title": "Hammer"
        }, 
        {
            "location": "/Super-Mario-War/#boomerang", 
            "text": "Type: Weapon  This item gives you the ability to shoot boomerangs. Using the default behavior, Boomerangs will travel ahead in a long arc before turning around and going in a straight line until they disappear. However, there are other trajectory types you can choose, under the Options menu (see below), if you don't like the default. Boomerangs, like hammers, can be shot through solid walls.", 
            "title": "Boomerang"
        }, 
        {
            "location": "/Super-Mario-War/#feather", 
            "text": "Type: Weapon  When you grab this item, you will don a cape and be granted the ability to jump a second time in midair! The second jump will be weaker than the first, though. This item is great for reaching high ledges, items, and targets. You can even attack enemies with a spin move! (Note that the Feather counts as a Weapon, so you can't combine it with others.)", 
            "title": "Feather"
        }, 
        {
            "location": "/Super-Mario-War/#p-wings", 
            "text": "Type: Weapon  When you grab this item, you will don a pair of wings and be granted the ability to take flight after a jump! The flight lasts for a limited time or until you release Jump. Like the Feather, this item is great for reaching high ledges, items, and targets. (Note that, the P-Wings don't allow you to shoot anything, but it also counts as a Weapon.)", 
            "title": "P-Wings"
        }, 
        {
            "location": "/Super-Mario-War/#raccoon-leaf", 
            "text": "Type: Weapon  When you grab this item, you will don a tail and be granted the ability to float safely to the ground after a jump! How slowly you float down depends on how fast you tap Jump. There is a limit to how slowly you can float down, though. Like the Feather, you can attack enemies with a spin move. (Like the Feather and P-Wings, the Raccoon Leaf also counts as a weapon.)", 
            "title": "Raccoon Leaf"
        }, 
        {
            "location": "/Super-Mario-War/#bomb", 
            "text": "Type: Weapon  This item gives you the ability to throw bombs. Pressing the turbo button causes you to spawn a bomb in your player's hands, which you can throw or carry around. The bombs take a few seconds to explode, but do so with the force of a Bob-Omb explosion.", 
            "title": "Bomb"
        }, 
        {
            "location": "/Super-Mario-War/#ice-wand", 
            "text": "Type: Weapon  This item gives you the ability to shoot a Magikoopa wand blast across the screen. The wand blast freezes any players it hits in a block of ice. Frozen players can be shattered simply by touching them. The Ice Wand can go through walls and hit multiple players, but it doesn't work on the enemies of Stomp Mode.", 
            "title": "Ice Wand"
        }, 
        {
            "location": "/Super-Mario-War/#invincibility-star", 
            "text": "Type: Collectable  Gives the player invincibility for 10 seconds. During this time, the player can walk on spikes/lava, stay above the map as long as they want, continually fall without burning up, and kill other players just by touching them.", 
            "title": "Invincibility Star"
        }, 
        {
            "location": "/Super-Mario-War/#bob-omb", 
            "text": "Type: Collectable  This item turns you into a Bob-Omb. Pressing the turbo button causes you to explode and kill players around you. However, you can only explode once before you return to normal again. If you kill a player who is a Bob-Omb, and you aren't one already (which includes if you were one and just exploded), you will steal their Bob-Omb status.", 
            "title": "Bob-Omb"
        }, 
        {
            "location": "/Super-Mario-War/#tanooki-suit", 
            "text": "Type: Collectable  This item gives you the ability to become a statue. While your player is a statue, you cannot be killed by stomping, projectiles, enemies, map hazards, spikes, and lava. If you change your player into a statue in midair, the player will do a super smash like with the Goomba's Shoe. This can be used to drop down quickly for an item or to crush another player. Upon landing, the impact clouds can kill other players at close range. Statue players can still be crushed.", 
            "title": "Tanooki Suit"
        }, 
        {
            "location": "/Super-Mario-War/#clock", 
            "text": "Type: Stored  When you use this item, all players that are not on your team will be slowed down and will only be able to jump 2 blocks high. These effects last for 10 seconds.", 
            "title": "Clock"
        }, 
        {
            "location": "/Super-Mario-War/#bullet-bill", 
            "text": "Type: Stored  When this item is used, Bullet Bills of your team color will fire in from the sides of the screen for about 5 seconds. Players on the opposing team must dodge or jump on the Bullet Bills to avoid death. Additionally, If two players' Bullet Bills collide, they will explode. This explosion will kill anyone it touches, including the owners of the Bullet Bills.", 
            "title": "Bullet Bill"
        }, 
        {
            "location": "/Super-Mario-War/#pow-block", 
            "text": "Type: Stored  When this item is used, the screen shakes for about half a second and any players that touch the ground during this time are killed. You should watch for when an opponent uses one of these, and make sure you make a big jump so you don't die.", 
            "title": "POW Block"
        }, 
        {
            "location": "/Super-Mario-War/#mod-block", 
            "text": "Type: Stored  This item acts exactly like the POW block, except that when you use it, instead of killing players on the  ground , you kill players in the  air . So, when an opponent is using one of these, you should stay on the ground for a bit to avoid getting killed.", 
            "title": "MOd Block"
        }, 
        {
            "location": "/Super-Mario-War/#golden-podobo", 
            "text": "Type: Stored  When this item is used, a single wave of podobos rise from the bottom of the screen, killing anything they touch that isn't on your team. When an opponent is using one of these, make sure you get to high ground, and fast!", 
            "title": "Golden Podobo"
        }, 
        {
            "location": "/Super-Mario-War/#jail-key-mode-specific-powerup", 
            "text": "Type: Stored  This item only appears in Jail mode. When you use this item, your player is instantly released from jail, if not already free. Even if you don't need it, grab the Jail Key so others can't use it! How often this item appears can be set in the Additional Parameters.", 
            "title": "Jail Key (Mode Specific Powerup)"
        }, 
        {
            "location": "/Super-Mario-War/#green-shell", 
            "text": "Type: Throwable  When this item is thrown or stomped on, it will start bouncing around the map. It can be jumped a second time to stop it. It will kill the first person it hits while it is moving, and will disappear afterwards. It will also disappear if it stays moving for too long without hitting anyone. You can also kill Green Shells with projectile weapons such as fireballs. Green shells will not disappear by themselves if they are not moving or if someone is carrying them.", 
            "title": "Green Shell"
        }, 
        {
            "location": "/Super-Mario-War/#red-shell", 
            "text": "Type: Throwable  This item is exactly like a Green Shell except for one detail: it doesn't stop when it hits one player, and will instead plow through as many things as are in its way until its time runs out or until someone shoots it.", 
            "title": "Red Shell"
        }, 
        {
            "location": "/Super-Mario-War/#spiny-shell", 
            "text": "Type: Throwable  This item is exactly like the Red Shell, except that it is covered in spikes and so it can't be jumped on to stop it once it's going. It can still be shot, though.", 
            "title": "Spiny Shell"
        }, 
        {
            "location": "/Super-Mario-War/#buzzy-shell", 
            "text": "Type: Throwable  This item is exactly like the Red Shell, except that it is immune to projectile weapons. It can still be jumped, though.", 
            "title": "Buzzy Shell"
        }, 
        {
            "location": "/Super-Mario-War/#a-couple-notes-about-shells", 
            "text": "When two shells collide, if they are both the same \"strength\" (i.e. if they are both green or if they are both multikilling shells) then both of them will die. Otherwise, only the green shell will die (the multikilling shell will kill it and keep going). Also, when you win a shell from the Bonus Wheel, it will become a stored item. When you use it, if you are holding the Turbo button, the shell will appear in your hands so you can kick it; otherwise, it will appear in front of you and start moving right away.", 
            "title": "A couple notes about Shells"
        }, 
        {
            "location": "/Super-Mario-War/#green-springboard", 
            "text": "Type: Map Items  This item can be carried through the map and used as a portable Note Block. The Green Springboard allows you to make timed jumps like regular Note Blocks. Keep in mind that if the Green Springboard gets destroyed by lava or spikes, it is gone for the rest of the match.", 
            "title": "Green Springboard"
        }, 
        {
            "location": "/Super-Mario-War/#gold-springboard", 
            "text": "Type: Map Items  This item can be carried through the map and used as a portable Note Block. The Green Springboard allows you to make timed jumps like the Orange Note Blocks. Keep in mind that if the Green Springboard gets destroyed by lava or spikes, it is gone for the rest of the match.", 
            "title": "Gold Springboard"
        }, 
        {
            "location": "/Super-Mario-War/#carryable-spike", 
            "text": "Type: Map Items  This item can be carried through the map and used as a weapon over and over. The Carryable Spike allows you to turn areas of a map into a small trap. The Carryable Spike does  not  protect you from being stomped, so be careful. Keep in mind that if the Carryable Spike gets destroyed by lava or spikes, it is gone for the rest of the match.", 
            "title": "Carryable Spike"
        }, 
        {
            "location": "/Super-Mario-War/#goombas-shoe", 
            "text": "Type: Map Items  Jumping into the Goomba's Shoe allows you to perform a super smash move in midair. This can be used to drop down quickly for an item or to crush other players. Your player also gets a weight boost, allowing you to bump opponents much farther than normal! Unlike the other map items, the Goomba's Shoe can also travel safely over lava and spikes!", 
            "title": "Goomba's Shoe"
        }, 
        {
            "location": "/Super-Mario-War/#music-box", 
            "text": "Type: World Map  Using one of these will stop the movement of all vehicles on the World Map for a few turns. During this time, you won't be pulled into the levels upon passing over them. If you want to play the level anyways, just enter it like a normal level.", 
            "title": "Music Box"
        }, 
        {
            "location": "/Super-Mario-War/#lakitus-cloud", 
            "text": "Type: World Map  This item allows you to pass over a level without playing it. Great for bypassing a level with a mode you're not very good at!", 
            "title": "Lakitu's Cloud"
        }, 
        {
            "location": "/Super-Mario-War/#swap-badge", 
            "text": "Type: World Map  This useful item allows you to take control of the board from another player! Great for making sure you get a Mushroom House!", 
            "title": "Swap Badge"
        }, 
        {
            "location": "/Super-Mario-War/#hourglass", 
            "text": "Type: World Map  This item can be used to advance the map one turn. This will cause vehicles to move and bridges to lower or rise.", 
            "title": "Hourglass"
        }, 
        {
            "location": "/Super-Mario-War/#replay-block", 
            "text": "Type: World Map  This item can be used to revive any level that's already been played. This includes Pipe Minigame levels and Mushroom Houses!", 
            "title": "Replay Block"
        }, 
        {
            "location": "/Super-Mario-War/#red-key", 
            "text": "Type: World Map  This item is used to unlock red doors on a map. This key can only be used to open one door.", 
            "title": "Red Key"
        }, 
        {
            "location": "/Super-Mario-War/#yellow-key", 
            "text": "Type: World Map  This item is used to unlock yellow doors on a map. This key can only be used to open one door.", 
            "title": "Yellow Key"
        }, 
        {
            "location": "/Super-Mario-War/#green-key", 
            "text": "Type: World Map  This item is used to unlock green doors on a map. This key can only be used to open one door.", 
            "title": "Green Key"
        }, 
        {
            "location": "/Super-Mario-War/#blue-key", 
            "text": "Type: World Map  This item is used to unlock blue doors on a map. This key can only be used to open one door.", 
            "title": "Blue Key"
        }, 
        {
            "location": "/Super-Mario-War/#x-coin", 
            "text": "Type: World Map  This item can be used to negate the point value for a level. Simply use it on the map, and the next level played will have no point value. Keep in mind that using other score coins after using an X Coin cancels it out, and vice versa.", 
            "title": "X Coin"
        }, 
        {
            "location": "/Super-Mario-War/#1-coin", 
            "text": "Type: World Map  This item can be used to add one to the point value for a level. Simply use it on the map, and the next level played will have a single point higher value. Keep in mind that using other score coins after using a +1 Coin cancels it out, and vice versa.", 
            "title": "+1 Coin"
        }, 
        {
            "location": "/Super-Mario-War/#2-coin", 
            "text": "Type: World Map  This item can be used to add two to the point value for a level. Simply use it on the map, and the next level played will have a two point higher value. Keep in mind that using other score coins after using a +2 Coin cancels it out, and vice versa.", 
            "title": "+2 Coin"
        }, 
        {
            "location": "/Super-Mario-War/#3-coin", 
            "text": "Type: World Map  This item can be used to add three to the point value for a level. Simply use it on the map, and the next level played will have a three point higher value. Keep in mind that using other score coins after using a +3 Coin cancels it out, and vice versa.", 
            "title": "+3 Coin"
        }, 
        {
            "location": "/Super-Mario-War/#x2-coin", 
            "text": "Type: World Map  This item can be used to double the point value for a level. Simply use it on the map, and the next level played will have twice the point value. Keep in mind that using other score coins after using a x2 Coin cancels it out, and vice versa.", 
            "title": "x2 Coin"
        }, 
        {
            "location": "/Super-Mario-War/#x3-coin", 
            "text": "Type: World Map  This item can be used to triple the point value for a level. Simply use it on the map, and the next level played will have three times the point value. Keep in mind that using other score coins after using a x3 Coin cancels it out, and vice versa.", 
            "title": "x3 Coin"
        }, 
        {
            "location": "/Super-Mario-War/#1-10-green-spheres", 
            "text": "Type: World Map  These items can only be obtained from Mushroom Houses, and are very useful. Getting any of the Green Spheres from a chest adds the number on the Sphere to your total points!", 
            "title": "1-10 Green Spheres"
        }, 
        {
            "location": "/Super-Mario-War/#1-10-red-spheres", 
            "text": "Type: World Map  These items can only be obtained from Mushroom Houses, and should be avoided! Getting any of the Red Spheres from a chest subtracts the number on the Sphere from your total points!", 
            "title": "1-10 Red Spheres"
        }, 
        {
            "location": "/Super-Mario-War/#game-options", 
            "text": "", 
            "title": "Game Options"
        }, 
        {
            "location": "/Super-Mario-War/#gameplay", 
            "text": "", 
            "title": "Gameplay"
        }, 
        {
            "location": "/Super-Mario-War/#respawn-time", 
            "text": "This option allows you to configure how long it takes your character to respawn after dying. It can be set to any value between 0 (instant) and 10 seconds, in increments of 0.5 seconds.", 
            "title": "Respawn Time"
        }, 
        {
            "location": "/Super-Mario-War/#shield-style", 
            "text": "This allows you to change the way the shield behaves. It can be set to No Shield, Soft (pass through players), Soft With Stomp (pass through players, but you can stomp them), and Hard (stomp players but you can't pass through them).", 
            "title": "Shield Style"
        }, 
        {
            "location": "/Super-Mario-War/#shield-time", 
            "text": "This allows you to change the amount of time for which you are invincible right after spawning or warping. It can be set to any value between 0 (none) and 5 seconds, in increments of 0.5 seconds.", 
            "title": "Shield Time"
        }, 
        {
            "location": "/Super-Mario-War/#bounds-time", 
            "text": "In play, if someone stays above the top edge of the screen for too long, they will be penalized by dying. This option allows you to configure how much time is allowed before being penalized. It can be set between 1 and 10 seconds, in increments of 1 second, or you can disable it altogether by setting it to Infinite.", 
            "title": "Bounds Time"
        }, 
        {
            "location": "/Super-Mario-War/#suicide-time", 
            "text": "In play, if someone remains still for too long, they will be penalized by dying. This option allows you to configure how much time is allowed before being penalized. It can be set to 3, 5, 8, 10, 15, and 20 seconds, or you can disable it altogether by setting it to Off.", 
            "title": "Suicide Time"
        }, 
        {
            "location": "/Super-Mario-War/#warp-lock-style", 
            "text": "This allows you to change how the warp locks behave in play. It can be set to Entire Connection, All Warps, Entrance Only, Exit Only, and Entrance and Exit.", 
            "title": "Warp Lock Style"
        }, 
        {
            "location": "/Super-Mario-War/#warp-lock-time", 
            "text": "This can be set to any value between 1 and 10 seconds, in increments of 1 second, or it can be set to Off. When set to anything other than Off, after one player uses a warp, the warp or warps will be locked for the specified time to prevent other players from using them, depending on how the Warp Lock Style is set. When set to Off, warps can be used freely.", 
            "title": "Warp Lock Time"
        }, 
        {
            "location": "/Super-Mario-War/#bot-difficulty", 
            "text": "You can choose what difficulty level you want the AI to be here, between Very Easy, Easy, Moderate, Hard, and Very Hard. Very Hard is equivalent to the AI strength from version 1.6 and before.", 
            "title": "Bot Difficulty"
        }, 
        {
            "location": "/Super-Mario-War/#point-speed", 
            "text": "This can be set to Very Slow, Slow, Moderate, Fast, or Very Fast. It controls how fast players gain or lose points in point-based modes such as Domination or Tag. Moderate is equivalent to the point speed from version 1.6 and before.", 
            "title": "Point Speed"
        }, 
        {
            "location": "/Super-Mario-War/#team", 
            "text": "", 
            "title": "Team"
        }, 
        {
            "location": "/Super-Mario-War/#player-collision", 
            "text": "When this is on, you can jump on and shoot your own teammates. When it is off, you and your projectiles will go through your teammates. This does  not  apply to shells or throw blocks, however! When this is set to Assist, teammates can use each other as a springboard by holding Jump. This allows you to work together as a team!", 
            "title": "Player Collision"
        }, 
        {
            "location": "/Super-Mario-War/#colors", 
            "text": "When this is set to Team, all teammates will be set to the same color. (It is recommended that teammates choose different-looking skins, in this case.) When set to Individual, player 1 will always be red, Player 2 will be green, and so on.", 
            "title": "Colors"
        }, 
        {
            "location": "/Super-Mario-War/#item-selection", 
            "text": "On this screen, there are 26 sliders, each corresponding to one of the different items that can appear from a \"?\" block, as well as the relative frequency of that one popping out. Each slider can be set from 0 to 10 inclusive, with 0 meaning the item will not appear at all.", 
            "title": "Item Selection"
        }, 
        {
            "location": "/Super-Mario-War/#use-settings-from", 
            "text": "This option allows you to choose whether item weights are selected from the maps, the game's settings, a basic average of the two, or a weighted average of the two.", 
            "title": "Use Settings From"
        }, 
        {
            "location": "/Super-Mario-War/#item-set", 
            "text": "This option allows you to select preset powerup weights. You can choose from 5 Custom Sets, Balanced Set, Weapons Only, Koopa Bros Weapons, Support Items, Booms and Shakes, Fly and Glide, Shells Only, Mushrooms Only, Super Mario Bros 1, Super Mario Bros 2, Super Mario Bros3, and Super Mario World. Each set has different weights for the various powerups.  Below the 26 sliders are the Defaults and Clear buttons. The Defaults button returns the currently selected set to it's default values. The Clear button sets all the powerup weights to 0 for the currently selected set.  As an example, the defaults for 1UP Mushrooms, Poison Mushrooms, POW Blocks, and MOd Blocks are 10, 5, 2, and 2 respectively. That means a 1UP is twice as likely to appear as a Poison Mushroom and 5 times as likely to appear as a POW, by default, and that POWs and MOds appear with equal frequency since they have the same number.", 
            "title": "Item Set"
        }, 
        {
            "location": "/Super-Mario-War/#item-settings", 
            "text": "", 
            "title": "Item Settings"
        }, 
        {
            "location": "/Super-Mario-War/#item-use-speed", 
            "text": "This affects how long of a delay there is between pressing the item button and using your stored item. The higher the delay, the more reaction time your opponents have. This can be set to Very Slow (where it takes around two full seconds to use items), Slow, Moderate, Fast, and Very Fast (less than half a second).", 
            "title": "Item Use Speed"
        }, 
        {
            "location": "/Super-Mario-War/#item-spawn", 
            "text": "This allows you to set how long it takes for item boxes to generate another item after one gets knocked out of them. It can be set to any value between 5 and 60 seconds, in increments of 5 seconds, or turned Off.", 
            "title": "Item Spawn"
        }, 
        {
            "location": "/Super-Mario-War/#hidden-block-hide", 
            "text": "This allows you to set how long it takes for hidden blocks to rehide after being made visible. It can be set to any value between 5 and 60 seconds, in increments of 5 seconds, or turned Off.", 
            "title": "Hidden Block Hide"
        }, 
        {
            "location": "/Super-Mario-War/#swap-style", 
            "text": "This allows you to change the style of swap used with the Mystery Mushroom. Blink causes the players to blink back and forth. Walk causes them to walk in a straight line to their new destinations. Instant eliminates the delay caused by the other two animations and is the most chaotic of the three options.", 
            "title": "Swap Style"
        }, 
        {
            "location": "/Super-Mario-War/#bonus-wheel", 
            "text": "This can be set to Tournament Win, Every Game, or Off. When on Tournament Win, the bonus wheel appears after the end of a tournament and grants the winner an item. When on Every Game, the wheel appears after every game instead of just tournament-winning ones. When set to Off, the wheel does not appear.", 
            "title": "Bonus Wheel"
        }, 
        {
            "location": "/Super-Mario-War/#bonus-item", 
            "text": "When set to Until Next Spin, players will keep items that they won from the bonus wheel until the someone spins the wheel again (i.e. there will only ever be one bonus item in play). When set to Keep Always, players will keep their bonus wheel items until they spin for new ones (so there can be multiple bonus items in play).", 
            "title": "Bonus Item"
        }, 
        {
            "location": "/Super-Mario-War/#reset-stored-items", 
            "text": "If someone has an item from the bonus wheel, this will allow you to get rid of it.", 
            "title": "Reset Stored Items"
        }, 
        {
            "location": "/Super-Mario-War/#weapons-projectiles", 
            "text": "", 
            "title": "Weapons &amp; Projectiles"
        }, 
        {
            "location": "/Super-Mario-War/#fireball-life", 
            "text": "This can be set between 1 and 10 seconds, in increments of 1 second. Fireballs will automatically disappear after they have stayed onscreen for this long.", 
            "title": "Fireball Life"
        }, 
        {
            "location": "/Super-Mario-War/#feather-jumps", 
            "text": "This can be set between 1 and 5, and it simply determines how many extra midair jumps the Feather grants.", 
            "title": "Feather Jumps"
        }, 
        {
            "location": "/Super-Mario-War/#boomerang-style", 
            "text": "With this, you can switch between Flat, SMB3, and Zelda styles.   Flat style makes the boomerangs travel straight forward until they hit the edge of the screen, after which they \"bounce\" back and travel straight towards the other edge of the screen.    SMB3 style makes the boomerangs travel in a long forward arc before turning around and coming back in a straight line.   Zelda style makes the boomerangs travel straight forward for a short distance before turning around and seeking out the player that shot them.", 
            "title": "Boomerang Style"
        }, 
        {
            "location": "/Super-Mario-War/#boomerang-life", 
            "text": "This can be set between 1 and 10 seconds, in increments of 1 second. Like the Fireball Life setting, boomerangs will automatically disappear after staying onscreen for this long.", 
            "title": "Boomerang Life"
        }, 
        {
            "location": "/Super-Mario-War/#shell-life", 
            "text": "This setting allows you to change how long shells last before they automatically disappear. It can be set to 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, or 30 seconds, or you can set it to Unlimited.", 
            "title": "Shell Life"
        }, 
        {
            "location": "/Super-Mario-War/#wand-freeze", 
            "text": "This setting allows you to change how long players are frozen when hit with an Ice Wand blast. It can be set to 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, or 20 seconds.", 
            "title": "Wand Freeze"
        }, 
        {
            "location": "/Super-Mario-War/#hammer-life", 
            "text": "This can be set between 0.5 and 1.2 seconds, in increments of 0.1 second, or you can set it to No Limit. Like the Fireball Life setting, hammers will automatically disappear after staying onscreen for this long. If you set this to No Limit, then hammers will disappear off the bottom of the screen.", 
            "title": "Hammer Life"
        }, 
        {
            "location": "/Super-Mario-War/#hammer-delay", 
            "text": "Because hammers are so powerful, there is a delay after firing one in which you are not allowed to fire another. Here, you can set this delay to between 0 (none) and 1 second, in increments of 0.1 second.", 
            "title": "Hammer Delay"
        }, 
        {
            "location": "/Super-Mario-War/#hammer-power", 
            "text": "When this is set to One Kill, hammers disappear when they hit something. When set to Multiple Kills, hammers will go right through everything they touch!", 
            "title": "Hammer Power"
        }, 
        {
            "location": "/Super-Mario-War/#blue-block-life", 
            "text": "Similar to the Shell Life setting, this allows you to change how long Blue Blocks last before they disappear. Unlike the Shell setting, however, this also affects how long you can hold them before they disappear in your hands. The same options as for Shell Life are available.", 
            "title": "Blue Block Life"
        }, 
        {
            "location": "/Super-Mario-War/#grey-block-life", 
            "text": "Similar to the Shell Life setting, this allows you to change how long Grey Blocks last before they disappear. Unlike the Shell setting, however, this also affects how long you can hold them before they disappear in your hands. The same options as for Shell Life are available.", 
            "title": "Grey Block Life"
        }, 
        {
            "location": "/Super-Mario-War/#red-block-life", 
            "text": "Similar to the Shell Life setting, this allows you to change how long Red Blocks last before they disappear. Unlike the Shell setting, however, this also affects how long you can hold them before they disappear in your hands. The same options as for Shell Life are available.", 
            "title": "Red Block Life"
        }, 
        {
            "location": "/Super-Mario-War/#weapon-use-limits", 
            "text": "", 
            "title": "Weapon Use Limits"
        }, 
        {
            "location": "/Super-Mario-War/#fireball-limit", 
            "text": "This allows you to limit the number of fireballs you can shoot with each flower you get. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.", 
            "title": "Fireball Limit"
        }, 
        {
            "location": "/Super-Mario-War/#hammer-limit", 
            "text": "This allows you to limit the number of hammers you can shoot with each item pickup. Like the Fireball limit, it can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.", 
            "title": "Hammer Limit"
        }, 
        {
            "location": "/Super-Mario-War/#boomerang-limit", 
            "text": "This allows you to limit the number of boomerangs you can shoot with each pickup. Like the other Limit options, it can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited. Unlike other weapons, however, if you don't catch your own boomerangs, you are penalized by an extra shot.", 
            "title": "Boomerang Limit"
        }, 
        {
            "location": "/Super-Mario-War/#feather-limit", 
            "text": "This allows you to limit the number of times you can midair jump and use the spin move. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited. Bear in mind that if you do multiple midair jumps in a row (using the Feather Jumps setting above), every single one counts as a separate weapon use.", 
            "title": "Feather Limit"
        }, 
        {
            "location": "/Super-Mario-War/#leaf-limit", 
            "text": "This allows you to limit the number of times you can float and use the spin move. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited. Bear in mind that if you press Jump to float multiple times in a row, every single one counts as a separate weapon use.", 
            "title": "Leaf Limit"
        }, 
        {
            "location": "/Super-Mario-War/#p-wings-limit", 
            "text": "This allows you to limit the number of times you can take flight. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.", 
            "title": "P-Wings Limit"
        }, 
        {
            "location": "/Super-Mario-War/#tanooki-limit", 
            "text": "This allows you to limit the number of times you can become a statue. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.", 
            "title": "Tanooki Limit"
        }, 
        {
            "location": "/Super-Mario-War/#bomb-limit", 
            "text": "This allows you to limit the number of bombs you can use. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.", 
            "title": "Bomb Limit"
        }, 
        {
            "location": "/Super-Mario-War/#wand-limit", 
            "text": "This allows you to limit the number of times you can use the Ice Wand. It can be set to 2, 5, 8, 10, 12, 15, 20, 25, 30, 40, 50, or Unlimited.", 
            "title": "Wand Limit"
        }, 
        {
            "location": "/Super-Mario-War/#graphics", 
            "text": "", 
            "title": "Graphics"
        }, 
        {
            "location": "/Super-Mario-War/#draw-top-layer", 
            "text": "Some maps have layers of tiles which the players can move behind. When this is set to Foreground, the players and all the special blocks on the map will appear behind these tiles. When this is set to Background, the players, blocks, projectiles, etc. will appear in front of these tiles. Setting this to Background can improve performance on slower machines, but will often cause the game to look weird because the players will be walking in front of stuff they shouldn't be.", 
            "title": "Draw Top Layer"
        }, 
        {
            "location": "/Super-Mario-War/#frame-limit", 
            "text": "This allows you to change the speed at which the game runs. It can be set by FPS to 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 62 (Normal), 66, 71, 77, 83, 90, 100, 111, 125, 142, 166, 200, 250, 333, 500, and No Limit. This can be used to somewhat counteract slow machines, or just to get a slow-motion or high-speed effect.", 
            "title": "Frame Limit"
        }, 
        {
            "location": "/Super-Mario-War/#screen-size", 
            "text": "This simply allows you to change between Fullscreen and Windowed modes. (This doesn't appear on the Xbox version.)", 
            "title": "Screen Size"
        }, 
        {
            "location": "/Super-Mario-War/#screen-settings-xbox-version", 
            "text": "This will take you to a menu where you can change various screen settings.  We are NOT responsible if you screw up your TV with these - use at your own risk!!   Screen Resize  allows you to resize the picture on the screen so that it shows up better on your TV - use the left thumbstick to move the upper-left corner of the screen, the right thumbstick to move the lower-left corner of the screen, or press X to switch to a pre-set size.  Screen Filter  will change the method by which the picture is rendered on the screen. The different options are Point, Bilinear, Trilinear, Anisotropic, Quincunx, and Gaussian Cubic. The default is Bilinear. Different settings will look better or worse on different screens.     Flicker Filter  will attempt to filter out the flicker which some TVs generate. It can be set between 0 and 5, with a default of 5. Different settings will look better on different screens.    Soften Filter  will add a softening effect (a blur) to the screen. It can be set to On or Off, default to Off.", 
            "title": "Screen Settings (Xbox version)"
        }, 
        {
            "location": "/Super-Mario-War/#menu-world-and-game-graphics", 
            "text": "This allows you to select custom graphics packs if you have any installed on your machine. Graphics packs are installed by unzipping them into the gfx/packs subfolder of the game. (Make sure that when you unzip the files, they stay in their original directories; otherwise the game will not recognize the new packs!)", 
            "title": "Menu, World, and Game Graphics"
        }, 
        {
            "location": "/Super-Mario-War/#eye-candy", 
            "text": "", 
            "title": "Eye Candy"
        }, 
        {
            "location": "/Super-Mario-War/#spawn-style", 
            "text": "This allows you to change the way players appear on the map.   When set to  Instant , players will simply appear out of nowhere.     When set to  Door , players will drop out of doors, as in the original DOS Mario War. The door's appearance causes about one half second of extra delay between the start and end of spawning.    When set to  Swirl , a large, colorful swirl will appear just before players spawn. This option makes the spawn very easy to spot, but also causes around one full second of extra delay.", 
            "title": "Spawn Style"
        }, 
        {
            "location": "/Super-Mario-War/#award-style", 
            "text": "This allows you to change the type of extra eyecandy shown on screen when a player gets three or more consecutive kills.   Fireworks  causes basic eyecandy to shoot out of the player, like a fireworks display.     Spiral  causes basic eyecandy to spiral out from the player.     Ring  causes small icons to circle the player. These icons represent the last 10 kill types (so, for example, when you hit someone with a fireball, you will receive a Fire Flower icon). When the player is killed, these icons will scatter.  Souls  causes nothing to be displayed until the player's chain of kills is broken, after which several icons will fly out of the dead player, representing the souls of the players he killed.    Text  causes a simple text indicator to pop out of the player. (This is also the only option which gives an award for only 2 consecutive kills.)    None  disables all effects.", 
            "title": "Award Style"
        }, 
        {
            "location": "/Super-Mario-War/#score-location", 
            "text": "This option enables you to change where the scores are displayed onscreen. Top and Bottom place all the scores in those places, and Corners will put one score in each corner of the screen.", 
            "title": "Score Location"
        }, 
        {
            "location": "/Super-Mario-War/#screen-crunch", 
            "text": "When this is on, the screen will \"crunch\" each time someone dies, just as in the original DOS Mario War.", 
            "title": "Screen Crunch"
        }, 
        {
            "location": "/Super-Mario-War/#leader-crown", 
            "text": "When this is On, the crown that appears on the winner's head on the score display will also appear on their head in the actual game, so that they are more easily identifiable. When set to Off, the crown will only appear on the score display.", 
            "title": "Leader Crown"
        }, 
        {
            "location": "/Super-Mario-War/#start-countdown", 
            "text": "When this is On, there is a \"3, 2, 1, GO!\" countdown before players spawn onto a map. When set to Off, player spawning starts immediately.", 
            "title": "Start Countdown"
        }, 
        {
            "location": "/Super-Mario-War/#dead-team-notice", 
            "text": "When this is On, a breif message is shown upon the elimination of a team. When this is Off, team elimination isn't notified.", 
            "title": "Dead Team Notice"
        }, 
        {
            "location": "/Super-Mario-War/#music-sound", 
            "text": "", 
            "title": "Music &amp; Sound"
        }, 
        {
            "location": "/Super-Mario-War/#sound-volume", 
            "text": "This allows you to alter the volume of the game's sound effects.", 
            "title": "Sound Volume"
        }, 
        {
            "location": "/Super-Mario-War/#music-volume", 
            "text": "This allows you to alter the volume of the tunes in the background.", 
            "title": "Music Volume"
        }, 
        {
            "location": "/Super-Mario-War/#next-music", 
            "text": "When this is set to Off, whichever track the game picks for the map will loop indefinitely. When set to On, the game will switch to a different music track after the current one has ended.", 
            "title": "Next Music"
        }, 
        {
            "location": "/Super-Mario-War/#announcer", 
            "text": "This allows you to select an announcer, if you have any installed. Announcers are installed by unzipping them into the sfx/announcer subfolder of the game. (As with graphics packs, make sure the files get unzipped into the proper directories!)", 
            "title": "Announcer"
        }, 
        {
            "location": "/Super-Mario-War/#sound-pack", 
            "text": "This allows you to select custom sound effects packs if you have any installed. They go into the sfx/packs subdirectory of the game. (As with graphics packs and announcers, make sure the files go in the right places!)", 
            "title": "Sound Pack"
        }, 
        {
            "location": "/Super-Mario-War/#game-music-pack", 
            "text": "This allows you to select custom music packs for levels if you have any installed. Music packs are installed by unzipping them into the music subfolder of the game. (As with graphics packs and announcers, make sure the files go in the right places!)", 
            "title": "Game Music Pack"
        }, 
        {
            "location": "/Super-Mario-War/#world-music-pack", 
            "text": "This allows you to select custom music packs for worlds if you have any installed. Music packs are installed by unzipping them into the music subfolder of the game. (You should know what this parenthetical note should say by now.)", 
            "title": "World Music Pack"
        }, 
        {
            "location": "/Super-Mario-War/#refresh-maps", 
            "text": "This will refresh all of the map thumbnails stored in the maps/cache subdirectory. Be warned that this can take quite a long time.", 
            "title": "Refresh Maps"
        }, 
        {
            "location": "/Super-Mario-War/#level-editor", 
            "text": "", 
            "title": "Level Editor"
        }, 
        {
            "location": "/Super-Mario-War/#starting-and-choosing-a-map", 
            "text": "When the level editor starts, you will be viewing the last level in the map list that was edited, or 0smw if the last edited map was deleted.  To change which map you are looking at, press Page Up or Page Down. By switching the map in this way, you will lose any changes on the map that were you working on. So, before you switch maps, you should press S to save that map if you want to keep the changes.", 
            "title": "Starting and Choosing a Map"
        }, 
        {
            "location": "/Super-Mario-War/#saving-the-map", 
            "text": "The name of the map is in the upper right corner of the screen. If you want to save to a different map and not overwrite the current map, hold shift then press S. The \"save as\" text will come up and you can save it as something else.", 
            "title": "Saving the Map"
        }, 
        {
            "location": "/Super-Mario-War/#taking-screenshots", 
            "text": "Before putting up your maps for download, you might want to take some pictures so people can look at them before they try them out. Press the Insert key on the keyboard and three .png files of different sizes will be saved to the maps/screenshots subdirectory.", 
            "title": "Taking Screenshots"
        }, 
        {
            "location": "/Super-Mario-War/#something-you-might-want-to-know", 
            "text": "Make sure you play around with the controls a bit before trying to create an important map. Just remember that pressing S saves instantly to what ever map name is in the upper right corner, overwriting whatever was there before.  You can also press  F1  in the editor to bring up a help screen, in case you need it.  As a general rule, if you want to place something, you should click with the left mouse button; to remove things, click the right mouse button.", 
            "title": "Something you might want to know"
        }, 
        {
            "location": "/Super-Mario-War/#controls_1", 
            "text": "T   Brings up the tileset - select a tile by left clicking on it. You can scroll through the selected tileset with the arrow keys. You can also go to another page of tiles by pressing the number keys. Pressing a number that doesn't have a tileset assigned or any key aside from the number keys will simply return you to your map. (DON'T RIGHT CLICK ON TILES unless you want to change the type of tile it is; however, changes to tile types will only affect how they act on your machine, NOT the machines you distribute the maps to). Now you're in \"Tile Mode\". Look to the upper left corner for the mode you're in. Tiles are collision detected blocks that don't move or background non-collision detected images.   I   This brings up the interaction block set - select a block by left-clicking on it. Now you're in \"Block Mode\". For a list of blocks and their descriptions, see the Special Blocks section, above. Blocks can be placed over tiles without replacing the tile. So, for example, if a brick is placed over a tile block and in the game the player destroys the brick, then the tile block will become visible.   O   This brings up the map items set - to select a map item, left click on it. Now you're in \"Map Item Mode\". Like interaction blocks, map items can be placed over tile blocks, but not over interaction blocks and vice versa.   W   This brings up the warps set - select a warp by left clicking on it. Now you're in \"Warp Mode\". Warps face outward; this means that if you want a player to be able to warp down into a pipe below him, you should place an upward facing arrow on those blocks. All warps with the same number are considered connected, and players will randomly exit from another warp with the same number that they entered from.   M   This puts you into \"Move Mode\" - you can now select areas and items on the map and move them around. Pressing \"M\" again switches between the \"Replace\" and \"Merge\" options. \"Replace\" overlaps any and all tile blocks the selected area is moved over. \"Merge\" blends the selected area in with any tile blocks already placed in the map. First select an area so it is highlighted in red. Now click and hold on that area and move the mouse to drag it around. There are some more tools you can use to make this more powerful:   Shift - This allows you to select multiple areas at once. Hold down the shift key then select areas on the map. All the areas will stay selected.    Ctrl - This allows you to select areas freehand. Hold down the left control key then select areas on the map. The areas are now selected just under the mouse instead of the drag select box.     C - This will make a copy the areas currently selected. Move your mouse around to see what it will look like when you paste it back to the map. When you are happy with the placement of the copied areas, left click the mouse to add it to the map. If you want to abort the paste, right click the mouse.     Delete - If you want to delete certain areas of the map, simply select them and hit the Delete or Backspace key.    L   This brings up the Tile Types set - pick one by clicking on it. Now you're in \"Tile Type Mode\". Left-click to set tiles to the type you picked, or right-click to clear tile-types (players can move freely through a tile if there is no tile-type associated with it). Pressing \"delete\" in Tile Type Mode clears all the tile types throughout the map.   P   This puts you into \"Platform Mode\" - from here, you can set up all the moving parts of your map. Here are the things you can do:   Click the \"New\" button and select a platform type to create a new platform. When creating a platform, the controls are more or less the same as when editing a map. (Bear in mind that you can create platforms anywhere on the screen. Also bear in mind that you can only put tiles into your platform - interactive blocks are not allowed.)     If, instead of making a new platform, you'd like to edit an existing one, click on one of the numbered buttons.     While making a platform, press P to change the path the platform will take. Use the left mouse button to place the starting point (green), and the right mouse button to place the endpoint (red). Holding the shift key while pressing a mouse button will snap the platform to a grid. While editing the path, pressing T will allow you to change the platform type, should you change your mind.     A \"Line Segment\" type platform is the basic back and forth platform, it can travel at any angle that you choose.     A \"Continuous\" type platform is similar to a \"Line Segment\" type, but it loops across the map continuously. Press the left mouse button to place the platform, and the right mouse button to alter the angle of the path.     An \"Ellipse\" type platform is similar to a \"Continuous\" type, but instead of looping across the map, it loops in a circular motion. Press the left mouse button to set the point that the path rotates around, and the right mouse button to set where the platform starts on that path. Holding X while pressing the mouse button allows you to alter the X radius (height) of the circular path. Holding Z allows you to alter the Y radius (width). Holding C allows you to change the size of the circular path.     While on the platform-making screen, press + or - to change the speed (and direction if you're making an Ellipse type) that the current platform will have. The current speed is shown at the top of the screen. If you're making an Ellipse type, the speed is shown as a slider between clockwise and counterclockwise.     Press Delete while working on a platform to delete it altogether.    X   This puts you into \"No Player Spawn Mode\" - you can now select areas of the map that you don't want the players to spawn in, which will appear as grey boxes with grey Xs on them. This is useful if you have a part of your map that would cause problems if players could spawn there, such as places where it is impossible to get jumped on or to jump out of. While in No Player Spawn Mode, pressing 1-4 will allow you to designate team spawn areas. Pressing A will fill the map with marks for the selected spawn type. Pressing N will remove all marks for the selected spawn type.   Z   This puts you into \"No Item Spawn Mode\" - you can now select places on the map that you don't want mode objects (such as coins, eggs, and bases) to appear. These areas will appear as green boxes with red Xs on them. These should be used to keep important things from appearing in places that players cannot reach.   H   This puts you into \"Map Hazards Mode\" - from here, you can set up any dangerous elements you want in your map. Here are the things you can do:   Click the \"New\" button and select a hazard type to create a new hazard. When creating a hazard, the controls are more or less the same as when editing a map. (Bear in mind that you can create hazards anywhere on the screen.)    If, instead of making a new hazard, you'd like to edit an existing one, click on one of the numbered buttons.     Keep in mind that, like platforms, pressing delete while working on a hazard will delete it altogether.    When making a \"Fireballs\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the starting point of the hazard's rotation, the radius, and the speed. Pressing L allows you to change the location of the hazard again, should you change your mind.      When making a \"Rotodisc\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the starting point of the hazard's rotation, the radius, the speed, and the number of Rotodiscs rotating around the selected point. Pressing L allows you to change the location of the hazard again, should you change your mind.     When making a \"Bullet Bill\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, the frequency at which it fires, and the speed. Pressing L allows you to change the location of the hazard again, should you change your mind.    When making a \"Flame\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it fires. Pressing L allows you to change the location of the hazard again, should you change your mind.    When making a \"Green Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.    When making a \"Red Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.     When making a \"Tall Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.     When making a \"Short Pirhana\" hazard, the left mouse button sets the location of the hazard on the map. Pressing P allows you to edit the properties, where you can set the direction of the hazard, and the frequency at which it appears. Pressing L allows you to change the location of the hazard again, should you change your mind.    A   Pressing A will brings up the animated tileset. Select a tile by left clicking on it. This puts you into \"Animated Tile Mode\". Animated tiles are like regular tiles, but are really just for looks. They don't have a tile type of their own, so you have to place one over the animated tile yourself.   K   Pressing K while holding the cursor over an Item Block, View Block, Note Block, Flip block, or Bounce Block will bring up a few options, depending on the block. Item and View Blocks will bring up an item weight menu, where you can set which items can be knocked out of the block. There is also an checkbox that, if marked, will make the block use the game's item weights. Along with the Item and View Block, all of the other blocks mentioned have a checkbox that, when marked, makes it a hidden block. For more information on hidden blocks, check the Special Blocks section further up.   V   Pressing V will hide all the interactive blocks on the map so you can see what's behind them.   Y   Since there are 4 layers to a map, you need to be able to select which layer you want to add tiles to. Use the \"Y\" key to do this. On the upper left, you'll see a little 0,1,2,3 icon. The colored number is the layer you are currently working with. When you add tiles, they will be added to this layer. The layers are ordered, with 0 being the bottom-most layer, and 3 being the top-most. You can use this key in conjuction with the \"U\" key to view just a single layer.   U   Toggles viewing just the selected layer or all the layers at once. Sometimes it is helpful to just be able to modify a single layer without having to look at everything else.   End   Optimizes the layers. This essentially moves all solid tiles down to the deepest available layer. There is a performance hit for tiles in layers 2 and 3 of the map. You should try to place as many solid tiles that a player would never be behind in layers 0 and 1. This optimize tool helps you do that. Save your map prior to using this feature because it can split up tiles across layers which makes the map hard to work on after you optimize it. Optimized maps should behave in the game exactly the same way unoptimized maps do, except for the fact that they will not tax your machine as much.   B   This will bring up a menu of background thumbnails. Press Page Up or Page Down to view more thumbs. Left-click a background to select it and use its music category as well, or right-click a background to select it without selecting its music category.   G   This will change the current map's background image.   R   This will change the current map's music category. This affects what songs, out of the current music pack, that the game will decide to play when you use this map.   E   This will bring up a dialog which will allow you to select what kind, if any, of extra eyecandy you want on the map.   CTRL + DELETE   This will clear all tiles and blocks from the current map.   Insert   As mentioned before, this will take a set of three screenshots of the currently selected map.   N   Creates a new map with the current map's background. You will be prompted to enter a name for the new map.   S   As stated above, this key will immediately save the map to the name in the upper right corner of the screen.   Shift + S   This allows you to save another copy of the map with a new name. However, the editor will not switch to that copy - if you want to work on the new map, you'll have to go select it yourself (although you can use Shift + F to find it, as explained below).   Shift + F   Find a map by name - This will bring up a dialog where you can enter part of a map name and it will open the first map whose filename contains a match for that string (if no map matches, the program will stay on the current map). You can then repeatedly press F to view all the maps that match that string.   F   Repeatedly press the F key to view all the maps that match the current find string. If you haven't used \"Shift + F\" yet, pressing F will bring up the find dialog.   Page Up/Page Down   This will immediately go to the previous or next map in the list, respectively. Don't forget to save before using these!   Left click   This will simply place a tile in the currently selected layer, or place a block in the block layer.   Right click   This will remove tiles and blocks from the currently selected layer.   ESC   Exits back to Tile Mode if in any other mode. If in Tile Mode, ESC exits the level editor.", 
            "title": "Controls"
        }, 
        {
            "location": "/Super-Mario-War/#world-editor", 
            "text": "", 
            "title": "World Editor"
        }, 
        {
            "location": "/Super-Mario-War/#starting-and-choosing-a-world-map", 
            "text": "When the world map editor starts, you will be viewing the 00small world map.  To change which world map you are looking at, press Page Up or Page Down. By switching the world map in this way, you will lose any changes on the world map that were you working on. So, before you switch world map, you should press S to save that world map if you want to keep the changes.", 
            "title": "Starting and Choosing a World Map"
        }, 
        {
            "location": "/Super-Mario-War/#saving-the-world-map", 
            "text": "The name of the world map is in the upper right corner of the screen. If you want to save to a different world map and not overwrite the current world, hold shift then press S. The \"save as\" text will come up and you can save it as something else.", 
            "title": "Saving the World Map"
        }, 
        {
            "location": "/Super-Mario-War/#something-you-might-want-to-know_1", 
            "text": "Make sure you play around with the controls a bit before trying to create an important world map. Just remember that pressing S saves instantly to whatever world map name is in the upper right corner, overwriting whatever was there before.  You can also press  F1  in the editor to bring up a help screen, in case you need it.  As a general rule, if you want to place something, you should click with the left mouse button; to remove things, click the right mouse button.", 
            "title": "Something you might want to know"
        }, 
        {
            "location": "/Super-Mario-War/#controls_2", 
            "text": "1   Brings up the choice of water types to place on a world map. After you select a water type, click on the world map to place the selected water type. This can be used to make areas of light water, dark water, or lava in a world map.   2   Brings up the choice of land types to place on a world map. There are two pages you can choose from by pressing the number for that page. After you select a land type, the world map editor changes to Background Mode. This is used to place the land that players travel along to play through a world map.   3   Brings up the choice of objects you can place on a world map. There are six pages you can choose from by pressing the number for that page. After you select an object type, the world map editor changes to Foreground Mode. This is used to place level tiles, hills, and more across the land players travel along.   4   Brings up the choice of paths you can place on a world map. After you select a path type, the world editor changes to Path Mode. This is used to place the paths players travel along on a world map.   P   Brings up the choice of connection paths you can place on a world map. After you select a path type, the world editor changes to Path Sprite Mode. This is used to place the actual paths players travel along. Without these, players cannot move through a world map, so be sure to place these along the paths on your world map!   W   Brings up a choice of 10 warp connections. After you select a connection, the world editor changes to Warp Mode. This is used to set up warp pipes on a world map for players to use.   V   Brings up a choice of vehicles to place on a world map. After you select a vehicle, the world editor changes to Vehicle Mode. This is used to place mobile levels on a world map. Keep in mind that these require further editing in the txt file.   T   Brings up a choice of start tiles and locks to place on a world map. After you select a tile or lock, the world editor changes to Stage Mode. This is used to place start tiles or locks on a world map. This is used to place levels onto a world map after you've edited a list of levels into the txt file.   B   Brings up a choice of vehicle boundaries to place on a world map. After you select a vehicle boundary, the world editor changes to Boundary Mode. This is used to place limits on the movement range of vehicles.   N   Creates a new world map. You will be prompted to enter a name and set the height and width for the new world map.   S   As stated above, this key will immediately save the world map to the name in the upper right corner of the screen.   Shift + S   This allows you to save another copy of the world map with a new name. However, the editor will not switch to that copy - if you want to work on the new world map, you'll have to go select it yourself (although you can use Shift + F to find it, as explained below).   Shift + F   Find a world map by name - This will bring up a dialog where you can enter part of a world map name and it will open the first world map whose filename contains a match for that string (if no world map matches, the program will stay on the current world map). You can then repeatedly press F to view all the world maps that match that string.   F   Repeatedly press the F key to view all the world maps that match the current find string. If you haven't used \"Shift + F\" yet, pressing F will bring up the find dialog.   Page Up/Page Down   This will immediately go to the previous or next world map in the list, respectively. Don't forget to save before using these!   Left click   This will simply place the select tile in the currently selected mode. Foreground objects, path graphics, and start tiles are on the same layers, so they can't be placed over each other.   Right click   This will remove objects from the world map in the currently selected mode.   R   This changes the music category for the selected world map. This affects what songs, out of the current music pack, that the game will decide to play when you use this world map.   Arrow Keys   This is used to navigate the currrently selected world map.   A   This is used to toggle the Auto Paint option for connection paths and land. This can be used to gain more control over the layout of the land and path connections you place on a world map.   CTRL + DELETE   This is used to clear everything from a world map and start over from scratch.   ESC   Exits back to Background Mode. If already in Background Mode, ESC exits out of the world map editor.", 
            "title": "Controls"
        }, 
        {
            "location": "/SuperTux/", 
            "text": "SuperTux is a 2d sidescrolling platformer with marioesque tones of gameplay. It features the Linux mascot Tux the penguin.\n\n\n\n\nThis emulator is experimental and can be installed from the experimental menu of the \nretropie setup script\n\n\nControls\n\n\n\n\n\n\n\n\nControl\n\n\nDefault mapping\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLeft\n\n\nCursor Left\n\n\nMakes Tux walk left\n\n\n\n\n\n\nRight\n\n\nCursor Right\n\n\nMakes Tux walk right\n\n\n\n\n\n\nUp\n\n\nCursor Up\n\n\nEnter door, activate switch\n\n\n\n\n\n\nDown\n\n\nCursor Down\n\n\nDuck\n\n\n\n\n\n\nJump\n\n\nSpacebar\n\n\nMakes Tux jump. Hold down longer to jump higher.\n\n\n\n\n\n\nAction\n\n\nLeft Control\n\n\nVaries\n\n\n\n\n\n\n\n\nFor more infomation visit the official documentation \nHERE", 
            "title": "SuperTux"
        }, 
        {
            "location": "/SuperTux/#controls", 
            "text": "Control  Default mapping  Description      Left  Cursor Left  Makes Tux walk left    Right  Cursor Right  Makes Tux walk right    Up  Cursor Up  Enter door, activate switch    Down  Cursor Down  Duck    Jump  Spacebar  Makes Tux jump. Hold down longer to jump higher.    Action  Left Control  Varies     For more infomation visit the official documentation  HERE", 
            "title": "Controls"
        }, 
        {
            "location": "/The-Ur-Quan-Masters/", 
            "text": "The Ur Quan Masters is a port of Star Control II\n\n\n\n\nEmulator: \nUQM\n (EXPERIMENTAL)\n\n\nROMS\n\n\nGame Data is provided by the setup script\n\n\nControls\n\n\nMouse and Keyboard", 
            "title": "The Ur Quan Masters"
        }, 
        {
            "location": "/The-Ur-Quan-Masters/#emulator-uqm-experimental", 
            "text": "", 
            "title": "Emulator: UQM (EXPERIMENTAL)"
        }, 
        {
            "location": "/The-Ur-Quan-Masters/#roms", 
            "text": "Game Data is provided by the setup script", 
            "title": "ROMS"
        }, 
        {
            "location": "/The-Ur-Quan-Masters/#controls", 
            "text": "Mouse and Keyboard", 
            "title": "Controls"
        }, 
        {
            "location": "/Wolfenstein-3D/", 
            "text": "Wolfenstein 3D is a first-person shooter video game developed by id Software and published by Apogee Software in 1992 for the PC operating system DOS.\n\n\n\n\nPort: \nWolf4SDL\n\n\nWolf4SDL can be installed from the experimental menu of the RetroPie setup script. By default, shareware version 1.4 of Wolfenstein 3D will be installed.\n\n\nPlaying Full Version of Wolfenstein 3D\n\n\nTo play the full version of Wolfenstein 3D with Wolf4SDL, you need to provide your own game data which can purchased from \nSteam\n or \n3D Realms\n.\n\n\nThe game data required are the files with *.wl6 extension (see below for list). Place them in \n\n\n\n\n/home/pi//RetroPie/roms/ports/wolf3d\n\n\n\n\nThe file names must be in lower case. The simplest way to do this is to run the following commands:\n\n\ncd RetroPie/roms/ports/wolf3d\nrename 'y/A-Z/a-z/' *\n\n\n\nWolf4SDL creates separate binaries for each version of game data. You need to select the correct binary for your game data. \n\n\nLaunch Wolfenstein 3D script from the Ports section of EmulationStation. Bring up the \nruncommand menu\n by pressing any key or js0 on your gamepad. Now select from the menu\n\n\n\n\n2 - Select emulator for rom ().\n\n\n\n\nYou will be presented with the following screen:\n\n\n\n\nThe default is \nwolf4sdl-sw-v14\n, the shareware 1.4 version.\n\n\nIf you have the \n3D Realms\n version, then select the \nwolf4sdl-3dr-v14\n binary.\n\n\nIf you have the \nSteam\n version, the select the \nwolf4sdl-gt-v14\n binary.\n\n\nIf you would like to play \nSpear of Destiny\n, then select \nwolf4sdl-spear-v14\n.\n\n\nOnce you have made your selection, exit the menu and then launch rom from the runcommand menu.\n\n\nTroubleshooting\n\n\nIf you are getting NO WOLFENSTEIN 3-D DATA FILES to be found! or NUMCHUNKS errors or you are not sure which version of game data you have, then check your game data by finding the md5 checksums. To do this, once you have placed your game data in the rom folder and made sure the file names are lower case, run the following commands:\n\n\ncd RetroPie/roms/ports/wolf3d\nmd5sum *.wl6\n\n\n\nThe md5 checksums for supported game data are as follow:\n\n\n3D Realms (Apogee 1.4)\n\n\na41af25a2f193e7d4afbcc4301b3d1ce  audiohed.wl6\n2385b488b18f8721633e5b2bdf054853  audiot.wl6\naa75133df873b660d2058425ca8539b3  config.wl6\na4e73706e100dc0cadfb02d23de46481  gamemaps.wl6\nb8d2a78bc7c50da7ec9ab1d94f7975e1  maphead.wl6\nadb10b0d6fdddba9fcc3d1a7c16937e7  vgadict.wl6\n4e96d7b4e89a5b3a4beeebf5d7d87eb7  vgagraph.wl6\na08905e2b0d299b3fad259f90c0efb1a  vgahead.wl6\na6d901dfb455dfac96db5e4705837cdb  vswap.wl6\n\n\n\nSteam (GT/ID/Activision)\n\n\na41af25a2f193e7d4afbcc4301b3d1ce  audiohed.wl6\n2385b488b18f8721633e5b2bdf054853  audiot.wl6\naa75133df873b660d2058425ca8539b3  config.wl6\na4e73706e100dc0cadfb02d23de46481  gamemaps.wl6\nb8d2a78bc7c50da7ec9ab1d94f7975e1  maphead.wl6\ndec8939cff5a4ec27ae7b43e8f52ec28  vgadict.wl6\n8b40b5b785f898e229bf1c2f2e3ee003  vgagraph.wl6\n8e75e3ffb842ed3d08abe6ffea97b231  vgahead.wl6\nb8ff4997461bafa5ef2a94c11f9de001  vswap.wl6\n\n\n\nCheck also that you have all of the files above.\n\n\nIf you have game data that do not match the md5sums above, then please post at the \nRetroPie Forum\n.", 
            "title": "Wolfenstein 3D"
        }, 
        {
            "location": "/Wolfenstein-3D/#port-wolf4sdl", 
            "text": "Wolf4SDL can be installed from the experimental menu of the RetroPie setup script. By default, shareware version 1.4 of Wolfenstein 3D will be installed.", 
            "title": "Port: Wolf4SDL"
        }, 
        {
            "location": "/Wolfenstein-3D/#playing-full-version-of-wolfenstein-3d", 
            "text": "To play the full version of Wolfenstein 3D with Wolf4SDL, you need to provide your own game data which can purchased from  Steam  or  3D Realms .  The game data required are the files with *.wl6 extension (see below for list). Place them in    /home/pi//RetroPie/roms/ports/wolf3d   The file names must be in lower case. The simplest way to do this is to run the following commands:  cd RetroPie/roms/ports/wolf3d\nrename 'y/A-Z/a-z/' *  Wolf4SDL creates separate binaries for each version of game data. You need to select the correct binary for your game data.   Launch Wolfenstein 3D script from the Ports section of EmulationStation. Bring up the  runcommand menu  by pressing any key or js0 on your gamepad. Now select from the menu   2 - Select emulator for rom ().   You will be presented with the following screen:   The default is  wolf4sdl-sw-v14 , the shareware 1.4 version.  If you have the  3D Realms  version, then select the  wolf4sdl-3dr-v14  binary.  If you have the  Steam  version, the select the  wolf4sdl-gt-v14  binary.  If you would like to play  Spear of Destiny , then select  wolf4sdl-spear-v14 .  Once you have made your selection, exit the menu and then launch rom from the runcommand menu.", 
            "title": "Playing Full Version of Wolfenstein 3D"
        }, 
        {
            "location": "/Wolfenstein-3D/#troubleshooting", 
            "text": "If you are getting NO WOLFENSTEIN 3-D DATA FILES to be found! or NUMCHUNKS errors or you are not sure which version of game data you have, then check your game data by finding the md5 checksums. To do this, once you have placed your game data in the rom folder and made sure the file names are lower case, run the following commands:  cd RetroPie/roms/ports/wolf3d\nmd5sum *.wl6  The md5 checksums for supported game data are as follow:  3D Realms (Apogee 1.4)  a41af25a2f193e7d4afbcc4301b3d1ce  audiohed.wl6\n2385b488b18f8721633e5b2bdf054853  audiot.wl6\naa75133df873b660d2058425ca8539b3  config.wl6\na4e73706e100dc0cadfb02d23de46481  gamemaps.wl6\nb8d2a78bc7c50da7ec9ab1d94f7975e1  maphead.wl6\nadb10b0d6fdddba9fcc3d1a7c16937e7  vgadict.wl6\n4e96d7b4e89a5b3a4beeebf5d7d87eb7  vgagraph.wl6\na08905e2b0d299b3fad259f90c0efb1a  vgahead.wl6\na6d901dfb455dfac96db5e4705837cdb  vswap.wl6  Steam (GT/ID/Activision)  a41af25a2f193e7d4afbcc4301b3d1ce  audiohed.wl6\n2385b488b18f8721633e5b2bdf054853  audiot.wl6\naa75133df873b660d2058425ca8539b3  config.wl6\na4e73706e100dc0cadfb02d23de46481  gamemaps.wl6\nb8d2a78bc7c50da7ec9ab1d94f7975e1  maphead.wl6\ndec8939cff5a4ec27ae7b43e8f52ec28  vgadict.wl6\n8b40b5b785f898e229bf1c2f2e3ee003  vgagraph.wl6\n8e75e3ffb842ed3d08abe6ffea97b231  vgahead.wl6\nb8ff4997461bafa5ef2a94c11f9de001  vswap.wl6  Check also that you have all of the files above.  If you have game data that do not match the md5sums above, then please post at the  RetroPie Forum .", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Xrick/", 
            "text": "Xrick is a port of Rick Dangerous\n\n\n\n\nEmulator: \nXrick\n\n\nIt can be installed from the experimental menu\n\n\nGame data is provided with the port\n\n\nControls\n\n\nNeeds a keyboard", 
            "title": "Xrick"
        }, 
        {
            "location": "/Xrick/#emulator-xrick", 
            "text": "It can be installed from the experimental menu  Game data is provided with the port", 
            "title": "Emulator: Xrick"
        }, 
        {
            "location": "/Xrick/#controls", 
            "text": "Needs a keyboard", 
            "title": "Controls"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/", 
            "text": "Pi 3 Bluetooth\n\n\nNote that on the Pi 3 to use on-board Bluetooth you may need to install Bluetooth first with \nsudo apt-get install pi-bluetooth\n but fair warning, the on-board Bluetooth has been known to freeze up the Pi (on RetroPie 3.7 or under), but it can be fixed.\n\n\nPi 3 Bluetooth Freeze Fix (for RetroPie 3.7 or below)\n\n\nsudo apt-get update \n sudo apt-get dist-upgrade\nsudo apt-get install raspberrypi-sys-mods\n\n\n\n\nIf it asks you anything about the /etc/udev/rules.d/99-com.rules configuration file, type Y to overwrite.\n\n\nAdding a Bluetooth controller to RetroPie\n\n\nThe simplest way of setting up a Bluetooth controller is through the Bluetooth Configuration menu of the RetroPie Setup script. There are also manual methods that may vary depending on what Bluetooth controller you are using, some of which are described further below on this page.\n\n\nYou can access the bluetooth configuration menu from the RetroPie Menu of EmulationStation. It can also be accessed from \nRetroPie-Setup Script \n Setup \n Configure Bluetooth Devices\n\n\n\n\n1.\n \nRegister and Connect Bluetooth Devices:\n You can select your bluetooth device's mac address from here \n\n\n\n\n\n\nYou will get a window popping up telling you if the connection was successful or not. If it was not successful make sure that you chose the correct mac address, if it still doesn't work you may have to configure it manually (see below).\n\n\n2.\n \nDisconnect Bluetooth Devices:\n You can disconnect your bluetooth device from this menu \n\n\n\n\n3.\n \nDisplay Registered \n Connected Bluetooth Devices:\n This will display the current bluetooth devices connected.\n\n\n\n\nManual Bluetooth Configuration\n\n\n!!Please note this is for pre v4.0 RetroPie - New 8bitdo details here!!:\n\n\nhttps://github.com/RetroPie/RetroPie-Setup/wiki/Setting-up-an-8bitdo-Bluetooth-controller\n\n\n\n\nThe following guide is geared to using a controller from \n8bitdo\n but should work with a range of bluetooth devices.\n\nThe examples below are assuming you have just a keyboard and bluetooth dongle plugged into your Pi.  \n\n\nController Firmware\n\nMake sure you have the latest firmware for your controller. You will need a USB cable to do this. The firmware for 8bitdo controllers is here: http://8bitdo.com/Support.html  \n\n\nThis section is for Jessie based RetroPie (version 3.4 and later)\n\n\n  \n\n\nVideo Guide\n: https://www.youtube.com/watch?v=Q4K3h4CIJwA  \n\n\nStep 1 - Pair and connect to controller\n\n\nQuit Emulation Station with F4 and type this at the command line:\n\n\nsudo /home/pi/RetroPie-Setup/retropie_setup.sh\n\n\"U\" Update RetroPie-Setup Script\n\n\"3\" Setup\n\n\"Configure Bluetooth devices\"  \n\n\nMake sure your controller is turned on in the correct pairing mode (Power on for FC30 Pro, Start+R for SFC30), then choose:\n1 Register and Connect to Bluetooth device\n\nFollow the prompts and your controller should connnect\n\nThis is shown by a solid blue light on the 8bitdo controllers\n\nQuit out of the setup script\n\n\nStep 2 - Manual file edit for 8bitdo controllers\n\n\nAt the command prompt, type\n\n\nsudo nano /etc/udev/rules.d/10-local.rules\n\nIn that file add   \n\n\nSUBSYSTEM==\"input\", ATTRS{name}==\"8Bitdo SFC30 GamePad Joystick\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n\nNote: The value in the name field should read exactly as your controller reports it.  \n\n\nStep 2.5 - Forcing the Pi to reconnect to the controller\n\n\nIf\n you find your controller doesn't automatically reconnect when you restart the Pi, this process should force the connection.\n\nSome users have reported it will work without this if you wait for Emulation Station to fully load before turning on your controller - this is possibly model or firmware specific.  \n\n\nsudo nano /bin/connect-bluetooth.sh\n  \n\n\nIn that file add\n\n\n#!/bin/bash\n\n\nsudo bluetoothctl \n EOF\n\n\npower on\n\n\nconnect [MAC Address]\n\n\nexit\n\n\nEOF\n\n\nSave that file.\n\nMake it executable  \n\n\nsudo chmod +x /bin/connect-bluetooth.sh\n  \n\n\nThen create a new file\n\n\nsudo nano /etc/systemd/system/connect-bluetooth.service\n  \n\n\nAdd this text:\n\n\n[Unit]\n\n\nDescription=Connect Bluetooth\n  \n\n\n[Service]\n\n\nType=oneshot\n\n\nExecStart=/bin/connect-bluetooth.sh\n  \n\n\n[Install]\n\n\nWantedBy=multi-user.target\n\nSave that file.  \n\n\nThen run this command to enable that process\n\n\nsudo systemctl enable /etc/systemd/system/connect-bluetooth.service\n\n\nVideo Guide for this: https://youtu.be/RsybSJEPZJM\n\n\nStep 3 - Configure controller for Emulation Station and Retroarch\n\n\nNow reboot your system, turn the controller on just before the RetroPie splashscreen appears and the controller will connect (solid blue led light) and ES will prompt to configure it. \n\n\nThis section is for Wheezy based RetroPie (pre version 3.4)\n\n\n  \n\n\nVideo Guide\n: https://www.youtube.com/watch?v=EiDJFdWXweI  \n\n\nStep 1 - Download and install the Bluetooth packages\n\n\nQuit Emulation Station with F4 (stop it restarting by pressing another key within 5 secs) and type this at the command line:\n\n\nsudo apt-get update\n\n\nsudo apt-get install bluetooth bluez-utils\n (\nPress Y if prompted\n)\n\n\nsudo apt-get install bluez python-gobject\n  \n\n\nStep 2 - Pairing and connecting the Bluetooth controller\n\n\nSet your Bluetooth controller to pair in \"joypad\" mode. For example, for the FC30 Pro, you do this by holding the power switch for 3 secs. The guide is here: \nFC30 Pro Manual\n  \n\n\nType this at the command prompt\n\n\nhcitool scan\n\nThis should find your controller and show its name and \nMAC\n address  \n\n\nPair the controller with this command, replace the XX data with your MAC address\n\n\nsudo bluez-simple-agent -c DisplayYesNo hci0 XX:XX:XX:XX:XX:XX\n  \n\n\nTell the system to trust your controller so you dont have to pair every time\n\n\nsudo bluez-test-device trusted XX:XX:XX:XX:XX:XX yes\n  \n\n\nThen connect to your controller with\n\n\nsudo bluez-test-input connect XX:XX:XX:XX:XX:XX\n  \n\n\nYour controller should then connect, with the 8bitdo controllers this is shown by a solid blue light that will begin to glow.  \n\n\nStep 3 - Making sure the connection attempt automatically starts when you reboot your Pi\n\n\nYou may find the controller connects on startup without issue, but if not try this. There are different ways to do this, but this should work to start the connection attempt when the Pi starts up.\n\nEdit this startup file\n\n\nsudo nano /etc/rc.local\n  \n\n\nabove the line \"exit 0\" add\n\n\nbluez-test-input connect XX:XX:XX:XX:XX:XX\n  \n\n\nSave the file with Ctrl-X and press Return to confirm the filename.  \n\n\nNow reboot the Pi.  \n\n\nStep 4 - Configuring the controller using Emulation Station\n\n\nNow the Pi is restarting, make sure your controller is turned on, and trying to pair (I tend to turn the controller on just before the RetroPie splashscreen appears), it should connect about when the Emulation Station splashscreen appears. Then Emulation Station will display with the \"1 Gamepad Detected\" message.  \n\n\nHold a button down on the controller and follow the instructions to input your buttons.\n\nWhen the is done, you click the \"OK\" button with the \"A\" button on the controller to enter Emulation Station.\n\nThis process will have configured your controller for navigating ES. It will also have created a controller file for RetroArch to use when you play games (If you are using at least RetroPie 3 beta 3).  \n\n\nHowever, the content of that file may not have the correct buttons mappings (I'm not sure why this doesn't always work, as its fine with most other controllers). So we will update that file correctly now.  \n\n\nStep 5 - Updating the controller file for RetroArch\n\n\nPress F4 to quit Emulation Station, and at the command prompt type\n\n\ncd /opt/retropie/configs/all/retroarch-joypads/\n\n\nls -lah\n  \n\n\nThis should display the configuration file you created, delete it (although the next steps should overwrite this anyway) with:\n\n\nrm {filename}\n\nfor example\n\n\nrm 8BitdoFC30Pro.cfg\n  \n\n\nNow we will recreate this using the retroarch controller script, type\n\n\nsudo /home/pi/RetroPie-Setup/retropie_setup.sh\n  \n\n\nChoose the \"Setup\" option, then \"Configure input devices for RetroArch\" (Do \nnot\n choose the \"Install RetroArch joypad autoconfigs)\n\nThen choose the \"Configure joystick/controller for use with RetroArch\" option\n\nFollow the on-screen prompts to press the buttons when prompted.\n\nIf you make a mistake, just run it again, it happily overwrites the file it needs to.  \n\n\nThere should be no need to edit the retroarch.cfg to get your controller working.  \n\n\nThat should be all you need. Now when you start your Pi, set the controller to connect and it should be detected by Emulation Station and RetroArch based emulators.  \n\n\nTroubleshooting\n\n\nIf you have installed other bluetooth programs, perhaps to support a PS3 controller, you may find there are conflicts and the above steps produce an error when you try to pair. One way around this is to uninstall the sixad program with:\n\n\nsudo apt-get --purge remove sixad\n\n\nIf you are unsure your USB Bluetooth dongle is detected with the Pi, you can list the USB devices with:\n\n\nlsusb\n  \n\n\nThe 8bitdo SFC30 controller appears to prefer to start with START + R (Right Shoulder) pressed to get into joystick mode.  \n\n\nSometimes there can be issues with the pairing process, to start that again you can remove the joypad like this \n\n\nbluez-test-device remove XX:XX:XX:XX:XX:XX\n\n\nKeep bluetooth scanning\n\nThis should keep the Pi scanning for bluetooth devices in case the pair is lost.\n\n\nsudo nano /etc/init.d/rc.local\n\n\nadd \u201csudo hciconfig hci0 up piscan\u201d (without the quotes) above the line that says \u201cexit 0\u201d\n\n\nctrl x\n\n\ny\n\n\nenter\n\n\nsudo reboot\n  \n\n\nSome useful threads\n\nhttp://blog.petrockblock.com/forums/topic/8bitdo-bluetooth-controller-setup-retropie-v3/\n\nhttp://blog.petrockblock.com/forums/topic/the-old-story-setting-up-2x-8bitdo-nes30-bluetooth/\n\nhttp://forum.8bitdo.com/thread-328-1-1.html \n\nhttps://wiki.archlinux.org/index.php/bluetooth#Bluetoothctl\n\nhttps://wiki.archlinux.org/index.php/bluetooth_keyboard  \n\nhttp://8bitdo.com/Support.html\n\nhttps://www.reddit.com/r/RetroPie/comments/4d5hcf/how_to_setup_8bitdo_nes30_fc30_pro_controllers_on/\n\nhttps://github.com/libretro/retroarch-joypad-autoconfig/tree/master/udev", 
            "title": "Bluetooth"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#pi-3-bluetooth", 
            "text": "Note that on the Pi 3 to use on-board Bluetooth you may need to install Bluetooth first with  sudo apt-get install pi-bluetooth  but fair warning, the on-board Bluetooth has been known to freeze up the Pi (on RetroPie 3.7 or under), but it can be fixed.", 
            "title": "Pi 3 Bluetooth"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#pi-3-bluetooth-freeze-fix-for-retropie-37-or-below", 
            "text": "sudo apt-get update   sudo apt-get dist-upgrade\nsudo apt-get install raspberrypi-sys-mods  If it asks you anything about the /etc/udev/rules.d/99-com.rules configuration file, type Y to overwrite.", 
            "title": "Pi 3 Bluetooth Freeze Fix (for RetroPie 3.7 or below)"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#adding-a-bluetooth-controller-to-retropie", 
            "text": "The simplest way of setting up a Bluetooth controller is through the Bluetooth Configuration menu of the RetroPie Setup script. There are also manual methods that may vary depending on what Bluetooth controller you are using, some of which are described further below on this page.  You can access the bluetooth configuration menu from the RetroPie Menu of EmulationStation. It can also be accessed from  RetroPie-Setup Script   Setup   Configure Bluetooth Devices   1.   Register and Connect Bluetooth Devices:  You can select your bluetooth device's mac address from here     You will get a window popping up telling you if the connection was successful or not. If it was not successful make sure that you chose the correct mac address, if it still doesn't work you may have to configure it manually (see below).  2.   Disconnect Bluetooth Devices:  You can disconnect your bluetooth device from this menu    3.   Display Registered   Connected Bluetooth Devices:  This will display the current bluetooth devices connected.", 
            "title": "Adding a Bluetooth controller to RetroPie"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#manual-bluetooth-configuration", 
            "text": "", 
            "title": "Manual Bluetooth Configuration"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#please-note-this-is-for-pre-v40-retropie-new-8bitdo-details-here", 
            "text": "https://github.com/RetroPie/RetroPie-Setup/wiki/Setting-up-an-8bitdo-Bluetooth-controller   The following guide is geared to using a controller from  8bitdo  but should work with a range of bluetooth devices. \nThe examples below are assuming you have just a keyboard and bluetooth dongle plugged into your Pi.    Controller Firmware \nMake sure you have the latest firmware for your controller. You will need a USB cable to do this. The firmware for 8bitdo controllers is here: http://8bitdo.com/Support.html", 
            "title": "!!Please note this is for pre v4.0 RetroPie - New 8bitdo details here!!:"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#this-section-is-for-jessie-based-retropie-version-34-and-later", 
            "text": "Video Guide : https://www.youtube.com/watch?v=Q4K3h4CIJwA", 
            "title": "This section is for Jessie based RetroPie (version 3.4 and later)"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-1-pair-and-connect-to-controller", 
            "text": "Quit Emulation Station with F4 and type this at the command line:  sudo /home/pi/RetroPie-Setup/retropie_setup.sh \n\"U\" Update RetroPie-Setup Script \n\"3\" Setup \n\"Configure Bluetooth devices\"    Make sure your controller is turned on in the correct pairing mode (Power on for FC30 Pro, Start+R for SFC30), then choose:\n1 Register and Connect to Bluetooth device \nFollow the prompts and your controller should connnect \nThis is shown by a solid blue light on the 8bitdo controllers \nQuit out of the setup script", 
            "title": "Step 1 - Pair and connect to controller"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-2-manual-file-edit-for-8bitdo-controllers", 
            "text": "At the command prompt, type  sudo nano /etc/udev/rules.d/10-local.rules \nIn that file add     SUBSYSTEM==\"input\", ATTRS{name}==\"8Bitdo SFC30 GamePad Joystick\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\" \nNote: The value in the name field should read exactly as your controller reports it.", 
            "title": "Step 2 - Manual file edit for 8bitdo controllers"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-25-forcing-the-pi-to-reconnect-to-the-controller", 
            "text": "If  you find your controller doesn't automatically reconnect when you restart the Pi, this process should force the connection. \nSome users have reported it will work without this if you wait for Emulation Station to fully load before turning on your controller - this is possibly model or firmware specific.    sudo nano /bin/connect-bluetooth.sh     In that file add  #!/bin/bash  sudo bluetoothctl   EOF  power on  connect [MAC Address]  exit  EOF  Save that file. \nMake it executable    sudo chmod +x /bin/connect-bluetooth.sh     Then create a new file  sudo nano /etc/systemd/system/connect-bluetooth.service     Add this text:  [Unit]  Description=Connect Bluetooth     [Service]  Type=oneshot  ExecStart=/bin/connect-bluetooth.sh     [Install]  WantedBy=multi-user.target \nSave that file.    Then run this command to enable that process  sudo systemctl enable /etc/systemd/system/connect-bluetooth.service  Video Guide for this: https://youtu.be/RsybSJEPZJM", 
            "title": "Step 2.5 - Forcing the Pi to reconnect to the controller"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-3-configure-controller-for-emulation-station-and-retroarch", 
            "text": "Now reboot your system, turn the controller on just before the RetroPie splashscreen appears and the controller will connect (solid blue led light) and ES will prompt to configure it.", 
            "title": "Step 3 - Configure controller for Emulation Station and Retroarch"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#this-section-is-for-wheezy-based-retropie-pre-version-34", 
            "text": "Video Guide : https://www.youtube.com/watch?v=EiDJFdWXweI", 
            "title": "This section is for Wheezy based RetroPie (pre version 3.4)"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-1-download-and-install-the-bluetooth-packages", 
            "text": "Quit Emulation Station with F4 (stop it restarting by pressing another key within 5 secs) and type this at the command line:  sudo apt-get update  sudo apt-get install bluetooth bluez-utils  ( Press Y if prompted )  sudo apt-get install bluez python-gobject", 
            "title": "Step 1 - Download and install the Bluetooth packages"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-2-pairing-and-connecting-the-bluetooth-controller", 
            "text": "Set your Bluetooth controller to pair in \"joypad\" mode. For example, for the FC30 Pro, you do this by holding the power switch for 3 secs. The guide is here:  FC30 Pro Manual     Type this at the command prompt  hcitool scan \nThis should find your controller and show its name and  MAC  address    Pair the controller with this command, replace the XX data with your MAC address  sudo bluez-simple-agent -c DisplayYesNo hci0 XX:XX:XX:XX:XX:XX     Tell the system to trust your controller so you dont have to pair every time  sudo bluez-test-device trusted XX:XX:XX:XX:XX:XX yes     Then connect to your controller with  sudo bluez-test-input connect XX:XX:XX:XX:XX:XX     Your controller should then connect, with the 8bitdo controllers this is shown by a solid blue light that will begin to glow.", 
            "title": "Step 2 - Pairing and connecting the Bluetooth controller"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-3-making-sure-the-connection-attempt-automatically-starts-when-you-reboot-your-pi", 
            "text": "You may find the controller connects on startup without issue, but if not try this. There are different ways to do this, but this should work to start the connection attempt when the Pi starts up. \nEdit this startup file  sudo nano /etc/rc.local     above the line \"exit 0\" add  bluez-test-input connect XX:XX:XX:XX:XX:XX     Save the file with Ctrl-X and press Return to confirm the filename.    Now reboot the Pi.", 
            "title": "Step 3 - Making sure the connection attempt automatically starts when you reboot your Pi"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-4-configuring-the-controller-using-emulation-station", 
            "text": "Now the Pi is restarting, make sure your controller is turned on, and trying to pair (I tend to turn the controller on just before the RetroPie splashscreen appears), it should connect about when the Emulation Station splashscreen appears. Then Emulation Station will display with the \"1 Gamepad Detected\" message.    Hold a button down on the controller and follow the instructions to input your buttons. \nWhen the is done, you click the \"OK\" button with the \"A\" button on the controller to enter Emulation Station. \nThis process will have configured your controller for navigating ES. It will also have created a controller file for RetroArch to use when you play games (If you are using at least RetroPie 3 beta 3).    However, the content of that file may not have the correct buttons mappings (I'm not sure why this doesn't always work, as its fine with most other controllers). So we will update that file correctly now.", 
            "title": "Step 4 - Configuring the controller using Emulation Station"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#step-5-updating-the-controller-file-for-retroarch", 
            "text": "Press F4 to quit Emulation Station, and at the command prompt type  cd /opt/retropie/configs/all/retroarch-joypads/  ls -lah     This should display the configuration file you created, delete it (although the next steps should overwrite this anyway) with:  rm {filename} \nfor example  rm 8BitdoFC30Pro.cfg     Now we will recreate this using the retroarch controller script, type  sudo /home/pi/RetroPie-Setup/retropie_setup.sh     Choose the \"Setup\" option, then \"Configure input devices for RetroArch\" (Do  not  choose the \"Install RetroArch joypad autoconfigs) \nThen choose the \"Configure joystick/controller for use with RetroArch\" option \nFollow the on-screen prompts to press the buttons when prompted. \nIf you make a mistake, just run it again, it happily overwrites the file it needs to.    There should be no need to edit the retroarch.cfg to get your controller working.    That should be all you need. Now when you start your Pi, set the controller to connect and it should be detected by Emulation Station and RetroArch based emulators.", 
            "title": "Step 5 - Updating the controller file for RetroArch"
        }, 
        {
            "location": "/Setting-up-a-Bluetooth-controller/#troubleshooting", 
            "text": "If you have installed other bluetooth programs, perhaps to support a PS3 controller, you may find there are conflicts and the above steps produce an error when you try to pair. One way around this is to uninstall the sixad program with:  sudo apt-get --purge remove sixad  If you are unsure your USB Bluetooth dongle is detected with the Pi, you can list the USB devices with:  lsusb     The 8bitdo SFC30 controller appears to prefer to start with START + R (Right Shoulder) pressed to get into joystick mode.    Sometimes there can be issues with the pairing process, to start that again you can remove the joypad like this   bluez-test-device remove XX:XX:XX:XX:XX:XX  Keep bluetooth scanning \nThis should keep the Pi scanning for bluetooth devices in case the pair is lost.  sudo nano /etc/init.d/rc.local  add \u201csudo hciconfig hci0 up piscan\u201d (without the quotes) above the line that says \u201cexit 0\u201d  ctrl x  y  enter  sudo reboot     Some useful threads \nhttp://blog.petrockblock.com/forums/topic/8bitdo-bluetooth-controller-setup-retropie-v3/ \nhttp://blog.petrockblock.com/forums/topic/the-old-story-setting-up-2x-8bitdo-nes30-bluetooth/ \nhttp://forum.8bitdo.com/thread-328-1-1.html  \nhttps://wiki.archlinux.org/index.php/bluetooth#Bluetoothctl \nhttps://wiki.archlinux.org/index.php/bluetooth_keyboard   \nhttp://8bitdo.com/Support.html \nhttps://www.reddit.com/r/RetroPie/comments/4d5hcf/how_to_setup_8bitdo_nes30_fc30_pro_controllers_on/ \nhttps://github.com/libretro/retroarch-joypad-autoconfig/tree/master/udev", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/", 
            "text": "Setting up an 8bitdo Bluetooth controller\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis guide will show how to use an 8bitdo controller with RetroPie.\nPlease make sure you are using at least RetroPie v4.0, and the \ncontroller firmware versions listed below\n (newer versions shouldn't cause an issue). It is not recommended to use beta firmware versions.\n\n\nPlease see the \n8bitdo support page\n for details on how to upgrade the firmware. Before you upgrade your firmware or attempt to register your controller, please make sure your controller is fully charged.  \n\n\n\n\nGuide to add your controller\n\n\n1)\n Run the RetroPie setup script, either through the Emulation Station menu option, or via the command line.\n\nIf you want to run this via the command line, quit Emulation Station by pressing F4 on the keyboard and type this at the command line: \nsudo /home/pi/RetroPie-Setup/retropie_setup.sh\n\n\n2)\n Choose the \"Configuration / Tools\" menu choice\n\n\n\n3)\n Choose the \"bluetooth - Configure Bluetooth Devices\" menu choice\n\n\n\n4)\n \nMake sure the hack option is turned \"off\"\n\nYou need to make sure your controller is running the relevant firmware for this to work correctly, the versions are shown in this wiki article.\n\n\n\n5)\n Make sure your controller is powered on and searching for a connection.\nWith the FC30 Pro, this is done by holding the power button (left hand side of base of controller) on until the side blue lights illuminate. With the SFC30 this is done by holding the Start button until the blue LED lights up.\n\n\n6)\n Choose the \"Register and Connect to Bluetooth Device\"\n\n\n\n7)\n You will then see the \"Searching\" screen. If you have issues with the detection of the controller, you may find it helps to press some buttons on the controller when this screen is showing.\n\n\n\n8)\n It may be the case that the first time the results are returned, the name of the controller doesnt show, or that the MAC address doesnt show at all. If thats the case, you can either select the device if you know the MAC, or simply search again.\n\n\n\n9)\n Here it has successfully detected the name of the controller, select OK here.\n\n\n\n10)\n Choose the \"DisplayYesNo\" optin to complete the registration process.\n\n\n\n11)\n Registration of the 8bitdo controller is complete and your blue LED lights should now be solid on (the FC30 Pro will glow).\n\n\n\n12)\n You must now setup the udev rule in order for Emulation Station to \"see\" the controller when you restart your Raspberry Pi.\n\n\n\n13)\n Select your controller from the list.\n\n\n\n14)\n This then adds the rule to the file specified, you dont need to manually take any extra steps here.\nAs indicated, you will need to reboot after completing these steps to make sure all the changes have taken effect.\n\n\n\n15)\n The menu \"Configure bluetooth connect mode\" is optional, but using this can be very useful.\n\n\n\n16)\n If your controller wont connect (LED change from flashing to solid) when restarting, change the mode to \"boot\". In most cases this should also enable the \"background\" option automatically, so you dont have to select this. If you have issues with the controller not auto connecting after waking from sleep/off mode, then try \"background\".\n\n\n\n17)\n When this has been set, please reboot the Raspberry Pi.\nEither during boot up, or once in Emulation Station, when you turn the controller on it should connect without issue.\n\n\n18)\n Configure the controller for Emulation Station and the emulators. Press Start in Emulation Station using your non-8bitdo controller and choose the \"Configure Input\" option.\n\n\n\n19)\n You should see that Emulation Station can now see your 8bitdo controller\n\n\n\n20)\n When you hold a button on your controller you should see its name appear at the bottom of the screen.\n\n\n\n21)\n Follow the instructions as given here. If you make a mistake, just run the \"Configure Input\" process again.\n\n\n\n22)\n When that is complete your 8bitdo controller is ready to use!\n\n\nThe process will have written various controller configuration files for you.\nThe main RetroArch controller file will now be in:\n\n/opt/retropie/configs/all/retroarch-joypads/\n\n\nHere are some examples of the file that should be written.\n\n\nFC30 Pro RetroArch config file\n (Firmware 1.69 - 8BitdoFC30Pro.cfg)\n\n\nSFC30 RetroArch config file\n (Firmware 2.68 - 8BitdoSFC30GamePad.cfg)\n\n\nVideo Guide:\n\n\n\n\nFirmware Versions for 8bitdo controllers\n\n\nSNES30 (Firmware version 2.68 - 6th August 2016)\n\nSFC30 (Firmware version 2.68 - 6th August 2016)  \n\n\nNES30 Pro (Firmware version 1.69 - 21st March 2016)\n\nFC30 Pro (Firmware version 1.69 - 21st March 2016)  \n\n\nNES30 (Firmware version 2.68 - 6th August 2016)\n\nFC30 (Firmware version 2.68 - 6th August 2016)  \n\n\nYou can download new firmware \nhere.\n\n\nTroubleshooting\n\n\nPlease confirm your firmware version before raising a support ticket\n\n\nSome useful links\n\n\nhttp://8bitdo.com/Support.html\n\nhttps://github.com/libretro/retroarch-joypad-autoconfig/tree/master/udev", 
            "title": "8bitdo"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/#setting-up-an-8bitdo-bluetooth-controller", 
            "text": "This guide will show how to use an 8bitdo controller with RetroPie.\nPlease make sure you are using at least RetroPie v4.0, and the  controller firmware versions listed below  (newer versions shouldn't cause an issue). It is not recommended to use beta firmware versions.  Please see the  8bitdo support page  for details on how to upgrade the firmware. Before you upgrade your firmware or attempt to register your controller, please make sure your controller is fully charged.", 
            "title": "Setting up an 8bitdo Bluetooth controller"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/#guide-to-add-your-controller", 
            "text": "1)  Run the RetroPie setup script, either through the Emulation Station menu option, or via the command line. \nIf you want to run this via the command line, quit Emulation Station by pressing F4 on the keyboard and type this at the command line:  sudo /home/pi/RetroPie-Setup/retropie_setup.sh  2)  Choose the \"Configuration / Tools\" menu choice  3)  Choose the \"bluetooth - Configure Bluetooth Devices\" menu choice  4)   Make sure the hack option is turned \"off\" \nYou need to make sure your controller is running the relevant firmware for this to work correctly, the versions are shown in this wiki article.  5)  Make sure your controller is powered on and searching for a connection.\nWith the FC30 Pro, this is done by holding the power button (left hand side of base of controller) on until the side blue lights illuminate. With the SFC30 this is done by holding the Start button until the blue LED lights up.  6)  Choose the \"Register and Connect to Bluetooth Device\"  7)  You will then see the \"Searching\" screen. If you have issues with the detection of the controller, you may find it helps to press some buttons on the controller when this screen is showing.  8)  It may be the case that the first time the results are returned, the name of the controller doesnt show, or that the MAC address doesnt show at all. If thats the case, you can either select the device if you know the MAC, or simply search again.  9)  Here it has successfully detected the name of the controller, select OK here.  10)  Choose the \"DisplayYesNo\" optin to complete the registration process.  11)  Registration of the 8bitdo controller is complete and your blue LED lights should now be solid on (the FC30 Pro will glow).  12)  You must now setup the udev rule in order for Emulation Station to \"see\" the controller when you restart your Raspberry Pi.  13)  Select your controller from the list.  14)  This then adds the rule to the file specified, you dont need to manually take any extra steps here.\nAs indicated, you will need to reboot after completing these steps to make sure all the changes have taken effect.  15)  The menu \"Configure bluetooth connect mode\" is optional, but using this can be very useful.  16)  If your controller wont connect (LED change from flashing to solid) when restarting, change the mode to \"boot\". In most cases this should also enable the \"background\" option automatically, so you dont have to select this. If you have issues with the controller not auto connecting after waking from sleep/off mode, then try \"background\".  17)  When this has been set, please reboot the Raspberry Pi.\nEither during boot up, or once in Emulation Station, when you turn the controller on it should connect without issue.  18)  Configure the controller for Emulation Station and the emulators. Press Start in Emulation Station using your non-8bitdo controller and choose the \"Configure Input\" option.  19)  You should see that Emulation Station can now see your 8bitdo controller  20)  When you hold a button on your controller you should see its name appear at the bottom of the screen.  21)  Follow the instructions as given here. If you make a mistake, just run the \"Configure Input\" process again.  22)  When that is complete your 8bitdo controller is ready to use!  The process will have written various controller configuration files for you.\nThe main RetroArch controller file will now be in: /opt/retropie/configs/all/retroarch-joypads/  Here are some examples of the file that should be written.  FC30 Pro RetroArch config file  (Firmware 1.69 - 8BitdoFC30Pro.cfg)  SFC30 RetroArch config file  (Firmware 2.68 - 8BitdoSFC30GamePad.cfg)", 
            "title": "Guide to add your controller"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/#video-guide", 
            "text": "", 
            "title": "Video Guide:"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/#firmware-versions-for-8bitdo-controllers", 
            "text": "SNES30 (Firmware version 2.68 - 6th August 2016) \nSFC30 (Firmware version 2.68 - 6th August 2016)    NES30 Pro (Firmware version 1.69 - 21st March 2016) \nFC30 Pro (Firmware version 1.69 - 21st March 2016)    NES30 (Firmware version 2.68 - 6th August 2016) \nFC30 (Firmware version 2.68 - 6th August 2016)    You can download new firmware  here.", 
            "title": "Firmware Versions for 8bitdo controllers"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/#troubleshooting", 
            "text": "Please confirm your firmware version before raising a support ticket", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Setting-up-an-8bitdo-Bluetooth-controller/#some-useful-links", 
            "text": "http://8bitdo.com/Support.html \nhttps://github.com/libretro/retroarch-joypad-autoconfig/tree/master/udev", 
            "title": "Some useful links"
        }, 
        {
            "location": "/Setting-up-an-N64-controller/", 
            "text": "From \nhere\n:\n\n\ni recently started messing with it again, and used an n64 controller instead. not only does it have more buttons, it also has less to connect, just + at pin 1 gnd at 6, and data at pin 7. as long as you put in\n\n\ngamecon_gpio_rpi map=0,0,6,0\n\n\n\n\nin \n\n\n/etc/modules\n\n\n\n\nit starts right up on boot. you also need to run\n\n\ncd ~/RetroPie/emulators/RetroArch/tools\n./retroarch-joyconfig\n\n\n\n\nand save the output to your retropie config file (this is a lot easier if you do it by ssh, with copy paste into vi/nano) to\n\n\n~/RetroPie/configs/all/retroarch.cfg", 
            "title": "N64"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/", 
            "text": "Recent Versions of RetroPie (3.0+, 4.0+)\n\n\nThe most recent versions of RetroPie include the packages needed for setting up a PS3 controller. Connecting over USB is Plug-and-Play--literally just plug your controller into the Pi while EmulationStation is running and it should detect a gamepad to configure. Connecting a PS3 controller via Bluetooth requires installation of a special PS3 driver located in RetroPie setup.\n\n\nConfiguring a PS3 controller to connect via Bluetooth\n\n\nBefore booting the Raspberry Pi, make sure that a supported Bluetooth adapter is connected (for the Pi 3, onboard Bluetooth works perfectly as of RetroPie 4.0+). If you have a Playstation 3 console near by, make sure it is \ntotally powered off\n--either unplugged or switched off in the back--because the PS3 controller may try to automatically pair with the console otherwise.  While a separate powered USB hub is not required to set up a controller, be mindful of your overall power draw when attaching peripherals. If you are overclocking, for example, it will be much safer to use a powered USB hub than drawing current from the Pi itself.\n\n\nAfter your Pi boots up, you need to enter RetroPie setup. You can do this one of two ways:\n\n\n\n\nSetting up your keyboard or PS3 controller as a USB gamepad in EmulationStation (you \nmust\n configure a gamepad before you can use EmulationStation), navigating to the \"RetroPie\" icon in the Home Screen, and selecting it using whatever key you mapped \"A\" to on your gamepad. \n\n\nPressing F4 to quit EmulationStation and running the Retropie script from the terminal. Once you're in the terminal, follow these instructions to run the \nretropie_setup.sh\n script.\n\n\n\n\nUsing the RetroPie GUI to configure the PS3 Controller Bluetooth Connection\n\n\nNote: Do not enable other bluetooth options as these will conflict with the PS3 specific bluetooth setup (sixad)\n\n\n\n\nNavigate to the \"RetroPie\" icon in the Home Screen and select it using whatever key you mapped \"A\" to on your gamepad\n\n\nOnce in the RetroPie GUI, choose [Manage packages] \n [driver].\n\n\nSelect PS3 Controller Driver (\"ps3controller\"), and then select [Install from source].\n\n\nOnce installation completes, exit RetroPie setup and return to the EmulationStation Home Screen.\n\n\nPress \"Start\" to enter the EmulationStation Menu, and select Configure Input.\n\n\nDisconnect your PS3 controller from USB. Now hold the PS button on the controller down until you see the lights on it flash sequentially. The controller should now be connected via Bluetooth.\n\n\nEmulation Station should now detect another gamepad connected. Hold any button down on the controller to begin configuring it.\n\n\n\n\nAnd you now have a functional PS3 controller over Bluetooth.\n\n\nSome PS3 Controller clones (such as the Shanwan PS3 Controllers) will not connect over bluetooth until they are physically connected and removed from a normal USB connection.  If you are having issues pairing a controller, try connecting it via USB for several seconds, disconnecting it, and then pairing it over Bluetooth.\n\n\nUsing the RetroPie shell to configure the PS3 Controller Bluetooth Connection\n\n\nNote: Do not enable other bluetooth options as these will conflict with the PS3 specific bluetooth setup (sixad)\n\n\nAt the EmulationStation Home Screen, press F4 to quit EmulationStation and run the Retropie script from the terminal. Once you're in the terminal, follow these instructions to run the \nretropie_setup.sh\n script.\n\n\nshell\nsudo RetroPie-Setup/retropie_setup.sh\n\n\n\nAlthough it is not required, it is always a good idea to update the setup script by selecting\n\n\nS Update RetroPie-Setup Script\n\n\n\nAfter updating, run the \nretropie_setup.sh\n script again.\n\n\nNow select \nManage packages\n \n \nManage driver packages\n \n \nps3controller\n\n\nAfter it finishes compiling, the GUI prompt will ask you to make sure that your Bluetooth dongle is connected. Press enter and connect your PS3 controller.\n\n\nOnce this is done, you can disconnect the controller USB cable, and press the Playstation button to pair it via Bluetooth.\n\n\nAfter installation of PS3 controller driver bluetooth connection of new controllers will be configured automatically if you connect them over usb. \n\n\nPersisting bluetooth\n\n\nFor bluetooth pairing to persist between reboots you need to make sure sixad is executed during startup.\nExit EmulationStation and and edit \nrc.local\n.\n\n\nshell\nsudo nano /etc/rc.local\n\n\n\nAdd \nsixad --start \n before the line \nexit 0\n and save (ctrl-x then y)\n\n\nManually setting input\n\n\nIf the keys stop working in-game after switching to bluetooth or you want to configure inputs manually you can do this the recommended way using the RetroArch configuration UI (under \nsettings\n \n \ninput\n) or by creating a input map manually:\n\n\ncd /opt/retropie/configs/all/retroarch-joypads/\ntouch PLAYSTATION\\(R\\)3\\ Controller.cfg\nnano PLAYSTATION\\(R\\)3\\ Controller.cfg\n\n\n\nExample config:\n\n\ninput_driver = \"udev\"\ninput_device = \"PLAYSTATION(R)3 Controller\"\ninput_b_btn = \"13\"\ninput_y_btn = \"15\"\ninput_select_btn = \"0\"\ninput_start_btn = \"3\"\ninput_up_btn = \"4\"\ninput_down_btn = \"6\"\ninput_left_btn = \"7\"\ninput_right_btn = \"5\"\ninput_a_btn = \"14\"\ninput_x_btn = \"12\"\ninput_l_btn = \"10\"\ninput_r_btn = \"11\"\ninput_l2_btn = \"8\"\ninput_r2_btn = \"9\"\ninput_l3_btn = \"1\"\ninput_r3_btn = \"2\"\ninput_l_x_plus_axis = \"-0\"\ninput_l_x_minus_axis = \"+0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"-2\"\ninput_r_x_minus_axis = \"+2\"\ninput_r_y_plus_axis = \"+3\"\ninput_r_y_minus_axis = \"-3\"\ninput_enable_hotkey_btn = \"0\"\ninput_exit_emulator_btn = \"3\"\n\n\n\nFor older versions of RetroPie\n\n\nFor setting up the PS3 Controller we're going to be following This \npost\n\n\n(now oddly i couldn't get to Pair constantly with bluetooth but worked over USB, but for those getting it to work over bluetooth's sake we're going to follow the guide step by step)\n\n\nFirst: Besides having a bluetooth adapter :P we're going to install all dependencies required\n\n\nsudo apt-get install bluetooth blueman bluez-hcidump checkinstall libusb-dev libbluetooth-dev joystick pkg-config\n\n\n\nNow that's installed (and a reboot if you plugged in your dongle afterwards) run \nhciconfig\n to make sure it's seeing your dongle, if it has not, a dependency failed to install or your dongle is not supported by RetroPie SD (Raspbian) or the said OS running. you should see an output with information like this:\n\n\npi@raspberrypi ~ $ hciconfig\nhci0: Type: BR/EDR Bus: USB\n BD Address: 00:1F:81:00:06:20 ACL MTU: 1021:4 SCO MTU: 180:1\nUP RUNNING PSCAN\nRX bytes:1260 acl:0 sco:0 events:46 errors:0\nTX bytes:452 acl:0 sco:0 commands:45 errors:0\n\n\n\nNext we're going to pair using this \ntool\n\nDownloading and compiling is pretty quick and straight forward:\n\n\nwget http://www.pabr.org/sixlinux/sixpair.c\ngcc -o sixpair sixpair.c -lusb\n\n\n\nhowever sixpair must be run as root, so connect via USB and run \nsudo ./sixpair\n.\nIf successful you should see: \n\n\nCurrent Bluetooth master: DE:AD:BE:EF:00:00\nSetting master bd_addr to: 00:1F:81:00:06:20\n\n\n\nnow this is where the magic happens\n\n\nwe're going to install an Sixaxis Manager this is what will let us use the controller as an input over bluetooth and USB. (mycase i only got over USB you may vary!)\n\n\nwget http://sourceforge.net/projects/qtsixa/files/QtSixA%201.5.1/QtSixA-1.5.1-src.tar.gz\ntar xfvz QtSixA-1.5.1-src.tar.gz\n\n\n\nThe source code requires a patch to compile correctly as of right now, so we'll download and apply it\n\n\nwget https://bugs.launchpad.net/qtsixa/+bug/1036744/+attachment/3260906/+files/compilation_sid.patch\npatch ~/QtSixA-1.5.1/sixad/shared.h \n compilation_sid.patch\n\n\n\nIt should now correctly build and install \n\n\ncd QtSixA-1.5.1/sixad\nmake\nsudo mkdir -p /var/lib/sixad/profiles\nsudo checkinstall\n\n\n\nnow if we want to make it so per every time we need it on demand: we start the controller daemon like so:\n\n\nsudo sixad --start (when it displays its searching, press the PS Button and your golden~!)\n\n\n\nif we want it at boot time then we use this command:\n\n\nsudo update-rc.d sixad defaults\nreboot\n\n\n\nif you have any issues with the controller you can debug it with \nsudo jstest /dev/input/js0\n\n\nDisconnect Bluetooth Controller\n\n\nTo disconnect the controller, hold down the ps3 button for 10 seconds.", 
            "title": "PS3"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#recent-versions-of-retropie-30-40", 
            "text": "The most recent versions of RetroPie include the packages needed for setting up a PS3 controller. Connecting over USB is Plug-and-Play--literally just plug your controller into the Pi while EmulationStation is running and it should detect a gamepad to configure. Connecting a PS3 controller via Bluetooth requires installation of a special PS3 driver located in RetroPie setup.", 
            "title": "Recent Versions of RetroPie (3.0+, 4.0+)"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#configuring-a-ps3-controller-to-connect-via-bluetooth", 
            "text": "Before booting the Raspberry Pi, make sure that a supported Bluetooth adapter is connected (for the Pi 3, onboard Bluetooth works perfectly as of RetroPie 4.0+). If you have a Playstation 3 console near by, make sure it is  totally powered off --either unplugged or switched off in the back--because the PS3 controller may try to automatically pair with the console otherwise.  While a separate powered USB hub is not required to set up a controller, be mindful of your overall power draw when attaching peripherals. If you are overclocking, for example, it will be much safer to use a powered USB hub than drawing current from the Pi itself.  After your Pi boots up, you need to enter RetroPie setup. You can do this one of two ways:   Setting up your keyboard or PS3 controller as a USB gamepad in EmulationStation (you  must  configure a gamepad before you can use EmulationStation), navigating to the \"RetroPie\" icon in the Home Screen, and selecting it using whatever key you mapped \"A\" to on your gamepad.   Pressing F4 to quit EmulationStation and running the Retropie script from the terminal. Once you're in the terminal, follow these instructions to run the  retropie_setup.sh  script.", 
            "title": "Configuring a PS3 controller to connect via Bluetooth"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#using-the-retropie-gui-to-configure-the-ps3-controller-bluetooth-connection", 
            "text": "Note: Do not enable other bluetooth options as these will conflict with the PS3 specific bluetooth setup (sixad)   Navigate to the \"RetroPie\" icon in the Home Screen and select it using whatever key you mapped \"A\" to on your gamepad  Once in the RetroPie GUI, choose [Manage packages]   [driver].  Select PS3 Controller Driver (\"ps3controller\"), and then select [Install from source].  Once installation completes, exit RetroPie setup and return to the EmulationStation Home Screen.  Press \"Start\" to enter the EmulationStation Menu, and select Configure Input.  Disconnect your PS3 controller from USB. Now hold the PS button on the controller down until you see the lights on it flash sequentially. The controller should now be connected via Bluetooth.  Emulation Station should now detect another gamepad connected. Hold any button down on the controller to begin configuring it.   And you now have a functional PS3 controller over Bluetooth.  Some PS3 Controller clones (such as the Shanwan PS3 Controllers) will not connect over bluetooth until they are physically connected and removed from a normal USB connection.  If you are having issues pairing a controller, try connecting it via USB for several seconds, disconnecting it, and then pairing it over Bluetooth.", 
            "title": "Using the RetroPie GUI to configure the PS3 Controller Bluetooth Connection"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#using-the-retropie-shell-to-configure-the-ps3-controller-bluetooth-connection", 
            "text": "Note: Do not enable other bluetooth options as these will conflict with the PS3 specific bluetooth setup (sixad)  At the EmulationStation Home Screen, press F4 to quit EmulationStation and run the Retropie script from the terminal. Once you're in the terminal, follow these instructions to run the  retropie_setup.sh  script.  shell\nsudo RetroPie-Setup/retropie_setup.sh  Although it is not required, it is always a good idea to update the setup script by selecting  S Update RetroPie-Setup Script  After updating, run the  retropie_setup.sh  script again.  Now select  Manage packages     Manage driver packages     ps3controller  After it finishes compiling, the GUI prompt will ask you to make sure that your Bluetooth dongle is connected. Press enter and connect your PS3 controller.  Once this is done, you can disconnect the controller USB cable, and press the Playstation button to pair it via Bluetooth.  After installation of PS3 controller driver bluetooth connection of new controllers will be configured automatically if you connect them over usb.", 
            "title": "Using the RetroPie shell to configure the PS3 Controller Bluetooth Connection"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#persisting-bluetooth", 
            "text": "For bluetooth pairing to persist between reboots you need to make sure sixad is executed during startup.\nExit EmulationStation and and edit  rc.local .  shell\nsudo nano /etc/rc.local  Add  sixad --start   before the line  exit 0  and save (ctrl-x then y)", 
            "title": "Persisting bluetooth"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#manually-setting-input", 
            "text": "If the keys stop working in-game after switching to bluetooth or you want to configure inputs manually you can do this the recommended way using the RetroArch configuration UI (under  settings     input ) or by creating a input map manually:  cd /opt/retropie/configs/all/retroarch-joypads/\ntouch PLAYSTATION\\(R\\)3\\ Controller.cfg\nnano PLAYSTATION\\(R\\)3\\ Controller.cfg  Example config:  input_driver = \"udev\"\ninput_device = \"PLAYSTATION(R)3 Controller\"\ninput_b_btn = \"13\"\ninput_y_btn = \"15\"\ninput_select_btn = \"0\"\ninput_start_btn = \"3\"\ninput_up_btn = \"4\"\ninput_down_btn = \"6\"\ninput_left_btn = \"7\"\ninput_right_btn = \"5\"\ninput_a_btn = \"14\"\ninput_x_btn = \"12\"\ninput_l_btn = \"10\"\ninput_r_btn = \"11\"\ninput_l2_btn = \"8\"\ninput_r2_btn = \"9\"\ninput_l3_btn = \"1\"\ninput_r3_btn = \"2\"\ninput_l_x_plus_axis = \"-0\"\ninput_l_x_minus_axis = \"+0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"-2\"\ninput_r_x_minus_axis = \"+2\"\ninput_r_y_plus_axis = \"+3\"\ninput_r_y_minus_axis = \"-3\"\ninput_enable_hotkey_btn = \"0\"\ninput_exit_emulator_btn = \"3\"", 
            "title": "Manually setting input"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#for-older-versions-of-retropie", 
            "text": "For setting up the PS3 Controller we're going to be following This  post  (now oddly i couldn't get to Pair constantly with bluetooth but worked over USB, but for those getting it to work over bluetooth's sake we're going to follow the guide step by step)  First: Besides having a bluetooth adapter :P we're going to install all dependencies required  sudo apt-get install bluetooth blueman bluez-hcidump checkinstall libusb-dev libbluetooth-dev joystick pkg-config  Now that's installed (and a reboot if you plugged in your dongle afterwards) run  hciconfig  to make sure it's seeing your dongle, if it has not, a dependency failed to install or your dongle is not supported by RetroPie SD (Raspbian) or the said OS running. you should see an output with information like this:  pi@raspberrypi ~ $ hciconfig\nhci0: Type: BR/EDR Bus: USB\n BD Address: 00:1F:81:00:06:20 ACL MTU: 1021:4 SCO MTU: 180:1\nUP RUNNING PSCAN\nRX bytes:1260 acl:0 sco:0 events:46 errors:0\nTX bytes:452 acl:0 sco:0 commands:45 errors:0  Next we're going to pair using this  tool \nDownloading and compiling is pretty quick and straight forward:  wget http://www.pabr.org/sixlinux/sixpair.c\ngcc -o sixpair sixpair.c -lusb  however sixpair must be run as root, so connect via USB and run  sudo ./sixpair .\nIf successful you should see:   Current Bluetooth master: DE:AD:BE:EF:00:00\nSetting master bd_addr to: 00:1F:81:00:06:20  now this is where the magic happens  we're going to install an Sixaxis Manager this is what will let us use the controller as an input over bluetooth and USB. (mycase i only got over USB you may vary!)  wget http://sourceforge.net/projects/qtsixa/files/QtSixA%201.5.1/QtSixA-1.5.1-src.tar.gz\ntar xfvz QtSixA-1.5.1-src.tar.gz  The source code requires a patch to compile correctly as of right now, so we'll download and apply it  wget https://bugs.launchpad.net/qtsixa/+bug/1036744/+attachment/3260906/+files/compilation_sid.patch\npatch ~/QtSixA-1.5.1/sixad/shared.h   compilation_sid.patch  It should now correctly build and install   cd QtSixA-1.5.1/sixad\nmake\nsudo mkdir -p /var/lib/sixad/profiles\nsudo checkinstall  now if we want to make it so per every time we need it on demand: we start the controller daemon like so:  sudo sixad --start (when it displays its searching, press the PS Button and your golden~!)  if we want it at boot time then we use this command:  sudo update-rc.d sixad defaults\nreboot  if you have any issues with the controller you can debug it with  sudo jstest /dev/input/js0", 
            "title": "For older versions of RetroPie"
        }, 
        {
            "location": "/Setting-up-a-PS3-controller/#disconnect-bluetooth-controller", 
            "text": "To disconnect the controller, hold down the ps3 button for 10 seconds.", 
            "title": "Disconnect Bluetooth Controller"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/", 
            "text": "The Sony PlayStation 4 Dualshock 4 is a very well made controller. It feels solid and has an excellent D-Pad. It has wireless functionality and can charge its internal battery via Micro USB.\n\n\nThere are a few ways to use the Dualshock 4 with the Raspberry Pi:\n\n\n\n\n\n\nUSB Cable\n\n    The simplest way is to plug in with a Micro USB cable. You could probably buy a very long (3M/10ft) USB cable if you wish to sit a bit back from the screen.\n\n\n\n\n\n\nSony USB Wireless Adapter\n\n    All official PS4 controllers should be able to pair with the official Sony Dualshock 4 USB Wireless Adapter.\n\n\n\n\n\n\nBluetooth\n\n    If you wish to use either a USB Bluetooth adapter or the Pi 3's built-in Bluetooth then regular Bluetooth pairing in the menu may work, or you may need to use the userspace controller driver called \nds4drv\n. It depends on your individual controller.\n\n\n\n\n\n\nGeneral Controller Usage\n\n\nPairing Mode\n\n\nTo put the controller into pairing mode, press and hold the \nShare\n button then the \nPS\n button.\n\n\nAfter a few seconds, the light bar will strobe rapidly and brightly.\n\n\nThe controller is now in pairing mode.\n\n\nTo turn the controller off\n\n\nThe controller will not sleep on its own if left idle, it will remain on until the battery goes flat.\n\n\nTo force the controller to go to sleep, hold the \nPS\n button for 10 seconds.\n\n\nOnce the light bar turns off, the controller is asleep.\n\n\nShutting down your Pi will also turn the controller off.\n\n\nTo wake up the controller\n\n\nTap the \nPS\n button.\n\n\nThe light bar will turn on. The controller will automatically re-connect to anything it's already been paired to.\n\n\nTo charge the controller\n\n\nConnect the controller to any USB host (Raspberry Pi, powered USB hub, television USB port) or any USB charger (phone/tablet charger, USB battery, official or aftermarket controller charging station).\n\n\nThe light bar will pulse yellow while charging, and turn off when fully charged.\n\n\nThe Dualshock 4 can charge off either a USB host or a USB charger. It does not need to be connected to a USB host like the Dualshock 3 did.\n\n\nUsage Methods\n\n\nUSB Cable\n\n\nJust plug the USB-A into the Raspberry Pi and the Micro USB into the controller. Done.\n\n\nThe light bar will glow dull blue when the controller is in use as a USB device this way.\n\n\nIf you are concerned about power usage, charging the Dualshock battery can use up to 500mA of power.\n\n\nSony Dualshock USB Wireless Adapter\n\n\n\n\nThis add-on product made by Sony does the Bluetooth pairing in hardware. To the Raspberry Pi and RetroPie, the controller appears as a regular wired USB controller and no additional software setup is required.\n\n\nOne adapter can pair one controller, though multiple adapters can be plugged into the one Pi to allow use of multiple controllers.\n\n\nTo pair the controllers:\n\n\n\n\nPlug in the USB adapter, it will slowly blink, this is the \"searching\" signal\n\n\nPush the adapter in more, it moves slightly inwards, and hold for 3 seconds\n\n\nThe USB adapter blinks faster, this is the \"pairing\" signal\n\n\nPut the controller into pairing mode with \nShare\n and \nPS\n\n\nThe USB adapter light and controller light bar will go solid, they are now paired\n\n\n\n\nRepeat with additional adapters and controllers as required.\n\n\nRegular Bluetooth Pairing\n\n\nNot all PS4 controllers can be used this way!!!\n\n\nTry yours and see how it goes. If it doesn't work, then proceed to the next heading about \nds4drv\n.\n\n\n\n\nEnter the RetroPie Setup Script\n\n\nConfiguration / Tools\n\n\n802 - bluetooth\n\n\nRegister and Connect to Bluetooth Device\n\n\nPut the controller into pairing mode with \nShare\n and \nPS\n\n\nChoose the first/top/default method of pairing in the menu\n\n\n\n\nOnce paired, see if EmulationStation will recognise the controller.\n\n\nIf EmulationStation does respond to button presses, lucky you, you're done.\n\n\nIf EmulationStation doesn't respond to button presses, then your controller cannot be used this way. Unpair it and use the \nds4drv\n method.\n\n\nThe reason why all controllers don't work like this is not clear but controller firmware is suspected to be the reason - with \"old\" firmware able to be used as a regular Bluetooth controller and \"new\" firmware not able to be used this way - however it may also be some other non-obvious reason.\n\n\nIf firmware is the reason, it's likely that System Software 3.50 (April 6th 2016) is the changeover, although it may be an even earlier update.\n\n\nUserspace Controller Driver (ds4drv)\n\n\nds4drv\n is a userspace driver which allows the Dualshock 4 to be used when regular Bluetooth does not work.\n\n\nThe source code and further description is available at:\n\n\n\n\nhttps://github.com/chrippa/ds4drv\n\n\n\n\nWhich Bluetooth Adapter To Use\n\n\n\n\nPi 1 or Pi 2 or Pi Zero\n: Use a USB Bluetooth adapter as these models do not have onboard Bluetooth\n\n\nPi 3 with RetroPie 3.7 and later\n: Use the onboard Bluetooth\n\n\nPi 3 with RetroPie earlier than 3.7\n: Disable the onboard Bluetooth and use a USB Bluetooth adapter. Onboard BT is disabled by adding \ndtoverlay=pi3-disable-bt\n to \n/boot/config.txt\n\n\n\n\nInstallation\n\n\nInstall the Python 3 requirements, and then install \nds4drv\n with the Python package manager:\n\n\nsudo apt update\nsudo apt install python3-dev python3-pip\nsudo pip3 install ds4drv\n\n\n\n\nAllow non-root users to control the \nds4drv\n joystick:\n\n\nsudo wget https://raw.githubusercontent.com/chrippa/ds4drv/master/udev/50-ds4drv.rules -O /etc/udev/rules.d/50-ds4drv.rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n\n\n\n\nTest the controller to see if it can connect:\n\n\nds4drv --hidraw --led 000008\n\n\n\n\n(Note: the \n--led 000008\n can be omitted or changed to modify the controller light bar color)\n\n\nPut the controller into pairing mode with \nShare\n and \nPS\n. It should connect to \nds4drv\n within a few seconds.\n\n\nOnce you have confirmed the controller connects, exit \nds4drv\n with Ctrl+c, the controller will disconnect.\n\n\n(Note: Some controllers will require ds4drv but not hidraw to run. If the above command does not work, try running just \nds4drv --led 000008\n instead.)\n\n\nNow configure \nds4drv\n to run at startup by editing the \nrc.local\n file:\n\n\nsudo nano /etc/rc.local\n\n\n\n\nAfter the \n# By default this script does nothing.\n line, add a new line with the contents:\n\n\n/usr/local/bin/ds4drv --hidraw --led 000008 \n\n\n\n\n\n(again, you can remove or change the \n--led 000008\n as desired)\n\n\n(Note: If you had to drop the --hidraw to test the connection in the previous step, then do not include it in the rc.local file either. Just \n/usr/local/bin/ds4drv --led 000008\n)\n\n\nThe correct complete \nrc.local\n file will look like:\n\n\n# By default this script does nothing.\n/usr/local/bin/ds4drv --hidraw --led 000008 \n\nexit 0\n\n\n\n\nSave this file and quit the text editor.\n\n\nTurn the controller off by holding the \nPS\n button for 10 seconds until the light bar turns off.\n\n\nReboot the Pi:\n\n\nsudo reboot\n\n\n\n\nOnce RetroPie reboots and is at the EmulationStation screen saying \"No controllers are detected\", put the controller into pairing mode with \nShare\n and \nPS\n. The controller should connect to the \nds4drv\n running in the background.\n\n\nIf EmulationStation does not recognise the newly-paired controller, then press F4 to quit EmulationStation and run \nemulationstation\n to restart it, or just reboot your Pi and tap the \nPS\n button every few seconds to encourage the controller to re-connect to the \nds4drv\n instance as soon as it runs.\n\n\nOnce EmulationStation recognises the controller, proceed with the usual EmulationStation input setup.", 
            "title": "PS4"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#general-controller-usage", 
            "text": "", 
            "title": "General Controller Usage"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#pairing-mode", 
            "text": "To put the controller into pairing mode, press and hold the  Share  button then the  PS  button.  After a few seconds, the light bar will strobe rapidly and brightly.  The controller is now in pairing mode.", 
            "title": "Pairing Mode"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#to-turn-the-controller-off", 
            "text": "The controller will not sleep on its own if left idle, it will remain on until the battery goes flat.  To force the controller to go to sleep, hold the  PS  button for 10 seconds.  Once the light bar turns off, the controller is asleep.  Shutting down your Pi will also turn the controller off.", 
            "title": "To turn the controller off"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#to-wake-up-the-controller", 
            "text": "Tap the  PS  button.  The light bar will turn on. The controller will automatically re-connect to anything it's already been paired to.", 
            "title": "To wake up the controller"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#to-charge-the-controller", 
            "text": "Connect the controller to any USB host (Raspberry Pi, powered USB hub, television USB port) or any USB charger (phone/tablet charger, USB battery, official or aftermarket controller charging station).  The light bar will pulse yellow while charging, and turn off when fully charged.  The Dualshock 4 can charge off either a USB host or a USB charger. It does not need to be connected to a USB host like the Dualshock 3 did.", 
            "title": "To charge the controller"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#usage-methods", 
            "text": "", 
            "title": "Usage Methods"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#usb-cable", 
            "text": "Just plug the USB-A into the Raspberry Pi and the Micro USB into the controller. Done.  The light bar will glow dull blue when the controller is in use as a USB device this way.  If you are concerned about power usage, charging the Dualshock battery can use up to 500mA of power.", 
            "title": "USB Cable"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#sony-dualshock-usb-wireless-adapter", 
            "text": "This add-on product made by Sony does the Bluetooth pairing in hardware. To the Raspberry Pi and RetroPie, the controller appears as a regular wired USB controller and no additional software setup is required.  One adapter can pair one controller, though multiple adapters can be plugged into the one Pi to allow use of multiple controllers.  To pair the controllers:   Plug in the USB adapter, it will slowly blink, this is the \"searching\" signal  Push the adapter in more, it moves slightly inwards, and hold for 3 seconds  The USB adapter blinks faster, this is the \"pairing\" signal  Put the controller into pairing mode with  Share  and  PS  The USB adapter light and controller light bar will go solid, they are now paired   Repeat with additional adapters and controllers as required.", 
            "title": "Sony Dualshock USB Wireless Adapter"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#regular-bluetooth-pairing", 
            "text": "Not all PS4 controllers can be used this way!!!  Try yours and see how it goes. If it doesn't work, then proceed to the next heading about  ds4drv .   Enter the RetroPie Setup Script  Configuration / Tools  802 - bluetooth  Register and Connect to Bluetooth Device  Put the controller into pairing mode with  Share  and  PS  Choose the first/top/default method of pairing in the menu   Once paired, see if EmulationStation will recognise the controller.  If EmulationStation does respond to button presses, lucky you, you're done.  If EmulationStation doesn't respond to button presses, then your controller cannot be used this way. Unpair it and use the  ds4drv  method.  The reason why all controllers don't work like this is not clear but controller firmware is suspected to be the reason - with \"old\" firmware able to be used as a regular Bluetooth controller and \"new\" firmware not able to be used this way - however it may also be some other non-obvious reason.  If firmware is the reason, it's likely that System Software 3.50 (April 6th 2016) is the changeover, although it may be an even earlier update.", 
            "title": "Regular Bluetooth Pairing"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#userspace-controller-driver-ds4drv", 
            "text": "ds4drv  is a userspace driver which allows the Dualshock 4 to be used when regular Bluetooth does not work.  The source code and further description is available at:   https://github.com/chrippa/ds4drv", 
            "title": "Userspace Controller Driver (ds4drv)"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#which-bluetooth-adapter-to-use", 
            "text": "Pi 1 or Pi 2 or Pi Zero : Use a USB Bluetooth adapter as these models do not have onboard Bluetooth  Pi 3 with RetroPie 3.7 and later : Use the onboard Bluetooth  Pi 3 with RetroPie earlier than 3.7 : Disable the onboard Bluetooth and use a USB Bluetooth adapter. Onboard BT is disabled by adding  dtoverlay=pi3-disable-bt  to  /boot/config.txt", 
            "title": "Which Bluetooth Adapter To Use"
        }, 
        {
            "location": "/Setting-up-a-PS4-controller/#installation", 
            "text": "Install the Python 3 requirements, and then install  ds4drv  with the Python package manager:  sudo apt update\nsudo apt install python3-dev python3-pip\nsudo pip3 install ds4drv  Allow non-root users to control the  ds4drv  joystick:  sudo wget https://raw.githubusercontent.com/chrippa/ds4drv/master/udev/50-ds4drv.rules -O /etc/udev/rules.d/50-ds4drv.rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger  Test the controller to see if it can connect:  ds4drv --hidraw --led 000008  (Note: the  --led 000008  can be omitted or changed to modify the controller light bar color)  Put the controller into pairing mode with  Share  and  PS . It should connect to  ds4drv  within a few seconds.  Once you have confirmed the controller connects, exit  ds4drv  with Ctrl+c, the controller will disconnect.  (Note: Some controllers will require ds4drv but not hidraw to run. If the above command does not work, try running just  ds4drv --led 000008  instead.)  Now configure  ds4drv  to run at startup by editing the  rc.local  file:  sudo nano /etc/rc.local  After the  # By default this script does nothing.  line, add a new line with the contents:  /usr/local/bin/ds4drv --hidraw --led 000008    (again, you can remove or change the  --led 000008  as desired)  (Note: If you had to drop the --hidraw to test the connection in the previous step, then do not include it in the rc.local file either. Just  /usr/local/bin/ds4drv --led 000008 )  The correct complete  rc.local  file will look like:  # By default this script does nothing.\n/usr/local/bin/ds4drv --hidraw --led 000008  \nexit 0  Save this file and quit the text editor.  Turn the controller off by holding the  PS  button for 10 seconds until the light bar turns off.  Reboot the Pi:  sudo reboot  Once RetroPie reboots and is at the EmulationStation screen saying \"No controllers are detected\", put the controller into pairing mode with  Share  and  PS . The controller should connect to the  ds4drv  running in the background.  If EmulationStation does not recognise the newly-paired controller, then press F4 to quit EmulationStation and run  emulationstation  to restart it, or just reboot your Pi and tap the  PS  button every few seconds to encourage the controller to re-connect to the  ds4drv  instance as soon as it runs.  Once EmulationStation recognises the controller, proceed with the usual EmulationStation input setup.", 
            "title": "Installation"
        }, 
        {
            "location": "/Setting-up-a-Wireless-Ouya-Controller/", 
            "text": "With the death of Ouya as an independent entity there are a number of wireless Ouya controllers running around, looking for a way to be productive.  In an attempt to help these poor lost souls (and because I have no money for new controllers thanks to a baby who goes through diapers as if he did not know how expensive those things are and a daughter who \u201cneeds\u201d a new toy or outfit with every other commercial that she sees) I have taken the time and effort to figure out how to make these controllers play nicely with RetroPie.  This was a somewhat long and frustrating process, but the results were well worth the efforts.  All instructions are in relation to the current iteration of RetroPie, 4.0.2.  I have used these set-up instructions with a Raspberry Pi 3 and a Raspberry Pi 1 B+, so they should work just as well for the Zero and 2.\n\n\nStep 1 (Connecting the controller):\n\n\n\n\nFirst access the \u201cBluetooth\u201d configuration menu from the \u201cRetroPie\u201d Menu of EmulationStation. It can also be accessed from \nRetroPie-Setup Script \n Setup \n Configure Bluetooth Devices\n\n\n\n\nNext press the center \u201cU\u201d button on your Ouya controller (the small black one, not the black and blue action button) until the two middle lights flash slowly.\n\n\n\n\n\n\nNext choose the \"Register and Connect to Bluetooth Device\"\n\n\n\n\n\n\n\n\n\n\nThe \"Searching...\" screen will pop up. If your controller is not detected then try again.  It may help to press some buttons on the controller when this screen pops up.\n\n\n\n\n\n\n\n\nThe first time that you search you may only see the MAC address of your controller displayed.  You can either select the correct MAC address or search again, usually the second time around you will see the device\u2019s name listed (in this case, OUYA Game Controller).\n\n\n\n\n\n\n\n\nOnce you have selected your device, choose the \"DisplayYesNo\" option to complete the registration process.\n\n\n\n\n\n\n\n\nOnce the pairing is complete you will see a succes message and the first light on the controller will remain steady.\n\n\n\n\n\n\n\n\nNext choose \u201cSet up udev Rule for Joypad\u201d so that EmulationStation is able to \u201csee\u201d the controller.\n\n\n\n\n\n\n\n\nChoose your OUYA Game Controller from the list.  This will set up the basic rule for how RetroPie sees the controller, but will not configure it, that happens later.\n\n\n\n\n\n\n\n\nNext is \"Configure bluetooth connect mode\" this is optional, but using this can save a lot of hassle.  Set this up however you like.\n\n\n\n\n\n\n\n\n\n\nOnce all of this is done, reboot the Raspberry Pi and configure the controller in EmulationStation.\n\n\n\n\nStep 2 (The initial configuration of the controller):\n\n\nOnce RetroPie resets connect the Ouya controller by tapping the center \u201cU\u201d button.  When this is done EmulationStation will \u201csee\u201d your controller.  If a configuration window does not pop up then connect a different controller or keyboard and hit \u201cstart\u201d to pull up the necessary menu.\n\n\n\n\n\nUnfortunately the initial configuration only allows the Ouya controller to work properly with EmulationStation, and not the actual emulators.  This issue is easily solved with a few further steps.  This is not a difficult process, but it does take some work, so bare with me, it will all be worth it in the end.\n\n\nThe next part of the process involves configuring the controller in RetroArch.  Because the Ouya controller is not mapped properly by EmulationStation this is easiest if you have a keyboard or another controller connected so that you can easily navigate through the RetroArch UI.\n\n\n\n\n\n\nFirst access \u201cRetroArch\u201d through the \u201cRetroPie\u201d menu in EmulationStation.  \n\n\n\n\n\n\nNext choose \u201cSettings\u201d and then \u201cConfiguration\u201d and change the \u201cSave Configuration on Exit\u201d to \u201con\u201d.  Once this is done, back out to the previous menu.\n\n\n\n\n\n\n\n\n\n\n\n\nNext choose \u201cInput\u201d\n\n\n\n\n\n\n\n\nNext choose \u201cInput User 1 Binds\u201d\n\n\n\n\n\n\n\n\nNext use your keyboard/extra controller to help you navigate (until the binds have been set up) and change the inputs as desired.  Make sure that the \u201cDevice Index\u201d is set to \u201cOUYA Game Controller (#1)\u201d.  I also like to change the \u201cDevice Type\u201d to \u201cRetropad w/ Analog\u201d and the \u201cAnalog to Digital Type\u201d to \u201cLeft Analog\u201d as this allows me to use the left analog stick as a d-pad.  You will need the button numbers later, so make sure to write down how RetroArch numbers the buttons.  After configuring the controller make sure to also choose \u201cSave Autoconfig\u201d and then back out to the previous screen.\n\n\n\n\n\n\n\n\nNext choose \u201cInput Hotkey Binds\u201d I don\u2019t do much here, but I highly suggest setting the \u201cSave State\u201d and \u201cLoad State\u201d to a button.  The hotkeys are used by pressing the desired hotkey plus the enable hotkey at the same time.  The hotkeys (including the enable hotkey button) will need some further configuration, but that will happen in another area, for now it is enough to set this part up.\n\n\n\n\n\n\n\n\nFinally back out to the main RetroArch menu and choose \u201cQuit RetroArch\u201d\n\n\n\n\nStep 3 (Editing the config files):\n\n\nOnce the previous steps are done, either hit f4 on a connected keyboard to enter the terminal, or shut down the system, pull the MicroSD card and plug it into a computer that will allow you to use a text editor to edit the some .cfg, .ini, and .cfg.bak files (I use my Chromebook for this, but whatever works for you is fine).\n\n\n\n\nThe first files that need to be edited are the OUYA Game Controller.cfg and OUYA Game Controller.cfg.bak files.  These are located at: opt/retropie/configs/all/retroarch-joypads/\n\n(If you are editing within the Retropie terminal then type: cd ..  to move up a directory, then type: cd .. once more.  Then type:  cd /opt/retropie/configs/all/retroarch-joypads/  Once there, type: sudo nano opt/retropie/configs/all/retroarch-joypads/OUYA\\ Game\\ Controller.cfg  This will allow you to edit this file.)\n\n\nYou may find that some of the buttons are mapped incorrectly, simply map them as you like.  These file use the numberings that are found in RetroArch, not jstest.  Once that is done you will need to add some lines to the end of the file (the numbers in quotation marks are my personal choices, you can make them whichever buttons that you like):\n\n\ninput_load_state_btn = \n10\n\ninput_save_state_btn = \n9\n\ninput_enable_hotkey_btn = \n16\n\ninput_exit_emulator_btn = \n15\n\n\n\n\n\nOnce you have the file the way you want it save it and do the same for the OUYA Game Controller.cfg.bak file.  The .bak file is not usually created right away, so if it is not there, it is easiest just to copy and paste the .cfg file and rename the resulting extra .cfg as: OUYA Game Controller.cfg.bak.  In any event, this file must be identical, in everything but name, to the .cfg file.\n\n\nThere will be a third file called OUYAGameController.cfg (all one word).  This file will interfere with our recently edited OUYA Game Controller.cfg file, and must be deleted.  An identically named, but different, file will be created once a second Ouya controller is configured, but that one will not be a problem and we will deal with it later.\n\n\nHere is my OUYA Game Controller.cfg configuration:\n\n\ninput_driver = \nudev\n\ninput_device = \nOUYA Game Controller\n\ninput_vendor_id = \n2652\n\ninput_product_id = \n8532\n\ninput_b_btn = \n3\n\ninput_y_btn = \n6\n\ninput_select_btn = \n10\n\ninput_start_btn = \n9\n\ninput_up_btn = \n11\n\ninput_down_btn = \n12\n\ninput_left_btn = \n13\n\ninput_right_btn = \n14\n\ninput_a_btn = \n4\n\ninput_x_btn = \n5\n\ninput_l_btn = \n7\n\ninput_r_btn = \n8\n\ninput_l2_btn = \n15\n\ninput_r2_btn = \n16\n\ninput_l_x_plus_axis = \n+0\n\ninput_l_x_minus_axis = \n-0\n\ninput_l_y_plus_axis = \n+1\n\ninput_l_y_minus_axis = \n-1\n\ninput_r_x_plus_axis = \n+3\n\ninput_r_x_minus_axis = \n-3\n\ninput_r_y_plus_axis = \n+4\n\ninput_r_y_minus_axis = \n-4\n\ninput_save_state_btn = \n9\n\ninput_load_state_btn = \n10\n\ninput_enable_hotkey_btn = \n16\n\ninput_exit_emulator_btn = \n15\n\n\n\n\n\nOnce the files are edited/created and saved, pop the microSD card back into the Raspberry Pi (or if you are in the terminal, type: cd to change back to the main directory and then type: sudo reboot now to reboot the system).  The controller should be working properly in all emulators other than the non-RetroArch emulators (such as the N64).  If you only have one Ouya controller and do not use any of the non-RetroArch emulators, then you are now good to go.  If you would like to add a second Ouya controller, then read on.  As to the non-RetroArch configurations, there aren\u2019t many non-RetroArch emulators, and the only one that I use is the mupen64plus emulator, so I will show you how to configure this a little further down the line, but for all the others you are on your own (at least until some helpful person comes along to add to this entry).\n\n\nStep 4 (Adding a second Ouya controller):\n\n\nThis is actually much easier, as the necessary files have already been set up, so there are really only a few short steps.\n\n\n\n\n\n\nMake sure that the first Ouya controller is connected so that the second one will configure properly as controller #2.  Once the second controller is set up whichever one is connected first will use controller #1\u2019s settings, regardless of whether or not it was originally set up first.\n\n\n\n\n\n\nConnect the second Ouya controller just as you did the first.\n\n\n\n\n\n\nConfigure the controller in EmulationStation.  This will create a new OUYAGameController.cfg, but this one does not interfere with the proper use of the controllers, so it gets to stay.\n\n\n\n\n\n\nHead into RetroArch and configure the second controller just as you did the first, but this time do so in \u201cInput User 2 Binds\u201d  and make sure that the \u201cDevice Index\u201d is set to \u201cOUYA Game Controller (#2)\u201d.\n\n\n\n\n\n\nOnce the second controller is configured in RetroArch you are good to go.  Keep in mind that the first controller will be the only one that will be able to exit or save/load state.\n\n\n\n\n\n\nStep 5 (Configuring the Ouya controller for mupen64plus):\n\n\nThe mupen64plus does not use RetroArch configurations, so in order to use the Ouya controller with the preinstalled N64 emulator you will need to configure this separately.\n\n\n\n\n\n\nThe first step will be to run jstest to see how the non-RetroArch systems number the Ouya\u2019s buttons.  While the Ouya controller is connected head into the terminal by typing f4 on a connected keyboard, then type jstest dev/input/js0 When jstest is running, tap each button on the Ouya controller to see how they are numbered, you will need this info to edit the config files.  Press ctrl + c to exit jstest.\n\n\n\n\n\n\nNext you will edit the config files.  Keep in mind that the hotkeys will generally be single buttons rather than combos, and the hotkeys will need to be otherwise unassigned buttons.\n\n\n\n\n\n\nFirst edit the autoconf.cfg file so that the hotkeys are turned off, which will allow you to edit mupen64plus.cfg (without editing this the mupen64plus.cfg file will be overwritten by the autoconf.cfg file, which will not work for us).  The autoconf.cfg file is located at opt/retropie/configs/all/ you will need to edit mupen64plus_hotkeys = \"1\" change the \u201c1\u201d to \"0\".  I was unabe to edit this file on my computer, but I had no issues doing so in terminal.\n\n\n\n\n\n\nNext edit the mupen64plus.cfg file located at opt/retropie/configs/n64/ You will need to edit the Joy Mapping Stop, Joy Mapping Save State, and Joy Mapping Load State entries to your prefered buttons.  Then add these lines to the end of the \"Digital button configuration mappings\":\n\n\n\n\n\n\nStop = \"button(13)\"\nSave State = \"button(6)\"\nLoad State = \"button(7)\"\n(Obviously the particular button numbers are going to depend on what you would like to map, but the above are my personal choices).\n\n\n\n\nFinally, edit the InputAutoCfg.ini and InputAutoCfg.ini.bak files, located at opt/retropie/configs/n64/  Map the buttons using the jstest numbers.  If you want to use the Left Shoulder button you will have to add this, as it is not included in the initial config.  As with the OUYA Game Controller.cfg.bak file, the InputAutoCfg.ini.bak file may not exist yet, so once you have the InputAutoCfg.ini edited properly you'll need to copy, paste and rename the file just as you did with the OUYA Game Controller.cfg file.  Once you have these files set up you will be good to go.\n\n\n\n\nHere is my InputAutoCfg.ini configuration:\n\n\n; InputAutoCfg.ini for Mupen64Plus SDL Input plugin\n\n; OUYA Game Controller_START \n[OUYA Game Controller]\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768 \nZ Trig = button(0) \nA Button = button(1)\nB Button = button(2) \nL Trig = button(4)\nR Trig = button(5) \nStart = button(12) \nDPad U = button(8) \nDPad D = button(9) \nDPad L = button(10) \nDPad R = button(11) \nC Button U = axis(4-) \nC Button D = axis(4+) \nC Button L = axis(3-)\nC Button R = axis(3+) \nY Axis = axis(1-,1+)\nX Axis = axis(0-,0+)\n; OUYA Game Controller_END \n\n\n\n\nThat\u2019s it, your Ouya controller should now be good to go with most emulators as well as the N64 emulator.  Enjoy retrogaming using your newly configured Ouya wireless controller!", 
            "title": "Ouya"
        }, 
        {
            "location": "/Setting-up-a-Wireless-Ouya-Controller/#step-1-connecting-the-controller", 
            "text": "First access the \u201cBluetooth\u201d configuration menu from the \u201cRetroPie\u201d Menu of EmulationStation. It can also be accessed from  RetroPie-Setup Script   Setup   Configure Bluetooth Devices   Next press the center \u201cU\u201d button on your Ouya controller (the small black one, not the black and blue action button) until the two middle lights flash slowly.    Next choose the \"Register and Connect to Bluetooth Device\"      The \"Searching...\" screen will pop up. If your controller is not detected then try again.  It may help to press some buttons on the controller when this screen pops up.     The first time that you search you may only see the MAC address of your controller displayed.  You can either select the correct MAC address or search again, usually the second time around you will see the device\u2019s name listed (in this case, OUYA Game Controller).     Once you have selected your device, choose the \"DisplayYesNo\" option to complete the registration process.     Once the pairing is complete you will see a succes message and the first light on the controller will remain steady.     Next choose \u201cSet up udev Rule for Joypad\u201d so that EmulationStation is able to \u201csee\u201d the controller.     Choose your OUYA Game Controller from the list.  This will set up the basic rule for how RetroPie sees the controller, but will not configure it, that happens later.     Next is \"Configure bluetooth connect mode\" this is optional, but using this can save a lot of hassle.  Set this up however you like.      Once all of this is done, reboot the Raspberry Pi and configure the controller in EmulationStation.", 
            "title": "Step 1 (Connecting the controller):"
        }, 
        {
            "location": "/Setting-up-a-Wireless-Ouya-Controller/#step-2-the-initial-configuration-of-the-controller", 
            "text": "Once RetroPie resets connect the Ouya controller by tapping the center \u201cU\u201d button.  When this is done EmulationStation will \u201csee\u201d your controller.  If a configuration window does not pop up then connect a different controller or keyboard and hit \u201cstart\u201d to pull up the necessary menu.   Unfortunately the initial configuration only allows the Ouya controller to work properly with EmulationStation, and not the actual emulators.  This issue is easily solved with a few further steps.  This is not a difficult process, but it does take some work, so bare with me, it will all be worth it in the end.  The next part of the process involves configuring the controller in RetroArch.  Because the Ouya controller is not mapped properly by EmulationStation this is easiest if you have a keyboard or another controller connected so that you can easily navigate through the RetroArch UI.    First access \u201cRetroArch\u201d through the \u201cRetroPie\u201d menu in EmulationStation.      Next choose \u201cSettings\u201d and then \u201cConfiguration\u201d and change the \u201cSave Configuration on Exit\u201d to \u201con\u201d.  Once this is done, back out to the previous menu.       Next choose \u201cInput\u201d     Next choose \u201cInput User 1 Binds\u201d     Next use your keyboard/extra controller to help you navigate (until the binds have been set up) and change the inputs as desired.  Make sure that the \u201cDevice Index\u201d is set to \u201cOUYA Game Controller (#1)\u201d.  I also like to change the \u201cDevice Type\u201d to \u201cRetropad w/ Analog\u201d and the \u201cAnalog to Digital Type\u201d to \u201cLeft Analog\u201d as this allows me to use the left analog stick as a d-pad.  You will need the button numbers later, so make sure to write down how RetroArch numbers the buttons.  After configuring the controller make sure to also choose \u201cSave Autoconfig\u201d and then back out to the previous screen.     Next choose \u201cInput Hotkey Binds\u201d I don\u2019t do much here, but I highly suggest setting the \u201cSave State\u201d and \u201cLoad State\u201d to a button.  The hotkeys are used by pressing the desired hotkey plus the enable hotkey at the same time.  The hotkeys (including the enable hotkey button) will need some further configuration, but that will happen in another area, for now it is enough to set this part up.     Finally back out to the main RetroArch menu and choose \u201cQuit RetroArch\u201d", 
            "title": "Step 2 (The initial configuration of the controller):"
        }, 
        {
            "location": "/Setting-up-a-Wireless-Ouya-Controller/#step-3-editing-the-config-files", 
            "text": "Once the previous steps are done, either hit f4 on a connected keyboard to enter the terminal, or shut down the system, pull the MicroSD card and plug it into a computer that will allow you to use a text editor to edit the some .cfg, .ini, and .cfg.bak files (I use my Chromebook for this, but whatever works for you is fine).   The first files that need to be edited are the OUYA Game Controller.cfg and OUYA Game Controller.cfg.bak files.  These are located at: opt/retropie/configs/all/retroarch-joypads/ \n(If you are editing within the Retropie terminal then type: cd ..  to move up a directory, then type: cd .. once more.  Then type:  cd /opt/retropie/configs/all/retroarch-joypads/  Once there, type: sudo nano opt/retropie/configs/all/retroarch-joypads/OUYA\\ Game\\ Controller.cfg  This will allow you to edit this file.)  You may find that some of the buttons are mapped incorrectly, simply map them as you like.  These file use the numberings that are found in RetroArch, not jstest.  Once that is done you will need to add some lines to the end of the file (the numbers in quotation marks are my personal choices, you can make them whichever buttons that you like):  input_load_state_btn =  10 \ninput_save_state_btn =  9 \ninput_enable_hotkey_btn =  16 \ninput_exit_emulator_btn =  15   Once you have the file the way you want it save it and do the same for the OUYA Game Controller.cfg.bak file.  The .bak file is not usually created right away, so if it is not there, it is easiest just to copy and paste the .cfg file and rename the resulting extra .cfg as: OUYA Game Controller.cfg.bak.  In any event, this file must be identical, in everything but name, to the .cfg file.  There will be a third file called OUYAGameController.cfg (all one word).  This file will interfere with our recently edited OUYA Game Controller.cfg file, and must be deleted.  An identically named, but different, file will be created once a second Ouya controller is configured, but that one will not be a problem and we will deal with it later.  Here is my OUYA Game Controller.cfg configuration:  input_driver =  udev \ninput_device =  OUYA Game Controller \ninput_vendor_id =  2652 \ninput_product_id =  8532 \ninput_b_btn =  3 \ninput_y_btn =  6 \ninput_select_btn =  10 \ninput_start_btn =  9 \ninput_up_btn =  11 \ninput_down_btn =  12 \ninput_left_btn =  13 \ninput_right_btn =  14 \ninput_a_btn =  4 \ninput_x_btn =  5 \ninput_l_btn =  7 \ninput_r_btn =  8 \ninput_l2_btn =  15 \ninput_r2_btn =  16 \ninput_l_x_plus_axis =  +0 \ninput_l_x_minus_axis =  -0 \ninput_l_y_plus_axis =  +1 \ninput_l_y_minus_axis =  -1 \ninput_r_x_plus_axis =  +3 \ninput_r_x_minus_axis =  -3 \ninput_r_y_plus_axis =  +4 \ninput_r_y_minus_axis =  -4 \ninput_save_state_btn =  9 \ninput_load_state_btn =  10 \ninput_enable_hotkey_btn =  16 \ninput_exit_emulator_btn =  15   Once the files are edited/created and saved, pop the microSD card back into the Raspberry Pi (or if you are in the terminal, type: cd to change back to the main directory and then type: sudo reboot now to reboot the system).  The controller should be working properly in all emulators other than the non-RetroArch emulators (such as the N64).  If you only have one Ouya controller and do not use any of the non-RetroArch emulators, then you are now good to go.  If you would like to add a second Ouya controller, then read on.  As to the non-RetroArch configurations, there aren\u2019t many non-RetroArch emulators, and the only one that I use is the mupen64plus emulator, so I will show you how to configure this a little further down the line, but for all the others you are on your own (at least until some helpful person comes along to add to this entry).", 
            "title": "Step 3 (Editing the config files):"
        }, 
        {
            "location": "/Setting-up-a-Wireless-Ouya-Controller/#step-4-adding-a-second-ouya-controller", 
            "text": "This is actually much easier, as the necessary files have already been set up, so there are really only a few short steps.    Make sure that the first Ouya controller is connected so that the second one will configure properly as controller #2.  Once the second controller is set up whichever one is connected first will use controller #1\u2019s settings, regardless of whether or not it was originally set up first.    Connect the second Ouya controller just as you did the first.    Configure the controller in EmulationStation.  This will create a new OUYAGameController.cfg, but this one does not interfere with the proper use of the controllers, so it gets to stay.    Head into RetroArch and configure the second controller just as you did the first, but this time do so in \u201cInput User 2 Binds\u201d  and make sure that the \u201cDevice Index\u201d is set to \u201cOUYA Game Controller (#2)\u201d.    Once the second controller is configured in RetroArch you are good to go.  Keep in mind that the first controller will be the only one that will be able to exit or save/load state.", 
            "title": "Step 4 (Adding a second Ouya controller):"
        }, 
        {
            "location": "/Setting-up-a-Wireless-Ouya-Controller/#step-5-configuring-the-ouya-controller-for-mupen64plus", 
            "text": "The mupen64plus does not use RetroArch configurations, so in order to use the Ouya controller with the preinstalled N64 emulator you will need to configure this separately.    The first step will be to run jstest to see how the non-RetroArch systems number the Ouya\u2019s buttons.  While the Ouya controller is connected head into the terminal by typing f4 on a connected keyboard, then type jstest dev/input/js0 When jstest is running, tap each button on the Ouya controller to see how they are numbered, you will need this info to edit the config files.  Press ctrl + c to exit jstest.    Next you will edit the config files.  Keep in mind that the hotkeys will generally be single buttons rather than combos, and the hotkeys will need to be otherwise unassigned buttons.    First edit the autoconf.cfg file so that the hotkeys are turned off, which will allow you to edit mupen64plus.cfg (without editing this the mupen64plus.cfg file will be overwritten by the autoconf.cfg file, which will not work for us).  The autoconf.cfg file is located at opt/retropie/configs/all/ you will need to edit mupen64plus_hotkeys = \"1\" change the \u201c1\u201d to \"0\".  I was unabe to edit this file on my computer, but I had no issues doing so in terminal.    Next edit the mupen64plus.cfg file located at opt/retropie/configs/n64/ You will need to edit the Joy Mapping Stop, Joy Mapping Save State, and Joy Mapping Load State entries to your prefered buttons.  Then add these lines to the end of the \"Digital button configuration mappings\":    Stop = \"button(13)\"\nSave State = \"button(6)\"\nLoad State = \"button(7)\"\n(Obviously the particular button numbers are going to depend on what you would like to map, but the above are my personal choices).   Finally, edit the InputAutoCfg.ini and InputAutoCfg.ini.bak files, located at opt/retropie/configs/n64/  Map the buttons using the jstest numbers.  If you want to use the Left Shoulder button you will have to add this, as it is not included in the initial config.  As with the OUYA Game Controller.cfg.bak file, the InputAutoCfg.ini.bak file may not exist yet, so once you have the InputAutoCfg.ini edited properly you'll need to copy, paste and rename the file just as you did with the OUYA Game Controller.cfg file.  Once you have these files set up you will be good to go.   Here is my InputAutoCfg.ini configuration:  ; InputAutoCfg.ini for Mupen64Plus SDL Input plugin\n\n; OUYA Game Controller_START \n[OUYA Game Controller]\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768 \nZ Trig = button(0) \nA Button = button(1)\nB Button = button(2) \nL Trig = button(4)\nR Trig = button(5) \nStart = button(12) \nDPad U = button(8) \nDPad D = button(9) \nDPad L = button(10) \nDPad R = button(11) \nC Button U = axis(4-) \nC Button D = axis(4+) \nC Button L = axis(3-)\nC Button R = axis(3+) \nY Axis = axis(1-,1+)\nX Axis = axis(0-,0+)\n; OUYA Game Controller_END   That\u2019s it, your Ouya controller should now be good to go with most emulators as well as the N64 emulator.  Enjoy retrogaming using your newly configured Ouya wireless controller!", 
            "title": "Step 5 (Configuring the Ouya controller for mupen64plus):"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/", 
            "text": "Note\n that if you have wireless controllers you will need a wireless receiver plugged into your raspberry pi (Official Microsoft xbox360 receiver, or knock offs like zettaguard, VicTsing also work. Play and charge cables will not work. You need a wireless receiver), then to connect:\n\n\n\n\npress the button on the receiver \n\n\nthen press the tiny wireless button on the top of the controller \n\n\nyou may need to repeat for each controller\n\n\n\n\nAutomatic Configuration (Easiest)\n\n\nXpad Driver:\n\n\nStarting with the RetroPie 4.1 SD image, the Xpad driver is enabled by default and the following steps are unnecessary.\n\n\nWith the recent kernel issues of xboxdrv rendering images unusable, there is an updated xpad driver which will work just as well for Xbox controllers, it's possible it may also support Xbox One controllers.\n\n\nYou access the driver through \nManage Packages\n \n \nManage Driver Packages\n \n \nXpad Driver\n and you'll install it from source. Reboot for good measure, reconfigure your controllers and the lights should work properly.\n\n\nA complete working config (that was generated from the emulationstation configuration) is listed below at \n/opt/retropie/configs/all/retroarch-joypads/Xbox360WirelessReceiver(XBOX).cfg\n\n\ninput_device = \nXbox 360 Wireless Receiver (XBOX)\n\ninput_driver = \nudev\n\ninput_r_y_plus_axis = \n+4\n\ninput_l3_btn = \n9\n\ninput_r_x_minus_axis = \n-3\n\ninput_l_btn = \n4\n\ninput_load_state_btn = \n4\n\ninput_start_btn = \n7\n\ninput_exit_emulator_btn = \n7\n\ninput_l_y_minus_axis = \n-1\n\ninput_up_btn = \n13\n\ninput_r_y_minus_axis = \n-4\n\ninput_a_btn = \n1\n\ninput_b_btn = \n0\n\ninput_reset_btn = \n0\n\ninput_down_btn = \n14\n\ninput_l_x_plus_axis = \n+0\n\ninput_l_y_plus_axis = \n+1\n\ninput_r_btn = \n5\n\ninput_save_state_btn = \n5\n\ninput_r2_axis = \n+5\n\ninput_r3_btn = \n10\n\ninput_right_btn = \n12\n\ninput_state_slot_increase_btn = \n12\n\ninput_x_btn = \n3\n\ninput_menu_toggle_btn = \n3\n\ninput_select_btn = \n6\n\ninput_enable_hotkey_btn = \n6\n\ninput_l_x_minus_axis = \n-0\n\ninput_y_btn = \n2\n\ninput_left_btn = \n11\n\ninput_state_slot_decrease_btn = \n11\n\ninput_r_x_plus_axis = \n+3\n\ninput_l2_axis = \n+2\n\n\n\n\n\nXboxdrv Driver\n\n\nNote! There are known incompatibilities with this driver and the latest kernel, xpad will work best currently.\n\n\nAccess the \nRetroPie Setup Script\n and navigate to \nManage Packages \n Manage Driver Packages \n xboxdrv\n \n\n\n\n\n\n\nEnable xboxdrv:\n This will install the driver and add a start-up configuration in /etc/rc.local\n\n\nDisable xboxdrv:\n This will disable the driver and remove the start-up configuration in /etc/rc.local\n\n\nSet Number of Controllers To Enable:\n Default number of controllers is 2 (If you have more than two controllers, set this first before you enable xboxdrv)\n\n\nSet Analog Stick Deadzone:\n Smaller number = more responsive, Larger number = less responsive.\n\n\nSet dwc_otg.speed=1 in /boot/config.txt:\n May help if controller is being glitchy.\n\n\nRemove dwc_otg.speed=1 from /boot/config.txt:\n Removes the config.\n\n\n\n\nAfter you have enabled the driver and rebooted you'll need to reconfigure your controller(s) in emulationstation as described on the \nfirst installation page\n\n\nAlternatively if you prefer you can manually install it..\n\n\nManual Configuration\n\n\nRetroPie 3.3 contains a newer xboxdrv at /opt/retropie/supplementary/xboxdrv/bin/xboxdrv - which is preferable over the older Debian package. On older RetroPie images you can install the Debian package.\n\n\ninstall it by running\n\n\nsudo apt-get install xboxdrv\n\n\n\nThen you must choose one of the 3 methods below\n\n\n1 - Multiples instances of xboxdrv\n\n\nYou have to launch multiple instances of xboxdrv (one for each controller)\n\n\nFor example we can edit the file \n/etc/rc.local\n to start instances of xboxdrv during boot\n\n\nHere is an example of what to insert in \n/etc/rc.local\n for 4 wireless pads (put this just before \nexit 0\n):\n\n\nxboxdrv --trigger-as-button --wid 0 --led 2 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 1 --led 3 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 2 --led 4 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 3 --led 5 --deadzone 4000 --silent \n\n\n\n\n(replace the \n--wid\n by \n--id\n if you use wired controllers)\nYou \nmust\n swich-on your pads before booting the raspberry.\n\n\nNotice the \nsleep 1\n between each instance: this prevents the RPi from setting random controllers with random led status; adjust timing if necessary.\n\n\n2 - Single command line\n\n\nAnother way is to specify this single command :\n\n\nxboxdrv -D i 0 --next-controller -i 1 --next-controller -i 2 --next-controller -i 3 --deadzone 4000 --dbus disabled \n\n\n\n\n3 - init script\n\n\nThe third possibility, you can use an init.d script with the daemon \n-D\n Option. Save the following content to \n/etc/init.d/xboxdrv\n:\n\n\n#! /bin/bash\n### BEGIN INIT INFO\n# Provides:          xbox-controller\n# Required-Start:    $remote_fs $syslog\n# Required-Stop:     $remote_fs $syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Start XBOX Controller Service\n# Description:       Start the xboxdrv daemon with several options\n#                    support up to 4 Controllers\n### END INIT INFO\n\n# Author: MasteRehm\n\nPATH=/sbin:/usr/sbin:/bin:/usr/bin\nDESC=\nXBOX Controller Service\n\nNAME=xboxdrv\nDAEMON=/usr/bin/$NAME\nDAEMON_ARGS=\n-D -d --deadzone 4000 --dbus disabled --detach\n\nPIDFILE=/var/run/$NAME.pid\nSCRIPTNAME=/etc/init.d/$NAME\n\n# Exit if the package is not installed\n[ -x \n$DAEMON\n ] || exit 0\n\n# Read configuration variable file if it is present\n[ -r /etc/default/$NAME ] \n . /etc/default/$NAME\n\n# Load the VERBOSE setting and other rcS variables\n. /lib/init/vars.sh\n\n# Define LSB log_* functions.\n# Depend on lsb-base (\n= 3.2-14) to ensure that this file is present\n# and status_of_proc is working.\n. /lib/lsb/init-functions\n\ndo_start()\n{\n        if [ $CONTROLLER_NUM -gt 4 ] ; then\n                echo -e \n\\n$CONTROLLER\n; exit 1;\n        fi\n        start-stop-daemon -S -q -x $DAEMON -- $DAEMON_ARGS $CONTROLLER\n\n# -- This workaround only works with 4 controllers connected.  It also is creating a name that\n# does not match the minor device node.\n\n#        # Workaround: xboxdrv daemon creates /dev/input/js[4-7] device files, if /dev/input/js[0-3] created on startup.\n#        if [ -x /usr/bin/rename ]; then\n#                sleep 1\n#                if [[ `ls /dev/input/js*` =~ /dev/input/js[4-7] ]]; then rename 's/js4/js0/;s/js5/js1/;s/js6/js2/;s/js7/js3/' /dev/input/js*; fi\n#        fi\n\n# Rather than renaming files, it's better to clear the existing ones by stopping the driver\n# and then when you start it again, everything will be correct.\n\n    sleep 3\n    do_stop\n    sleep 3\n        start-stop-daemon -S -q -x $DAEMON -- $DAEMON_ARGS $CONTROLLER\n}\n\n\ndo_stop()\n{\n    start-stop-daemon -K -o -q -x $DAEMON\n    sleep 1\n}\n\ncase \n$1\n in\n  start)\n    log_daemon_msg \nStarting $DESC\n \n$NAME\n\n    do_start\n     status=$?\n    log_end_msg $status\n    ;;\n  stop)\n    log_daemon_msg \nStopping $DESC\n \n$NAME\n\n    do_stop\n     status=$?\n    log_end_msg $status\n    ;;\n  status)\n    status_of_proc \n$DAEMON\n \n$NAME\n \n exit 0 || exit $?\n    ;;\n  restart)\n    log_daemon_msg \nRestarting $DESC\n \n$NAME\n\n    do_stop\n    case \n$?\n in\n      0|1)\n        do_start\n        case \n$?\n in\n            0) log_end_msg 0 ;;\n            1) log_end_msg 1 ;; # Old process is still running\n            *) log_end_msg 1 ;; # Failed to start\n        esac\n        ;;\n      *)\n        # Failed to stop\n        log_end_msg 1\n        ;;\n    esac\n    ;;\n  *)\n    echo \nUsage: $SCRIPTNAME {start|stop|status|restart}\n \n2\n    exit 3\n    ;;\nesac\n\n\n\n\nsudo chmod +x /etc/init.d/xboxdrv\n\n\nsudo update-rc.d xboxdrv start 90 2 3 4 5 stop 90 0 1 6\n\nYou will also need a default configuration file. Save the following content to \n/etc/default/xboxdrv\n:\n\n\n# How many Controllers? (support up to 4 Controllers)\nCONTROLLER_NUM=2\n\ncase $CONTROLLER_NUM in\n    1) CONTROLLER=\n-w 0 -l 2 --trigger-as-button --dpad-as-button\n\n    ;;\n    2) CONTROLLER=\n-w 0 -l 2 --trigger-as-button --dpad-as-button --next-controller -w 1 -l 3 --trigger-as-button --dpad-as-button\n\n    ;;\n    3) CONTROLLER=\n-w 0 -l 2 --trigger-as-button --dpad-as-button --next-controller -w 1 -l 3 --trigger-as-button --dpad-as-button --next-controller -w 2 -l 4 --trigger-as-button --dpad-as-button\n\n    ;;\n    4) CONTROLLER=\n-w 0 -l 2 --trigger-as-button --dpad-as-button --next-controller -w 1 -l 3 --trigger-as-button --dpad-as-button --next-controller -w 2 -l 4 --trigger-as-button --dpad-as-button --next-controller -w 3 -l 5 --trigger-as-button --dpad-as-button\n\n    ;;\n    *) CONTROLLER=\nincorrect amount of controller specified\n\n    ;;\nesac\n\n\n\n\nTo specifiy the amount of controller, edit the variable CONTROLLER_NUM. If you have a wired controller, replace all \"-w\" occurences with \"-i\".\n\n\nIt is generally advisable to use the daemon mode, 'cause it uses less CPU and RAM instead of several xboxdrv processes for each controller.\n\n\nXbox 360 controller glitchy?\n\n\nAccording to \nthis post\n it might help to add the line \ndwc_otg.speed=1\nto the file \n/boot/cmdline.txt\n.\n\n\nOutdated\n optional manual configs\n\n\n\n\nXbox 360 Controller button configuration for retroarch and final burn alpha\n\n\n/home/pi/RetroPie/configs/all/retroarch.cfg\n\n\n#Player 1\ninput_player1_joypad_index = 0\ninput_player1_b_btn = 6\ninput_player1_a_btn = 4\ninput_player1_y_btn = 7\ninput_player1_x_btn = 5\ninput_player1_l_btn = 10\ninput_player1_r_btn = 11\ninput_player1_start_btn = 13\ninput_player1_select_btn = 12\ninput_player1_up_btn = 0\ninput_player1_down_btn = 1\ninput_player1_left_btn = 2\ninput_player1_right_btn = 3\ninput_exit_emulator_btn = 15\ninput_menu_toggle_btn = 16\n\n#Player 2\ninput_player2_joypad_index = 1\ninput_player2_b_btn = 6\ninput_player2_a_btn = 4\ninput_player2_y_btn = 7\ninput_player2_x_btn = 5\ninput_player2_l_btn = 10\ninput_player2_r_btn = 11\ninput_player2_start_btn = 13\ninput_player2_select_btn = 12\ninput_player2_up_btn = 0\ninput_player2_down_btn = 1\ninput_player2_left_btn = 2\ninput_player2_right_btn = 3\n\n\n\n\ninput exit emulator\n to exit the emulator and return to emulationstation. \ninput menu toggle\n to show the retroarch menu (e.g. to set the aspect ratio, save/load the game, etc.)\n\n\n/home/pi/RetroPie/emulators/pifba/fba2x.cfg\n (or \n/opt/retropie/emulators/pifba/fba2x.cfg\n in some versions)\n\n\n[Joystick]\nA_1=4\nB_1=5\nX_1=6\nY_1=7\nL_1=10\nR_1=11\nSTART_1=13\nSELECT_1=12\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n#player 2 button configuration\nA_2=4\nB_2=5\nX_2=6\nY_2=7\nL_2=10\nR_2=11\nSTART_2=13\nSELECT_2=12\n#Joystick axis\nJA_LR_2=0\nJA_UD_2=1\n\n\n\n\nUp until now, I didn't figure out how to change the configuration from the analog sticks to the digipad. To exit the emulator, press START and SELECT together.\n\n\nAlternate Controller Configurations\n\n\nThis is what makes the Xbox 360 controller the best for this project.\n\n\nxboxdrv_player1.cfg\n\n\nxboxdrv_player2.cfg\n\n\nmouse.cfg\n\n\n\n\n\n\nCopy necessary files:\n First, copy the files above to your pi. (Remove the .txt extension first of course.) I placed them in /usr/local/ but they could go anywhere.\n\n\n\n\n\n\nEdit rc.local:\n Next, you need to edit rc.local so that xboxdrv uses the config files. There a few different possibilities depending on how you are instantiating xboxdrv, so be careful.\n\n\n2a.\n If you have this line:\n\n\nxboxdrv -D i 0 --next-controller -i 1 --next-controller -i 2 --next-controller -i 3 --deadzone 4000 --dbus disabled \n\n\n\n\nchange it to this\n:\n\n\nxboxdrv -D i 0  --alt-config /usr/local/xboxdrv_player1.cfg --alt-config /usr/local/mouse.cfg --next-controller -i 1 --alt-config /usr/local/xboxdrv_player2.cfg --next-controller -i 2 --next-controller -i 3 --deadzone 4000 --dbus disabled \n\n\n\n\n2b.\n If you have this line (generated by the xboxdrv install from retropie_setup.sh):\n\n\n\"/opt/retropie/supplementary/xboxdrv/bin/xboxdrv\" --daemon --detach --wid 0 --led 2 --deadzone 4000 --silent --trigger-as-button ---next-controller --wid 1 --led 3 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver\n\n\n\nchange it to this\n:\n\n\n\"/opt/retropie/supplementary/xboxdrv/bin/xboxdrv\" --daemon --detach --wid 0 --led 2 --deadzone 4000 --silent --trigger-as-button --alt-config /usr/local/xboxdrv_player1.cfg --alt-config /usr/local/mouse.cfg --next-controller --wid 1 --led 3 --deadzone 4000 --silent --trigger-as-button --alt-config /usr/local/xboxdrv_player2.cfg --dbus disabled --detach-kernel-driver\n\n\n\n2c.\n Or, if you are using separate lines like this:\n\n\nxboxdrv --trigger-as-button --wid 0 --led 2 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 1 --led 3 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 2 --led 4 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 3 --led 5 --deadzone 4000 --silent \n\n\n\n\nEdit them so that they look like this\n:\n\n\nxboxdrv --trigger-as-button --wid 0 --led 2 --alt-config /usr/local/xboxdrv_player1.cfg --alt-config /usr/local/mouse.cfg --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 1 --led 3  --alt-config /usr/local/xboxdrv_player1.cfg --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 2 --led 4 --deadzone 4000 --silent \n\nsleep 1\nxboxdrv --trigger-as-button --wid 3 --led 5 --deadzone 4000 --silent \n\n\n\n\n\n\n\n\nFile Permissions:\n The very last step is to make the .cfg files executable. So run these commands, changing them to reflect the location you placed the .cfg files.\n\n\nsudo chmod 754 /usr/local/xboxdrv_player1.cfg\nsudo chown pi:pi /usr/local/xboxdrv_player1.cfg\nsudo chmod 754 /usr/local/xboxdrv_player2.cfg\nsudo chown pi:pi /usr/local/xboxdrv_player2.cfg\nsudo chmod 754 /usr/local/mouse.cfg\nsudo chown pi:pi /usr/local/mouse.cfg\nsudo reboot\n\n\n\n\n\n\n\nNow, whenever you press the xbox (guide) button on either controller 1 or 2, it will change the control scheme. For player 1, the controller starts up in normal mode. Hitting the xbox button will change to player1.cfg. Hitting it again will enable mouse emulation. One more time will bring back normal operation. Controller 2 cycles between normal operation and player2.cfg. Controllers 3 and 4 are uneffected.\n\n\nHere's a little explanation of xboxdrv_player1.cfg (player2 is similar):\n\n\nInterface    | Mapped to   | Atari 800/5200 |    Commodore   |\n-------------------------------------------------------------\nRight Analog | Arrow Keys  | Menu Nav       | Menu Nav        \nLeft Analog  | Mouse       | Movement       |                 \nD-Pad        | Joystick    |                | Joystick port 2 \n-------------------------------------------------------------\nA Button     | Right Ctrl  |                | Fire            \nB Button     | Num Pad 0   | Fire           | Fire            \nX Button     | Enter       |                | Return          \nY Button     | Space       | Space          | Space           \n-------------------------------------------------------------\nL1 Button    | F4          | Start Game     |                 \nR1 Button    | F7          |                |                 \nL2 Button    | PAGEUP      |                |                 \nR2 Button    | CAPSLOCK    |                | Start Game      \n--------------------------------------------------------------\nStart        | F1          | Menu           | Menu            \nBack         | Esc         | Esc            | Esc", 
            "title": "XBox 360"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#automatic-configuration-easiest", 
            "text": "", 
            "title": "Automatic Configuration (Easiest)"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#xpad-driver", 
            "text": "Starting with the RetroPie 4.1 SD image, the Xpad driver is enabled by default and the following steps are unnecessary.  With the recent kernel issues of xboxdrv rendering images unusable, there is an updated xpad driver which will work just as well for Xbox controllers, it's possible it may also support Xbox One controllers.  You access the driver through  Manage Packages     Manage Driver Packages     Xpad Driver  and you'll install it from source. Reboot for good measure, reconfigure your controllers and the lights should work properly.  A complete working config (that was generated from the emulationstation configuration) is listed below at  /opt/retropie/configs/all/retroarch-joypads/Xbox360WirelessReceiver(XBOX).cfg  input_device =  Xbox 360 Wireless Receiver (XBOX) \ninput_driver =  udev \ninput_r_y_plus_axis =  +4 \ninput_l3_btn =  9 \ninput_r_x_minus_axis =  -3 \ninput_l_btn =  4 \ninput_load_state_btn =  4 \ninput_start_btn =  7 \ninput_exit_emulator_btn =  7 \ninput_l_y_minus_axis =  -1 \ninput_up_btn =  13 \ninput_r_y_minus_axis =  -4 \ninput_a_btn =  1 \ninput_b_btn =  0 \ninput_reset_btn =  0 \ninput_down_btn =  14 \ninput_l_x_plus_axis =  +0 \ninput_l_y_plus_axis =  +1 \ninput_r_btn =  5 \ninput_save_state_btn =  5 \ninput_r2_axis =  +5 \ninput_r3_btn =  10 \ninput_right_btn =  12 \ninput_state_slot_increase_btn =  12 \ninput_x_btn =  3 \ninput_menu_toggle_btn =  3 \ninput_select_btn =  6 \ninput_enable_hotkey_btn =  6 \ninput_l_x_minus_axis =  -0 \ninput_y_btn =  2 \ninput_left_btn =  11 \ninput_state_slot_decrease_btn =  11 \ninput_r_x_plus_axis =  +3 \ninput_l2_axis =  +2", 
            "title": "Xpad Driver:"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#xboxdrv-driver", 
            "text": "Note! There are known incompatibilities with this driver and the latest kernel, xpad will work best currently.  Access the  RetroPie Setup Script  and navigate to  Manage Packages   Manage Driver Packages   xboxdrv      Enable xboxdrv:  This will install the driver and add a start-up configuration in /etc/rc.local  Disable xboxdrv:  This will disable the driver and remove the start-up configuration in /etc/rc.local  Set Number of Controllers To Enable:  Default number of controllers is 2 (If you have more than two controllers, set this first before you enable xboxdrv)  Set Analog Stick Deadzone:  Smaller number = more responsive, Larger number = less responsive.  Set dwc_otg.speed=1 in /boot/config.txt:  May help if controller is being glitchy.  Remove dwc_otg.speed=1 from /boot/config.txt:  Removes the config.   After you have enabled the driver and rebooted you'll need to reconfigure your controller(s) in emulationstation as described on the  first installation page  Alternatively if you prefer you can manually install it..", 
            "title": "Xboxdrv Driver"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#manual-configuration", 
            "text": "RetroPie 3.3 contains a newer xboxdrv at /opt/retropie/supplementary/xboxdrv/bin/xboxdrv - which is preferable over the older Debian package. On older RetroPie images you can install the Debian package.  install it by running  sudo apt-get install xboxdrv  Then you must choose one of the 3 methods below", 
            "title": "Manual Configuration"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#1-multiples-instances-of-xboxdrv", 
            "text": "You have to launch multiple instances of xboxdrv (one for each controller)  For example we can edit the file  /etc/rc.local  to start instances of xboxdrv during boot  Here is an example of what to insert in  /etc/rc.local  for 4 wireless pads (put this just before  exit 0 ):  xboxdrv --trigger-as-button --wid 0 --led 2 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 1 --led 3 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 2 --led 4 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 3 --led 5 --deadzone 4000 --silent    (replace the  --wid  by  --id  if you use wired controllers)\nYou  must  swich-on your pads before booting the raspberry.  Notice the  sleep 1  between each instance: this prevents the RPi from setting random controllers with random led status; adjust timing if necessary.", 
            "title": "1 - Multiples instances of xboxdrv"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#2-single-command-line", 
            "text": "Another way is to specify this single command :  xboxdrv -D i 0 --next-controller -i 1 --next-controller -i 2 --next-controller -i 3 --deadzone 4000 --dbus disabled", 
            "title": "2 - Single command line"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#3-init-script", 
            "text": "The third possibility, you can use an init.d script with the daemon  -D  Option. Save the following content to  /etc/init.d/xboxdrv :  #! /bin/bash\n### BEGIN INIT INFO\n# Provides:          xbox-controller\n# Required-Start:    $remote_fs $syslog\n# Required-Stop:     $remote_fs $syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Start XBOX Controller Service\n# Description:       Start the xboxdrv daemon with several options\n#                    support up to 4 Controllers\n### END INIT INFO\n\n# Author: MasteRehm\n\nPATH=/sbin:/usr/sbin:/bin:/usr/bin\nDESC= XBOX Controller Service \nNAME=xboxdrv\nDAEMON=/usr/bin/$NAME\nDAEMON_ARGS= -D -d --deadzone 4000 --dbus disabled --detach \nPIDFILE=/var/run/$NAME.pid\nSCRIPTNAME=/etc/init.d/$NAME\n\n# Exit if the package is not installed\n[ -x  $DAEMON  ] || exit 0\n\n# Read configuration variable file if it is present\n[ -r /etc/default/$NAME ]   . /etc/default/$NAME\n\n# Load the VERBOSE setting and other rcS variables\n. /lib/init/vars.sh\n\n# Define LSB log_* functions.\n# Depend on lsb-base ( = 3.2-14) to ensure that this file is present\n# and status_of_proc is working.\n. /lib/lsb/init-functions\n\ndo_start()\n{\n        if [ $CONTROLLER_NUM -gt 4 ] ; then\n                echo -e  \\n$CONTROLLER ; exit 1;\n        fi\n        start-stop-daemon -S -q -x $DAEMON -- $DAEMON_ARGS $CONTROLLER\n\n# -- This workaround only works with 4 controllers connected.  It also is creating a name that\n# does not match the minor device node.\n\n#        # Workaround: xboxdrv daemon creates /dev/input/js[4-7] device files, if /dev/input/js[0-3] created on startup.\n#        if [ -x /usr/bin/rename ]; then\n#                sleep 1\n#                if [[ `ls /dev/input/js*` =~ /dev/input/js[4-7] ]]; then rename 's/js4/js0/;s/js5/js1/;s/js6/js2/;s/js7/js3/' /dev/input/js*; fi\n#        fi\n\n# Rather than renaming files, it's better to clear the existing ones by stopping the driver\n# and then when you start it again, everything will be correct.\n\n    sleep 3\n    do_stop\n    sleep 3\n        start-stop-daemon -S -q -x $DAEMON -- $DAEMON_ARGS $CONTROLLER\n}\n\n\ndo_stop()\n{\n    start-stop-daemon -K -o -q -x $DAEMON\n    sleep 1\n}\n\ncase  $1  in\n  start)\n    log_daemon_msg  Starting $DESC   $NAME \n    do_start\n     status=$?\n    log_end_msg $status\n    ;;\n  stop)\n    log_daemon_msg  Stopping $DESC   $NAME \n    do_stop\n     status=$?\n    log_end_msg $status\n    ;;\n  status)\n    status_of_proc  $DAEMON   $NAME    exit 0 || exit $?\n    ;;\n  restart)\n    log_daemon_msg  Restarting $DESC   $NAME \n    do_stop\n    case  $?  in\n      0|1)\n        do_start\n        case  $?  in\n            0) log_end_msg 0 ;;\n            1) log_end_msg 1 ;; # Old process is still running\n            *) log_end_msg 1 ;; # Failed to start\n        esac\n        ;;\n      *)\n        # Failed to stop\n        log_end_msg 1\n        ;;\n    esac\n    ;;\n  *)\n    echo  Usage: $SCRIPTNAME {start|stop|status|restart}   2\n    exit 3\n    ;;\nesac  sudo chmod +x /etc/init.d/xboxdrv  sudo update-rc.d xboxdrv start 90 2 3 4 5 stop 90 0 1 6 \nYou will also need a default configuration file. Save the following content to  /etc/default/xboxdrv :  # How many Controllers? (support up to 4 Controllers)\nCONTROLLER_NUM=2\n\ncase $CONTROLLER_NUM in\n    1) CONTROLLER= -w 0 -l 2 --trigger-as-button --dpad-as-button \n    ;;\n    2) CONTROLLER= -w 0 -l 2 --trigger-as-button --dpad-as-button --next-controller -w 1 -l 3 --trigger-as-button --dpad-as-button \n    ;;\n    3) CONTROLLER= -w 0 -l 2 --trigger-as-button --dpad-as-button --next-controller -w 1 -l 3 --trigger-as-button --dpad-as-button --next-controller -w 2 -l 4 --trigger-as-button --dpad-as-button \n    ;;\n    4) CONTROLLER= -w 0 -l 2 --trigger-as-button --dpad-as-button --next-controller -w 1 -l 3 --trigger-as-button --dpad-as-button --next-controller -w 2 -l 4 --trigger-as-button --dpad-as-button --next-controller -w 3 -l 5 --trigger-as-button --dpad-as-button \n    ;;\n    *) CONTROLLER= incorrect amount of controller specified \n    ;;\nesac  To specifiy the amount of controller, edit the variable CONTROLLER_NUM. If you have a wired controller, replace all \"-w\" occurences with \"-i\".  It is generally advisable to use the daemon mode, 'cause it uses less CPU and RAM instead of several xboxdrv processes for each controller.", 
            "title": "3 - init script"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#xbox-360-controller-glitchy", 
            "text": "According to  this post  it might help to add the line  dwc_otg.speed=1 to the file  /boot/cmdline.txt .", 
            "title": "Xbox 360 controller glitchy?"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#outdated-optional-manual-configs", 
            "text": "", 
            "title": "Outdated optional manual configs"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#xbox-360-controller-button-configuration-for-retroarch-and-final-burn-alpha", 
            "text": "/home/pi/RetroPie/configs/all/retroarch.cfg  #Player 1\ninput_player1_joypad_index = 0\ninput_player1_b_btn = 6\ninput_player1_a_btn = 4\ninput_player1_y_btn = 7\ninput_player1_x_btn = 5\ninput_player1_l_btn = 10\ninput_player1_r_btn = 11\ninput_player1_start_btn = 13\ninput_player1_select_btn = 12\ninput_player1_up_btn = 0\ninput_player1_down_btn = 1\ninput_player1_left_btn = 2\ninput_player1_right_btn = 3\ninput_exit_emulator_btn = 15\ninput_menu_toggle_btn = 16\n\n#Player 2\ninput_player2_joypad_index = 1\ninput_player2_b_btn = 6\ninput_player2_a_btn = 4\ninput_player2_y_btn = 7\ninput_player2_x_btn = 5\ninput_player2_l_btn = 10\ninput_player2_r_btn = 11\ninput_player2_start_btn = 13\ninput_player2_select_btn = 12\ninput_player2_up_btn = 0\ninput_player2_down_btn = 1\ninput_player2_left_btn = 2\ninput_player2_right_btn = 3  input exit emulator  to exit the emulator and return to emulationstation.  input menu toggle  to show the retroarch menu (e.g. to set the aspect ratio, save/load the game, etc.)  /home/pi/RetroPie/emulators/pifba/fba2x.cfg  (or  /opt/retropie/emulators/pifba/fba2x.cfg  in some versions)  [Joystick]\nA_1=4\nB_1=5\nX_1=6\nY_1=7\nL_1=10\nR_1=11\nSTART_1=13\nSELECT_1=12\n#Joystick axis\nJA_LR=0\nJA_UD=1\n\n#player 2 button configuration\nA_2=4\nB_2=5\nX_2=6\nY_2=7\nL_2=10\nR_2=11\nSTART_2=13\nSELECT_2=12\n#Joystick axis\nJA_LR_2=0\nJA_UD_2=1  Up until now, I didn't figure out how to change the configuration from the analog sticks to the digipad. To exit the emulator, press START and SELECT together.", 
            "title": "Xbox 360 Controller button configuration for retroarch and final burn alpha"
        }, 
        {
            "location": "/Setting-up-the-XBox360-controller/#alternate-controller-configurations", 
            "text": "This is what makes the Xbox 360 controller the best for this project.  xboxdrv_player1.cfg  xboxdrv_player2.cfg  mouse.cfg    Copy necessary files:  First, copy the files above to your pi. (Remove the .txt extension first of course.) I placed them in /usr/local/ but they could go anywhere.    Edit rc.local:  Next, you need to edit rc.local so that xboxdrv uses the config files. There a few different possibilities depending on how you are instantiating xboxdrv, so be careful.  2a.  If you have this line:  xboxdrv -D i 0 --next-controller -i 1 --next-controller -i 2 --next-controller -i 3 --deadzone 4000 --dbus disabled    change it to this :  xboxdrv -D i 0  --alt-config /usr/local/xboxdrv_player1.cfg --alt-config /usr/local/mouse.cfg --next-controller -i 1 --alt-config /usr/local/xboxdrv_player2.cfg --next-controller -i 2 --next-controller -i 3 --deadzone 4000 --dbus disabled    2b.  If you have this line (generated by the xboxdrv install from retropie_setup.sh):  \"/opt/retropie/supplementary/xboxdrv/bin/xboxdrv\" --daemon --detach --wid 0 --led 2 --deadzone 4000 --silent --trigger-as-button ---next-controller --wid 1 --led 3 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver  change it to this :  \"/opt/retropie/supplementary/xboxdrv/bin/xboxdrv\" --daemon --detach --wid 0 --led 2 --deadzone 4000 --silent --trigger-as-button --alt-config /usr/local/xboxdrv_player1.cfg --alt-config /usr/local/mouse.cfg --next-controller --wid 1 --led 3 --deadzone 4000 --silent --trigger-as-button --alt-config /usr/local/xboxdrv_player2.cfg --dbus disabled --detach-kernel-driver  2c.  Or, if you are using separate lines like this:  xboxdrv --trigger-as-button --wid 0 --led 2 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 1 --led 3 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 2 --led 4 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 3 --led 5 --deadzone 4000 --silent    Edit them so that they look like this :  xboxdrv --trigger-as-button --wid 0 --led 2 --alt-config /usr/local/xboxdrv_player1.cfg --alt-config /usr/local/mouse.cfg --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 1 --led 3  --alt-config /usr/local/xboxdrv_player1.cfg --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 2 --led 4 --deadzone 4000 --silent  \nsleep 1\nxboxdrv --trigger-as-button --wid 3 --led 5 --deadzone 4000 --silent      File Permissions:  The very last step is to make the .cfg files executable. So run these commands, changing them to reflect the location you placed the .cfg files.  sudo chmod 754 /usr/local/xboxdrv_player1.cfg\nsudo chown pi:pi /usr/local/xboxdrv_player1.cfg\nsudo chmod 754 /usr/local/xboxdrv_player2.cfg\nsudo chown pi:pi /usr/local/xboxdrv_player2.cfg\nsudo chmod 754 /usr/local/mouse.cfg\nsudo chown pi:pi /usr/local/mouse.cfg\nsudo reboot    Now, whenever you press the xbox (guide) button on either controller 1 or 2, it will change the control scheme. For player 1, the controller starts up in normal mode. Hitting the xbox button will change to player1.cfg. Hitting it again will enable mouse emulation. One more time will bring back normal operation. Controller 2 cycles between normal operation and player2.cfg. Controllers 3 and 4 are uneffected.  Here's a little explanation of xboxdrv_player1.cfg (player2 is similar):  Interface    | Mapped to   | Atari 800/5200 |    Commodore   |\n-------------------------------------------------------------\nRight Analog | Arrow Keys  | Menu Nav       | Menu Nav        \nLeft Analog  | Mouse       | Movement       |                 \nD-Pad        | Joystick    |                | Joystick port 2 \n-------------------------------------------------------------\nA Button     | Right Ctrl  |                | Fire            \nB Button     | Num Pad 0   | Fire           | Fire            \nX Button     | Enter       |                | Return          \nY Button     | Space       | Space          | Space           \n-------------------------------------------------------------\nL1 Button    | F4          | Start Game     |                 \nR1 Button    | F7          |                |                 \nL2 Button    | PAGEUP      |                |                 \nR2 Button    | CAPSLOCK    |                | Start Game      \n--------------------------------------------------------------\nStart        | F1          | Menu           | Menu            \nBack         | Esc         | Esc            | Esc", 
            "title": "Alternate Controller Configurations"
        }, 
        {
            "location": "/Logitech-controllers/", 
            "text": "The Logitech Gamepad F310 and Logitech Gamepad F710 are a good choice of controller for RetroPie. They have a Sony DualShock style layout and good sturdy build quality.\n\n\nThe F310 is wired with a 1.8m (6 ft) USB cable.\n\n\n\n\nThe F710 is wireless with a range of at least 6m (20ft). It uses a small USB dongle for wireless signal, the dongle can be stored inside the controller if you wish to unplug it. Power is provided by 2x AA batteries. The controller comes with a 1.5m (5 ft) USB extension cable allowing relocation of the receiver for good signal strength if your Pi is hidden inside a busy TV cabinet.\n\n\n\n\nBoth controller models feature a \nMode\n switch which swaps the D-pad and left analog stick in hardware when enabled. This is a great feature when playing games where a joystick offers more precision than a D-pad such as fighters, beat-em-ups, and shmups.\n\n\nEarlier discontinued Logitech controllers such as the Logitech Dual Action, Logitech Rumble Pad, and Logitech Precision are also a good choice and have features similar to the F310 and F710.\n\n\nDirectInput / XInput Switch\n\n\nOn the back of the controllers is a switch with \nD\n and \nX\n, standing for DirectInput and XInput mode. These are controller programming APIs created by Microsoft.\n\n\nXInput mode is the newer mode introduced with the XBox 360 controller in 2005. \nXInput is the suggested input mode\n. The controllers register with their name as \"Logitech F310 Gamepad\" or \"Logitech F710 Gamepad\". The L2/R2 triggers are analog axes in this mode.\n\n\nDirectInput is the older input mode, first introduced with DirectX in 1995. These controllers actually appear as \"Logitech Rumble Pad 2\" or similar while in DirectInput mode. The L2/R2 triggers are digital buttons in this mode.\n\n\nIt is not possible to switch D/X mode in the middle of use. EmulationStation must be quit and restarted, or the Pi rebooted, so that EmulationStation realises a different controller type is plugged in and configures the system appropriately.\n\n\nAs of RetroPie 3.8, using two controllers in DirectInput mode requires use of the \"multi input\" USB HID quirk. This is added by editing \n/boot/cmdline.txt\n and appending \nusbhid.quirks=0x046d:0xc219:0x40\n to the existing line (do not make a new line) then save the file and reboot. XInput mode does not require this, so just use XInput.\n\n\nConfiguration\n\n\nConfiguration in EmulationStation is fairly straightforward.\n\n\nABXY Layout\n\n\nNote the RetroPad ABXY pattern is the opposite of the ABXY pattern on the controller. Just ignore the controller labeling and press ABXY as if you were holding a SNES controller (A as B, B as A, X as Y, Y as X):\n\n\nIf you truly wish to use the Logitech-labeled A and B buttons as A and B, edit \n/opt/retropie/configs/all/autoconf.cfg\n and set \nes_swap_a_b = 1\n then reconfigure the controller in EmulationStation. Now A and B will work as labeled in EmulationStation, but will work like the SNES/RetroPad layout in emulators. You still need to configure X as Y and Y as X.\n\n\nLogitech Button\n\n\nIn XInput mode, the Logitech button in the middle of the controller can be used as another input button.\n\n\nYou could configure this button as the RetroArch hotkey instead of Select. This would move the quit action to Logitech+Start, the RGUI menu to Logitech+X, and so on. This would allow Select+Start, Select+B, and the rest of the usual Select-based hotkeys to be pressed in-game with no side effects.\n\n\nIf this is desired, edit the \nretroarch-joypads\n file described below and change the \ninput_enable_hotkey_btn\n to:\n\n\ninput_enable_hotkey_btn = \n10\n\n\n\n\n\nConfig Files\n\n\nThe RetroArch config differs only with the filename and identification string:\n\n\n/opt/retropie/configs/all/retroarch-joypads/LogitechGamepadF310.cfg\ninput_device = \nLogitech Gamepad F310\n\n\n\n\n\n/opt/retropie/configs/all/retroarch-joypads/LogitechGamepadF710.cfg\ninput_device = \nLogitech Gamepad F710\n\n\n\n\n\nThe rest of the contents are the same:\n\n\ninput_driver = \nudev\n\ninput_up_btn = \nh0up\n\ninput_down_btn = \nh0down\n\ninput_left_btn = \nh0left\n\ninput_right_btn = \nh0right\n\ninput_a_btn = \n1\n\ninput_b_btn = \n0\n\ninput_x_btn = \n3\n\ninput_y_btn = \n2\n\ninput_start_btn = \n9\n\ninput_select_btn = \n8\n\ninput_l_btn = \n4\n\ninput_r_btn = \n5\n\ninput_l2_btn = \n6\n\ninput_r2_btn = \n7\n\ninput_l3_btn = \n11\n\ninput_r3_btn = \n12\n\ninput_l_y_minus_axis = \n-1\n\ninput_l_y_plus_axis = \n+1\n\ninput_l_x_minus_axis = \n-0\n\ninput_l_x_plus_axis = \n+0\n\ninput_r_y_minus_axis = \n-3\n\ninput_r_y_plus_axis = \n+3\n\ninput_r_x_minus_axis = \n-2\n\ninput_r_x_plus_axis = \n+2\n\ninput_enable_hotkey_btn = \n8\n\ninput_reset_btn = \n0\n\ninput_menu_toggle_btn = \n3\n\ninput_exit_emulator_btn = \n9\n\ninput_load_state_btn = \n4\n\ninput_save_state_btn = \n5\n\ninput_state_slot_increase_btn = \nh0right\n\ninput_state_slot_decrease_btn = \nh0left\n\n\n\n\n\nMupen64plus\n\n\nOnly the controller name and headings differ in \n/opt/retropie/configs/n64/InputAutoCfg.ini\n:\n\n\n; Logitech Gamepad F310_START\n[Logitech Gamepad F310]\n...\n; Logitech Gamepad F310_END\n\n\n\n\n; Logitech Gamepad F710_START\n[Logitech Gamepad F710]\n...\n; Logitech Gamepad F710_END\n\n\n\n\nThe configuration is identical for the two controllers.\n\n\nThis layout uses the controller's L1/R1 as N64 L/R, and the controller's L2 trigger as N64 Z trigger:\n\n\nplugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768\nMempak switch = button(11)\nRumblepak switch = button(12)\nDPad U = hat(0 Up)\nDPad D = hat(0 Down)\nDPad L = hat(0 Left)\nDPad R = hat(0 Right)\nA Button = button(0)\nB Button = button(2)\nStart = button(9)\nC Button U = button(3) axis(4-)\nC Button D = button(1) axis(3+)\nC Button L = axis(2-)\nC Button R = axis(2+)\nY Axis = axis(1-,1+)\nX Axis = axis(0-,0+)\nR Trig = button(5)\nL Trig = button(6)\nZ Trig = button(4)\n\n\n\n\nDreamcast\n\n\nThe following file should match below: \n/opt/retropie/configs/dreamcast/mappings/controller_LogitechGamepadF310.cfg\n\n\nSource\n\n\n[emulator]\nmapping_name = Logitech Gamepad F310\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 305\nbtn_b = 304\nbtn_c =\nbtn_d =\nbtn_x = 308\nbtn_y = 307\nbtn_z =\nbtn_start = 315\nbtn_dpad1_left =\nbtn_dpad1_right =\nbtn_dpad1_up =\nbtn_dpad1_down =\nbtn_dpad2_left =\nbtn_dpad2_right =\nbtn_dpad2_up =\nbtn_dpad2_down =\naxis_x = 0\naxis_y = 1\naxis_trigger_left = \naxis_trigger_right =\n\n[compat]\nbtn_trigger_left = 310\nbtn_trigger_right = 311\naxis_dpad1_x = 16\naxis_dpad1_y = 17\naxis_dpad2_x =\naxis_dpad2_y =\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted = no\naxis_trigger_right_inverted = no\naxis_dpad1_y_inverted = no\naxis_dpad1_x_inverted = no\n\n\n\n\n310 Disconnecting Issue\n\n\nYou may or may not experience an issue where, after loading a ROM, the controller is no longer responsive. Assuming it's set up as this page, press the right shoulder or trigger button to resolve this. For me this works by pressing what was called the R1 button on the PSX.\n\n\nThis appears to be a firmware issue as described \nhere\n.\n\n\nL2/R2 Top Triggers\n\n\nThis is no longer an issue as of RetroPie 4.0\n, as the analog triggers register as buttons.\n\n\nThe \"left top\" (L2) and \"right top\" (R2) triggers can be tricky to get right. If you press and release the trigger quickly, you may configure the negative (outward) axis, which is wrong. When this occurs, RetroArch emulators will need the L2/R2 buttons to be pressed once before registering any other input. If you see \"left top\" as \n-2\n and/or \"right top\" as \n-5\n then the axis is configured incorrectly.\n\n\nIf this happens, complete the rest of the EmulationStation controller setup, but don't press OK at the end. Instead, go back up with the D-Pad and re-configure the \"left top\" and \"right top\" controls, this time pressing the trigger inwards more slowly. If done right, \"left top\" will be the \n+2\n axis and \"right top\" will be the \n+5\n axis. This is the correct configuration.", 
            "title": "Logitech"
        }, 
        {
            "location": "/Logitech-controllers/#directinput-xinput-switch", 
            "text": "On the back of the controllers is a switch with  D  and  X , standing for DirectInput and XInput mode. These are controller programming APIs created by Microsoft.  XInput mode is the newer mode introduced with the XBox 360 controller in 2005.  XInput is the suggested input mode . The controllers register with their name as \"Logitech F310 Gamepad\" or \"Logitech F710 Gamepad\". The L2/R2 triggers are analog axes in this mode.  DirectInput is the older input mode, first introduced with DirectX in 1995. These controllers actually appear as \"Logitech Rumble Pad 2\" or similar while in DirectInput mode. The L2/R2 triggers are digital buttons in this mode.  It is not possible to switch D/X mode in the middle of use. EmulationStation must be quit and restarted, or the Pi rebooted, so that EmulationStation realises a different controller type is plugged in and configures the system appropriately.  As of RetroPie 3.8, using two controllers in DirectInput mode requires use of the \"multi input\" USB HID quirk. This is added by editing  /boot/cmdline.txt  and appending  usbhid.quirks=0x046d:0xc219:0x40  to the existing line (do not make a new line) then save the file and reboot. XInput mode does not require this, so just use XInput.", 
            "title": "DirectInput / XInput Switch"
        }, 
        {
            "location": "/Logitech-controllers/#configuration", 
            "text": "Configuration in EmulationStation is fairly straightforward.", 
            "title": "Configuration"
        }, 
        {
            "location": "/Logitech-controllers/#abxy-layout", 
            "text": "Note the RetroPad ABXY pattern is the opposite of the ABXY pattern on the controller. Just ignore the controller labeling and press ABXY as if you were holding a SNES controller (A as B, B as A, X as Y, Y as X):  If you truly wish to use the Logitech-labeled A and B buttons as A and B, edit  /opt/retropie/configs/all/autoconf.cfg  and set  es_swap_a_b = 1  then reconfigure the controller in EmulationStation. Now A and B will work as labeled in EmulationStation, but will work like the SNES/RetroPad layout in emulators. You still need to configure X as Y and Y as X.", 
            "title": "ABXY Layout"
        }, 
        {
            "location": "/Logitech-controllers/#logitech-button", 
            "text": "In XInput mode, the Logitech button in the middle of the controller can be used as another input button.  You could configure this button as the RetroArch hotkey instead of Select. This would move the quit action to Logitech+Start, the RGUI menu to Logitech+X, and so on. This would allow Select+Start, Select+B, and the rest of the usual Select-based hotkeys to be pressed in-game with no side effects.  If this is desired, edit the  retroarch-joypads  file described below and change the  input_enable_hotkey_btn  to:  input_enable_hotkey_btn =  10", 
            "title": "Logitech Button"
        }, 
        {
            "location": "/Logitech-controllers/#config-files", 
            "text": "The RetroArch config differs only with the filename and identification string:  /opt/retropie/configs/all/retroarch-joypads/LogitechGamepadF310.cfg\ninput_device =  Logitech Gamepad F310   /opt/retropie/configs/all/retroarch-joypads/LogitechGamepadF710.cfg\ninput_device =  Logitech Gamepad F710   The rest of the contents are the same:  input_driver =  udev \ninput_up_btn =  h0up \ninput_down_btn =  h0down \ninput_left_btn =  h0left \ninput_right_btn =  h0right \ninput_a_btn =  1 \ninput_b_btn =  0 \ninput_x_btn =  3 \ninput_y_btn =  2 \ninput_start_btn =  9 \ninput_select_btn =  8 \ninput_l_btn =  4 \ninput_r_btn =  5 \ninput_l2_btn =  6 \ninput_r2_btn =  7 \ninput_l3_btn =  11 \ninput_r3_btn =  12 \ninput_l_y_minus_axis =  -1 \ninput_l_y_plus_axis =  +1 \ninput_l_x_minus_axis =  -0 \ninput_l_x_plus_axis =  +0 \ninput_r_y_minus_axis =  -3 \ninput_r_y_plus_axis =  +3 \ninput_r_x_minus_axis =  -2 \ninput_r_x_plus_axis =  +2 \ninput_enable_hotkey_btn =  8 \ninput_reset_btn =  0 \ninput_menu_toggle_btn =  3 \ninput_exit_emulator_btn =  9 \ninput_load_state_btn =  4 \ninput_save_state_btn =  5 \ninput_state_slot_increase_btn =  h0right \ninput_state_slot_decrease_btn =  h0left", 
            "title": "Config Files"
        }, 
        {
            "location": "/Logitech-controllers/#mupen64plus", 
            "text": "Only the controller name and headings differ in  /opt/retropie/configs/n64/InputAutoCfg.ini :  ; Logitech Gamepad F310_START\n[Logitech Gamepad F310]\n...\n; Logitech Gamepad F310_END  ; Logitech Gamepad F710_START\n[Logitech Gamepad F710]\n...\n; Logitech Gamepad F710_END  The configuration is identical for the two controllers.  This layout uses the controller's L1/R1 as N64 L/R, and the controller's L2 trigger as N64 Z trigger:  plugged = True\nplugin = 2\nmouse = False\nAnalogDeadzone = 4096,4096\nAnalogPeak = 32768,32768\nMempak switch = button(11)\nRumblepak switch = button(12)\nDPad U = hat(0 Up)\nDPad D = hat(0 Down)\nDPad L = hat(0 Left)\nDPad R = hat(0 Right)\nA Button = button(0)\nB Button = button(2)\nStart = button(9)\nC Button U = button(3) axis(4-)\nC Button D = button(1) axis(3+)\nC Button L = axis(2-)\nC Button R = axis(2+)\nY Axis = axis(1-,1+)\nX Axis = axis(0-,0+)\nR Trig = button(5)\nL Trig = button(6)\nZ Trig = button(4)", 
            "title": "Mupen64plus"
        }, 
        {
            "location": "/Logitech-controllers/#dreamcast", 
            "text": "The following file should match below:  /opt/retropie/configs/dreamcast/mappings/controller_LogitechGamepadF310.cfg  Source  [emulator]\nmapping_name = Logitech Gamepad F310\nbtn_escape = 316\n\n[dreamcast]\nbtn_a = 305\nbtn_b = 304\nbtn_c =\nbtn_d =\nbtn_x = 308\nbtn_y = 307\nbtn_z =\nbtn_start = 315\nbtn_dpad1_left =\nbtn_dpad1_right =\nbtn_dpad1_up =\nbtn_dpad1_down =\nbtn_dpad2_left =\nbtn_dpad2_right =\nbtn_dpad2_up =\nbtn_dpad2_down =\naxis_x = 0\naxis_y = 1\naxis_trigger_left = \naxis_trigger_right =\n\n[compat]\nbtn_trigger_left = 310\nbtn_trigger_right = 311\naxis_dpad1_x = 16\naxis_dpad1_y = 17\naxis_dpad2_x =\naxis_dpad2_y =\naxis_x_inverted = no\naxis_y_inverted = no\naxis_trigger_left_inverted = no\naxis_trigger_right_inverted = no\naxis_dpad1_y_inverted = no\naxis_dpad1_x_inverted = no", 
            "title": "Dreamcast"
        }, 
        {
            "location": "/Logitech-controllers/#310-disconnecting-issue", 
            "text": "You may or may not experience an issue where, after loading a ROM, the controller is no longer responsive. Assuming it's set up as this page, press the right shoulder or trigger button to resolve this. For me this works by pressing what was called the R1 button on the PSX.  This appears to be a firmware issue as described  here .", 
            "title": "310 Disconnecting Issue"
        }, 
        {
            "location": "/Logitech-controllers/#l2r2-top-triggers", 
            "text": "This is no longer an issue as of RetroPie 4.0 , as the analog triggers register as buttons.  The \"left top\" (L2) and \"right top\" (R2) triggers can be tricky to get right. If you press and release the trigger quickly, you may configure the negative (outward) axis, which is wrong. When this occurs, RetroArch emulators will need the L2/R2 buttons to be pressed once before registering any other input. If you see \"left top\" as  -2  and/or \"right top\" as  -5  then the axis is configured incorrectly.  If this happens, complete the rest of the EmulationStation controller setup, but don't press OK at the end. Instead, go back up with the D-Pad and re-configure the \"left top\" and \"right top\" controls, this time pressing the trigger inwards more slowly. If done right, \"left top\" will be the  +2  axis and \"right top\" will be the  +5  axis. This is the correct configuration.", 
            "title": "L2/R2 Top Triggers"
        }, 
        {
            "location": "/Xiaomi-Gamepad/", 
            "text": "After pairing the device as shown in this \nguide\n and mapping it thorugh emulationstation men\u00fa, the first thing you will notice is that it isn't working ingame.\n\n\nThe problem is that the keys detected in emulationstation are not the same as the ones detected in retroarch. To fix this you can either bind the keys through the retroarch config (in emulationstation: Retropie -\n Retroarch -\n Config -\n Input) or start from the following cfg that must be placed at \n/opt/retropie/configs/all/retroarch-joypads/udev/\u5c0f\u7c73\u84dd\u7259\u624b\u67c4.cfg\n. The name is the same as the one in \n/opt/retropie/configs/all/retroarch-joypads\n that represents the Xiaomi Gamepad.\n\n\ninput_device = \n\u5c0f\u7c73\u84dd\u7259\u624b\u67c4\n\ninput_driver = \nudev\n\ninput_r_y_plus_axis = \n+5\n\ninput_l3_btn = \n17\n\ninput_r_x_minus_axis = \n-2\n\ninput_l_btn = \n10\n\ninput_load_state_btn = \n10\n\ninput_start_btn = \n15\n\ninput_exit_emulator_btn = \n15\n\ninput_l_y_minus_axis = \n-1\n\ninput_up_btn = \nh0up\n\ninput_r_y_minus_axis = \n-5\n\ninput_a_btn = \n4\n\ninput_b_btn = \n5\n\ninput_reset_btn = \n5\n\ninput_down_btn = \nh0down\n\ninput_l_x_plus_axis = \n+0\n\ninput_l_y_plus_axis = \n+1\n\ninput_r_btn = \n11\n\ninput_save_state_btn = \n11\n\ninput_r2_btn = \n13\n\ninput_r3_btn = \n18\n\ninput_right_btn = \nh0right\n\ninput_state_slot_increase_btn = \nh0right\n\ninput_x_btn = \n7\n\ninput_menu_toggle_btn = \n7\n\ninput_select_btn = \n14\n\ninput_enable_hotkey_btn = \n14\n\ninput_l_x_minus_axis = \n-0\n\ninput_y_btn = \n8\n\ninput_left_btn = \nh0left\n\ninput_state_slot_decrease_btn = \nh0left\n\ninput_r_x_plus_axis = \n+2\n\ninput_l2_btn = \n12\n\n\n\n\n\nKeep in mind that this configuration is based in the Xbox 360 Controller Scheme and uses the default joypad hotkeys", 
            "title": "Xiaomi Gamepad"
        }, 
        {
            "location": "/Xin-Mo-Controller/", 
            "text": "Making RetroPie identify 2 players instead of one with the Xin-Mo\n\n\nAdd the following to \n/boot/cmdline.txt\n -- just add a space to the end of the existing entry, so it is all on one line):\n\n\nusbhid.quirks=0x16c0:0x05e1:0x040\n\n\nThe first two numbers are the vendor ID \n16c0\n and product ID \n05e1\n.\n\n\nIf you have a \"Juyao Dual Arcade\", it is the same device, but the vendor ID is \n0314\n and the product ID is \n0328\n:\n\n\nusbhid.quirks=0x0314:0x0328:0x040\n\n\nYou can find your vendor/product using \nlsusb\n  \n\n\nMore details in these threads generally.\n\nhttp://blog.petrockblock.com/forums/topic/autofire-on-the-axis/page/5/#post-104325\nhttp://blog.petrockblock.com/forums/topic/autofire-on-the-axis/page/5/#post-104433\n\nhttp://blog.petrockblock.com/forums/topic/how-to-get-xin-mo-dual-arcade-working-with-retropie-easy-guide/\n\n\nOlder Info\n\n\nIf you have troubles with the Xin-Mo driver you can find a guide for patching the driver at http://ithink.ch/blog/2013/09/08/patching_the_linux_kernel_to_install_the_xin-mo_dual_arcade_driver_on_a_raspberry_pi.html.\n\n\nThe troubles I had configuring a joystick with the Xin-Mo controller, besides the previous one:\n\n\nMAME4ALL-PI (MAME)\n\n\nThe MAME emulator only reads 16 buttons of the joysticks, so only use the first 16 button inputs of the controller (from 0 to 15). So if you don't have many buttons (6 by player, 2 Start and 2 service) work alright. You can make the MAME4ALL-PI to use more buttons by modifiying the source and compiling it, but it's not an easy task.\n\n\nPIFBA (NeoGeo and other Arcade)\n\n\nThe emulator expects one controller for each player (e.g. 2 UBS controllers), as the Xin-Mo is detected as only one, the PIFBA only loads the Player 1 controls (no matter what you have on the fba2x.cfg).\nSo in order to make it work I had to edit the source (not in the bets way, but it works), the following files:\n\n     /rpi/fba_player.cpp\n\n     /rpi/gp2xsdk.cpp\n*     /rpi/gp2xsdk.h (maybe its not required, only for the default values)\n\n\nfba_player.cpp: To force \ndo_keypad()\n to create 2 FBA_KEYPAD, I forced joyCount=2, so the for loop executes 2 times\n\n\ngp2xsdk.cpp:\nIn \npi_joystick_read(int which1)\n I changed all joy_buttons[1] to joy_buttons[0], because both players are in the first joystick (0). \nAlso, the movements for the second joystick axis (joyaxis_LR_2 and joyaxis_UD_2) are not defined, so you have to add them in \npi_process_events (void)\n, inside \ncase SDL_JOYAXISMOTION:\n like this:\n\n\n\n\n        case SDL_JOYAXISMOTION:\n                            if(event.jaxis.axis == joyaxis_LR) {\n                                    if(event.jaxis.value \n -10000 \n event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR] = CENTER;\n                                    else if(event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR] = RIGHT;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_LR] = LEFT;\n                            }\n                            if(event.jaxis.axis == joyaxis_UD) {\n                                    if(event.jaxis.value \n -10000 \n event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD] = CENTER;\n                                    else if(event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD] = DOWN;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_UD] = UP;\n                            }\n                            if(event.jaxis.axis == joyaxis_LR_2) {\n                                   if(event.jaxis.value \n -10000 \n event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR_2] = CENTER;\n                                    else if(event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR_2] = RIGHT;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_LR_2] = LEFT;\n                            }\n                            if(event.jaxis.axis == joyaxis_UD_2) {\n                                    if(event.jaxis.value \n -10000 \n event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD_2] = CENTER;\n                                    else if(event.jaxis.value \n 10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD_2] = DOWN;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_UD_2] = UP;\n                            }\n            break;", 
            "title": "Xin-Mo"
        }, 
        {
            "location": "/Xin-Mo-Controller/#making-retropie-identify-2-players-instead-of-one-with-the-xin-mo", 
            "text": "Add the following to  /boot/cmdline.txt  -- just add a space to the end of the existing entry, so it is all on one line):  usbhid.quirks=0x16c0:0x05e1:0x040  The first two numbers are the vendor ID  16c0  and product ID  05e1 .  If you have a \"Juyao Dual Arcade\", it is the same device, but the vendor ID is  0314  and the product ID is  0328 :  usbhid.quirks=0x0314:0x0328:0x040  You can find your vendor/product using  lsusb     More details in these threads generally. \nhttp://blog.petrockblock.com/forums/topic/autofire-on-the-axis/page/5/#post-104325\nhttp://blog.petrockblock.com/forums/topic/autofire-on-the-axis/page/5/#post-104433 \nhttp://blog.petrockblock.com/forums/topic/how-to-get-xin-mo-dual-arcade-working-with-retropie-easy-guide/", 
            "title": "Making RetroPie identify 2 players instead of one with the Xin-Mo"
        }, 
        {
            "location": "/Xin-Mo-Controller/#older-info", 
            "text": "If you have troubles with the Xin-Mo driver you can find a guide for patching the driver at http://ithink.ch/blog/2013/09/08/patching_the_linux_kernel_to_install_the_xin-mo_dual_arcade_driver_on_a_raspberry_pi.html.  The troubles I had configuring a joystick with the Xin-Mo controller, besides the previous one:  MAME4ALL-PI (MAME)  The MAME emulator only reads 16 buttons of the joysticks, so only use the first 16 button inputs of the controller (from 0 to 15). So if you don't have many buttons (6 by player, 2 Start and 2 service) work alright. You can make the MAME4ALL-PI to use more buttons by modifiying the source and compiling it, but it's not an easy task.  PIFBA (NeoGeo and other Arcade)  The emulator expects one controller for each player (e.g. 2 UBS controllers), as the Xin-Mo is detected as only one, the PIFBA only loads the Player 1 controls (no matter what you have on the fba2x.cfg).\nSo in order to make it work I had to edit the source (not in the bets way, but it works), the following files:      /rpi/fba_player.cpp      /rpi/gp2xsdk.cpp\n*     /rpi/gp2xsdk.h (maybe its not required, only for the default values)  fba_player.cpp: To force  do_keypad()  to create 2 FBA_KEYPAD, I forced joyCount=2, so the for loop executes 2 times  gp2xsdk.cpp:\nIn  pi_joystick_read(int which1)  I changed all joy_buttons[1] to joy_buttons[0], because both players are in the first joystick (0). \nAlso, the movements for the second joystick axis (joyaxis_LR_2 and joyaxis_UD_2) are not defined, so you have to add them in  pi_process_events (void) , inside  case SDL_JOYAXISMOTION:  like this:           case SDL_JOYAXISMOTION:\n                            if(event.jaxis.axis == joyaxis_LR) {\n                                    if(event.jaxis.value   -10000   event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR] = CENTER;\n                                    else if(event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR] = RIGHT;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_LR] = LEFT;\n                            }\n                            if(event.jaxis.axis == joyaxis_UD) {\n                                    if(event.jaxis.value   -10000   event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD] = CENTER;\n                                    else if(event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD] = DOWN;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_UD] = UP;\n                            }\n                            if(event.jaxis.axis == joyaxis_LR_2) {\n                                   if(event.jaxis.value   -10000   event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR_2] = CENTER;\n                                    else if(event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_LR_2] = RIGHT;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_LR_2] = LEFT;\n                            }\n                            if(event.jaxis.axis == joyaxis_UD_2) {\n                                    if(event.jaxis.value   -10000   event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD_2] = CENTER;\n                                    else if(event.jaxis.value   10000)\n                                            joy_axes[event.jbutton.which][joyaxis_UD_2] = DOWN;\n                                    else\n                                            joy_axes[event.jbutton.which][joyaxis_UD_2] = UP;\n                            }\n            break;", 
            "title": "Older Info"
        }, 
        {
            "location": "/Spinners-and-Trackballs/", 
            "text": "Arcade System Hardware\n\n\nSpinners and Trackballs appear on the control panels of many arcade classics. Although MAME is often able to accommodate the use of a joystick instead, \nmany\n popular titles are best played with their native controls. Even the steering wheels on racing games can be thought of like a large spinner.\n\n\nSpinners and Trackballs are often described together because of the way they work. Spinners operate by rotating a spindle which turns an encoder wheel. Optical sensors detect the movement of the encoder wheel and forward the speed and rotational direction to the arcade game. Trackballs are essentially the same but they have two spindles oriented perpendicular to one another. By rolling a ball that is in direct contact with the spindles, trackballs can provide two-dimensional input like a mouse. In this respect, a spinner is also like a mouse that only moves in a straight line (left/right or up/down).\n\n\nHardware for Emulators\n\n\nBecause mouse input is ubiquitous on modern computers, spinners and trackballs translate nicely to emulators that can accept input from a mouse. For trackballs, the input is practically identical to a mouse. Spinners can also be setup like a mouse with separate X and Y tracking (like an Etch-a-Sketch).\n\n\nAdding a USB mouse to a Raspberry Pi is trivial. Attaching a trackball or spinners requires a USB interface. Fortunately, arcade hardware is available that will work, and often comes with (or is compatible with) a USB interface. There are several options available from Ultimarc, Groovy Game Gear, Happ, and others. The key to making this hardware work on the Raspberry Pi is to ensure that the interface behaves like a USB mouse.\n\n\nTesting Mouse Inputs in Linux\n\n\nA convenient hardware test is to simply boot the Pi to a desktop and see if you can move the cursor with your trackball or spinner. This can also help you troubleshoot the connections for X and Y inputs. If you have movement, you should be able to configure MAME to use it.\n\n\nAnother test can be performed at the command prompt. Type:\ncat /dev/input/mice\n and press enter. Now, rotate your spinner or move your trackball. It should produce characters on the screen and move the cursor from side to side on the line. Depending on other devices you have attached, Linux might see more than one USB mouse at the same time. You can determine which one is your spinner or trackball by trying each device individually using \ncat /dev/input/mouse0\n or \ncat /dev/input/mouse1\n and so on.\n\n\nConfiguring Emulators\n\n\nNot all emulators support mouse input for arcade games. Fortunately, software evolves as developers add more functionality. The two MAME emulators that offer the best mouse support for arcade games in RetroPie are lr-mame2003 and AdvanceMAME 1.4 (or 0.94).\n\n\nlr-mame2003\n\n\nAs of August 4, 2016, \nmame2003-libretro\n is capable of 1-player trackball support and  2-player spinner support once configured. The standard configuration leverages both X and Y axes of mouse input for player one. The Player 1 DIAL control (spinner, steering, etc.) receives input from the X-axis, and TRACKBALL from both X and Y. It doesn't matter how many mice you connect, they all map to X and Y for Player 1.\n\n\nIf you enable a core option (\ndescribed here\n), it is possible to share the mouse input to effectively copy the Y axis to the Player 2 DIAL control. This makes sense, as most interfaces are for either trackballs or two spinners. \n\n\nThis flexibility is sufficient for most games, but there are exceptions on complex control panels. If you need to map multiple trackballs, or your Player 1 and Player 2 spinners are on different mouse inputs, you will need to use AdvanceMAME to map your devices to the proper controls.\n\n\nAdvanceMAME\n\n\nAdvanceMAME offers the most versatility when it comes to trackball and spinner controls. Using the configuration file, You can exert very granular control to override the setup for specific games, or just configure your default settings for all games. This section describes important configuration steps necessary to enable mouse inputs in AdvanceMAME.\n\n\nAdvanceMAME Mouse Input Testing\n\n\nIf you were successful with the Linux tests above, you might be able to skip this step, as the configuration below is flexible enough for most situations. However, if you plan to configure multiple input devices, it can be helpful to know how AdvanceMAME will see them. Like the Linux test above, AdvanceMAME has its own mouse testing command that allows you to see which mouse is controlling which axis. At a command prompt, type this: \n/opt/retropie/emulators/advmame/1.4/bin/advm\n and press ENTER. You will see output like this:\n\n\nDriver event, mouses 2\nmouse 0, axes 3, buttons 3\n    axe 0 [x]\n    axe 1 [y]\n    axe 2 [z]\n    button 0 [left]\n    button 1 [right]\n    button 2 [middle]\nmouse 1, axes 3, buttons 3\n    axe 0 [x]\n    axe 1 [y]\n    axe 2 [wheel]\n    button 0 [left]\n    button 1 [right]\n    button 2 [middle]\n\nPress Break to exit\nmouse 0, [---], [     0,     0,     0]\n\n\n\n\nIn this example AdvanceMAME is detecting two mice, (mouse 0 and mouse 1) each with three axes (x,y,z) and three buttons. As you move your mouse controls you will see rows appear:\n\n\nmouse 0, [---], [     0,     0,     0]\nmouse 1, [---], [     0,     1,     0] (   1 ms)\nmouse 0, [---], [     0,     0,     0]\nmouse 1, [---], [     0,     2,     0] (   1 ms)\nmouse 0, [---], [     0,     0,     0]\nmouse 1, [---], [     0,     0,     0] (   1 ms)\n\n\n\n\nYou can press CONTROL-C to exit the test. In this example, moving the second spinner is being picked up as mouse 1, y-axis. No movement is registered as 0 input, while movement in one direction or another will show up as positive and negative numbers. This type of feedback can be very handy, as it tells you the index number and the axis of a specific controller \nfrom MAME's perspective\n. Just keep in mind, if you attach another external mouse later, it might change which mouse is detected as mouse 0, etc., and your configurations below may need to be adjusted.\n\n\nConfiguring RAW, PS2 for all possible mouse inputs\n\n\nDepending on your setup, you might have an external mouse, a spinner, a mouse and a spinner, no mouse and two spinners, one spinner and a trackball, a mouse only during setup, etc.. Linux will see all of these as mouse inputs, but AdvanceMAME might not see them with the same index. For example, if you boot with an external mouse, it might be detected as mouse0 and your spinner as mouse1, but if you boot the same system without the external mouse attached, everything might ratchet down (spinner becomes mouse0). As long as you aren't changing your hardware configuration everything should stay where it is, but if you routinely connect an external mouse to troubleshoot or launch the desktop, this can be frustrating. We can overcome it by mapping multiple inputs \ntogether\n in AdvanceMAME.\n\n\nFor starters, we need to enable all possible mouse inputs in the configuration file (we will edit the configuration for AdvanceMAME 1.4, but if you use multiple versions of AdvanceMAME, you need to make edits in each respective config).\n\n\nFind these lines in \n/opt/retropie/configs/mame-advancemame/advmame-1.4.rc\n and update them as shown:\n\n\ndevice_mouse raw\ndevice_raw_mousedev[0] /dev/input/mouse0\ndevice_raw_mousedev[1] /dev/input/mouse1\ndevice_raw_mousedev[2] /dev/input/mouse2\ndevice_raw_mousedev[3] /dev/input/mouse3\ndevice_raw_mousetype[0] ps2\ndevice_raw_mousetype[1] ps2\ndevice_raw_mousetype[2] ps2\ndevice_raw_mousetype[3] ps2\n\n\n\n\nThis establishes 4 different mouse inputs which is probably more than most people will need.\n\n\nMapping Specific Controls\n\n\nThe following configurations can depend on your hardware setup. You can make adjustments as needed, especially if you have multiple inputs you are trying to configure. Note that you cannot make the mapping selections inside the MAME GUI. Even a properly configured mouse input may not look correct inside the MAME menus even though it works. To setup the proper mapping, you need to edit the configuration again in \n/opt/retropie/configs/mame-advancemame/advmame-1.4.rc\n.\n\n\nTrackball\n\n\nSince most trackball games will be emulated in AdvanceMAME using Player1, configure these lines as follows:\n\n\ninput_map[p1_trackballx] mouse[0,x] mouse[1,x] mouse[2,x] mouse[3,x]\ninput_map[p1_trackbally] mouse[0,y] mouse[1,y] mouse[2,y] mouse[3,y]\n\n\n\n\nThis tells MAME to map the Player 1 Trackball to the X and Y inputs for all four of our possible mouse inputs. We are covering all possibilities here so if the mouse indexes change (maybe you boot up with an external mouse attached and next time you don't) it won't affect the gameplay. Basicially, all attached mouse inputs will map to the game input.\n\n\nSpinner\n\n\nOne spinner will send input on either X or Y for a given mouse. Assuming you have yours connected to the X axis of your interface, configure this line:\n\n\ninput_map[p1_dialx] mouse[0,x] mouse[1,x] mouse[2,x] mouse[3,x]\n\n\n\n\nHere again, we are covering the possibilities. No matter how Linux and MAME are indexing your mouse devices, the x-axis of all four should map to the game.\n\n\nIf it doesn't work, and you know you have functioning inputs (see tests above) you might have your spinner on the y-axis. You could switch the hardware connection or change the input map to\n\ninput_map[p1_dialx] mouse[0,y] mouse[1,y] mouse[2,y] mouse[3,y]\n\n\nYou might also find that your spinner rotates in the wrong direction. You can fix that too with a minus sign as follows:\n\ninput_map[p1_trackballx] -mouse[0,x] -mouse[1,x] -mouse[2,x] -mouse[3,x]\n\n\nThere are many possibile combinations if you have more than one input device. Here's an example for two spinners, both connected to the same USB interface, but the Player 2 spins backwards. So. . .\n\n\ninput_map[p1_dialx] mouse[0,x]\ninput_map[p2_dialx] -mouse[0,y]\n\n\n\n\nNotice that from MAME's perspective, both DIAL inputs use the x-axis, but we are using two spinners on the same USB interface, so player 1 of our \"mouse0\" is x and player 2 is on y. As you can see, AdvanceMAME can handle this easily. Also note that we are not mapping mouse1, 2, 3. On this arcade cabinet we have a dedicated trackball on mouse1 and we don't want people to be able to interfere with our game if they touch the trackball while the spinners are in use.\n\n\nOther Considerations\n\n\nSometimes, a game doesn't use the DIAL input. It uses Paddle. It can be convenient map inputs for the paddel device just in case:\n\n\ninput_map[p1_paddlex] mouse[0,x] mouse[1,x] mouse[2,x] mouse[3,x]\n\n\nIt is also possible to configure controls for certain games only. While this is not generally necessary, you do have the option to override defaults you might have configured above by specifying a ROM/ at the beginning of an input line. For example, if Tempest worked just like every other game but for some reason, just that game has the spinner working backwards, you could specify an additional input for that game only:\n\n\ntempest/input_map[p1_trackballx] -mouse[0,x] -mouse[1,x] -mouse[2,x] -mouse[3,x]\n\n\nSensitivity\n\n\nEach game may require adjustments to the sensitivity. This too can be configured in the .rc file, but it is easier to adjust this within the MAME GUI. Bring up the menu in AdvanceMAME and adjust the analog inputs and test as needed. The results will be saved into the .rc file when you exit.\n\n\nPoll Rate\n\n\nSome spinner hardware is designed with high precision. The encoder + optical sensors are capable of extreme sensitivity. However, this can work against you if Linux is not observing the mouse interface fast enough. It can cause a strange negative effect called \"backspin\". If you have ever watched an old western movie and noticed how a fast turning wagon wheel can appear to spin backwards--that's the same effect caused by a low frame rate during filming. It can be very frustrating to give a quick spin in Tempest only to watch it move backwards in the game until it slows down. One way to overcome this is to tell Linux to increase the poll rate of the mouse interface. You need to edit your \n/boot/cmdline.txt\n by appending \nusbhid.mousepoll=2\n to increase the mouse poll rate.\n\n\nDriving Games\n\n\nDon't just limit your spinners to traditional titles. You might not have considered the fact that steering wheels are just big spinners. Driving games like Pole Position are perfectly suited for spinners.\n\n\nUnmapping Joysticks\n\n\nOnce you have your spinners working, you might want to remove the joystick controls for some games. MAME pre-configures joystick inputs in lieu of analog controls for some games to make them playable by users without a spinner/trackball. You could ignore this, but it can be annoying if you bump the joystick or if an observer accidentally touches it and affects your game. Simply go into the MAME GUI menu and edit controls for \"this game\" and remove the joystick inputs.", 
            "title": "Spinners and Trackballs"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#arcade-system-hardware", 
            "text": "Spinners and Trackballs appear on the control panels of many arcade classics. Although MAME is often able to accommodate the use of a joystick instead,  many  popular titles are best played with their native controls. Even the steering wheels on racing games can be thought of like a large spinner.  Spinners and Trackballs are often described together because of the way they work. Spinners operate by rotating a spindle which turns an encoder wheel. Optical sensors detect the movement of the encoder wheel and forward the speed and rotational direction to the arcade game. Trackballs are essentially the same but they have two spindles oriented perpendicular to one another. By rolling a ball that is in direct contact with the spindles, trackballs can provide two-dimensional input like a mouse. In this respect, a spinner is also like a mouse that only moves in a straight line (left/right or up/down).", 
            "title": "Arcade System Hardware"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#hardware-for-emulators", 
            "text": "Because mouse input is ubiquitous on modern computers, spinners and trackballs translate nicely to emulators that can accept input from a mouse. For trackballs, the input is practically identical to a mouse. Spinners can also be setup like a mouse with separate X and Y tracking (like an Etch-a-Sketch).  Adding a USB mouse to a Raspberry Pi is trivial. Attaching a trackball or spinners requires a USB interface. Fortunately, arcade hardware is available that will work, and often comes with (or is compatible with) a USB interface. There are several options available from Ultimarc, Groovy Game Gear, Happ, and others. The key to making this hardware work on the Raspberry Pi is to ensure that the interface behaves like a USB mouse.", 
            "title": "Hardware for Emulators"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#testing-mouse-inputs-in-linux", 
            "text": "A convenient hardware test is to simply boot the Pi to a desktop and see if you can move the cursor with your trackball or spinner. This can also help you troubleshoot the connections for X and Y inputs. If you have movement, you should be able to configure MAME to use it.  Another test can be performed at the command prompt. Type: cat /dev/input/mice  and press enter. Now, rotate your spinner or move your trackball. It should produce characters on the screen and move the cursor from side to side on the line. Depending on other devices you have attached, Linux might see more than one USB mouse at the same time. You can determine which one is your spinner or trackball by trying each device individually using  cat /dev/input/mouse0  or  cat /dev/input/mouse1  and so on.", 
            "title": "Testing Mouse Inputs in Linux"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#configuring-emulators", 
            "text": "Not all emulators support mouse input for arcade games. Fortunately, software evolves as developers add more functionality. The two MAME emulators that offer the best mouse support for arcade games in RetroPie are lr-mame2003 and AdvanceMAME 1.4 (or 0.94).", 
            "title": "Configuring Emulators"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#lr-mame2003", 
            "text": "As of August 4, 2016,  mame2003-libretro  is capable of 1-player trackball support and  2-player spinner support once configured. The standard configuration leverages both X and Y axes of mouse input for player one. The Player 1 DIAL control (spinner, steering, etc.) receives input from the X-axis, and TRACKBALL from both X and Y. It doesn't matter how many mice you connect, they all map to X and Y for Player 1.  If you enable a core option ( described here ), it is possible to share the mouse input to effectively copy the Y axis to the Player 2 DIAL control. This makes sense, as most interfaces are for either trackballs or two spinners.   This flexibility is sufficient for most games, but there are exceptions on complex control panels. If you need to map multiple trackballs, or your Player 1 and Player 2 spinners are on different mouse inputs, you will need to use AdvanceMAME to map your devices to the proper controls.", 
            "title": "lr-mame2003"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#advancemame", 
            "text": "AdvanceMAME offers the most versatility when it comes to trackball and spinner controls. Using the configuration file, You can exert very granular control to override the setup for specific games, or just configure your default settings for all games. This section describes important configuration steps necessary to enable mouse inputs in AdvanceMAME.", 
            "title": "AdvanceMAME"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#advancemame-mouse-input-testing", 
            "text": "If you were successful with the Linux tests above, you might be able to skip this step, as the configuration below is flexible enough for most situations. However, if you plan to configure multiple input devices, it can be helpful to know how AdvanceMAME will see them. Like the Linux test above, AdvanceMAME has its own mouse testing command that allows you to see which mouse is controlling which axis. At a command prompt, type this:  /opt/retropie/emulators/advmame/1.4/bin/advm  and press ENTER. You will see output like this:  Driver event, mouses 2\nmouse 0, axes 3, buttons 3\n    axe 0 [x]\n    axe 1 [y]\n    axe 2 [z]\n    button 0 [left]\n    button 1 [right]\n    button 2 [middle]\nmouse 1, axes 3, buttons 3\n    axe 0 [x]\n    axe 1 [y]\n    axe 2 [wheel]\n    button 0 [left]\n    button 1 [right]\n    button 2 [middle]\n\nPress Break to exit\nmouse 0, [---], [     0,     0,     0]  In this example AdvanceMAME is detecting two mice, (mouse 0 and mouse 1) each with three axes (x,y,z) and three buttons. As you move your mouse controls you will see rows appear:  mouse 0, [---], [     0,     0,     0]\nmouse 1, [---], [     0,     1,     0] (   1 ms)\nmouse 0, [---], [     0,     0,     0]\nmouse 1, [---], [     0,     2,     0] (   1 ms)\nmouse 0, [---], [     0,     0,     0]\nmouse 1, [---], [     0,     0,     0] (   1 ms)  You can press CONTROL-C to exit the test. In this example, moving the second spinner is being picked up as mouse 1, y-axis. No movement is registered as 0 input, while movement in one direction or another will show up as positive and negative numbers. This type of feedback can be very handy, as it tells you the index number and the axis of a specific controller  from MAME's perspective . Just keep in mind, if you attach another external mouse later, it might change which mouse is detected as mouse 0, etc., and your configurations below may need to be adjusted.", 
            "title": "AdvanceMAME Mouse Input Testing"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#configuring-raw-ps2-for-all-possible-mouse-inputs", 
            "text": "Depending on your setup, you might have an external mouse, a spinner, a mouse and a spinner, no mouse and two spinners, one spinner and a trackball, a mouse only during setup, etc.. Linux will see all of these as mouse inputs, but AdvanceMAME might not see them with the same index. For example, if you boot with an external mouse, it might be detected as mouse0 and your spinner as mouse1, but if you boot the same system without the external mouse attached, everything might ratchet down (spinner becomes mouse0). As long as you aren't changing your hardware configuration everything should stay where it is, but if you routinely connect an external mouse to troubleshoot or launch the desktop, this can be frustrating. We can overcome it by mapping multiple inputs  together  in AdvanceMAME.  For starters, we need to enable all possible mouse inputs in the configuration file (we will edit the configuration for AdvanceMAME 1.4, but if you use multiple versions of AdvanceMAME, you need to make edits in each respective config).  Find these lines in  /opt/retropie/configs/mame-advancemame/advmame-1.4.rc  and update them as shown:  device_mouse raw\ndevice_raw_mousedev[0] /dev/input/mouse0\ndevice_raw_mousedev[1] /dev/input/mouse1\ndevice_raw_mousedev[2] /dev/input/mouse2\ndevice_raw_mousedev[3] /dev/input/mouse3\ndevice_raw_mousetype[0] ps2\ndevice_raw_mousetype[1] ps2\ndevice_raw_mousetype[2] ps2\ndevice_raw_mousetype[3] ps2  This establishes 4 different mouse inputs which is probably more than most people will need.", 
            "title": "Configuring RAW, PS2 for all possible mouse inputs"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#mapping-specific-controls", 
            "text": "The following configurations can depend on your hardware setup. You can make adjustments as needed, especially if you have multiple inputs you are trying to configure. Note that you cannot make the mapping selections inside the MAME GUI. Even a properly configured mouse input may not look correct inside the MAME menus even though it works. To setup the proper mapping, you need to edit the configuration again in  /opt/retropie/configs/mame-advancemame/advmame-1.4.rc .", 
            "title": "Mapping Specific Controls"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#trackball", 
            "text": "Since most trackball games will be emulated in AdvanceMAME using Player1, configure these lines as follows:  input_map[p1_trackballx] mouse[0,x] mouse[1,x] mouse[2,x] mouse[3,x]\ninput_map[p1_trackbally] mouse[0,y] mouse[1,y] mouse[2,y] mouse[3,y]  This tells MAME to map the Player 1 Trackball to the X and Y inputs for all four of our possible mouse inputs. We are covering all possibilities here so if the mouse indexes change (maybe you boot up with an external mouse attached and next time you don't) it won't affect the gameplay. Basicially, all attached mouse inputs will map to the game input.", 
            "title": "Trackball"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#spinner", 
            "text": "One spinner will send input on either X or Y for a given mouse. Assuming you have yours connected to the X axis of your interface, configure this line:  input_map[p1_dialx] mouse[0,x] mouse[1,x] mouse[2,x] mouse[3,x]  Here again, we are covering the possibilities. No matter how Linux and MAME are indexing your mouse devices, the x-axis of all four should map to the game.  If it doesn't work, and you know you have functioning inputs (see tests above) you might have your spinner on the y-axis. You could switch the hardware connection or change the input map to input_map[p1_dialx] mouse[0,y] mouse[1,y] mouse[2,y] mouse[3,y]  You might also find that your spinner rotates in the wrong direction. You can fix that too with a minus sign as follows: input_map[p1_trackballx] -mouse[0,x] -mouse[1,x] -mouse[2,x] -mouse[3,x]  There are many possibile combinations if you have more than one input device. Here's an example for two spinners, both connected to the same USB interface, but the Player 2 spins backwards. So. . .  input_map[p1_dialx] mouse[0,x]\ninput_map[p2_dialx] -mouse[0,y]  Notice that from MAME's perspective, both DIAL inputs use the x-axis, but we are using two spinners on the same USB interface, so player 1 of our \"mouse0\" is x and player 2 is on y. As you can see, AdvanceMAME can handle this easily. Also note that we are not mapping mouse1, 2, 3. On this arcade cabinet we have a dedicated trackball on mouse1 and we don't want people to be able to interfere with our game if they touch the trackball while the spinners are in use.", 
            "title": "Spinner"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#other-considerations", 
            "text": "Sometimes, a game doesn't use the DIAL input. It uses Paddle. It can be convenient map inputs for the paddel device just in case:  input_map[p1_paddlex] mouse[0,x] mouse[1,x] mouse[2,x] mouse[3,x]  It is also possible to configure controls for certain games only. While this is not generally necessary, you do have the option to override defaults you might have configured above by specifying a ROM/ at the beginning of an input line. For example, if Tempest worked just like every other game but for some reason, just that game has the spinner working backwards, you could specify an additional input for that game only:  tempest/input_map[p1_trackballx] -mouse[0,x] -mouse[1,x] -mouse[2,x] -mouse[3,x]", 
            "title": "Other Considerations"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#sensitivity", 
            "text": "Each game may require adjustments to the sensitivity. This too can be configured in the .rc file, but it is easier to adjust this within the MAME GUI. Bring up the menu in AdvanceMAME and adjust the analog inputs and test as needed. The results will be saved into the .rc file when you exit.", 
            "title": "Sensitivity"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#poll-rate", 
            "text": "Some spinner hardware is designed with high precision. The encoder + optical sensors are capable of extreme sensitivity. However, this can work against you if Linux is not observing the mouse interface fast enough. It can cause a strange negative effect called \"backspin\". If you have ever watched an old western movie and noticed how a fast turning wagon wheel can appear to spin backwards--that's the same effect caused by a low frame rate during filming. It can be very frustrating to give a quick spin in Tempest only to watch it move backwards in the game until it slows down. One way to overcome this is to tell Linux to increase the poll rate of the mouse interface. You need to edit your  /boot/cmdline.txt  by appending  usbhid.mousepoll=2  to increase the mouse poll rate.", 
            "title": "Poll Rate"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#driving-games", 
            "text": "Don't just limit your spinners to traditional titles. You might not have considered the fact that steering wheels are just big spinners. Driving games like Pole Position are perfectly suited for spinners.", 
            "title": "Driving Games"
        }, 
        {
            "location": "/Spinners-and-Trackballs/#unmapping-joysticks", 
            "text": "Once you have your spinners working, you might want to remove the joystick controls for some games. MAME pre-configures joystick inputs in lieu of analog controls for some games to make them playable by users without a spinner/trackball. You could ignore this, but it can be annoying if you bump the joystick or if an observer accidentally touches it and affects your game. Simply go into the MAME GUI menu and edit controls for \"this game\" and remove the joystick inputs.", 
            "title": "Unmapping Joysticks"
        }, 
        {
            "location": "/Mobile-Gamepad/", 
            "text": "Mobile Universal Gamepad for RetroPie\n\n\n\n\n\nFull description about project is available on page. https://github.com/sbidolach/mobile-gamepad", 
            "title": "Mobile Gamepad"
        }, 
        {
            "location": "/Virtual-Gamepad/", 
            "text": "This project is the result of hard work from Miroof. https://github.com/miroof/node-virtual-gamepads\n\n\n\n\nInstall from the experimental menu of the setup script (may only work well with a rpi2)\n\n\nUsage\n\n\nOnce the nodejs application is launched, you just have to plug your gamepad controller by connecting your device on the same local network and by reaching the address \nhttp://node_server_adress\n (i.e. your Raspberry Pi's IP address) on your choice of web browser (Chrome Mobile is recommended).\n\n\nUse it as a Smartphone Application (Chrome for Android)\n\n\nNote that you need to configure the virtual gamepad from emulationstation while in the web browser first BEFORE you create the application on your smartphone otherwise the input configuration in emulationstation will not work.\n \n\n\nWith the add to homescreen chrome feature, you can easily use virtual gamepads application without launching the browser each time you want to play.\n\n\nWith only 3 clicks, virtual gamepads web application becomes a standalone application.\n\n\n | \n\n\nThen a shortcut is added on your homescreen and the application will be launched outside the browser.\n\n\n | \n\n\nEnjoy Haptic Feedbacks\n\n\nBecause it's difficult to spot the right place in a touch screen without looking at it, the touch zone of each button was increased. LT button was moved at the center of the screen to let as much space as possible for the joystick and avoid touch mistakes.\n\n\n\n\nTo know if we pressed a button with success, the web application provides an haptic feedback which can be easily deactivated by turning off the vibrations of the phone.\n\n\nYou will need to configure your controller with EmulationStation and RetroArch just like you would any other controller.\n\n\nYou can also install manually using these steps:\n\n\n### Install Node.js\n\nsudo apt-get update \n sudo apt-get upgrade\nwget http://node-arm.herokuapp.com/node_archive_armhf.deb\nsudo dpkg -i node_archive_armhf.deb\nrm node_archive_armhf.deb\n\n### Install Virtual Gamepad (Must Be Run As Root!)\n\nsu\ngit clone https://github.com/miroof/node-virtual-gamepads\ncd node-virtual-gamepads\nnpm install\n\n\n### Enable Virtual Gamepad on Boot\n\nsudo npm install pm2 -g\nsudo pm2 start main.js\nsudo pm2 startup\nsudo pm2 save\n\n\n\n\nEmulationStation Controller Config:\n\n\n/opt/retropie/configs/all/retroarch-joypads/Virtualgamepad.cfg\n\n\ninput_device = \nVirtual gamepad\n\ninput_driver = \nudev\n\ninput_r_btn = \n5\n\ninput_save_state_btn = \n5\n\ninput_start_btn = \n7\n\ninput_exit_emulator_btn = \n7\n\ninput_l_btn = \n4\n\ninput_load_state_btn = \n4\n\ninput_up_axis = \n-1\n\ninput_a_btn = \n0\n\ninput_b_btn = \n1\n\ninput_reset_btn = \n1\n\ninput_down_axis = \n+1\n\ninput_right_axis = \n+0\n\ninput_state_slot_increase_axis = \n+0\n\ninput_x_btn = \n2\n\ninput_menu_toggle_btn = \n2\n\ninput_select_btn = \n6\n\ninput_enable_hotkey_btn = \n6\n\ninput_y_btn = \n3\n\ninput_left_axis = \n-0\n\ninput_state_slot_decrease_axis = \n-0", 
            "title": "Virtual Gamepad"
        }, 
        {
            "location": "/Virtual-Gamepad/#usage", 
            "text": "Once the nodejs application is launched, you just have to plug your gamepad controller by connecting your device on the same local network and by reaching the address  http://node_server_adress  (i.e. your Raspberry Pi's IP address) on your choice of web browser (Chrome Mobile is recommended).", 
            "title": "Usage"
        }, 
        {
            "location": "/Virtual-Gamepad/#use-it-as-a-smartphone-application-chrome-for-android", 
            "text": "Note that you need to configure the virtual gamepad from emulationstation while in the web browser first BEFORE you create the application on your smartphone otherwise the input configuration in emulationstation will not work.    With the add to homescreen chrome feature, you can easily use virtual gamepads application without launching the browser each time you want to play.  With only 3 clicks, virtual gamepads web application becomes a standalone application.   |   Then a shortcut is added on your homescreen and the application will be launched outside the browser.   |", 
            "title": "Use it as a Smartphone Application (Chrome for Android)"
        }, 
        {
            "location": "/Virtual-Gamepad/#enjoy-haptic-feedbacks", 
            "text": "Because it's difficult to spot the right place in a touch screen without looking at it, the touch zone of each button was increased. LT button was moved at the center of the screen to let as much space as possible for the joystick and avoid touch mistakes.   To know if we pressed a button with success, the web application provides an haptic feedback which can be easily deactivated by turning off the vibrations of the phone.  You will need to configure your controller with EmulationStation and RetroArch just like you would any other controller.  You can also install manually using these steps:  ### Install Node.js\n\nsudo apt-get update   sudo apt-get upgrade\nwget http://node-arm.herokuapp.com/node_archive_armhf.deb\nsudo dpkg -i node_archive_armhf.deb\nrm node_archive_armhf.deb\n\n### Install Virtual Gamepad (Must Be Run As Root!)\n\nsu\ngit clone https://github.com/miroof/node-virtual-gamepads\ncd node-virtual-gamepads\nnpm install\n\n\n### Enable Virtual Gamepad on Boot\n\nsudo npm install pm2 -g\nsudo pm2 start main.js\nsudo pm2 startup\nsudo pm2 save", 
            "title": "Enjoy Haptic Feedbacks"
        }, 
        {
            "location": "/Virtual-Gamepad/#emulationstation-controller-config", 
            "text": "/opt/retropie/configs/all/retroarch-joypads/Virtualgamepad.cfg  input_device =  Virtual gamepad \ninput_driver =  udev \ninput_r_btn =  5 \ninput_save_state_btn =  5 \ninput_start_btn =  7 \ninput_exit_emulator_btn =  7 \ninput_l_btn =  4 \ninput_load_state_btn =  4 \ninput_up_axis =  -1 \ninput_a_btn =  0 \ninput_b_btn =  1 \ninput_reset_btn =  1 \ninput_down_axis =  +1 \ninput_right_axis =  +0 \ninput_state_slot_increase_axis =  +0 \ninput_x_btn =  2 \ninput_menu_toggle_btn =  2 \ninput_select_btn =  6 \ninput_enable_hotkey_btn =  6 \ninput_y_btn =  3 \ninput_left_axis =  -0 \ninput_state_slot_decrease_axis =  -0", 
            "title": "EmulationStation Controller Config:"
        }, 
        {
            "location": "/Setting-up-Wii-U-Pro-controller/", 
            "text": "About\n\n\nThis how-to will explain the fairly easy setup of a Wii U Pro Controller (or any Wii controller) within a jessie based RetroPie Setup. After the setup the controller will connect automatically when it is turned on and can be disconnected off with the power button on the controller.\nThe steps are based on the XWiimote description in the ArchWiki: https://wiki.archlinux.org/index.php/XWiimote\n\n\nPrerequisites\n\n\nThis will only work on Debian Jessie based distributions. So you either have to get the latest Raspbian version (Debian Jessie based) and use the RetroPie-Setup script or use RetroPie 3.5.\n\n\nSteps\n\n\n\n\n\n\nEither open the commandline on the pi by exiting emulationstation or ssh into it\n\n\n\n\n\n\nEnsure your bluetooth adapter is setup correctly and working\n\n\n\n\n\n\nEnter 'sudo bluetoothctl' command\n\n\n\n\n\n\nThe bluetooth control input should open, now type in the following commands in this order (you can use the TAB key to auto complete the mac address for the pair and connect command)\n\n\n\n\n\n\npower on\nagent on\n\npress red sync button\n                                         # not a command press the button on the controller\nscan on\npair \nMAC of the found wiimote, use TAB for autocompletion\n     # note: we do not explicitly connect, we just pair!\nconnect \nMAC of the wiimote\n                                    # there seems to be a pretty short timeout, so execute this immediately after the pairing command\ntrust \nMAC of the wiimote\n\ndisconnect \nMAC of the wiimote\n\n\n\n\n\nNow you're done, press any button on the controller and it should connect, press the power button and it should disconnect, it also persists after a reboot", 
            "title": "Wii U Pro"
        }, 
        {
            "location": "/Setting-up-Wii-U-Pro-controller/#about", 
            "text": "This how-to will explain the fairly easy setup of a Wii U Pro Controller (or any Wii controller) within a jessie based RetroPie Setup. After the setup the controller will connect automatically when it is turned on and can be disconnected off with the power button on the controller.\nThe steps are based on the XWiimote description in the ArchWiki: https://wiki.archlinux.org/index.php/XWiimote", 
            "title": "About"
        }, 
        {
            "location": "/Setting-up-Wii-U-Pro-controller/#prerequisites", 
            "text": "This will only work on Debian Jessie based distributions. So you either have to get the latest Raspbian version (Debian Jessie based) and use the RetroPie-Setup script or use RetroPie 3.5.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Setting-up-Wii-U-Pro-controller/#steps", 
            "text": "Either open the commandline on the pi by exiting emulationstation or ssh into it    Ensure your bluetooth adapter is setup correctly and working    Enter 'sudo bluetoothctl' command    The bluetooth control input should open, now type in the following commands in this order (you can use the TAB key to auto complete the mac address for the pair and connect command)    power on\nagent on press red sync button                                          # not a command press the button on the controller\nscan on\npair  MAC of the found wiimote, use TAB for autocompletion      # note: we do not explicitly connect, we just pair!\nconnect  MAC of the wiimote                                     # there seems to be a pretty short timeout, so execute this immediately after the pairing command\ntrust  MAC of the wiimote \ndisconnect  MAC of the wiimote   Now you're done, press any button on the controller and it should connect, press the power button and it should disconnect, it also persists after a reboot", 
            "title": "Steps"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/", 
            "text": "About\n\n\nThree different tutorials to help get your wiimotes/nunchuck/classic controllers etc.. to work with RetroPie. \n\n\nMethod 1\n uses wminput and cwiid to get the wiimotes to connect. Its fairly simple method to follow with easy instructions to follow. I recommend this one for beginners who are new to RetroPie and don't want to dabble too much with linux.   \n\n\nMethod 2\n uses MoltenGamepad which is described as a flexible input device remapper, geared towards gamepads. This method is also simple to follow along if you can't get the first method working.  \n\n\nMethod 3\n was the original tutorial using xwiimote before we found and developed easier ways of connecting wiimotes for use with RetroPie. It is simply listed here for those wishing to still view it. \n\n\n\n\nMethod 1 (wminput and cwiid):\n\n\nThe basis of this method was taken from \nhere\n. It has however been slightly updated and modified to work with the current version of RetroPie(3.7). \n\n\nThis tutorial shows how to get one to four wiimotes (the controller of Nintendo Wii) running with RetroPie with or without a classic controller (attached to the wiimote).\n\n\nPrerequisites\n\n\n\n\n\n\nFor the following I assume that RetroPi was installed and is running with other controls (like keyboard, joystick etc.). I followed the excellent tutorial http://supernintendopi.wordpress.com/2013/01/23/an-a-to-z-beginners-guide-to-installing-retropie-on-a-raspberry-pi/  for this (using the \u201cRetroPie Project SD Card Image\u201d).\n\n\n\n\n\n\nYou have a blue-tooth dongle (sometimes called blue-tooth adapter). For a list of dongles known to work with Raspberry Pi see http://elinux.org/RPi_USB_Bluetooth_adapters#Working_Bluetooth_adapters ).\n\n\n\n\n\n\nI can confirm putting the bluetooth adapter into a USB 2.0 powered hub works. Your results may vary though depending on your hardware.      \n\n\nIts important to update RetroPie to the latest version to avoid problems later down in the tutorial. Type the following into the command line:\n\n\ncd RetroPie-Setup/\n\n\n\n\nIn this folder, we will load up the Retropie post install script:\n\n\n sudo ./retropie_setup.sh\n\n\n\n\nIn the menu, choose to update the RetroPie-Setup script (option U) first. The pi will connect to the internet and fetch the latest version. After that's done, choose Binary-based installation (option 1). Depending on your pi version, this can take a while. On a pi zero, it took about 30 minutes.  \n\n\nInstallation\n\n\nNow install the needed parts:\n\n\nsudo apt-get install bluetooth vorbis-tools python-cwiid wminput\n\n\n\n\nGetting the wiimotes to work\n\n\nuinput device needs to work with non-root users. To do so, create a wiimote rule file.\n\n\nsudo tee /etc/udev/rules.d/wiimote.rules \n EOF\nKERNEL==\nuinput\n, MODE=\n0666\n\nEOF\n\n\n\n\nThat's the rule implementation done. Save the text file with \nCTRL + X\n and press \nY\n to confirm. To make this change active, reboot the Raspberry Pi, or paste this command at the command line:\n\n\nsudo service udev restart\n\n\n\n\nCheck that the bluetooth dongle works with the command below:\n\n\n/etc/init.d/bluetooth status\n\n\n\n\nYou should get something similar to the below output which returns that the bluetooth is working.\n\n\n\u25cf bluetooth.service - Bluetooth service\n   Loaded: loaded (/lib/systemd/system/bluetooth.service; enabled)\n   Active: active (running) since Tue 2016-03-22 16:10:39 GMT; 33min ago\n     Docs: man:bluetoothd(8)\n Main PID: 337 (bluetoothd)\n   Status: \nRunning\n\n   CGroup: /system.slice/bluetooth.service\n           \u2514\u2500337 /usr/lib/bluetooth/bluetoothd\n\n\n\n\nCorrect usage of wminput\n\n\nFor every wiimote, we need one wminput command to map the wiimote (and the classic controller) buttons to something emulationstation and the emulators can work with. wminput comes with configuration files (in directory /etc/cwiid/wminput). I created my own configuration file, which works if you use a wiimote with or without a classic controller. Create the file wminput which will reside in our pi's home directory:\n\n\ntee /home/pi/mywminput \n EOF\n# Classic-Controller\nClassic.Dpad.X = ABS_X\nClassic.Dpad.Y = ABS_Y\nClassic.LStick.X = ABS_HAT0X\nClassic.LStick.Y = ABS_HAT0Y\nClassic.RStick.X = ABS_HAT1X\nClassic.RStick.Y = ABS_HAT1Y\nClassic.A = BTN_A\nClassic.B = BTN_B\nClassic.X = BTN_X\nClassic.Y = BTN_Y\nClassic.Minus = BTN_SELECT\nClassic.Plus  = BTN_START\nClassic.Home  = BTN_MODE\nClassic.L  = BTN_TL\nClassic.R  = BTN_TR\nClassic.ZL = BTN_TL2\nClassic.ZR = BTN_TR2\n\n# WiiMote\nWiimote.A       = BTN_A\nWiimote.B       = BTN_B\nWiimote.Dpad.X      = ABS_Y\nWiimote.Dpad.Y      = -ABS_X\nWiimote.Minus   = BTN_SELECT\nWiimote.Plus    = BTN_START\nWiimote.Home    = BTN_MODE\nWiimote.1       = BTN_X\nWiimote.2       = BTN_Y\n\n# Nunchuk\nNunchuk.C = BTN_C\nNunchuk.Z = BTN_Z\nEOF\n\n\n\n\nIf you want your WiiMotes giving a connection status, just add an additional line to your \nmywminput\n file:\n\n\nPlugin.led.Led1 = 1\n#Plugin.led.Led2 = 1\n#Plugin.led.Led3 = 1\n#Plugin.led.Led4 = 1\n\n\n\n\nYou probably also want different LEDs active on two controllers, which means you have to provide different \nmywminput\n files to wminput, e.g. \nmywminputA\n, \nmywminputB\n etc with \nLED1\n and another with \nLED2\n activated. In the above example, \nLED 1\n is activated and \nLED's 2\n, \n3\n and \n4\n are commented out. You can replace the above example with your chosen \nLED\n status. \n\n\nUpdated Note\n: I've had problems using the above button layout with a classic controller. It will cause the button remapping which we will do later in emulationstation to be off. I fixed this by just copy pasting the classic controls only. (I will use the classic controller to control everything and have no intention of using any buttons on the actual wiimote itself).\n\n\nClassic.Dpad.X = ABS_X\nClassic.Dpad.Y = ABS_Y\nClassic.LStick.X = ABS_HAT0X\nClassic.LStick.Y = ABS_HAT0Y\nClassic.RStick.X = ABS_HAT1X\nClassic.RStick.Y = ABS_HAT1Y\nClassic.A = BTN_A\nClassic.B = BTN_B\nClassic.X = BTN_X\nClassic.Y = BTN_Y\nClassic.Minus = BTN_SELECT\nClassic.Plus  = BTN_START\nClassic.Home  = BTN_MODE\nClassic.L  = BTN_TL\nClassic.R  = BTN_TR\nClassic.ZL = BTN_TL2\nClassic.ZR = BTN_TR2\nPlugin.led.Led1 = 1\n\n\n\n\nQuick and Dirty Wiimote Configuration (Option A)\n\n\nIf you don't mind registering your wiimotes each time you restart your raspberrypi (or maybe you want the opportunity to use new wiimotes each time), you can save this script as \"/home/pi/bin/attachwii.sh\":\n\n\n#! /bin/bash\n\nttl=30\nalert=\n/home/pi/complete.oga\n\nfail=\n/home/pi/bark.oga\n\nbegin_sound=\n/home/pi/robot-blip.wav\n\nend_sound=\n/home/pi/service-logout.oga\n\nmac=\n\\([[:xdigit:]]\\{2\\}:\\)\\{5\\}[[:xdigit:]]\n # \n00:\n * 5 + \n00\n\ndevice_file=\n/tmp/wiimote-scan\n\n\nfunction play {\n    ogg123 $1 \n /dev/null \n\n}\n\nfunction match {\n    echo $1 | grep $2\n}\n\nfunction show {\n    if [[ -n $DEBUG ]]\n    then\n        echo $1\n    fi\n}\n\n# prevent scans from interfering with one another?\nkillall hcitool \n sleep 5\n\nif [[ `hcitool dev | grep hci` ]]\nthen\n    play $begin_sound \n /dev/null \n\n    echo \nBluetooth detected, starting scan with ${ttl}s timeout...\n\n\n    timeout $ttl hcitool scan | while read device\n    do\n        show \nfound $device\n\n\n        if [[ `match \n$device\n \nNintendo\n` ]]\n        then\n            show \nmatched Nintendo in $device\n\n\n            id=`echo $device | cut -d\n \n -f1`\n\n            if [[ `match $id $mac` \n \\\n                \n$id\n!=\n00:00:00:00:00:00\n ]]\n            then\n                show \nmatched MAC in $id\n\n\n                echo -n \nDetected Wiimote with ID: ${id}...\n\n                wminput -d -c /home/pi/mywminput $id \n\n                echo \n registered.\n\n                play $alert\n            fi\n        fi\n    done\n\n    play $end_sound\n    echo \nScan complete.\n\n\n    if [[ \n$rebootWithoutWiimotes\n == \n1\n \n -z `pidof wminput` ]]\n    then\n        echo \nNo Wiimotes detected!  Restarting...\n\n        sudo reboot\n    fi\nelse\n    echo \nBlue-tooth adapter not present!\n\n    play $fail\nfi\n\n\n\n\nReplace the sounds above with your own preferred sounds.\n\n\nWhen you restart your pi, press 1+2 on each wiimote after you hear the begin-sound.  After a few seconds, you'll hear a ding for each wiimote registered, followed by the end-sound.  If the bluetooth device isn't available, you'll hear a triple-ding warning you of the error.\n\n\nNow, you can skip directly to the \"Register Wiimotes Before Emulationstation Starts\" section.\n\n\nManual Wiimote Configuration (Option B)\n\n\nUse this method if you want to use the same wiimotes every time and don't want to re-register the wiimotes every time you restart your Raspberrypi.\n\n\nFirst, scan for the wiimotes.\n\n\nhcitool scan\n\n\n\n\nand press buttons 1+2 on your wiimote(s). After a short while, the output should be something like\n\n\nScanning ...\n    00:19:1D:87:90:38       Nintendo RVL-CNT-01\n    00:19:1D:88:EF:12       Nintendo RVL-CNT-01\n\n\n\n\nTake a note of the addresses of your wiimotes (the 00:19:1D:87:90:38 in the output above), we need that later.\nNote: If the scan is not successful try it again using the red sync button on the back.\n\n\nIf the Raspberry Pi is started and emulationstation starts, we want to register the wiimotes so they can be used with emulationstation and the emulators.\nI did it the following way:\n\n\nmkdir /home/pi/bin\n\n\n\n\nCreate the file /home/pi/bin/attachwii.sh by using the command below:\n\n\nnano /home/pi/bin/attachwii.sh\n\n\n\n\nand paste the following contents:\n\n\n#!/bin/bash\nsleep 1 # Wait until Bluetooth services are fully initialized\nhcitool dev | grep hci \n/dev/null\nif test $? -eq 0 ; then\n    wminput -d -c  /home/pi/mywminput 00:19:1D:92:90:38 \n\n    wminput -d -c  /home/pi/mywminput 00:19:1D:84:EF:33 \n\nelse\n    echo \nBlue-tooth adapter not present!\n\n    exit 1\nfi\n\n\n\n\nNote\n: You need one wminput line for every wiimote you want to use (i.e. the above is for two wiimotes)\n\n\nNote 2\n: You need to replace the addresses of the wiimotes above by the addresses of your wiimotes (shown by command \"hcitool scan\" as shown above).\n\n\nNote 3\n: I've had more success with 2 classic controllers pairing when both are sharing the same mywminput path. Since both wiimotes are using the same \"mywminput\" config, the LED status on port 1 of the wiimote will light up on both wiimotes. This is fine and does not interfere with anything. I simply use the light to tell me when and if both controllers are paired successfully. That is it's only purpose. I've had less success configuring a second mywinput to the 2nd controller so the LED lights differs on the 2nd controller. \n\n\nRegister Wiimotes Before Emulationstation Starts\n\n\nMake your wiimote detection script executable with:\n\n\nchmod 775 /home/pi/bin/attachwii.sh\n\n\n\n\nRetroPie 3.x \n 4.x\n\n\nTo start the script before emulationstation starts, edit the file: \n/etc/profile.d/10-emulationstation.sh\n (for 3.x) or \n/etc/profile.d/10-retropie.sh\n (for 4.x). Write the following line before the line with \n[ \"`tty`\" = \"/dev/tty1\" ]\n in it.\n\n\nrebootWithoutWiimotes=0 /home/pi/bin/attachwii.sh\n\n\n\n\nand save the file.\n\n\nTo make the Pi restart automatically if no wiimotes are detected, change rebootWithoutWiimotes to 1.\n\n\nRegister Wiimotes Before Emulationstation Starts (continued)\n\n\nIf you now do a reboot using \nsudo reboot\n, wait until emulationstation has been started. When it does, \npress 1+2\n on all of your wiimotes to register the wiimotes.\nIf it's your first time booting emulationstation then you will be automatically at the controller config menu. If you've configured a controller previously then get to the menu using a configured keyboard or an alternative controller. \n\n\nHold any button on the wiimote (or if your using classic controller only method) then any button the classic controller.\nIt should say \nNintendoWiimote\n. Define the controls and skip and inputs that aren't necessary. Click OK, by pressing A either on the wiimote or classic controller. If your using 2 or more wiimotes/classic controllers, you only need to define one classic controller/wiimote as they will ALL share the same controls.   \n\n\nYou can compare my config to yours if you'd like. Don't copy and paste my config though. emulationstation needs to create this file in the menu and copy/pasting this part may cause problems later.  \n\n\nIn emulationstation, the mapping is located here: \n/home/pi/.emulationstation/es_input.cfg\n:\n\n\n?xml version=\n1.0\n?\n\n\ninputList\n\n  \ninputAction type=\nonfinish\n\n    \ncommand\n/opt/retropie/supplementary/emulationstation/scripts/inputconfiguration.sh\n/command\n\n  \n/inputAction\n\n  \ninputConfig type=\njoystick\n deviceName=\nNintendo Wiimote\n\n    \ninput name=\npagedown\n type=\nbutton\n id=\n5\n value=\n1\n/\n\n    \ninput name=\nstart\n type=\nbutton\n id=\n9\n value=\n1\n/\n\n    \ninput name=\npageup\n type=\nbutton\n id=\n4\n value=\n1\n/\n\n    \ninput name=\nup\n type=\naxis\n id=\n1\n value=\n1\n/\n\n    \ninput name=\na\n type=\nbutton\n id=\n0\n value=\n1\n/\n\n    \ninput name=\nb\n type=\nbutton\n id=\n1\n value=\n1\n/\n\n    \ninput name=\ndown\n type=\naxis\n id=\n1\n value=\n-1\n/\n\n    \ninput name=\nright\n type=\naxis\n id=\n0\n value=\n1\n/\n\n    \ninput name=\nselect\n type=\nbutton\n id=\n8\n value=\n1\n/\n\n    \ninput name=\nleft\n type=\naxis\n id=\n0\n value=\n-1\n/\n\n  \n/inputConfig\n\n  \ninputConfig type=\nkeyboard\n deviceName=\nKeyboard\n\n    \ninput name=\nstart\n type=\nkey\n id=\n13\n value=\n1\n/\n\n    \ninput name=\nup\n type=\nkey\n id=\n1073741906\n value=\n1\n/\n\n    \ninput name=\na\n type=\nkey\n id=\n97\n value=\n1\n/\n\n    \ninput name=\nb\n type=\nkey\n id=\n115\n value=\n1\n/\n\n    \ninput name=\ndown\n type=\nkey\n id=\n1073741905\n value=\n1\n/\n\n    \ninput name=\nright\n type=\nkey\n id=\n1073741903\n value=\n1\n/\n\n    \ninput name=\nselect\n type=\nkey\n id=\n1073742053\n value=\n1\n/\n\n    \ninput name=\nleft\n type=\nkey\n id=\n1073741904\n value=\n1\n/\n\n  \n/inputConfig\n\n\n/inputList\n\n\n\n\n\nConfiguring RetroArch\n\n\nWe are going to define the controls for 2 classic controllers/wiimotes in retroarch's emulator config file:\n\n\nsudo nano /opt/retropie/emulators/retroarch/retroarch.cfg\n\n\n\n\nand at the end of the file, paste the following:\n\n\n# PLAYER 1\ninput_player1_joypad_index = \n0\n\ninput_player1_a_btn = \n0\n\ninput_player1_b_btn = \n1\n\ninput_player1_x_btn = \n2\n\ninput_player1_y_btn = \n3\n\ninput_player1_l_btn = \n4\n\ninput_player1_r_btn = \n5\n\ninput_player1_l2_btn = \n6\n\ninput_player1_r2_btn = \n7\n\ninput_player1_select_btn = \n8\n\ninput_player1_start_btn = \n9\n\ninput_player1_up_axis = \n+1\n\ninput_player1_down_axis = \n-1\n\ninput_player1_left_axis = \n-0\n\ninput_player1_right_axis = \n+0\n\ninput_player1_l_x_plus_axis = \n+2\n\ninput_player1_l_x_minus_axis = \n-2\n\ninput_player1_l_y_plus_axis = \n-3\n\ninput_player1_l_y_minus_axis = \n+3\n\ninput_player1_r_x_plus_axis = \n+4\n\ninput_player1_r_x_minus_axis = \n-4\n\ninput_player1_r_y_plus_axis = \n-5\n\ninput_player1_r_y_minus_axis = \n+5\n\n# PLAYER 2\ninput_player2_joypad_index = \n1\n\ninput_player2_a_btn = \n0\n\ninput_player2_b_btn = \n1\n\ninput_player2_x_btn = \n2\n\ninput_player2_y_btn = \n3\n\ninput_player2_l_btn = \n4\n\ninput_player2_r_btn = \n5\n\ninput_player2_l2_btn = \n6\n\ninput_player2_r2_btn = \n7\n\ninput_player2_select_btn = \n8\n\ninput_player2_start_btn = \n9\n\ninput_player2_up_axis = \n+1\n\ninput_player2_down_axis = \n-1\n\ninput_player2_left_axis = \n-0\n\ninput_player2_right_axis = \n+0\n\ninput_player2_l_x_plus_axis = \n+2\n\ninput_player2_l_x_minus_axis = \n-2\n\ninput_player2_l_y_plus_axis = \n-3\n\ninput_player2_l_y_minus_axis = \n+3\n\ninput_player2_r_x_plus_axis = \n+4\n\ninput_player2_r_x_minus_axis = \n-4\n\ninput_player2_r_y_plus_axis = \n-5\n\ninput_player2_r_y_minus_axis = \n+5\n\n\n\n\n\nWe need to make sure that the settings show only one time in retroarch.cfg file (i.e. if you have a line \n\n\ninput_player1_b_btn = \n0\n\n\n\n\n\nin the retroarch.cfg file before adding my lines, remove (or out-comment) the whole section. If you want to use more than two wiimotes, search for the line\n\n\ninput_player1_joypad_index = 0\n\n\n\n\nin retroarch.cfg and add the a corresponding line for the other wiimotes. For example you should have the following lines in retroarch.cfg for four wiimotes:\n\n\ninput_player1_joypad_index = 0\ninput_player2_joypad_index = 1\ninput_player3_joypad_index = 2\ninput_player4_joypad_index = 3\n\n\n\n\nFinally we are going to define a button to exit out the emulator.\n\n\nsudo nano /opt/retropie/configs/all/retroarch.cfg\n\n\n\n\nAdd the following lines at the end of the file:\n\n\n#savestate_auto_save = true\n#savestate_auto_load = true\ninput_enable_hotkey_btn = \n8\n\ninput_exit_emulator_btn = \n9\n\ninput_menu_toggle_btn = \n10\n\n\n\n\n\nIf you want to use savestates, then uncomment it out. When you quit a game through this method, your game state will be saved and reloaded. \n\n\nThe input commands specified above, allow you to exit out the emulator when \nSELECT\n and \nSTART\n are pressed at the same time. Pressing \nSELECT\n enables the hotkey whilst \nSTART\n is assigned to exit. Pressing \nSELECT\n and the \nHOME\n button however, will enable retroarch's menu for in game adjustments. \n\n\nDONE!\n\n*I highly encourage you to read the \"Known Issues\" section below for optional fixes that complement this method:\n\n\n\n\nKnown issues\n\n\n1. My SSH terminal is unusable and giving me socket control errors!\n\n\nIn some cases the connection with the Wiimotes through \nwminput\n daemon can \nstart flooding your terminal session with the message \nSocket connect error \n(control channel)\n. So far there is only one \n\nsolution\n: \nRedirecting the \nstandard out\n and \nstandard error\n respectively to \n/dev/null\n.\n\n\nwminput -d -q -c  /home/pi/mywminput XX:XX:XX:XX:XX:XX \n /dev/null 2\n1 \n\n\n\n\n\nAnyway, remember to undo this \nhack\n for debugging purposes.\n\n\nNote\n: I actively use SSH with my retropie so I had to apply this fix so I could use my SSH terminal without being hammered with socket control errors. \nThis is what my revised attachwii looks like for comparison. We created this file earlier in /home/pi/bin/attachwii.sh\n\n\n#!/bin/bash\nsleep 1 # Wait until Bluetooth services are fully initialized\nhcitool dev | grep hci \n/dev/null\nif test $? -eq 0 ; then\n    wminput -d -q -c  /home/pi/mywminput 00:19:1D:92:90:38 \n /dev/null 2\n1 \n\n    wminput -d -q -c  /home/pi/mywminput 00:19:1D:84:EF:33 \n /dev/null 2\n1 \n\nelse\n    echo \nBlue-tooth adapter not present!\n\n    exit 1\nfi\n\n\n\n\nAs you can see the addition of the -q is supposed to help keep wminput quiet. If you're doing troubleshooting of any kind remember to remove the \n /dev/null 2\n1 \n\"\n. \n\n\n2. My wiimotes paired the first time and now they won't pair or hold pairing!\n\n\nI have had some trouble with the fact that the USB Bluetooth adapter, after a restart, the bluetooth dongle would cease to scan for new devices. For me the following fix helped. It basically restarts the the bluetooth controller and enables it to scan before the \"attachwii\" script activates.\nTo apply the fix use the command below:\n\n\nsudo nano /etc/rc.local\n````\nDelete anything there and and overwrite with the following: \n\n```shell\n#!/bin/sh -e\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \nexit 0\n on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\nhciconfig hci0 up\nhciconfig hci0 pscan\nexit 0\n\n\n\n\n3. My retroarch controls aren't working/messed up!\n\n\nAfter creating the controls in emulationstation a .cfg was created and resides in the directory along with any other controllers configured here: \n/opt/retropie/configs/all/retroarch-joypads/\n\nMine is named \nNintendoWiimote.cfg\n. This is what my config file looks like:\n\n\ninput_device = \nNintendo Wiimote\n\ninput_driver = \nudev\n\ninput_r_btn = \n5\n\ninput_save_state_btn = \n5\n\ninput_l2_btn = \n6\n\ninput_start_btn = \n9\n\ninput_exit_emulator_btn = \n9\n\ninput_l_btn = \n4\n\ninput_load_state_btn = \n4\n\ninput_up_axis = \n+1\n\ninput_a_btn = \n0\n\ninput_b_btn = \n1\n\ninput_reset_btn = \n1\n\ninput_down_axis = \n-1\n\ninput_r2_btn = \n7\n\ninput_right_axis = \n+0\n\ninput_state_slot_increase_axis = \n+0\n\ninput_x_btn = \n2\n\ninput_menu_toggle_btn = \n2\n\ninput_select_btn = \n8\n\ninput_enable_hotkey_btn = \n8\n\ninput_y_btn = \n3\n\ninput_left_axis = \n-0\n\ninput_state_slot_decrease_axis = \n-0\n\n\n\n\n\nCompare the controls located here, to the ones we configured in Retroarch. If the values in your .cfg above is different then make sure to update the retroarch controls. For example, in my cfg, \ninput_b_btn = \"1\"\n but yours may be of a different value. \n\n\n# PLAYER 1\ninput_player1_joypad_index = \n0\n\ninput_player1_a_btn = \n0\n\ninput_player1_b_btn = \n1\n\ninput_player1_x_btn = \n2\n\ninput_player1_y_btn = \n3\n......\n..\n\n\n\n\nIf your using just the classic controls then you shouldn't be having this problem, but this is what I was referring to earlier when I said the controls may be \"off\" if you try and combine wiimote controls, nunchuck controls in addition to the classic controller to your mywminput file. \n\n\n4. I want to update my pi's bluetooth to the latest version!\n\n\nAs of writing, the version shipped with RetroPie 3.7 comes with Bluez version \n5.23.\n We will update it to the latest stretch version which is \n5.36.\n\n\nsudo nano /etc/apt/sources.list\n\n\n\n\nCopy and paste the \njessie\n line and then change jessie to \nstretch\n. Save with \nCTRL+X\n and \nY\n to confirm changes.  \n\n\nWe are going to tell APT to (still) default to jessie:\n\n\nsudo nano /etc/apt/apt.conf.d/40defaultrelease\n\n\n\n\nand paste in with the following contents:\n\n\nAPT::Default-Release \njessie\n;\n\n\n\n\nIn the terminal, do and update followed by the Bluez install:\n\n\nsudo apt-get update\n\n\n\n\nthen:\n\n\nsudo apt-get install bluez -t stretch\n\n\n\n\nBlueZ will be updated from 5.23 =\n 5.36. You can check the change with \nbluetoothd -v\n. \n\n\nNow you can undo the changes we made to \n/etc/apt/sources.list\n and  \n/etc/apt/apt.conf.d/40defaultrelease\n. \n\n\n\n\nMethod 2 (MoltenGamepad):\n\n\nThe original tutorial was posted by a user named rockfireredmoon on the RetroPie github. You can view it \nhere.\n\n\nYou can view more information about MoltenGamepad \nhere.\n\n\nIt's on a github repository which we will need to copy onto our Pi. \n\n\nIn the terminal, paste the command:\n\n\nsudo apt-get install git-core -y\n\n\n\n\nfollowed by:\n\n\ngit clone https://github.com/jgeumlek/MoltenGamepad\n\n\n\n\nMove to the MoltenGamepad folder:\n\n\ncd MoltenGamepad/\n\n\n\n\nLet's try making the MoltenGamepad binary file:\n\n\nmake eventlists\n\n\n\n\nfollowed by:\n\n\nmake\n\n\n\n\nOnce completed, we should have our MoltenGamepad binary file. You can check this with the command terminal command \nls\n \n\n\nLet's copy this to where it needs to go. We should already be in the MoltenGamepad directory.\n\n\nsudo cp moltengamepad /usr/sbin\n\n\n\n\nWe are going to need to create a system service for MoltenGamepad. \nLets create the file:\n\n\nsudo nano /lib/systemd/system/moltengamepad.service\n\n\n\n\nand paste in:\n\n\n[Unit]\nDescription=MoltenGamepad\nAfter=network.target\nAfter=bluetooth.target\n\n[Service]\nType=forking\nPIDFile=/var/run/moltengamepad.pid\nEnvironment=\nXDG_CONFIG_HOME=/etc/moltengamepad\n\nExecStart=/usr/sbin/moltengamepad --daemon --pidfile /var/run/moltengamepad.pid\nExecStop=/usr/bin/kill $MAINPID\n\n[Install]\nWantedBy=default.target\n\n\n\n\nLets enable the service with the following command:\n\n\nsudo systemctl enable moltengamepad\n\n\n\n\nand lets make the settings permanent by rebooting:\n\n\nsudo reboot\n\n\n\n\nThats MoltenGamepad installed, but we need to pair our wiimotes with \nbluetoothctl\n. Nothing fancy, just simple bluetooth pairing in linux.\n\n\nLets first load the hid-wiimote kernel module:\n\n\nsudo modprobe hid-wiimote\n\n\n\n\nfollwed by the bluetooth protocol:\n\n\nsudo bluetoothctl\n\n\n\n\nThe following was taken from the bluetooth page on the \narchlinux wiki\n. You can view it here under the \"Configuration via the CLI\"\n\n\nBluetoothctl\n\n\nPairing a device from the shell is one of the simplest and most reliable options. The exact procedure depends on the devices involved and their input functionality. What follows is a general outline of pairing a device using \n/usr/bin/bluetoothctl\n:\n\n Start the \nbluetoothctl\n interactive command. There one can input \nhelp\n to get a list of available commands.\n\n Turn the power to the controller on by entering \npower on\n. It is off by default.\n\n Enter device discovery mode with \nscan on\n command if device is not yet on the list.\n\n Turn the agent on with \nagent on\n.\n\n Enter \npair MAC Address\n to do the pairing (tab completion works).\n\n If using a device without a PIN, one may need to manually trust the device before it can reconnect successfully. Enter \ntrust MAC Address\n to do so.\n\n Finally, use \nconnect MAC_address\n to establish a connection.\n\n An example session may look this way:\n\n\n# bluetoothctl \n[NEW] Controller 00:10:20:30:40:50 pi [default]\n[bluetooth]# agent KeyboardOnly \nAgent registered\n[bluetooth]# default-agent \nDefault agent request successful\n[bluetooth]# scan on\nDiscovery started\n[CHG] Controller 00:10:20:30:40:50 Discovering: yes\n[NEW] Device 00:12:34:56:78:90 myLino\n[CHG] Device 00:12:34:56:78:90 LegacyPairing: yes\n[bluetooth]# pair 00:12:34:56:78:90\nAttempting to pair with 00:12:34:56:78:90\n[CHG] Device 00:12:34:56:78:90 Connected: yes\n[CHG] Device 00:12:34:56:78:90 Connected: no\n[CHG] Device 00:12:34:56:78:90 Connected: yes\nRequest PIN code\n[agent] Enter PIN code: 1234\n[CHG] Device 00:12:34:56:78:90 Paired: yes\nPairing successful\n[CHG] Device 00:12:34:56:78:90 Connected: no\n\n\n\n\nAll we need to do is pair the wiimotes and MoltenGamepad will handle any extra devices such as Classic Controllers, Nunchuck, Wii Balance Board etc.\n\n\nYou can start emulationstation directly from the terminal by typing in \nemulationstation\n\n\nYou can now use ES the map all the buttons as you wish in the normal way.\n\n\nSome notes\n:\nThe original tutorial stated that once the initial pairing was completed, you wont need to manually pair and enter the commands in the terminal. \n\n\n\n\nreboot\n\n\n\"Press a key once to connect, then again to activate moltengamepad.\"\n\n\n\n\nI couldn't quite get mine to pair from a cold boot. Currently I still have to use the bluetoothctl \nconnect\n command to pair my wiimotes attached to Classic Controlers and then manually start emulationstation from the terminal for the pairing to work. Your experience may vary however.\n\n\nI am currently working on a script to automate the the pairing process without the need to press any buttons at all when EmulationStation starts to activate MoltenGamepad. At the moment its a bit hit and miss. I will update the tutorial once I've ironed the kinks out. :) \n\n\nYou may want to read further into MoltenGamepad's controller documentation which you can view \nhere.\n. It has a few examples, and like I mentioned above may create one for this method adding the LED Status as mentioned in Method 2. Stay tuned.  \n\n\nI also encourage anyone to edit this page and any other page if you have valid useful information that can make other Pi users have an easier time with connecting devices for use with RetroPie.\n\n\n\n\nMethod 3 OLD (xwiimote):\n\n\nHi there,\n\n\nwhile trying to associate a non official wiimote classic controller, I found this: \nhttp://github.com/dvdhrm/xwiimote\n.\nSince recent kernel releases (including the one used by RetroPie), an optional module, \nhid-wiimote\n can be loaded using the command \nmodprobe hid-wiimote\n, then you use the command \nsudo hidd --search\n to find the wiimote without a pin (bluez is not good at this, asking for a pin), and in the syslog :\n\n\nJan 18 21:55:21 raspberrypi hidd: New HID device 00:18:00:B2:F5:35 (Nintendo RVL-CNT-01)\nJan 18 21:55:21 raspberrypi kernel: [168934.199087] wiimote 0005:057E:0306.0007: hidraw0: BLUETOOTH HID v3a.1c Gamepad [Nintendo RVL-CNT-01] on 00:1A:7D:DA:71:13\nJan 18 21:55:21 raspberrypi kernel: [168934.200264] input: Nintendo Wii Remote Accelerometer as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input30\nJan 18 21:55:21 raspberrypi kernel: [168934.201753] input: Nintendo Wii Remote IR as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input31\nJan 18 21:55:21 raspberrypi kernel: [168934.213406] input: Nintendo Wii Remote as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input32\nJan 18 21:55:22 raspberrypi kernel: [168935.216422] input: Nintendo Wii Remote Extension as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input33\nJan 18 21:55:22 raspberrypi kernel: [168935.223466] input: Nintendo Wii Remote Motion+ as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input34\nJan 18 21:55:22 raspberrypi kernel: [168935.224051] wiimote 0005:057E:0306.0007: New device registered\n\n\n\n\nYou can run a test with \nevtest\n or \nxwiishow\n.\n\n\nPlease note \nthis comment\n:\n\n\nActually, the hid-wiimote included in 3.6.y kernel is buggy.\nHere's the version I use: \nhttps://github.com/Alex131089/raspberrypi-linux/compare/raspberrypi:rpi-3.6.y...rpi-3.6.y-hid-wiimote\n\n\nBut to make the classic controller work with my remote, \nhttp://www.thinkgeek.com/product/f3a7/\n, I had to force ext as WIICLASSIC, so it's a bit hacky for this part ; the rest is only bug fix (from 3.11 version) / adaptation to be working with RetroArch (D-Pad).\n\n\nAlso, while a simple \nhidd --search\n handles the connection, it doesn't handle the Wii leds enumeration, I'll try to write a script that continuously search for specified Wiimote (or all) and set the right leds.", 
            "title": "Wiimotes with classic controllers"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#about", 
            "text": "Three different tutorials to help get your wiimotes/nunchuck/classic controllers etc.. to work with RetroPie.   Method 1  uses wminput and cwiid to get the wiimotes to connect. Its fairly simple method to follow with easy instructions to follow. I recommend this one for beginners who are new to RetroPie and don't want to dabble too much with linux.     Method 2  uses MoltenGamepad which is described as a flexible input device remapper, geared towards gamepads. This method is also simple to follow along if you can't get the first method working.    Method 3  was the original tutorial using xwiimote before we found and developed easier ways of connecting wiimotes for use with RetroPie. It is simply listed here for those wishing to still view it.", 
            "title": "About"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#method-1-wminput-and-cwiid", 
            "text": "The basis of this method was taken from  here . It has however been slightly updated and modified to work with the current version of RetroPie(3.7).   This tutorial shows how to get one to four wiimotes (the controller of Nintendo Wii) running with RetroPie with or without a classic controller (attached to the wiimote).", 
            "title": "Method 1 (wminput and cwiid):"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#prerequisites", 
            "text": "For the following I assume that RetroPi was installed and is running with other controls (like keyboard, joystick etc.). I followed the excellent tutorial http://supernintendopi.wordpress.com/2013/01/23/an-a-to-z-beginners-guide-to-installing-retropie-on-a-raspberry-pi/  for this (using the \u201cRetroPie Project SD Card Image\u201d).    You have a blue-tooth dongle (sometimes called blue-tooth adapter). For a list of dongles known to work with Raspberry Pi see http://elinux.org/RPi_USB_Bluetooth_adapters#Working_Bluetooth_adapters ).    I can confirm putting the bluetooth adapter into a USB 2.0 powered hub works. Your results may vary though depending on your hardware.        Its important to update RetroPie to the latest version to avoid problems later down in the tutorial. Type the following into the command line:  cd RetroPie-Setup/  In this folder, we will load up the Retropie post install script:   sudo ./retropie_setup.sh  In the menu, choose to update the RetroPie-Setup script (option U) first. The pi will connect to the internet and fetch the latest version. After that's done, choose Binary-based installation (option 1). Depending on your pi version, this can take a while. On a pi zero, it took about 30 minutes.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#installation", 
            "text": "Now install the needed parts:  sudo apt-get install bluetooth vorbis-tools python-cwiid wminput", 
            "title": "Installation"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#getting-the-wiimotes-to-work", 
            "text": "uinput device needs to work with non-root users. To do so, create a wiimote rule file.  sudo tee /etc/udev/rules.d/wiimote.rules   EOF\nKERNEL== uinput , MODE= 0666 \nEOF  That's the rule implementation done. Save the text file with  CTRL + X  and press  Y  to confirm. To make this change active, reboot the Raspberry Pi, or paste this command at the command line:  sudo service udev restart  Check that the bluetooth dongle works with the command below:  /etc/init.d/bluetooth status  You should get something similar to the below output which returns that the bluetooth is working.  \u25cf bluetooth.service - Bluetooth service\n   Loaded: loaded (/lib/systemd/system/bluetooth.service; enabled)\n   Active: active (running) since Tue 2016-03-22 16:10:39 GMT; 33min ago\n     Docs: man:bluetoothd(8)\n Main PID: 337 (bluetoothd)\n   Status:  Running \n   CGroup: /system.slice/bluetooth.service\n           \u2514\u2500337 /usr/lib/bluetooth/bluetoothd", 
            "title": "Getting the wiimotes to work"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#correct-usage-of-wminput", 
            "text": "For every wiimote, we need one wminput command to map the wiimote (and the classic controller) buttons to something emulationstation and the emulators can work with. wminput comes with configuration files (in directory /etc/cwiid/wminput). I created my own configuration file, which works if you use a wiimote with or without a classic controller. Create the file wminput which will reside in our pi's home directory:  tee /home/pi/mywminput   EOF\n# Classic-Controller\nClassic.Dpad.X = ABS_X\nClassic.Dpad.Y = ABS_Y\nClassic.LStick.X = ABS_HAT0X\nClassic.LStick.Y = ABS_HAT0Y\nClassic.RStick.X = ABS_HAT1X\nClassic.RStick.Y = ABS_HAT1Y\nClassic.A = BTN_A\nClassic.B = BTN_B\nClassic.X = BTN_X\nClassic.Y = BTN_Y\nClassic.Minus = BTN_SELECT\nClassic.Plus  = BTN_START\nClassic.Home  = BTN_MODE\nClassic.L  = BTN_TL\nClassic.R  = BTN_TR\nClassic.ZL = BTN_TL2\nClassic.ZR = BTN_TR2\n\n# WiiMote\nWiimote.A       = BTN_A\nWiimote.B       = BTN_B\nWiimote.Dpad.X      = ABS_Y\nWiimote.Dpad.Y      = -ABS_X\nWiimote.Minus   = BTN_SELECT\nWiimote.Plus    = BTN_START\nWiimote.Home    = BTN_MODE\nWiimote.1       = BTN_X\nWiimote.2       = BTN_Y\n\n# Nunchuk\nNunchuk.C = BTN_C\nNunchuk.Z = BTN_Z\nEOF  If you want your WiiMotes giving a connection status, just add an additional line to your  mywminput  file:  Plugin.led.Led1 = 1\n#Plugin.led.Led2 = 1\n#Plugin.led.Led3 = 1\n#Plugin.led.Led4 = 1  You probably also want different LEDs active on two controllers, which means you have to provide different  mywminput  files to wminput, e.g.  mywminputA ,  mywminputB  etc with  LED1  and another with  LED2  activated. In the above example,  LED 1  is activated and  LED's 2 ,  3  and  4  are commented out. You can replace the above example with your chosen  LED  status.   Updated Note : I've had problems using the above button layout with a classic controller. It will cause the button remapping which we will do later in emulationstation to be off. I fixed this by just copy pasting the classic controls only. (I will use the classic controller to control everything and have no intention of using any buttons on the actual wiimote itself).  Classic.Dpad.X = ABS_X\nClassic.Dpad.Y = ABS_Y\nClassic.LStick.X = ABS_HAT0X\nClassic.LStick.Y = ABS_HAT0Y\nClassic.RStick.X = ABS_HAT1X\nClassic.RStick.Y = ABS_HAT1Y\nClassic.A = BTN_A\nClassic.B = BTN_B\nClassic.X = BTN_X\nClassic.Y = BTN_Y\nClassic.Minus = BTN_SELECT\nClassic.Plus  = BTN_START\nClassic.Home  = BTN_MODE\nClassic.L  = BTN_TL\nClassic.R  = BTN_TR\nClassic.ZL = BTN_TL2\nClassic.ZR = BTN_TR2\nPlugin.led.Led1 = 1", 
            "title": "Correct usage of wminput"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#quick-and-dirty-wiimote-configuration-option-a", 
            "text": "If you don't mind registering your wiimotes each time you restart your raspberrypi (or maybe you want the opportunity to use new wiimotes each time), you can save this script as \"/home/pi/bin/attachwii.sh\":  #! /bin/bash\n\nttl=30\nalert= /home/pi/complete.oga \nfail= /home/pi/bark.oga \nbegin_sound= /home/pi/robot-blip.wav \nend_sound= /home/pi/service-logout.oga \nmac= \\([[:xdigit:]]\\{2\\}:\\)\\{5\\}[[:xdigit:]]  #  00:  * 5 +  00 \ndevice_file= /tmp/wiimote-scan \n\nfunction play {\n    ogg123 $1   /dev/null  \n}\n\nfunction match {\n    echo $1 | grep $2\n}\n\nfunction show {\n    if [[ -n $DEBUG ]]\n    then\n        echo $1\n    fi\n}\n\n# prevent scans from interfering with one another?\nkillall hcitool   sleep 5\n\nif [[ `hcitool dev | grep hci` ]]\nthen\n    play $begin_sound   /dev/null  \n    echo  Bluetooth detected, starting scan with ${ttl}s timeout... \n\n    timeout $ttl hcitool scan | while read device\n    do\n        show  found $device \n\n        if [[ `match  $device   Nintendo ` ]]\n        then\n            show  matched Nintendo in $device \n\n            id=`echo $device | cut -d    -f1`\n\n            if [[ `match $id $mac`   \\\n                 $id != 00:00:00:00:00:00  ]]\n            then\n                show  matched MAC in $id \n\n                echo -n  Detected Wiimote with ID: ${id}... \n                wminput -d -c /home/pi/mywminput $id  \n                echo   registered. \n                play $alert\n            fi\n        fi\n    done\n\n    play $end_sound\n    echo  Scan complete. \n\n    if [[  $rebootWithoutWiimotes  ==  1    -z `pidof wminput` ]]\n    then\n        echo  No Wiimotes detected!  Restarting... \n        sudo reboot\n    fi\nelse\n    echo  Blue-tooth adapter not present! \n    play $fail\nfi  Replace the sounds above with your own preferred sounds.  When you restart your pi, press 1+2 on each wiimote after you hear the begin-sound.  After a few seconds, you'll hear a ding for each wiimote registered, followed by the end-sound.  If the bluetooth device isn't available, you'll hear a triple-ding warning you of the error.  Now, you can skip directly to the \"Register Wiimotes Before Emulationstation Starts\" section.", 
            "title": "Quick and Dirty Wiimote Configuration (Option A)"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#manual-wiimote-configuration-option-b", 
            "text": "Use this method if you want to use the same wiimotes every time and don't want to re-register the wiimotes every time you restart your Raspberrypi.  First, scan for the wiimotes.  hcitool scan  and press buttons 1+2 on your wiimote(s). After a short while, the output should be something like  Scanning ...\n    00:19:1D:87:90:38       Nintendo RVL-CNT-01\n    00:19:1D:88:EF:12       Nintendo RVL-CNT-01  Take a note of the addresses of your wiimotes (the 00:19:1D:87:90:38 in the output above), we need that later.\nNote: If the scan is not successful try it again using the red sync button on the back.  If the Raspberry Pi is started and emulationstation starts, we want to register the wiimotes so they can be used with emulationstation and the emulators.\nI did it the following way:  mkdir /home/pi/bin  Create the file /home/pi/bin/attachwii.sh by using the command below:  nano /home/pi/bin/attachwii.sh  and paste the following contents:  #!/bin/bash\nsleep 1 # Wait until Bluetooth services are fully initialized\nhcitool dev | grep hci  /dev/null\nif test $? -eq 0 ; then\n    wminput -d -c  /home/pi/mywminput 00:19:1D:92:90:38  \n    wminput -d -c  /home/pi/mywminput 00:19:1D:84:EF:33  \nelse\n    echo  Blue-tooth adapter not present! \n    exit 1\nfi  Note : You need one wminput line for every wiimote you want to use (i.e. the above is for two wiimotes)  Note 2 : You need to replace the addresses of the wiimotes above by the addresses of your wiimotes (shown by command \"hcitool scan\" as shown above).  Note 3 : I've had more success with 2 classic controllers pairing when both are sharing the same mywminput path. Since both wiimotes are using the same \"mywminput\" config, the LED status on port 1 of the wiimote will light up on both wiimotes. This is fine and does not interfere with anything. I simply use the light to tell me when and if both controllers are paired successfully. That is it's only purpose. I've had less success configuring a second mywinput to the 2nd controller so the LED lights differs on the 2nd controller.", 
            "title": "Manual Wiimote Configuration (Option B)"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#register-wiimotes-before-emulationstation-starts", 
            "text": "Make your wiimote detection script executable with:  chmod 775 /home/pi/bin/attachwii.sh", 
            "title": "Register Wiimotes Before Emulationstation Starts"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#retropie-3x-4x", 
            "text": "To start the script before emulationstation starts, edit the file:  /etc/profile.d/10-emulationstation.sh  (for 3.x) or  /etc/profile.d/10-retropie.sh  (for 4.x). Write the following line before the line with  [ \"`tty`\" = \"/dev/tty1\" ]  in it.  rebootWithoutWiimotes=0 /home/pi/bin/attachwii.sh  and save the file.  To make the Pi restart automatically if no wiimotes are detected, change rebootWithoutWiimotes to 1.", 
            "title": "RetroPie 3.x &amp; 4.x"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#register-wiimotes-before-emulationstation-starts-continued", 
            "text": "If you now do a reboot using  sudo reboot , wait until emulationstation has been started. When it does,  press 1+2  on all of your wiimotes to register the wiimotes.\nIf it's your first time booting emulationstation then you will be automatically at the controller config menu. If you've configured a controller previously then get to the menu using a configured keyboard or an alternative controller.   Hold any button on the wiimote (or if your using classic controller only method) then any button the classic controller.\nIt should say  NintendoWiimote . Define the controls and skip and inputs that aren't necessary. Click OK, by pressing A either on the wiimote or classic controller. If your using 2 or more wiimotes/classic controllers, you only need to define one classic controller/wiimote as they will ALL share the same controls.     You can compare my config to yours if you'd like. Don't copy and paste my config though. emulationstation needs to create this file in the menu and copy/pasting this part may cause problems later.    In emulationstation, the mapping is located here:  /home/pi/.emulationstation/es_input.cfg :  ?xml version= 1.0 ?  inputList \n   inputAction type= onfinish \n     command /opt/retropie/supplementary/emulationstation/scripts/inputconfiguration.sh /command \n   /inputAction \n   inputConfig type= joystick  deviceName= Nintendo Wiimote \n     input name= pagedown  type= button  id= 5  value= 1 / \n     input name= start  type= button  id= 9  value= 1 / \n     input name= pageup  type= button  id= 4  value= 1 / \n     input name= up  type= axis  id= 1  value= 1 / \n     input name= a  type= button  id= 0  value= 1 / \n     input name= b  type= button  id= 1  value= 1 / \n     input name= down  type= axis  id= 1  value= -1 / \n     input name= right  type= axis  id= 0  value= 1 / \n     input name= select  type= button  id= 8  value= 1 / \n     input name= left  type= axis  id= 0  value= -1 / \n   /inputConfig \n   inputConfig type= keyboard  deviceName= Keyboard \n     input name= start  type= key  id= 13  value= 1 / \n     input name= up  type= key  id= 1073741906  value= 1 / \n     input name= a  type= key  id= 97  value= 1 / \n     input name= b  type= key  id= 115  value= 1 / \n     input name= down  type= key  id= 1073741905  value= 1 / \n     input name= right  type= key  id= 1073741903  value= 1 / \n     input name= select  type= key  id= 1073742053  value= 1 / \n     input name= left  type= key  id= 1073741904  value= 1 / \n   /inputConfig  /inputList", 
            "title": "Register Wiimotes Before Emulationstation Starts (continued)"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#configuring-retroarch", 
            "text": "We are going to define the controls for 2 classic controllers/wiimotes in retroarch's emulator config file:  sudo nano /opt/retropie/emulators/retroarch/retroarch.cfg  and at the end of the file, paste the following:  # PLAYER 1\ninput_player1_joypad_index =  0 \ninput_player1_a_btn =  0 \ninput_player1_b_btn =  1 \ninput_player1_x_btn =  2 \ninput_player1_y_btn =  3 \ninput_player1_l_btn =  4 \ninput_player1_r_btn =  5 \ninput_player1_l2_btn =  6 \ninput_player1_r2_btn =  7 \ninput_player1_select_btn =  8 \ninput_player1_start_btn =  9 \ninput_player1_up_axis =  +1 \ninput_player1_down_axis =  -1 \ninput_player1_left_axis =  -0 \ninput_player1_right_axis =  +0 \ninput_player1_l_x_plus_axis =  +2 \ninput_player1_l_x_minus_axis =  -2 \ninput_player1_l_y_plus_axis =  -3 \ninput_player1_l_y_minus_axis =  +3 \ninput_player1_r_x_plus_axis =  +4 \ninput_player1_r_x_minus_axis =  -4 \ninput_player1_r_y_plus_axis =  -5 \ninput_player1_r_y_minus_axis =  +5 \n# PLAYER 2\ninput_player2_joypad_index =  1 \ninput_player2_a_btn =  0 \ninput_player2_b_btn =  1 \ninput_player2_x_btn =  2 \ninput_player2_y_btn =  3 \ninput_player2_l_btn =  4 \ninput_player2_r_btn =  5 \ninput_player2_l2_btn =  6 \ninput_player2_r2_btn =  7 \ninput_player2_select_btn =  8 \ninput_player2_start_btn =  9 \ninput_player2_up_axis =  +1 \ninput_player2_down_axis =  -1 \ninput_player2_left_axis =  -0 \ninput_player2_right_axis =  +0 \ninput_player2_l_x_plus_axis =  +2 \ninput_player2_l_x_minus_axis =  -2 \ninput_player2_l_y_plus_axis =  -3 \ninput_player2_l_y_minus_axis =  +3 \ninput_player2_r_x_plus_axis =  +4 \ninput_player2_r_x_minus_axis =  -4 \ninput_player2_r_y_plus_axis =  -5 \ninput_player2_r_y_minus_axis =  +5   We need to make sure that the settings show only one time in retroarch.cfg file (i.e. if you have a line   input_player1_b_btn =  0   in the retroarch.cfg file before adding my lines, remove (or out-comment) the whole section. If you want to use more than two wiimotes, search for the line  input_player1_joypad_index = 0  in retroarch.cfg and add the a corresponding line for the other wiimotes. For example you should have the following lines in retroarch.cfg for four wiimotes:  input_player1_joypad_index = 0\ninput_player2_joypad_index = 1\ninput_player3_joypad_index = 2\ninput_player4_joypad_index = 3  Finally we are going to define a button to exit out the emulator.  sudo nano /opt/retropie/configs/all/retroarch.cfg  Add the following lines at the end of the file:  #savestate_auto_save = true\n#savestate_auto_load = true\ninput_enable_hotkey_btn =  8 \ninput_exit_emulator_btn =  9 \ninput_menu_toggle_btn =  10   If you want to use savestates, then uncomment it out. When you quit a game through this method, your game state will be saved and reloaded.   The input commands specified above, allow you to exit out the emulator when  SELECT  and  START  are pressed at the same time. Pressing  SELECT  enables the hotkey whilst  START  is assigned to exit. Pressing  SELECT  and the  HOME  button however, will enable retroarch's menu for in game adjustments.   DONE! \n*I highly encourage you to read the \"Known Issues\" section below for optional fixes that complement this method:", 
            "title": "Configuring RetroArch"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#known-issues", 
            "text": "1. My SSH terminal is unusable and giving me socket control errors!  In some cases the connection with the Wiimotes through  wminput  daemon can \nstart flooding your terminal session with the message  Socket connect error \n(control channel) . So far there is only one  solution : \nRedirecting the  standard out  and  standard error  respectively to  /dev/null .  wminput -d -q -c  /home/pi/mywminput XX:XX:XX:XX:XX:XX   /dev/null 2 1    Anyway, remember to undo this  hack  for debugging purposes.  Note : I actively use SSH with my retropie so I had to apply this fix so I could use my SSH terminal without being hammered with socket control errors. \nThis is what my revised attachwii looks like for comparison. We created this file earlier in /home/pi/bin/attachwii.sh  #!/bin/bash\nsleep 1 # Wait until Bluetooth services are fully initialized\nhcitool dev | grep hci  /dev/null\nif test $? -eq 0 ; then\n    wminput -d -q -c  /home/pi/mywminput 00:19:1D:92:90:38   /dev/null 2 1  \n    wminput -d -q -c  /home/pi/mywminput 00:19:1D:84:EF:33   /dev/null 2 1  \nelse\n    echo  Blue-tooth adapter not present! \n    exit 1\nfi  As you can see the addition of the -q is supposed to help keep wminput quiet. If you're doing troubleshooting of any kind remember to remove the   /dev/null 2 1  \" .   2. My wiimotes paired the first time and now they won't pair or hold pairing!  I have had some trouble with the fact that the USB Bluetooth adapter, after a restart, the bluetooth dongle would cease to scan for new devices. For me the following fix helped. It basically restarts the the bluetooth controller and enables it to scan before the \"attachwii\" script activates.\nTo apply the fix use the command below:  sudo nano /etc/rc.local\n````\nDelete anything there and and overwrite with the following: \n\n```shell\n#!/bin/sh -e\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will  exit 0  on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\nhciconfig hci0 up\nhciconfig hci0 pscan\nexit 0  3. My retroarch controls aren't working/messed up!  After creating the controls in emulationstation a .cfg was created and resides in the directory along with any other controllers configured here:  /opt/retropie/configs/all/retroarch-joypads/ \nMine is named  NintendoWiimote.cfg . This is what my config file looks like:  input_device =  Nintendo Wiimote \ninput_driver =  udev \ninput_r_btn =  5 \ninput_save_state_btn =  5 \ninput_l2_btn =  6 \ninput_start_btn =  9 \ninput_exit_emulator_btn =  9 \ninput_l_btn =  4 \ninput_load_state_btn =  4 \ninput_up_axis =  +1 \ninput_a_btn =  0 \ninput_b_btn =  1 \ninput_reset_btn =  1 \ninput_down_axis =  -1 \ninput_r2_btn =  7 \ninput_right_axis =  +0 \ninput_state_slot_increase_axis =  +0 \ninput_x_btn =  2 \ninput_menu_toggle_btn =  2 \ninput_select_btn =  8 \ninput_enable_hotkey_btn =  8 \ninput_y_btn =  3 \ninput_left_axis =  -0 \ninput_state_slot_decrease_axis =  -0   Compare the controls located here, to the ones we configured in Retroarch. If the values in your .cfg above is different then make sure to update the retroarch controls. For example, in my cfg,  input_b_btn = \"1\"  but yours may be of a different value.   # PLAYER 1\ninput_player1_joypad_index =  0 \ninput_player1_a_btn =  0 \ninput_player1_b_btn =  1 \ninput_player1_x_btn =  2 \ninput_player1_y_btn =  3 ......\n..  If your using just the classic controls then you shouldn't be having this problem, but this is what I was referring to earlier when I said the controls may be \"off\" if you try and combine wiimote controls, nunchuck controls in addition to the classic controller to your mywminput file.   4. I want to update my pi's bluetooth to the latest version!  As of writing, the version shipped with RetroPie 3.7 comes with Bluez version  5.23.  We will update it to the latest stretch version which is  5.36.  sudo nano /etc/apt/sources.list  Copy and paste the  jessie  line and then change jessie to  stretch . Save with  CTRL+X  and  Y  to confirm changes.    We are going to tell APT to (still) default to jessie:  sudo nano /etc/apt/apt.conf.d/40defaultrelease  and paste in with the following contents:  APT::Default-Release  jessie ;  In the terminal, do and update followed by the Bluez install:  sudo apt-get update  then:  sudo apt-get install bluez -t stretch  BlueZ will be updated from 5.23 =  5.36. You can check the change with  bluetoothd -v .   Now you can undo the changes we made to  /etc/apt/sources.list  and   /etc/apt/apt.conf.d/40defaultrelease .", 
            "title": "Known issues"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#method-2-moltengamepad", 
            "text": "The original tutorial was posted by a user named rockfireredmoon on the RetroPie github. You can view it  here.  You can view more information about MoltenGamepad  here.  It's on a github repository which we will need to copy onto our Pi.   In the terminal, paste the command:  sudo apt-get install git-core -y  followed by:  git clone https://github.com/jgeumlek/MoltenGamepad  Move to the MoltenGamepad folder:  cd MoltenGamepad/  Let's try making the MoltenGamepad binary file:  make eventlists  followed by:  make  Once completed, we should have our MoltenGamepad binary file. You can check this with the command terminal command  ls    Let's copy this to where it needs to go. We should already be in the MoltenGamepad directory.  sudo cp moltengamepad /usr/sbin  We are going to need to create a system service for MoltenGamepad. \nLets create the file:  sudo nano /lib/systemd/system/moltengamepad.service  and paste in:  [Unit]\nDescription=MoltenGamepad\nAfter=network.target\nAfter=bluetooth.target\n\n[Service]\nType=forking\nPIDFile=/var/run/moltengamepad.pid\nEnvironment= XDG_CONFIG_HOME=/etc/moltengamepad \nExecStart=/usr/sbin/moltengamepad --daemon --pidfile /var/run/moltengamepad.pid\nExecStop=/usr/bin/kill $MAINPID\n\n[Install]\nWantedBy=default.target  Lets enable the service with the following command:  sudo systemctl enable moltengamepad  and lets make the settings permanent by rebooting:  sudo reboot  Thats MoltenGamepad installed, but we need to pair our wiimotes with  bluetoothctl . Nothing fancy, just simple bluetooth pairing in linux.  Lets first load the hid-wiimote kernel module:  sudo modprobe hid-wiimote  follwed by the bluetooth protocol:  sudo bluetoothctl  The following was taken from the bluetooth page on the  archlinux wiki . You can view it here under the \"Configuration via the CLI\"  Bluetoothctl  Pairing a device from the shell is one of the simplest and most reliable options. The exact procedure depends on the devices involved and their input functionality. What follows is a general outline of pairing a device using  /usr/bin/bluetoothctl :  Start the  bluetoothctl  interactive command. There one can input  help  to get a list of available commands.  Turn the power to the controller on by entering  power on . It is off by default.  Enter device discovery mode with  scan on  command if device is not yet on the list.  Turn the agent on with  agent on .  Enter  pair MAC Address  to do the pairing (tab completion works).  If using a device without a PIN, one may need to manually trust the device before it can reconnect successfully. Enter  trust MAC Address  to do so.  Finally, use  connect MAC_address  to establish a connection.  An example session may look this way:  # bluetoothctl \n[NEW] Controller 00:10:20:30:40:50 pi [default]\n[bluetooth]# agent KeyboardOnly \nAgent registered\n[bluetooth]# default-agent \nDefault agent request successful\n[bluetooth]# scan on\nDiscovery started\n[CHG] Controller 00:10:20:30:40:50 Discovering: yes\n[NEW] Device 00:12:34:56:78:90 myLino\n[CHG] Device 00:12:34:56:78:90 LegacyPairing: yes\n[bluetooth]# pair 00:12:34:56:78:90\nAttempting to pair with 00:12:34:56:78:90\n[CHG] Device 00:12:34:56:78:90 Connected: yes\n[CHG] Device 00:12:34:56:78:90 Connected: no\n[CHG] Device 00:12:34:56:78:90 Connected: yes\nRequest PIN code\n[agent] Enter PIN code: 1234\n[CHG] Device 00:12:34:56:78:90 Paired: yes\nPairing successful\n[CHG] Device 00:12:34:56:78:90 Connected: no  All we need to do is pair the wiimotes and MoltenGamepad will handle any extra devices such as Classic Controllers, Nunchuck, Wii Balance Board etc.  You can start emulationstation directly from the terminal by typing in  emulationstation  You can now use ES the map all the buttons as you wish in the normal way.  Some notes :\nThe original tutorial stated that once the initial pairing was completed, you wont need to manually pair and enter the commands in the terminal.    reboot  \"Press a key once to connect, then again to activate moltengamepad.\"   I couldn't quite get mine to pair from a cold boot. Currently I still have to use the bluetoothctl  connect  command to pair my wiimotes attached to Classic Controlers and then manually start emulationstation from the terminal for the pairing to work. Your experience may vary however.  I am currently working on a script to automate the the pairing process without the need to press any buttons at all when EmulationStation starts to activate MoltenGamepad. At the moment its a bit hit and miss. I will update the tutorial once I've ironed the kinks out. :)   You may want to read further into MoltenGamepad's controller documentation which you can view  here. . It has a few examples, and like I mentioned above may create one for this method adding the LED Status as mentioned in Method 2. Stay tuned.    I also encourage anyone to edit this page and any other page if you have valid useful information that can make other Pi users have an easier time with connecting devices for use with RetroPie.", 
            "title": "Method 2 (MoltenGamepad):"
        }, 
        {
            "location": "/Wiimotes-with-classic-controllers/#method-3-old-xwiimote", 
            "text": "Hi there,  while trying to associate a non official wiimote classic controller, I found this:  http://github.com/dvdhrm/xwiimote .\nSince recent kernel releases (including the one used by RetroPie), an optional module,  hid-wiimote  can be loaded using the command  modprobe hid-wiimote , then you use the command  sudo hidd --search  to find the wiimote without a pin (bluez is not good at this, asking for a pin), and in the syslog :  Jan 18 21:55:21 raspberrypi hidd: New HID device 00:18:00:B2:F5:35 (Nintendo RVL-CNT-01)\nJan 18 21:55:21 raspberrypi kernel: [168934.199087] wiimote 0005:057E:0306.0007: hidraw0: BLUETOOTH HID v3a.1c Gamepad [Nintendo RVL-CNT-01] on 00:1A:7D:DA:71:13\nJan 18 21:55:21 raspberrypi kernel: [168934.200264] input: Nintendo Wii Remote Accelerometer as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input30\nJan 18 21:55:21 raspberrypi kernel: [168934.201753] input: Nintendo Wii Remote IR as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input31\nJan 18 21:55:21 raspberrypi kernel: [168934.213406] input: Nintendo Wii Remote as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input32\nJan 18 21:55:22 raspberrypi kernel: [168935.216422] input: Nintendo Wii Remote Extension as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input33\nJan 18 21:55:22 raspberrypi kernel: [168935.223466] input: Nintendo Wii Remote Motion+ as /devices/platform/bcm2708_usb/usb1/1-1/1-1.3/1-1.3:1.0/bluetooth/hci0/hci0:71/0005:057E:0306.0007/input/input34\nJan 18 21:55:22 raspberrypi kernel: [168935.224051] wiimote 0005:057E:0306.0007: New device registered  You can run a test with  evtest  or  xwiishow .  Please note  this comment :  Actually, the hid-wiimote included in 3.6.y kernel is buggy.\nHere's the version I use:  https://github.com/Alex131089/raspberrypi-linux/compare/raspberrypi:rpi-3.6.y...rpi-3.6.y-hid-wiimote  But to make the classic controller work with my remote,  http://www.thinkgeek.com/product/f3a7/ , I had to force ext as WIICLASSIC, so it's a bit hacky for this part ; the rest is only bug fix (from 3.11 version) / adaptation to be working with RetroArch (D-Pad).  Also, while a simple  hidd --search  handles the connection, it doesn't handle the Wii leds enumeration, I'll try to write a script that continuously search for specified Wiimote (or all) and set the right leds.", 
            "title": "Method 3 OLD (xwiimote):"
        }, 
        {
            "location": "/GPIO-Modules/", 
            "text": "Overview\n\n\nThe module for retro game controllers allows connecting various home computer joysticks and console gamepads to Raspberry Pi via GPIO with a minimal amount of extra hardware. The module consists of 2 drivers, each of which supports different types of controllers:\n\n\ngamecon_gpio_rpi\n:\n\n\n\n\nNES gamepads\n\n\nSNES gamepads and mouses\n\n\nPSX/PS2 gamepads, wheels and DDR controllers\n\n\nN64 controllers\n\n\nGamecube controllers\n\n\n\n\ndb9_gpio_rpi\n:\n\n\n\n\nAtari, Commodore, Amiga etc. DB9 multisystem joysticks\n\n\nSega Mega Drive (Genesis) pads\n\n\nSega Saturn controllers (Note: custom connector instead of DB9)\n\n\nAmiga CD32 pads\n\n\n\n\nInstallation\n\n\nThe easiest way to install the drivers is via RetroPie-Setup script by selecting \nManage Packages\n, then \nManage Driver Packages\n, then \ngamecondriver\n.\n\n\nAlternatively, .deb-packages for the drivers and kernel headers can be directly downloaded \nhere\n.\n\n\nConfiguration\n\n\nThe drivers are loaded/unloaded with \nmodprobe\n. More information and connection diagrams are found in the driver sub-pages and in provided READMEs.\n\n\n\n\ngamecon_gpio_rpi\n\n\nIntroduction\n\n\ngamecon_gpio_rpi\n is a kernel module which allows interfacing various retro gamepads with Raspberry Pi's GPIO. It's based on the \ngamecon\n module from Linux Input Driver project, but has some additions and modifications. The goal is make the driver simple but versatile, making it easy and cheap to use gamepads with Pi. Most pads can be connected with just a few wires, although controller sockets provide a more lasting way for those who have them.\n\n\nController support\n\n\nThe driver supports up to 4 controllers of the following types (can be mixed freely):\n\n\n\n\nNES gamepads\n\n\nSNES gamepads and mouses\n\n\nPSX/PS2 gamepads, wheels and DDR controllers\n\n\nN64 gamepads\n\n\nGamecube gamepads\n\n\n\n\nGPIO interface\n\n\nDepending on the number and type of pads, the interface needs 3 to 11 GPIO pins. Pi's GPIO data pins operate at 3.3V, and the Pi's 3.3V GPIO pin is rated at max 50mA (see \nhere\n for more info). This generates a few very important rules which should be read before connecting any gamepads.\n\n\n\n\n\n\nAll gamepads must use 3.3V supply regardless which they were designed for. Some older controllers (e.g. NES, SNES) originally used 5V, but they should operate fine with 3.3V (with a few exceptions - see FAQ). The Pi's 5V GPIO pin shouldn't be used without using level shifters or clamps on the input data pins, so don't use it unless you know what you are doing.\n\n\n\n\n\n\nThe current limit is sufficient for 4 normal controllers, but e.g. 3rd party pads with extra LEDs, fans, etc should be avoided if they are powered from the main supply.\n\n\n\n\n\n\nThe pinout summary can be seen below. The power and ground pins are common for all pads, thus requiring splitters (i.e. a breadboard + pinheaders) when using multiple pads. Detailed information on connecting the pads can be found at the module's README (\n/usr/share/doc/gamecon_gpio_rpi/README.gz\n).\n\n\nNOTE\n: Raspberry Pi Board revision 2 (all RPi variants manufactured after 09/2012) has different GPIO IDs for PAD1 \n PAD2 pins, which must be taken into account when loading the driver.\n\n\n\n\nThe actual interconnect (NES/SNES/N64) can be made from female-to-female jumper wires and a single conductor wires with the other end folded in double (see \nhere\n and \nhere\n). For PSX pads, the jumper wires are enough \nby themselves\n. The only hard one is GC pad, which must be opened to make a good connection for the wires.\n\n\nInstallation and usage\n\n\nAutomatic Installation\n\n\nThe easiest way to install the module is with the RetroPie-Setup script. Just remember to upgrade your firmware (\nsudo apt-get update; sudo apt-get upgrade\n) before installing the module, as it is built automatically using the configuration data from the latest RPi kernel. This also means that a firmware update afterwards can break the compatibility, but this is easily fixed by reconfiguration/update of the module (see FAQ).\n\n\nIn addition to install/update, RetroPie-Setup also contains an option to permanently enable configuration for 2 SNES pads connected to PAD2 \n PAD3 pins (designed for the RetroPie GPIO Adapter). This configures the driver as \ngamecon_gpio_rpi map=0,1,1,0\n for \nrev01\n boards and \ngamecon_gpio_rpi map=0,0,1,0,0,1\n for \nrev02\n boards, for a definition of these settings see below in \"Additional Gamecon Configuration Details\".\n\n\nManual Installation\n\n\nInstall the driver as described above using the Retropie Setup-Script.  Do not configure the drivers using the Retropie Setup-Script.\n\n\nTwo files need to be modified to enable the gamecon_gpio_rpi driver and gamecon controller configuration to automatically load when Retropie launches.\n\n\n\n\nAdd the text \ngamecon_gpio_rpi\n to the file \n/etc/modules\n then save the file.  This loads the driver on boot.\n\n\nAdd the text \noptions gamecon_gpio_rpi map=#,#,#,#,#,#\n to the file \n/etc/modprobe.d/gamecon.conf\n This configures the driver.\n\n\n\n\nIMPORTANT: \u2018#\u2019 must be replaced with your configuration of controller types (No Controller='0', SNES='1', NES='2', etc.) at the location that corresponds to the physical pin location you are using as outlined below in \"Additional Gamecon Configuration Details\".\n  \n\n\nExample 1:\n On a RPI2 or RPI3 to have a NES controller connected to physical pin 3 (Gamepad5) and an SNES controller connected to physical pin 5 (Gamepad6) write: \ngamecon_gpio_rpi map=0,0,0,0,2,1\n to the file \n/etc/modprobe.d/gamecon.conf\n\n\nExample 2:\n On a RPI2 or RPI3 to have a SNES controller connected to physical pin 7 (Gamepad3) and an SNES controller connected to physical pin 26 (Gamepad4) write: \ngamecon_gpio_rpi map=0,0,1,1,0,0\n to the file \n/etc/modprobe.d/gamecon.conf\n\n\nExample 3:\n On a Raspberry Pi B to have a NES controller connected to physical pin 3 (Gamepad1) and an SNES controller connected to physical pin 5 (Gamepad2) write: \ngamecon_gpio_rpi map=2,1,0,0,0,0\n to the file \n/etc/modprobe.d/gamecon.conf\n\n\nAdditional Gamecon Configuration Details\n\n\nThe \ngamecon_gpio_rpi\n driver requires the user to define its configuration (\ngamecon.conf\n) of the type of controllers (NES, SNES, etc) and physical pin location on the RPI GPIO board according to the following format definition and board revision (rev01, rev02):\n\n\nController Type Legend\n\n0 = No connection\n\n1 = SNES gamepad\n\n2 = NES gamepad\n\n3 = Gamecube gamepad\n\n6 = N64 gamepad\n\n7 = PSX/PS2 gamepad\n\n8 = PSX DDR gamepad\n\n9 = SNES mouse  \n\n\nNES/SNES Controller Data Pin Location Legend\n\n\nRev01 board (Raspberry Pi B)\n\nGamepad1 = GPIO0 = Physical Pin03\n\nGamepad2 = GPIO1 = Physical Pin05\n\nGamepad3 = GPIO4 = Physical Pin07\n\nGamepad4 = GPIO7 = Physical Pin26 \n\n\nRev02 board (Raspberry Pi A, B+, 2, 3)\n\nGamepad3 = GPIO4 = Physical Pin07\n\nGamepad4 = GPIO7 = Physical Pin26\n\nGamepad5 = GPIO2 = Physical Pin03\n\nGamepad6 = GPIO3 = Physical Pin05  \n\n\nNES/SNES File definition for \ngamecon.conf\n \n\n\nRev01 board (Raspberry Pi B)\n\n\nmap=\ngamepad1/GPIO0/pin03\n,\ngamepad2/GPIO1/pin05\n,\ngamepad3/GPIO4/pin07\n,\ngamepad4/GPIO7/pin26\n,\n0/not available\n,\n0/not available\n\n\nRev02 board (Raspberry Pi A, B+, 2, 3)\n\n\nmap=\n0/not available\n,\n0/not available\n,\ngamepad3/GPIO4/pin07\n,\ngamepad4/GPIO7/pin26\n,\ngamepad5/GPIO2/pin03\n,\ngamepad6/GPIO3/pin05\n\n\nIMPORTANT: Gamepad1 \n Gamepad2 are only available on the Raspberry Pi B.  Future versions of the Raspberry Pi have hidden these GPIO connections, i.e. no physical pin exists.  If you are using a Raspberry Pi B+, 2 or 3 you will NOT use Gamepad1 or Gamepad2 connections and they must be assigned \u20180\u2019 as their controller type in the gamecon.conf file.\n\n\nQuestions and feedback\n\n\nRelated \nthread\n in Raspberry Pi forum.\n\n\nTODO\n\n\n\n\nAdd support for N64's rumble pak\n\n\n\n\nFAQ\n\n\n\n\nQ: I get these errors when loading the module: \"ERROR: could not insert 'gamecon_gpio_rpi': Exec format error\", \"gamecon_gpio_rpi: disagrees about version of symbol module_layout\"\n\n\n\n\nA: This means that the module has not been built against the current kernel version. This can happen if firmware is not up-to-date during installation, or by a firmware update afterwards. To fix this, remove and reinstall the drivers with the RetroPie-Setup script.\n\n\n\n\n\n\nQ: NES pads only report A-button correctly, or do not react at all\n\n\n\n\n\n\nA: NES controllers are designed to be used with 5V supply, and are not guaranteed to work directly with 3.3V supply. Based on various reports, pads tested seem to fall into 3 categories:\n\n\n\n\n\n\nFully 3.3V compliant\n. The pads falling into this category can be powered directly from 3.3V supply as described above, and do not need any extra hardware.\n\n\n\n\n\n\n3.3V logic level compatible\n. These pads need to be powered from 5V supply (pin P1-02 on the RPi pin header) for correct operation, but RPi output pins (NES_CLK, NES_LTC) can be directly connected to corresponding pad input pins. A protection circuit is strongly recommended between pad output data pin and RPi input pin (PAD1-4), since output logic level is now 5V and input pins are not 5V-tolerant. \nThe clamp circuit\n can be built from a 3.3V zener diode and ~200ohm resistor. Alternatively, a logic IC such as 74LVC245 can be used for level conversion.\n\n\n\n\n\n\nOnly 5V compliant\n. Otherwise same as previous, but NES_CLK and NES_LTC must be converted to 5V logic level to be recognizable by the pad. That can be done with 74HCT244 - see \nthis\n post for more info.\n\n\n\n\n\n\nQ: PSX pads do not operate reliably or at all\n\n\n\n\n\n\nA: GPIO pins P1-07 and P1-26 do not have on-board pullup resistors which are required for reliable\noperation with PSX/PS2 pads. Connect an external pullup resistor (1.8k-4.7k) between the pin\nand 3.3V (P1-01) if you use it with PSX/PS2 pad.\n\n\n\n\n\n\nQ: N64/GC pads do not operate reliably\n\n\n\n\nA: These pads use an asynchronous communication prototol, and the bitbanging done by the driver assumes a fixed CPU frequency within certain limits. Power-saving features may break the operation, and should be disabled when using N64/GC pads. You can check whether frequency scaling is active by looking at /sys/devices/system/cpu/cpu0/cpufreq/scaling_* -nodes. It can be disabled by selecting \"performance\"-governor - see \nthis\n page for more info.\n\n\n\n\nVersion history\n\n\n1.2 (27.12.2015)\n\n\n\n\nOptimized PSX driver code\n\n\n\n\n1.0 (27.2.2015)\n\n\n\n\nAdded support for RPi2\n\n\n\n\n0.9 (17.10.2012)\n\n\n\n\nadded support for rev.2 board gpio pins\n\n\nimproved robustness with N64 / GC pad reads\n\n\nimproved performance with PSX controllers\n\n\nrestore \npsx_delay\n-option for setting psx access delay\n\n\n\n\n0.5 (27.8.2012)\n\n\n\n\nfirst DKMS-enabled version\n\n\nadded support for GC and PSX controllers\n\n\n\n\n0.1 (7.8.2012)\n\n\n\n\nfirst release\n\n\n\n\n\n\ndb9_gpio_rpi\n\n\nIntroduction\n\n\ndb9_gpio_rpi\n is a driver (kernel module) for DB9 joysticks and gamepads connected to Raspberry Pi's GPIO. The driver is adapted from parport-targeted DB9 kernel module to GPIO, and has some additions and modifications. Connection of DB9 joysticks to RPi's GPIO requires no extra hardware in most cases, providing easy and cheap way for using retro joysticks with RetroPie.\n\n\nJoystick support\n\n\nThe list of supported DB9 joysticks is below. Since the number of GPIO pins is limited, only 2 joysticks can be used simultaneously.\n\n\n\n\nAtari, Commodore, Amiga etc. db9 multisystem joysticks (1-3 buttons)\n\n\nSega Mega Drive (Genesis) pads\n\n\nSega Saturn controllers (Note: custom connector instead of db9)\n\n\nAmiga CD32 pads\n\n\n\n\nGPIO interface\n\n\nThe available GPIOs are divided into 2 ports, PORT1 and PORT2. Both use 7 data pins, which are in identical locations on all RPi board variants. Additionally, the joysticks require either ground, or both ground and power pins depending on the type. These pins are common for both ports.\n\n\nPi's GPIO data pins operate at 3.3V and aren't 5V tolerant (see \nthis\n), so 3.3V '''must''' be used for joysticks requiring power even though they'd be designed for 5V. However, some TTL-based joysticks may not function correctly using 3.3V supply. If they need to be powered from 5V, level shifters must be added between output pins of joystick and GPIO input pins. For example, 74LVC245 is an IC which can be used for this downconversion.\n\n\nBelow is an illustration which shows the pins used by the driver, with the mappings listed in a table next to it. Pin numbers are identical for all board revisions: the image represents the complete gpio block for A/B boards, and the top portion of the gpio block of A+/B+/Model B boards.\n\n\n\n\n\n\n\n\n\n  \n\n    \n\n      \nButton/Function\n\n      \nPORT1 GPIO pin\n\n      \nPORT2 GPIO pin\n\n    \n\n    \n\n      \nUP\n\n      \n4\n\n      \n15\n\n    \n\n    \n\n      \nDOWN\n\n      \n7\n\n      \n17\n\n    \n\n    \n\n      \nLEFT\n\n      \n8\n\n      \n18\n\n    \n\n    \n\n      \nRIGHT\n\n      \n9\n\n      \n22\n\n    \n\n    \n\n      \nFIRE1\n\n      \n10\n\n      \n23\n\n    \n\n    \n\n      \nFIRE2 / SELECT1\n\n      \n11\n\n      \n24\n\n    \n\n    \n\n      \nFIRE3 / SELECT0\n\n      \n14\n\n      \n25\n\n    \n\n  \n\n\n\n\n\n\n\nJoystick connection matrix\n\n\n\n\n\n\n\n\nDB9 pin\n\n\nAtari basic joystick\n\n\nC64 joystick\n\n\nMD/Genesis pad\n\n\nSaturn controller (non-db9)\n\n\nCD32 pad\n\n\n\n\n\n\n\n\n\n\n1\n\n\nUP\n\n\nUP\n\n\nUP\n\n\n-\n\n\nUP\n\n\n\n\n\n\n2\n\n\nDOWN\n\n\nDOWN\n\n\nDOWN\n\n\nDOWN\n\n\nDOWN\n\n\n\n\n\n\n3\n\n\nLEFT\n\n\nLEFT\n\n\nLEFT\n\n\nUP\n\n\nLEFT\n\n\n\n\n\n\n4\n\n\nRIGHT\n\n\nRIGHT\n\n\nRIGHT\n\n\nSELECT0\n\n\nRIGHT\n\n\n\n\n\n\n5\n\n\n-\n\n\n-\n\n\n3.3V\n\n\nSELECT1\n\n\nSELECT0\n\n\n\n\n\n\n6\n\n\nFIRE1\n\n\nFIRE1\n\n\nFIRE1\n\n\n3.3V\n\n\nSELECT1\n\n\n\n\n\n\n7\n\n\n-\n\n\n3.3V\n\n\nSELECT0\n\n\nRIGHT\n\n\n3.3V\n\n\n\n\n\n\n8\n\n\nGND\n\n\nGND\n\n\nGND\n\n\nLEFT\n\n\nGND\n\n\n\n\n\n\n9\n\n\n-\n\n\n-\n\n\nFIRE2\n\n\nGND\n\n\nFIRE1\n\n\n\n\n\n\n\n\nMore information on the connections is provided in the driver README (\n/usr/share/doc/db9_gpio_rpi/README.gz\n).\n\n\nUsage\n\n\nThe module is loaded and configured with \nmodprobe\n. This is explained shortly in the parent page and in detail in the driver README. The joystick IDs for \nmodprobe\n are listed below:\n\n\n\n\n\n\n\n\nID\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\n(No joystick)\n\n\n\n\n\n\n1\n\n\nMultisystem 1-button joystick\n\n\n\n\n\n\n2\n\n\nMultisystem 2-button joystick\n\n\n\n\n\n\n3\n\n\nMultisystem 3-button joystick\n\n\n\n\n\n\n4\n\n\nMD/Genesis pad (3+1 buttons)\n\n\n\n\n\n\n5\n\n\nMD/Genesis pad (5+1 buttons)\n\n\n\n\n\n\n6\n\n\nMD/Genesis pad (6+2 buttons)\n\n\n\n\n\n\n7\n\n\nSega Saturn controller\n\n\n\n\n\n\n8\n\n\nAmiga CD32 gamepad\n\n\n\n\n\n\n\n\nQuestions and feedback\n\n\nRelated \nthread\n in Raspberry Pi forum.\n\n\nFAQ\n\n\n\n\nQ: I get these errors when loading the module: \"ERROR: could not insert 'db9_gpio_rpi': Exec format error\", \"db9_gpio_rpi: disagrees about version of symbol module_layout\"\n\n\nA: This means that the module has not been built against the current kernel version. This can happen if the fw is not up-to-date during installation, or by a fw update afterwards. To fix this, run \"Install/update multi-console gamepad drivers for GPIO\"-option in RetroPie setup.\n\n\n\n\nVersion history\n\n\n1.0 (27.2.2015)\n\n\n\n\nAdded support for RPi2\n\n\nFixed issues with 3rd-party MD pads\n\n\n\n\n0.7 (28.4.2013)\n\n\n\n\nfirst release", 
            "title": "GPIO Modules"
        }, 
        {
            "location": "/GPIO-Modules/#overview", 
            "text": "The module for retro game controllers allows connecting various home computer joysticks and console gamepads to Raspberry Pi via GPIO with a minimal amount of extra hardware. The module consists of 2 drivers, each of which supports different types of controllers:  gamecon_gpio_rpi :   NES gamepads  SNES gamepads and mouses  PSX/PS2 gamepads, wheels and DDR controllers  N64 controllers  Gamecube controllers   db9_gpio_rpi :   Atari, Commodore, Amiga etc. DB9 multisystem joysticks  Sega Mega Drive (Genesis) pads  Sega Saturn controllers (Note: custom connector instead of DB9)  Amiga CD32 pads", 
            "title": "Overview"
        }, 
        {
            "location": "/GPIO-Modules/#installation", 
            "text": "The easiest way to install the drivers is via RetroPie-Setup script by selecting  Manage Packages , then  Manage Driver Packages , then  gamecondriver .  Alternatively, .deb-packages for the drivers and kernel headers can be directly downloaded  here .", 
            "title": "Installation"
        }, 
        {
            "location": "/GPIO-Modules/#configuration", 
            "text": "The drivers are loaded/unloaded with  modprobe . More information and connection diagrams are found in the driver sub-pages and in provided READMEs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/GPIO-Modules/#gamecon_gpio_rpi", 
            "text": "", 
            "title": "gamecon_gpio_rpi"
        }, 
        {
            "location": "/GPIO-Modules/#introduction", 
            "text": "gamecon_gpio_rpi  is a kernel module which allows interfacing various retro gamepads with Raspberry Pi's GPIO. It's based on the  gamecon  module from Linux Input Driver project, but has some additions and modifications. The goal is make the driver simple but versatile, making it easy and cheap to use gamepads with Pi. Most pads can be connected with just a few wires, although controller sockets provide a more lasting way for those who have them.", 
            "title": "Introduction"
        }, 
        {
            "location": "/GPIO-Modules/#controller-support", 
            "text": "The driver supports up to 4 controllers of the following types (can be mixed freely):   NES gamepads  SNES gamepads and mouses  PSX/PS2 gamepads, wheels and DDR controllers  N64 gamepads  Gamecube gamepads", 
            "title": "Controller support"
        }, 
        {
            "location": "/GPIO-Modules/#gpio-interface", 
            "text": "Depending on the number and type of pads, the interface needs 3 to 11 GPIO pins. Pi's GPIO data pins operate at 3.3V, and the Pi's 3.3V GPIO pin is rated at max 50mA (see  here  for more info). This generates a few very important rules which should be read before connecting any gamepads.    All gamepads must use 3.3V supply regardless which they were designed for. Some older controllers (e.g. NES, SNES) originally used 5V, but they should operate fine with 3.3V (with a few exceptions - see FAQ). The Pi's 5V GPIO pin shouldn't be used without using level shifters or clamps on the input data pins, so don't use it unless you know what you are doing.    The current limit is sufficient for 4 normal controllers, but e.g. 3rd party pads with extra LEDs, fans, etc should be avoided if they are powered from the main supply.    The pinout summary can be seen below. The power and ground pins are common for all pads, thus requiring splitters (i.e. a breadboard + pinheaders) when using multiple pads. Detailed information on connecting the pads can be found at the module's README ( /usr/share/doc/gamecon_gpio_rpi/README.gz ).  NOTE : Raspberry Pi Board revision 2 (all RPi variants manufactured after 09/2012) has different GPIO IDs for PAD1   PAD2 pins, which must be taken into account when loading the driver.   The actual interconnect (NES/SNES/N64) can be made from female-to-female jumper wires and a single conductor wires with the other end folded in double (see  here  and  here ). For PSX pads, the jumper wires are enough  by themselves . The only hard one is GC pad, which must be opened to make a good connection for the wires.", 
            "title": "GPIO interface"
        }, 
        {
            "location": "/GPIO-Modules/#installation-and-usage", 
            "text": "", 
            "title": "Installation and usage"
        }, 
        {
            "location": "/GPIO-Modules/#automatic-installation", 
            "text": "The easiest way to install the module is with the RetroPie-Setup script. Just remember to upgrade your firmware ( sudo apt-get update; sudo apt-get upgrade ) before installing the module, as it is built automatically using the configuration data from the latest RPi kernel. This also means that a firmware update afterwards can break the compatibility, but this is easily fixed by reconfiguration/update of the module (see FAQ).  In addition to install/update, RetroPie-Setup also contains an option to permanently enable configuration for 2 SNES pads connected to PAD2   PAD3 pins (designed for the RetroPie GPIO Adapter). This configures the driver as  gamecon_gpio_rpi map=0,1,1,0  for  rev01  boards and  gamecon_gpio_rpi map=0,0,1,0,0,1  for  rev02  boards, for a definition of these settings see below in \"Additional Gamecon Configuration Details\".", 
            "title": "Automatic Installation"
        }, 
        {
            "location": "/GPIO-Modules/#manual-installation", 
            "text": "Install the driver as described above using the Retropie Setup-Script.  Do not configure the drivers using the Retropie Setup-Script.  Two files need to be modified to enable the gamecon_gpio_rpi driver and gamecon controller configuration to automatically load when Retropie launches.   Add the text  gamecon_gpio_rpi  to the file  /etc/modules  then save the file.  This loads the driver on boot.  Add the text  options gamecon_gpio_rpi map=#,#,#,#,#,#  to the file  /etc/modprobe.d/gamecon.conf  This configures the driver.   IMPORTANT: \u2018#\u2019 must be replaced with your configuration of controller types (No Controller='0', SNES='1', NES='2', etc.) at the location that corresponds to the physical pin location you are using as outlined below in \"Additional Gamecon Configuration Details\".     Example 1:  On a RPI2 or RPI3 to have a NES controller connected to physical pin 3 (Gamepad5) and an SNES controller connected to physical pin 5 (Gamepad6) write:  gamecon_gpio_rpi map=0,0,0,0,2,1  to the file  /etc/modprobe.d/gamecon.conf  Example 2:  On a RPI2 or RPI3 to have a SNES controller connected to physical pin 7 (Gamepad3) and an SNES controller connected to physical pin 26 (Gamepad4) write:  gamecon_gpio_rpi map=0,0,1,1,0,0  to the file  /etc/modprobe.d/gamecon.conf  Example 3:  On a Raspberry Pi B to have a NES controller connected to physical pin 3 (Gamepad1) and an SNES controller connected to physical pin 5 (Gamepad2) write:  gamecon_gpio_rpi map=2,1,0,0,0,0  to the file  /etc/modprobe.d/gamecon.conf", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/GPIO-Modules/#additional-gamecon-configuration-details", 
            "text": "The  gamecon_gpio_rpi  driver requires the user to define its configuration ( gamecon.conf ) of the type of controllers (NES, SNES, etc) and physical pin location on the RPI GPIO board according to the following format definition and board revision (rev01, rev02):  Controller Type Legend \n0 = No connection \n1 = SNES gamepad \n2 = NES gamepad \n3 = Gamecube gamepad \n6 = N64 gamepad \n7 = PSX/PS2 gamepad \n8 = PSX DDR gamepad \n9 = SNES mouse    NES/SNES Controller Data Pin Location Legend  Rev01 board (Raspberry Pi B) \nGamepad1 = GPIO0 = Physical Pin03 \nGamepad2 = GPIO1 = Physical Pin05 \nGamepad3 = GPIO4 = Physical Pin07 \nGamepad4 = GPIO7 = Physical Pin26   Rev02 board (Raspberry Pi A, B+, 2, 3) \nGamepad3 = GPIO4 = Physical Pin07 \nGamepad4 = GPIO7 = Physical Pin26 \nGamepad5 = GPIO2 = Physical Pin03 \nGamepad6 = GPIO3 = Physical Pin05    NES/SNES File definition for  gamecon.conf    Rev01 board (Raspberry Pi B)  map= gamepad1/GPIO0/pin03 , gamepad2/GPIO1/pin05 , gamepad3/GPIO4/pin07 , gamepad4/GPIO7/pin26 , 0/not available , 0/not available  Rev02 board (Raspberry Pi A, B+, 2, 3)  map= 0/not available , 0/not available , gamepad3/GPIO4/pin07 , gamepad4/GPIO7/pin26 , gamepad5/GPIO2/pin03 , gamepad6/GPIO3/pin05  IMPORTANT: Gamepad1   Gamepad2 are only available on the Raspberry Pi B.  Future versions of the Raspberry Pi have hidden these GPIO connections, i.e. no physical pin exists.  If you are using a Raspberry Pi B+, 2 or 3 you will NOT use Gamepad1 or Gamepad2 connections and they must be assigned \u20180\u2019 as their controller type in the gamecon.conf file.", 
            "title": "Additional Gamecon Configuration Details"
        }, 
        {
            "location": "/GPIO-Modules/#questions-and-feedback", 
            "text": "Related  thread  in Raspberry Pi forum.", 
            "title": "Questions and feedback"
        }, 
        {
            "location": "/GPIO-Modules/#todo", 
            "text": "Add support for N64's rumble pak", 
            "title": "TODO"
        }, 
        {
            "location": "/GPIO-Modules/#faq", 
            "text": "Q: I get these errors when loading the module: \"ERROR: could not insert 'gamecon_gpio_rpi': Exec format error\", \"gamecon_gpio_rpi: disagrees about version of symbol module_layout\"   A: This means that the module has not been built against the current kernel version. This can happen if firmware is not up-to-date during installation, or by a firmware update afterwards. To fix this, remove and reinstall the drivers with the RetroPie-Setup script.    Q: NES pads only report A-button correctly, or do not react at all    A: NES controllers are designed to be used with 5V supply, and are not guaranteed to work directly with 3.3V supply. Based on various reports, pads tested seem to fall into 3 categories:    Fully 3.3V compliant . The pads falling into this category can be powered directly from 3.3V supply as described above, and do not need any extra hardware.    3.3V logic level compatible . These pads need to be powered from 5V supply (pin P1-02 on the RPi pin header) for correct operation, but RPi output pins (NES_CLK, NES_LTC) can be directly connected to corresponding pad input pins. A protection circuit is strongly recommended between pad output data pin and RPi input pin (PAD1-4), since output logic level is now 5V and input pins are not 5V-tolerant.  The clamp circuit  can be built from a 3.3V zener diode and ~200ohm resistor. Alternatively, a logic IC such as 74LVC245 can be used for level conversion.    Only 5V compliant . Otherwise same as previous, but NES_CLK and NES_LTC must be converted to 5V logic level to be recognizable by the pad. That can be done with 74HCT244 - see  this  post for more info.    Q: PSX pads do not operate reliably or at all    A: GPIO pins P1-07 and P1-26 do not have on-board pullup resistors which are required for reliable\noperation with PSX/PS2 pads. Connect an external pullup resistor (1.8k-4.7k) between the pin\nand 3.3V (P1-01) if you use it with PSX/PS2 pad.    Q: N64/GC pads do not operate reliably   A: These pads use an asynchronous communication prototol, and the bitbanging done by the driver assumes a fixed CPU frequency within certain limits. Power-saving features may break the operation, and should be disabled when using N64/GC pads. You can check whether frequency scaling is active by looking at /sys/devices/system/cpu/cpu0/cpufreq/scaling_* -nodes. It can be disabled by selecting \"performance\"-governor - see  this  page for more info.", 
            "title": "FAQ"
        }, 
        {
            "location": "/GPIO-Modules/#version-history", 
            "text": "", 
            "title": "Version history"
        }, 
        {
            "location": "/GPIO-Modules/#12-27122015", 
            "text": "Optimized PSX driver code", 
            "title": "1.2 (27.12.2015)"
        }, 
        {
            "location": "/GPIO-Modules/#10-2722015", 
            "text": "Added support for RPi2", 
            "title": "1.0 (27.2.2015)"
        }, 
        {
            "location": "/GPIO-Modules/#09-17102012", 
            "text": "added support for rev.2 board gpio pins  improved robustness with N64 / GC pad reads  improved performance with PSX controllers  restore  psx_delay -option for setting psx access delay", 
            "title": "0.9 (17.10.2012)"
        }, 
        {
            "location": "/GPIO-Modules/#05-2782012", 
            "text": "first DKMS-enabled version  added support for GC and PSX controllers", 
            "title": "0.5 (27.8.2012)"
        }, 
        {
            "location": "/GPIO-Modules/#01-782012", 
            "text": "first release", 
            "title": "0.1 (7.8.2012)"
        }, 
        {
            "location": "/GPIO-Modules/#db9_gpio_rpi", 
            "text": "", 
            "title": "db9_gpio_rpi"
        }, 
        {
            "location": "/GPIO-Modules/#introduction_1", 
            "text": "db9_gpio_rpi  is a driver (kernel module) for DB9 joysticks and gamepads connected to Raspberry Pi's GPIO. The driver is adapted from parport-targeted DB9 kernel module to GPIO, and has some additions and modifications. Connection of DB9 joysticks to RPi's GPIO requires no extra hardware in most cases, providing easy and cheap way for using retro joysticks with RetroPie.", 
            "title": "Introduction"
        }, 
        {
            "location": "/GPIO-Modules/#joystick-support", 
            "text": "The list of supported DB9 joysticks is below. Since the number of GPIO pins is limited, only 2 joysticks can be used simultaneously.   Atari, Commodore, Amiga etc. db9 multisystem joysticks (1-3 buttons)  Sega Mega Drive (Genesis) pads  Sega Saturn controllers (Note: custom connector instead of db9)  Amiga CD32 pads", 
            "title": "Joystick support"
        }, 
        {
            "location": "/GPIO-Modules/#gpio-interface_1", 
            "text": "The available GPIOs are divided into 2 ports, PORT1 and PORT2. Both use 7 data pins, which are in identical locations on all RPi board variants. Additionally, the joysticks require either ground, or both ground and power pins depending on the type. These pins are common for both ports.  Pi's GPIO data pins operate at 3.3V and aren't 5V tolerant (see  this ), so 3.3V '''must''' be used for joysticks requiring power even though they'd be designed for 5V. However, some TTL-based joysticks may not function correctly using 3.3V supply. If they need to be powered from 5V, level shifters must be added between output pins of joystick and GPIO input pins. For example, 74LVC245 is an IC which can be used for this downconversion.  Below is an illustration which shows the pins used by the driver, with the mappings listed in a table next to it. Pin numbers are identical for all board revisions: the image represents the complete gpio block for A/B boards, and the top portion of the gpio block of A+/B+/Model B boards.     \n   \n     \n       Button/Function \n       PORT1 GPIO pin \n       PORT2 GPIO pin \n     \n     \n       UP \n       4 \n       15 \n     \n     \n       DOWN \n       7 \n       17 \n     \n     \n       LEFT \n       8 \n       18 \n     \n     \n       RIGHT \n       9 \n       22 \n     \n     \n       FIRE1 \n       10 \n       23 \n     \n     \n       FIRE2 / SELECT1 \n       11 \n       24 \n     \n     \n       FIRE3 / SELECT0 \n       14 \n       25", 
            "title": "GPIO interface"
        }, 
        {
            "location": "/GPIO-Modules/#joystick-connection-matrix", 
            "text": "DB9 pin  Atari basic joystick  C64 joystick  MD/Genesis pad  Saturn controller (non-db9)  CD32 pad      1  UP  UP  UP  -  UP    2  DOWN  DOWN  DOWN  DOWN  DOWN    3  LEFT  LEFT  LEFT  UP  LEFT    4  RIGHT  RIGHT  RIGHT  SELECT0  RIGHT    5  -  -  3.3V  SELECT1  SELECT0    6  FIRE1  FIRE1  FIRE1  3.3V  SELECT1    7  -  3.3V  SELECT0  RIGHT  3.3V    8  GND  GND  GND  LEFT  GND    9  -  -  FIRE2  GND  FIRE1     More information on the connections is provided in the driver README ( /usr/share/doc/db9_gpio_rpi/README.gz ).", 
            "title": "Joystick connection matrix"
        }, 
        {
            "location": "/GPIO-Modules/#usage", 
            "text": "The module is loaded and configured with  modprobe . This is explained shortly in the parent page and in detail in the driver README. The joystick IDs for  modprobe  are listed below:     ID  Description      0  (No joystick)    1  Multisystem 1-button joystick    2  Multisystem 2-button joystick    3  Multisystem 3-button joystick    4  MD/Genesis pad (3+1 buttons)    5  MD/Genesis pad (5+1 buttons)    6  MD/Genesis pad (6+2 buttons)    7  Sega Saturn controller    8  Amiga CD32 gamepad", 
            "title": "Usage"
        }, 
        {
            "location": "/GPIO-Modules/#questions-and-feedback_1", 
            "text": "Related  thread  in Raspberry Pi forum.", 
            "title": "Questions and feedback"
        }, 
        {
            "location": "/GPIO-Modules/#faq_1", 
            "text": "Q: I get these errors when loading the module: \"ERROR: could not insert 'db9_gpio_rpi': Exec format error\", \"db9_gpio_rpi: disagrees about version of symbol module_layout\"  A: This means that the module has not been built against the current kernel version. This can happen if the fw is not up-to-date during installation, or by a fw update afterwards. To fix this, run \"Install/update multi-console gamepad drivers for GPIO\"-option in RetroPie setup.", 
            "title": "FAQ"
        }, 
        {
            "location": "/GPIO-Modules/#version-history_1", 
            "text": "", 
            "title": "Version history"
        }, 
        {
            "location": "/GPIO-Modules/#10-2722015_1", 
            "text": "Added support for RPi2  Fixed issues with 3rd-party MD pads", 
            "title": "1.0 (27.2.2015)"
        }, 
        {
            "location": "/GPIO-Modules/#07-2842013", 
            "text": "first release", 
            "title": "0.7 (28.4.2013)"
        }, 
        {
            "location": "/BIOS/", 
            "text": "Retropie BIOS Configuration\n\n\nSupported bios files for the libretro cores can be scanned using the official \nBios.dat\n from \nLibretro-database\n\n\n\n\n\n\n\n\nTested Version\n\n\n\n\n\n\n\n\n\n\n\n\n3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmulator\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\n\n\nAmiga\n\n\n\n\n\n\n\n\nAtari800\n\n\n\n\n\n\n\n\nAtari 7800\n\n\n\n\n\n\n\n\nCoCo\n\n\n\n\n\n\n\n\nDragon32\n\n\n\n\n\n\n\n\nDreamcast\n\n\n\n\n\n\n\n\nFamicom Disk System\n\n\n\n\n\n\n\n\ngba\n\n\n\n\n\n\n\n\nIntellivision\n\n\n\n\n\n\n\n\nMacintosh\n\n\n\n\n\n\n\n\npc engine\n / \nturbografx-16\n\n\n\n\n\n\n\n\npc engine cd\n / \nturbografx-16 cd\n\n\n\n\n\n\n\n\npsx\n\n\n\n\n\n\n\n\nneo geo\n\n\n\n\n\n\n\n\nsega cd\n\n\n\n\n\n\n\n\nSega Saturn\n\n\n\n\n\n\n\n\nVideopac or Odyssey2\n\n\n\n\n\n\n\n\nIf a system is not listed in the chart above, it does not require a BIOS in order to function properly.", 
            "title": "BIOS"
        }, 
        {
            "location": "/BIOS/#retropie-bios-configuration", 
            "text": "Supported bios files for the libretro cores can be scanned using the official  Bios.dat  from  Libretro-database     Tested Version       3.0         Emulator  Location       Amiga     Atari800     Atari 7800     CoCo     Dragon32     Dreamcast     Famicom Disk System     gba     Intellivision     Macintosh     pc engine  /  turbografx-16     pc engine cd  /  turbografx-16 cd     psx     neo geo     sega cd     Sega Saturn     Videopac or Odyssey2     If a system is not listed in the chart above, it does not require a BIOS in order to function properly.", 
            "title": "Retropie BIOS Configuration"
        }, 
        {
            "location": "/Changelogs/", 
            "text": "CHANGELOGS\n\n\nThis page is a list of all of the changelogs for each version of RetroPie. For a complete list of all commits to the source code see \nhere:\n  \n\n\nVersion 4.1: (November 5, 2016)\n\n\nChanges since 4.0.2:\n\n\n\n\nUpdated RetroArch and many libretro cores to the latest versions.\n\n\nSome libretro packages have been renamed to match the upstream core names:\n\n\nlr-fba to lr-fbalpha2012\n\n\nlr-fba-next to lr-fbalpha\n\n\nlr-pocketsnes to lr-snes9x2002\n\n\nlr-catsfc to lr-snes9x2005\n\n\nlr-snes9x-next to lr-snes9x2010\n\n\nUpdated Vice (C64 emulator) to the latest version.\n\n\nFixed PPSSPP building on the RPI and updated it to the latest version.\n\n\nlr-fba-next updated to fbalpha v0.2.97.39 including fixes for Irem hardware on arm (rtype / rtype 2 etc)\n\n\nWiFi configuration - added ability to import Wifi ssid/psk from /boot/wifikeyfile.txt for set-up without a keyboard.\n\n\nUpdated Fuse (Spectrum emulator) to v1.3.0\n\n\nUpdated Zesarux (Spectrum / CPC emulator) to the latest version.\n\n\nInclude lr-glupen64 by default on image (moved from optional to main).\n\n\nAdded darkplaces-quake to optional packages. When installing/update the Quake emulators, launch scripts for any installed mission packs will be created.\n\n\nBuild ResidualVM with SDL2 + opengles support.\n\n\nAdded steam controller driver from https://github.com/ynsta/steamcontroller\n\n\nAdded mk_arcade_joystick_rpi driver from https://github.com/recalbox/mk_arcade_joystick_rpi\n\n\nFixed build issues on uae4arm, and kickstart removal on upgrade of uae4arm/uae4all.\n\n\nScreensaver / Screen dimming in Emulation Station no longer stops the built in scraper.\n\n\nCompatibility with upstream plymouth changes. Image is based on the latest upstream Raspbian Lite from 2016-09-23 with all updates.\n\n\nNew themes added to the theme installer - including pixel-meta, pixel-tft, luminous, minilumi from Rookervik and io and spare themes from Mattrixk\n\n\nNew packages added to experimental section\n\n\nAdded emulators lr-beetle-pcfx (PCFX emulator)\n\n\nAdded retropie-manager web interface (based on recalbox-manager).\n\n\nAdded pcsx2 emulator (Playstation 2 emulator - x86 / x86_64 only).\n\n\nAdded openpht  (x86 / x86_64 only).\n\n\nAdded fs-uae (Amiga emulator - x86 / x86_64 only).\n\n\nAdded lr-bsnes (Super Nintendo emulator - x86/x86_64 only)\n\n\nAdded lr-hatari (Atari ST/STE/TT/Falcon emulator)\n\n\nAdded some RetroPie-Setup function documentation to aid those contributing code - https://retropie.org.uk/retropie-setup-api/\n\n\nVarious other improvements / bugfixes\n\n\n\n\nVersion 4.0: (August 19, 2016)\n\n\nChanges since 3.8.1:\n\n\n\n\nSetup script improvements:\n\n\nAdded the ability to install/update and remove packages.\n\n\nAdded help docs to the setup script.\n\n\nRenamed mednafen emulators to beetle to match upstream libretro repositories.\n\n\nRenaming of ES input configuration which was causing confusion for shoulder/trigger inputs.\n\n\nMuch faster Emulation Station start-up in gamelist only mode.\n\n\nUpdated Xpad driver included with \u201ctrigger to button\u201d enabled, so mapping of Xbox 360 / Logitech trigger buttons is easier.\n\n\nInput configuration script to set up player 1 automatically on pifba and pisnes.\n\n\nConfiguration Editor can now help you configure player gamepad order for libretro emulators.\n\n\nUpdated PSP emulators ppsspp and lr-ppsspp with a fix for the pausing during play.\n\n\nAutostart improvements: boot to kodi option added - (exiting kodi will take you back to emulationstation).\n\n\nImprovements to mupen64plus Glide64 video plugin, which is now the default.\n\n\nAdded new libretro emulator based on mupen64 - lr-glupen64.\n\n\nlr-mame2003 updates - support for mice/analogue joystick support. Fixed aspect ratio issues.\n\n\nUpdates to various other emulators including reicast, lr-fceumm, lr-nestopia, lr-snes9x-next and the RetroArch frontend.\n\n\nSDL2 dispmanx scaling, so SDL2 software can render to a lower resolution and be scaled in hardware. This enhances performance on mupen64plus for example, without having to change the video mode.\n\n\nImprovements to the Bluetooth module, including the ability to try and reconnect to devices in the background, and an option to switch off our mapping hack for 8bitdo, so devices with a newer firmware will map correctly for RetroArch. Fix pairing with Android phones.\n\n\nSplashscreen improvements: New default splashscreen and a new splashscreen repository with additional splashscreens.\n\n\nSupport for configs/all/runcommand-onstart.sh  configs/all/runcommand-onend.sh user scripts\n\n\nNew experimental modules:\n\n\nTRS-80 emulator sdltrs.\n\n\nTI-99/4A emulator ti99sim.\n\n\nOric 1/Atmos emulator Oricutron.\n\n\nDinothawr (lr-dinothawr - standalone libretro puzzle game).\n\n\nlr-mame2014  (Late 2014/Early 2015 version of MAME - uses 0.159 romset)\n\n\nAlternate Virtual Gamepad by sbidolach.\n\n\nVarious other bug fixes and improvements.\n\n\n\n\nVersion 3.8.1: (June 4, 2016)\n\n\n\n\nFix escaping in iniSet causing initial backslashes to be incorrect in ini files (Affected some +Start Scripts with spaces such as DOSBox).\n\n\nDon\u2019t overwrite existing configs when updating advmame.\n\n\nSSelph\u2019s scraper \u2013 Add option to set -append and -use_nointro_name=false flags\n\n\nDisable binary install on Wheezy.\n\n\nFix building of gamecondriver.\n\n\nCorrect Emulation Station autobooting configuration due to changes in raspi-config.\n\n\nAdded missing zip dependency for Solarus.\n\n\nFix c\np error with mupen64plus that broke the initial config generation.\n\n\nAdded new EmulationStation theme \u201cmaterial\u201d from user lilbud.\n\n\nLr-nxengine \u2013 no error message was shown when required data files are missing.\n\n\n\n\nVersion 3.8: (May 27, 2016)\n\n\n\n\nRaspbian package/firmware rollups that fix the lockups with the Raspberry Pi 3 internal bluetooth.\n\n\nNew SDL1 dispmanx backend from Vanfanel with triple buffering which should solve some of the performance issues on the previous code. Also some additional changes are included so you can adjust the aspect ratio with env variable SDL_DISPMANX_RATIO (eg 1.33 for 4:3). The aspect ratio will be ignored if SDL_DISPMANX_IGNORE_RATIO is set and sdl1 apps will display full screen. Vice is now set to use 4:3 ratio on the Raspberry Pi.\n\n\nReicast (Dreamcast emulator), now supports multiplayer.\n\n\nlr-pcsx-rearmed (PlayStation emulator) now supports 3-8 players.\n\n\nUpdated Raspberry Pi binaries for lr-fba-next, uae4arm, mupen64plus, Reicast, lr-picodrive, lr-nestopia, lr-pcsx-rearmed, lr-mgba, lr-genesis-plus-gx, lr-mame2003, and lr-fceum.\n\n\nAdded new videocore mupen64plus video plugin.\n\n\nImprovements to Apple2 (supports automount now).\n\n\nAdded wiki viewer.\n\n\nImprovements to the splashscreen module (added previewer, randomiser, and no longer requires a folder to be created in the splashscreen directory).\n\n\nVarious other bugfixes and minor improvements.\n\n\n\n\nVersion 3.7: (April 14, 2016)\n\n\n\n\nAdded new experimental modules: \n\n\nThe Ur Quan Masters  (Port of DOS game Star Control 2).\n\n\nXrick (Port of Rick Dangerous).\n\n\nTyrquake (Standalone, not libretro).\n\n\nSolarus Engine (Homebrew Zelda Clone).\n\n\nSDLPoP (Prince of Persia Port).\n\n\nCannonball (Outrun Engine).\n\n\nStratagus (Warcraft and Starcraft Engine).\n\n\nOpenBOR (Beats of Rage 2d Sidescrolling Game Engine).\n\n\nCommander Genius (Port of Commander Keen).\n\n\nMicropolis (Open source version of Sim City Classic).\n\n\nAleph One (Open Source port of Marathon Series).\n\n\nGiana\u2019s Return (Fan-Made sequel to the Giana Sisters).\n\n\nLincity (Sim City Clone).\n\n\nSimcoupe (SAM Coup\u00e9 Emulator).\n\n\nLXDE Desktop (Option in raspi-tools to reinstall the desktop environment).\n\n\nUpdated Kodi to Kodi 16 (which includes joypad support).\n\n\nUpdated PS3 Module (timeout fixed).\n\n\nSDL2 PS3/Wii U Pro controller fixes.\n\n\nUAE4Arm updated.\n\n\nlr-mame2003 updated with sample/nvram support and additional core settings.\n\n\nMupen64plus updated with fix for black screen with rice plugin.\n\n\nScummvm Improvements (updated to 1.8 with OpenGL and partial Myst support).\n\n\nUpdated Config Editor (https://github.com/RetroPie/RetroPie-Setup/wiki/Configuration-Editor).\n\n\nUpdated Carbon and Pixel Themes and added default images to the RetroPie Menu.\n\n\nAdded \u201cOther Settings\u201d menu to Emulationstation with \u201csave metadata on exit\u201d and \u201cparse gamelists only\u201d. These options were added to mitigate the long boot and shutdown times with large romsets.\n\n\nVarious other improvements and fixes.\n\n\n\n\nVersion 3.6: (March 1, 2016)\n\n\nAdded Support for the Raspberry Pi 3 [Via Raspbian Firmware Update]\n\n\n\n\nAdded new experimental modules:\n\n\nDaphne (Laserdisc Emulator)\n\n\nLibretro-QuickNES\n\n\nLibretro-Beetle PSX (x86 only)\n\n\nLibretro-Beetle Lynx\n\n\nGemRB engine (Baldur\u2019s Gate, Icewind Dale, Planescape)\n\n\nResidualVM (Engine for Grim Fandango and Escape from Monkey Island)\n\n\nLibretro-MESS (based on the most recent version of MAME)\n\n\nLibretro-MAME (based on the most recent version of MAME)\n\n\nAdded EmulationStation theme Simpler Turtle Pi to the theme installer from Omnija.\n\n\nAdded version details and uninstall option to the RetroPie Setup Script.\n\n\nFixed insert coin not working on arcade based emulators.\n\n\nVarious other bugfixes and improvements.\n\n\n\n\nVersion 3.5: (February 6, 2016)\n\n\nAfter taking into consideration the feedback from the vibrant RetroPie community, we have provided a few more functions to simplify the user experience such as automatic expansion of the filesystem on boot, less terminal text, and more configuration options for the runcommand launch menu. We have also fixed up some bugs with Raspbian Jessie such as the USB ROM service and have added two new experimental modules - the L\u00f6ve game engine and a ColecoVision emulator (CoolCV). \n\n\n\n\nAdded new experimental modules, L\u04e7ve 2D Game Engine, Colecovision (CoolCV).\n\n\nDebian usbmount package fixed up for systemd udev compatibility, making the USB ROM service work properly again without being killed after 30 seconds. Also added ntfs support by default.\n\n\nAdded an arcade rom folder option where all arcade games can be placed. \n\n\nImprovements to EmulationStation (Fix crash on rom delete, direct launch, symlink support, and other bug fixes).\n\n\nImprovements to the Runcommand Launch Menu: Cleaner dialog on launch, ability to show game artwork on launch, ability to disable joystick support as well as the ability to disable the entire runcommand launch menu.\n\n\nPS3 Controller improvements - Add multiple gasia and shanwan controller support.\n\n\nUpdated lr-mgba emulator binaries (new upstream release of mgba 0.4.0)\n\n\nImprovements on pre-built image - disabled screen blanking, quieter boot, and filesystem automatically expanded on first boot.\n\n\nVarious other bug fixes.\n\n\n\n\nVersion 3.4: (January 19, 2016)\n\n\nMostly fixes and improvements rather than new stuff this time folks. There were some problems with our RetroArch configuration defaults in RetroPie 3.3 which should be sorted now, and we have fixed up a few things that didn\u2019t work correctly with Raspbian Jessie. We also have added early support for using the RetroPie-Setup script on a X86/X11 desktop setup, as well as some basic support for building EmulationStation \n RetroArch + cores on the ODroid-C1. For more information regarding installation on x86 see https://github.com/RetroPie/RetroPie-Setup/wiki/RetroPie-Ubuntu-15.10-x86-Flavor.\n\n\nWe are now using Raspbian Jessie as the base for the RetroPie image. Those using Wheezy can update RetroPie-Setup and emulators by following the instructions at https://github.com/RetroPie/RetroPie-setup/wiki/Updating-RetroPie - however moving to Jessie is recommended. As it takes time to pre-build binaries, in the future we will only be providing pre-built binaries for Raspbian Jessie.\n\n\nChanges since 3.3:\n\n\n\n\nNow using Raspbian Jessie for the RetroPie image. \n\n\nFixes for controller input issues with RetroArch including improved config generation to work around problems with 8bitdo controllers.\n\n\nFixed up Bluetooth pairing module on Jessie.\n\n\nImprovements to the Xbox userspace driver (xboxdrv) including partial support of Xbox One controller.\n\n\nCan now choose to exit or restart Emulation Station. Metadata will no longer be lost if choosing to shutdown or reboot.\n\n\nPreliminary support for using the RetroPie-Setup script on x86 + X11 on Debian/Ubuntu and Ubuntu on the Odroid-C1 (building from source only).\n\n\n$HOME/.emulationstation has relocated to /opt/retropie/configs/all/emulationstation - but is symlinked from the original location. The USB Rom Service script will backup all of /opt/retropie/configs to USB. Previously it only backed up /$HOME/.emulationstation.\n\n\nSupport for choosing RetroArch shaders and overlays from the RetroPie-Setup configuration editor.\n\n\nAdded pixel theme from Rookervik to theme installer.\n\n\nWonderswan and NeoGeo Pocket separated into Wonderswan/Wonderswan Colour, NeoGeo Pocket/NeoGeo Pocket Colour. \n\n\nVarious other bugfixes and improvements.\n\n\n\n\nVersion 3.3: (December 21, 2015)\n\n\n\n\nMupen64plus controller configs (including hotkeys) and Reicast (Dreamcast) controller configs added to the autoconfiguration script in emulationstation. Mupen64plus is now the default n64 emulator due to compatibility.\n\n\nAdvanceMAME 1.4 (replaces 1.2 - still based on MAME 0.106).\n\n\nPlayStation Portable emulator ppsspp is included by default (libretro version is default, the standalone version is optional).\n\n\nRemoved cpc4rpi emulator, and added CapriceRPI which has many improvements over cpc4rpi.\n\n\nUpdated libretro binaries including lr-fba-next updated to v0.2.97.37, and an improved lr-caprice32 which is now moved out of experimental and is the default Amstrad CPC emulator.\n\n\nUpdates to Reicast emulator, which has been moved out of experimental.\n\n\nNew experimental modules: OpenTTD (open source simulation game based on Transport Tycoon Deluxe), Wolf4SDL (Port of Wolfenstein 3d), Zdoom (Enhanced Port of the official DOOM source)\n\n\nPS3 controller improvements (added Gasia PS3 clone Support).\n\n\nUpdated OpenMSX emulator (to the dev version 0.12.0+).\n\n\nBeta images based on Raspbian Jessie are included. They may have bugs that are not present in the Raspbian Wheezy release.\n\n\nNew themes added to the theme installer (Eudora from AmadhiX, Tronkyfran from Tronkyfran, and Retroplay Canela from InsecureSpike).\n\n\nRetroArch joy-config tool removed (custom configs are now done through the RGUI or manually).\n\n\nVarious other bugfixes/improvements.\n\n\n\n\nVersion 3.2.1: (October 28, 2015)\n\n\n\n\nFixes issues with controller d-pad configurations for all RetroArch-based emulators.\n\n\n\n\nVersion 3.2: (October 26, 2015)\n\n\n\n\nFixed binaries of mupen64plus and lr-tyrquake and removed mupen64plus-testing as it is now included in the default mupen64plus.\n\n\nUpdated to Hatari 1.9, and built in IPF image support.\n\n\nBinary installs are now supported for those running under Raspbian Jessie - although there still may be bugs.\n\n\nNew experimental modules - ppsspp / lr-ppsspp (PlayStation Portable emulator), px68k (X68000 emulator - too slow to be usable on a rpi2 though), opentyrian (a port of the DOS shoot-em-up Tyrian), and SuperTux.\nuae4arm is now moved from experimental.\n\n\nImprovements to the generic bluetooth pairing module.\n\n\nImprovements to ps3controller pairing\n\n\nFixed SNESDev driver building (failed on first attempt).\n\n\nNew Turtle Pi Emulation Station theme installable via the themes installer\n\n\nGLideN64 video plugin for mupen64plus\n\n\nVarious other bugfixes.\n\n\n\n\nVersion 3.1: (October 6, 2015)\n\n\n\n\nWorkaround for lr-snes9x-next crashes for certain games.\n\n\nNew theme installation script and excellent new theme \u201cCarbon\u201d which is lighter on memory than the Simple theme (no more white screen of death! - works with all systems).\n\n\nInitial bluetooth module for pairing keyboards.\n\n\nWe now provide images for use with Berryboot.\n\n\nMoved Super Mario War out of experimental.\n\n\nNew default lr-fba-next emulator for rpi2 owners.\n\n\nAdded lr-mame2003 (based on MAME 0.78) emulator.\n\n\nMinor Emulation Station tweaks, reduced time to skip buttons, and improved parsing with brackets in gamelists.\n\n\nNew experimental modules - sselph\u2019s scraper and lr-mame2010 (based on MAME 0.139)\nImproved ps3 controller pairing.\n\n\nInitial support for installing RetroPie manually on Raspbian Jessie and OSMC (via source only - consider this experimental for now).\n\n\nSplashscreen improvements- can be added from samba shares, splash videos play all the way through without emulationstation cutting them off.\n\n\nLots of bugfixes, and improvements to the RetroPie Wiki.\n\n\n\n\nVersion 3.0.0 Stable : (August 11, 2015)\n\n\n\n\nNew GUI for basic WiFi configuration and Config editing\n\n\nAdded Dragon 32 / TRS-80 (CoCo) emulator xroar\n\n\nAdded Super Mario War to ports\n\n\nMove some emulators out of experimental \u2013 lr-bluemsx (Now default for msx), lr-mednafen-ngp, lr-mednafen-wswan, lr-mgba, lr-tgbdual, lr-vba-next\n\n\nAdded virtualgamepad to experimental which allows gamepad emulation via a mobile\n\n\nRestarting setup script no longer needed after updating the setup script.\n\n\nImproved support for video splashscreens and a centralised splashscreen repo (https://github.com/RetroPie/retropie-splashscreens)\n\n\n\n\nVersion 3.0.0 RC1: (July 18, 2015)\n\n\n\n\nInput configuration improvements / fixes / optimisations\n\n\nBasic joypad control in RetroPie-Setup / emulator prelaunch menus.\n\n\nMake libretro Fuse default spectrum emulator (for easier joypad control)\n\n\nAdded new spectrum emulator ZEsarUX to the experimental section.\n\n\nAdded launching RetroArch with RGUI from the RetroPie menu in EmulationStation.\n\n\nVarious other bugfixes \u2013 you can follow changes as they happen on the GitHub site \u2013https://github.com/RetroPie/RetroPie-Setup/commits/master\n\n\n\n\nVersion 3.0.0 BETA 4: (June 18, 2015)\n\n\n\n\nWork around issue with RetroArch GUI not accepting input/freezing.\n\n\nFixed up RetroArch control configuration via our new integrated input configuration.\n\n\nMoved RetroArch joypad cofigurations to /opt/retropie/configs/all/retroarch-joypads\n\n\n\n\nVersion 3.0.0 BETA 3: (June 10, 2015)\n\n\n\n\nIntegrated controls configuration for EmulationStation and RetroArch \u2013 On first start EmulationStation will ask for controls to be configured, and will then also configure RetroArch based on your choices. Note that there will be a delay after selecting OK whilst this is done \u2013 this will be improved later to give feedback so it doesn\u2019t look as though EmulationStation has frozen.\n\n\nNew experimental modules/emulators: limelight (Networked game streamer for Steam), lr-tgbdual (gameboy color emu with link support), DXX-Rebirth port (Decent 1/2), r-mednafen-wswan (Wonderswan emu), lr-mednagen-gbp (NeoGeo Pocket emu), uae4arm (Amiga emu), lr-fuse (ZX Spectrum emu), lr-caprice32 (Amstrad CPC emu), lr-gw (Game and Watch simulator). All modules prefixed with lr- are libretro cores for use with Retroarch.\n\n\nNew startup picture with new RetroPie logo.\n\n\nAdded additional ES theme \u201cColor Pi\u201d\n\n\nDosbox bug fixes / Ability to launch custom shell scripts.\n\n\nWifi configuration under RetroPie menu.\n\n\nPS3 controller setup improvements\n\n\nDisabled root password by default\n\n\nVarious other fixes / improvements.\n\n\n\n\nVersion 3.0.0 BETA 2: (April 4, 2015)\n\n\n\n\nMore launch options for Hatari\n\n\nResize framebuffer with video mode change (and allow framebuffer res to be changed independently for terminal/X apps)\n\n\nImprovements to minecraft-pi launch script\n\n\nAdded some experimental modules \u2013 Adventure Game Studio engine, yabause (Sega saturn), virtualjaguar (Atari Jaguar), beetle-vb (Virtualboy), mgba (game boy advance)\n\n\nAdded ProSystem (Atari 7800 emulator)\n\n\nFixes to mupen64plus build\n\n\nVarious other fixes / Improvements\n\n\n\n\nVersion 3.0.0 BETA (March 26, 2015)\n\n\n\n\nOverhaul of emulator selection / launching \u2013 single rom folder per platform, with the facility to change default emulator per platform or per rom on launch. Also allows launch of certain emulators with specific configurations, such as render plugin for mupen64plus, and model configuration for fuse.\n\n\nRetroArch render resolution is also configurable on launch. Video output is no longer switched by default, but can be adjusted by the user if needed.\n\n\nNew retropie menu in EmulationStation with easy access to retropie-setup, file manager, audio settings, controller settings, raspi-config and so on.\n\n\nEmulationstation entries are now sorted (by name) \u2013 should mostly match alphabetical order of rom folders.\n\n\nWork to ensure user configurations are preserved. More configuration files moved to /opt/retropie/configs/ structure.\n\n\nEmulationStation restarts on exit by default unless a key is pressed. Makes it easier for those that want to quick and let it restart to pick up any new roms.\n\n\nNew platforms.cfg file that contains emulator names / supported file extensions. This can be copied to /opt/retropie/configs/all to override extensions added to emulationstation (A reinstall / re-configuration of\nthe a related emulator is needed after to update the emulationstation configuration)\n\n\nAddition of AdvanceMAME 1.2 (based on MAME 0.106) which may be useful for rpi2 owners over the 0.94 version. Framebuffer output code adjusted to work better with the Pi.\n\n\nrpix86 is included again by default (was missing from the last image).\n\n\nUpdates to the usbromservice. If you want to sync rom folders it now requires a folder in the root of the usb stick called \u201cretropie\u201d. The roms will be synced from a sub folder called roms. It also can backup/restore your custom emulationstation gameslists / data.\n\n\nRetroArch includes additional shaders and overlays\n\n\nVarious other emulator updates and fixes.\n\n\n\n\nVersion 2.6.0 (February 17, 2015)\n\n\n\n\nnew uae4all emulator\n\n\nupdated sdl 1.x with rpi fixes for fbcon and dispmanx backend.\n\n\nrpi2 optimisations for dosbox\n\n\nupdate hatari emulator\n\n\njzintv updates\n\n\nmupen64plus/mupen64plus-libretro changes/fixes\n\n\natari800 updates (with gles support on rpi)\n\n\nallow genesis libretro core to be used for mastersystem\n\n\nnew experimental cores for gb advance (rpi2 only), and nes\n\n\noptimisation / fixes for rpi\n\n\nvarious other fixes / improvements\n\n\n\n\nVersion 2.5.0 (February 7, 2015)\n\n\n\n\nUpdated to latest firmware to support Raspberry Pi 2 (TM)\n\n\nUsb rom service should now be working\n\n\nupdated all binaries\n\n\nmupen64plus is out of experimental\n\n\nadded gpu_mem_1024 to config.txt\n\n\nremoved overclocking settings\n\n\nsimplified rom folder permissions\n\n\nremoved ignore_safe_mode as safe mode is removed since march 2014\n\n\n\n\nVersion 2.4.2 (January 17, 2015)\n\n\n\n\nreworked vice c64 emulator \u2013 defaults with dispmanx, but should run without now without also. Comes with a default config which is better\n\n\nsuited for the pi. config now resides in /opt/retropie/configs/c64/ rather than home directory.\n\n\nretronet improvements \u2013 now can enable on game launch from runcommand menu.\n\n\nadded vectrex libretro core\n\n\nalways reset framebuffer even when not switching screen mode in runcommmand.sh which should help some emulators that seem to leave the framebuffer in an unusable state.\n\n\nfix for fmsx rom install\n\n\nuse dispmanx sdl by default for uae4all\n\n\nuse dispmanx sdl by default for dgen\n\n\nmame4all configs moved to /opt/retropie/configs/mame/ rather than mame4all (to match existing structure) \n\n\n\n\nVersion 2.4.1 (January 11, 2015)\n\n\n\n\nMinor bug fixes\n\n\nUpdated RetroPie-Setup Script\n\n\n\n\nVersion 2.4 (January 6, 2015)\n\n\n\n\nUpdate of all components, e.g., RetroArch supports ZIP files natively now\n\n\nDispmanx can be activated or deactivated for each emulator individually now\n\n\nThe screen mode is configurable for each emulator individually now\n\n\nAdded Atari Lynx emulator\n\n\nAdded Darkplaces Quake (experimental)\n\n\nAdded Minecraft-Pi (experimental)\n\n\nAdded OpenMSX (experimental)\n\n\nEnhanced integration of ScummVM\n\n\nStripped down number of installed system packages to a minimum\n\n\nSeveral bug fixes\n\n\nReorganization of the binaries\n\n\nSeparation of sources and binaries\n\n\n\n\nVersion 2.3 (July 20, 2014)\n\n\n\n\nSeveral bug fixes\n\n\n\n\nVersion 2.2 (July 5, 2014)\n\n\n\n\nAdded Mednafen PCE Fast\n\n\nFixed configurations for sega32x, segacd\n\n\nUpdated SAMBA configuration\n\n\nFixed imame4all-rpi rom dir configuration\n\n\nUpdated Python help scripts\n\n\n\n\nVersion 2.1 (June 29, 2014)\n\n\n\n\nFixed black screen when exiting to console\n\n\nFixed Doom Shareware starter\n\n\nRemoved hidden meta data files from FBA and Megadrive rome directory\n\n\n\n\nVersion 2.0 (May 29, 2014)\n\n\n\n\nReorganized folder structure (root dir is now /opt/retropie)\n\n\nComplete rebuild of all binaries with latest versions\n\n\nEmulationStation 2 as new front-end\n\n\nAdded MSX emulator OpenMSX\n\n\nRefactored RetroPie-Setup Script with command line capabilities\n\n\n\n\nVersion 1.10.1 (Dec 2, 2013)\n\n\n\n\nUpdated Raspbian to the latest packages\n\n\nUpdated the default splash screen\n\n\nAdded x86 emulator FastDosbox\n\n\n\n\nVersion 1.9.1 (November 12, 2013)\n\n\n\n\nFixed \u201cfreezing\u201d bug\n\n\n\n\nVersion 1.9 (November 6, 2013)\n\n\n\n\nAdded emulator Mame4All-RPi\n\n\nAdded emulator Mupen64Plus-RPi\n\n\nAdded splash screen configuration to RetroPie Setup Script\n\n\nAdded configuration menu for RetroArch NetPlay to RetroPie Setup Script\n\n\nEnhanced debug log functionality of RetroPie Setup Script\n\n\n\n\nVersion 1.8.1 (September 13, 2013)\n\n\n\n\nAdded freezing fix for Emulation Station\n\n\nRe-added source-based installation function for PC-Engine Libretro core\n\n\n\n\nVersion 1.8 (September 4, 2013)\n\n\n\n\nAdded (Libretro based) Genesis emulator Picodrive\n\n\nAdded emulator PiFBA\n\n\nUpdated Emulation Station, x86 emulator, and RetroArch to latest release\n\n\n\n\nVersion 1.7 (July 14, 2013)\n\n\n\n\nAdded ES-Config\n\n\nAdded Atari 2600 emulator Stella\n\n\nUpdated Emulation Station, x86 emulator to latest releases\n\n\n\n\nVersion 1.6.1 (June 12, 2013)\n\n\n\n\nFixed GPSP binary\n\n\n\n\nVersion 1.6 (June 5, 2013)\n\n\n\n\nAdded emulator Basilisk II\n\n\nAdded Dispmanx\n\n\nUpdated every installable component\n\n\nEnhanced script for switching between resolutions\n\n\n\n\nVersion 1.5 (May 5 2013)\n\n\n\n\nAdded emulator gpSP\n\n\nAdded emulator SNES9X-RPi\n\n\nAdded emulator PiSNES\n\n\nAdded GPIO gamepad drivers\n\n\nUpdated Emulation Station\n\n\nUpdated rpix86\n\n\n\n\nVersion 1.4.1 (April 17, 2013)\n\n\n\n\nUpdated Emulation Station\n\n\nUpdated rpix86\n\n\n\n\nVersion 1.4 (April 7, 2013)\n\n\n\n\nAdded system-dependent change of HDMI video resolution for increased performance for RetroArch-based emulators.\n\n\nAdded automatic USB ROM-copy service\n\n\nAdded x86 emulator rpix86\n\n\nAdded Apple ][ emulator Linapple\n\n\nEnhanced themes\n\n\n\n\nVersion 1.3.1 (March 18, 2013)\n\n\n\n\nMinor changes in the file organization\n\n\n\n\nVersion 1.3 (March 7, 2013)\n\n\n\n\nAdded NXEngine / Cavestory\n\n\nUpdated DGEN to version 1.32\n\n\nEnhanced pre-defined RetroArch input configuration\n\n\n\n\nVersion 1.2.1 (February 25, 2013)\n\n\n\n\nResized partition so that the image fits on 4 GB cards\n\n\n\n\nVersion 1.2 (February 20, 2013)\n\n\n\n\nAdded Intellivision emulator\n\n\nAdded SAMBA share installation and configuration\n\n\nUsed binaries-based setup for generating the SD-card image\n\n\nUpdated themes\n\n\n\n\nVersion 1.1 (February 10, 2013)\n\n\n\n\nAdded AdvMAME emulator\n\n\n(Re-)added Genesis-GX RetroArch core\n\n\nAdded Final Burn Alpha emulator\n\n\n\n\nVersion 1.0 (July 22, 2012)\n\n\nRetroPie is Born!", 
            "title": "Changelogs"
        }, 
        {
            "location": "/Changelogs/#changelogs", 
            "text": "This page is a list of all of the changelogs for each version of RetroPie. For a complete list of all commits to the source code see  here:", 
            "title": "CHANGELOGS"
        }, 
        {
            "location": "/Changelogs/#version-41-november-5-2016", 
            "text": "Changes since 4.0.2:   Updated RetroArch and many libretro cores to the latest versions.  Some libretro packages have been renamed to match the upstream core names:  lr-fba to lr-fbalpha2012  lr-fba-next to lr-fbalpha  lr-pocketsnes to lr-snes9x2002  lr-catsfc to lr-snes9x2005  lr-snes9x-next to lr-snes9x2010  Updated Vice (C64 emulator) to the latest version.  Fixed PPSSPP building on the RPI and updated it to the latest version.  lr-fba-next updated to fbalpha v0.2.97.39 including fixes for Irem hardware on arm (rtype / rtype 2 etc)  WiFi configuration - added ability to import Wifi ssid/psk from /boot/wifikeyfile.txt for set-up without a keyboard.  Updated Fuse (Spectrum emulator) to v1.3.0  Updated Zesarux (Spectrum / CPC emulator) to the latest version.  Include lr-glupen64 by default on image (moved from optional to main).  Added darkplaces-quake to optional packages. When installing/update the Quake emulators, launch scripts for any installed mission packs will be created.  Build ResidualVM with SDL2 + opengles support.  Added steam controller driver from https://github.com/ynsta/steamcontroller  Added mk_arcade_joystick_rpi driver from https://github.com/recalbox/mk_arcade_joystick_rpi  Fixed build issues on uae4arm, and kickstart removal on upgrade of uae4arm/uae4all.  Screensaver / Screen dimming in Emulation Station no longer stops the built in scraper.  Compatibility with upstream plymouth changes. Image is based on the latest upstream Raspbian Lite from 2016-09-23 with all updates.  New themes added to the theme installer - including pixel-meta, pixel-tft, luminous, minilumi from Rookervik and io and spare themes from Mattrixk  New packages added to experimental section  Added emulators lr-beetle-pcfx (PCFX emulator)  Added retropie-manager web interface (based on recalbox-manager).  Added pcsx2 emulator (Playstation 2 emulator - x86 / x86_64 only).  Added openpht  (x86 / x86_64 only).  Added fs-uae (Amiga emulator - x86 / x86_64 only).  Added lr-bsnes (Super Nintendo emulator - x86/x86_64 only)  Added lr-hatari (Atari ST/STE/TT/Falcon emulator)  Added some RetroPie-Setup function documentation to aid those contributing code - https://retropie.org.uk/retropie-setup-api/  Various other improvements / bugfixes", 
            "title": "Version 4.1: (November 5, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-40-august-19-2016", 
            "text": "Changes since 3.8.1:   Setup script improvements:  Added the ability to install/update and remove packages.  Added help docs to the setup script.  Renamed mednafen emulators to beetle to match upstream libretro repositories.  Renaming of ES input configuration which was causing confusion for shoulder/trigger inputs.  Much faster Emulation Station start-up in gamelist only mode.  Updated Xpad driver included with \u201ctrigger to button\u201d enabled, so mapping of Xbox 360 / Logitech trigger buttons is easier.  Input configuration script to set up player 1 automatically on pifba and pisnes.  Configuration Editor can now help you configure player gamepad order for libretro emulators.  Updated PSP emulators ppsspp and lr-ppsspp with a fix for the pausing during play.  Autostart improvements: boot to kodi option added - (exiting kodi will take you back to emulationstation).  Improvements to mupen64plus Glide64 video plugin, which is now the default.  Added new libretro emulator based on mupen64 - lr-glupen64.  lr-mame2003 updates - support for mice/analogue joystick support. Fixed aspect ratio issues.  Updates to various other emulators including reicast, lr-fceumm, lr-nestopia, lr-snes9x-next and the RetroArch frontend.  SDL2 dispmanx scaling, so SDL2 software can render to a lower resolution and be scaled in hardware. This enhances performance on mupen64plus for example, without having to change the video mode.  Improvements to the Bluetooth module, including the ability to try and reconnect to devices in the background, and an option to switch off our mapping hack for 8bitdo, so devices with a newer firmware will map correctly for RetroArch. Fix pairing with Android phones.  Splashscreen improvements: New default splashscreen and a new splashscreen repository with additional splashscreens.  Support for configs/all/runcommand-onstart.sh  configs/all/runcommand-onend.sh user scripts  New experimental modules:  TRS-80 emulator sdltrs.  TI-99/4A emulator ti99sim.  Oric 1/Atmos emulator Oricutron.  Dinothawr (lr-dinothawr - standalone libretro puzzle game).  lr-mame2014  (Late 2014/Early 2015 version of MAME - uses 0.159 romset)  Alternate Virtual Gamepad by sbidolach.  Various other bug fixes and improvements.", 
            "title": "Version 4.0: (August 19, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-381-june-4-2016", 
            "text": "Fix escaping in iniSet causing initial backslashes to be incorrect in ini files (Affected some +Start Scripts with spaces such as DOSBox).  Don\u2019t overwrite existing configs when updating advmame.  SSelph\u2019s scraper \u2013 Add option to set -append and -use_nointro_name=false flags  Disable binary install on Wheezy.  Fix building of gamecondriver.  Correct Emulation Station autobooting configuration due to changes in raspi-config.  Added missing zip dependency for Solarus.  Fix c p error with mupen64plus that broke the initial config generation.  Added new EmulationStation theme \u201cmaterial\u201d from user lilbud.  Lr-nxengine \u2013 no error message was shown when required data files are missing.", 
            "title": "Version 3.8.1: (June 4, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-38-may-27-2016", 
            "text": "Raspbian package/firmware rollups that fix the lockups with the Raspberry Pi 3 internal bluetooth.  New SDL1 dispmanx backend from Vanfanel with triple buffering which should solve some of the performance issues on the previous code. Also some additional changes are included so you can adjust the aspect ratio with env variable SDL_DISPMANX_RATIO (eg 1.33 for 4:3). The aspect ratio will be ignored if SDL_DISPMANX_IGNORE_RATIO is set and sdl1 apps will display full screen. Vice is now set to use 4:3 ratio on the Raspberry Pi.  Reicast (Dreamcast emulator), now supports multiplayer.  lr-pcsx-rearmed (PlayStation emulator) now supports 3-8 players.  Updated Raspberry Pi binaries for lr-fba-next, uae4arm, mupen64plus, Reicast, lr-picodrive, lr-nestopia, lr-pcsx-rearmed, lr-mgba, lr-genesis-plus-gx, lr-mame2003, and lr-fceum.  Added new videocore mupen64plus video plugin.  Improvements to Apple2 (supports automount now).  Added wiki viewer.  Improvements to the splashscreen module (added previewer, randomiser, and no longer requires a folder to be created in the splashscreen directory).  Various other bugfixes and minor improvements.", 
            "title": "Version 3.8: (May 27, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-37-april-14-2016", 
            "text": "Added new experimental modules:   The Ur Quan Masters  (Port of DOS game Star Control 2).  Xrick (Port of Rick Dangerous).  Tyrquake (Standalone, not libretro).  Solarus Engine (Homebrew Zelda Clone).  SDLPoP (Prince of Persia Port).  Cannonball (Outrun Engine).  Stratagus (Warcraft and Starcraft Engine).  OpenBOR (Beats of Rage 2d Sidescrolling Game Engine).  Commander Genius (Port of Commander Keen).  Micropolis (Open source version of Sim City Classic).  Aleph One (Open Source port of Marathon Series).  Giana\u2019s Return (Fan-Made sequel to the Giana Sisters).  Lincity (Sim City Clone).  Simcoupe (SAM Coup\u00e9 Emulator).  LXDE Desktop (Option in raspi-tools to reinstall the desktop environment).  Updated Kodi to Kodi 16 (which includes joypad support).  Updated PS3 Module (timeout fixed).  SDL2 PS3/Wii U Pro controller fixes.  UAE4Arm updated.  lr-mame2003 updated with sample/nvram support and additional core settings.  Mupen64plus updated with fix for black screen with rice plugin.  Scummvm Improvements (updated to 1.8 with OpenGL and partial Myst support).  Updated Config Editor (https://github.com/RetroPie/RetroPie-Setup/wiki/Configuration-Editor).  Updated Carbon and Pixel Themes and added default images to the RetroPie Menu.  Added \u201cOther Settings\u201d menu to Emulationstation with \u201csave metadata on exit\u201d and \u201cparse gamelists only\u201d. These options were added to mitigate the long boot and shutdown times with large romsets.  Various other improvements and fixes.", 
            "title": "Version 3.7: (April 14, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-36-march-1-2016", 
            "text": "Added Support for the Raspberry Pi 3 [Via Raspbian Firmware Update]   Added new experimental modules:  Daphne (Laserdisc Emulator)  Libretro-QuickNES  Libretro-Beetle PSX (x86 only)  Libretro-Beetle Lynx  GemRB engine (Baldur\u2019s Gate, Icewind Dale, Planescape)  ResidualVM (Engine for Grim Fandango and Escape from Monkey Island)  Libretro-MESS (based on the most recent version of MAME)  Libretro-MAME (based on the most recent version of MAME)  Added EmulationStation theme Simpler Turtle Pi to the theme installer from Omnija.  Added version details and uninstall option to the RetroPie Setup Script.  Fixed insert coin not working on arcade based emulators.  Various other bugfixes and improvements.", 
            "title": "Version 3.6: (March 1, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-35-february-6-2016", 
            "text": "After taking into consideration the feedback from the vibrant RetroPie community, we have provided a few more functions to simplify the user experience such as automatic expansion of the filesystem on boot, less terminal text, and more configuration options for the runcommand launch menu. We have also fixed up some bugs with Raspbian Jessie such as the USB ROM service and have added two new experimental modules - the L\u00f6ve game engine and a ColecoVision emulator (CoolCV).    Added new experimental modules, L\u04e7ve 2D Game Engine, Colecovision (CoolCV).  Debian usbmount package fixed up for systemd udev compatibility, making the USB ROM service work properly again without being killed after 30 seconds. Also added ntfs support by default.  Added an arcade rom folder option where all arcade games can be placed.   Improvements to EmulationStation (Fix crash on rom delete, direct launch, symlink support, and other bug fixes).  Improvements to the Runcommand Launch Menu: Cleaner dialog on launch, ability to show game artwork on launch, ability to disable joystick support as well as the ability to disable the entire runcommand launch menu.  PS3 Controller improvements - Add multiple gasia and shanwan controller support.  Updated lr-mgba emulator binaries (new upstream release of mgba 0.4.0)  Improvements on pre-built image - disabled screen blanking, quieter boot, and filesystem automatically expanded on first boot.  Various other bug fixes.", 
            "title": "Version 3.5: (February 6, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-34-january-19-2016", 
            "text": "Mostly fixes and improvements rather than new stuff this time folks. There were some problems with our RetroArch configuration defaults in RetroPie 3.3 which should be sorted now, and we have fixed up a few things that didn\u2019t work correctly with Raspbian Jessie. We also have added early support for using the RetroPie-Setup script on a X86/X11 desktop setup, as well as some basic support for building EmulationStation   RetroArch + cores on the ODroid-C1. For more information regarding installation on x86 see https://github.com/RetroPie/RetroPie-Setup/wiki/RetroPie-Ubuntu-15.10-x86-Flavor.  We are now using Raspbian Jessie as the base for the RetroPie image. Those using Wheezy can update RetroPie-Setup and emulators by following the instructions at https://github.com/RetroPie/RetroPie-setup/wiki/Updating-RetroPie - however moving to Jessie is recommended. As it takes time to pre-build binaries, in the future we will only be providing pre-built binaries for Raspbian Jessie.  Changes since 3.3:   Now using Raspbian Jessie for the RetroPie image.   Fixes for controller input issues with RetroArch including improved config generation to work around problems with 8bitdo controllers.  Fixed up Bluetooth pairing module on Jessie.  Improvements to the Xbox userspace driver (xboxdrv) including partial support of Xbox One controller.  Can now choose to exit or restart Emulation Station. Metadata will no longer be lost if choosing to shutdown or reboot.  Preliminary support for using the RetroPie-Setup script on x86 + X11 on Debian/Ubuntu and Ubuntu on the Odroid-C1 (building from source only).  $HOME/.emulationstation has relocated to /opt/retropie/configs/all/emulationstation - but is symlinked from the original location. The USB Rom Service script will backup all of /opt/retropie/configs to USB. Previously it only backed up /$HOME/.emulationstation.  Support for choosing RetroArch shaders and overlays from the RetroPie-Setup configuration editor.  Added pixel theme from Rookervik to theme installer.  Wonderswan and NeoGeo Pocket separated into Wonderswan/Wonderswan Colour, NeoGeo Pocket/NeoGeo Pocket Colour.   Various other bugfixes and improvements.", 
            "title": "Version 3.4: (January 19, 2016)"
        }, 
        {
            "location": "/Changelogs/#version-33-december-21-2015", 
            "text": "Mupen64plus controller configs (including hotkeys) and Reicast (Dreamcast) controller configs added to the autoconfiguration script in emulationstation. Mupen64plus is now the default n64 emulator due to compatibility.  AdvanceMAME 1.4 (replaces 1.2 - still based on MAME 0.106).  PlayStation Portable emulator ppsspp is included by default (libretro version is default, the standalone version is optional).  Removed cpc4rpi emulator, and added CapriceRPI which has many improvements over cpc4rpi.  Updated libretro binaries including lr-fba-next updated to v0.2.97.37, and an improved lr-caprice32 which is now moved out of experimental and is the default Amstrad CPC emulator.  Updates to Reicast emulator, which has been moved out of experimental.  New experimental modules: OpenTTD (open source simulation game based on Transport Tycoon Deluxe), Wolf4SDL (Port of Wolfenstein 3d), Zdoom (Enhanced Port of the official DOOM source)  PS3 controller improvements (added Gasia PS3 clone Support).  Updated OpenMSX emulator (to the dev version 0.12.0+).  Beta images based on Raspbian Jessie are included. They may have bugs that are not present in the Raspbian Wheezy release.  New themes added to the theme installer (Eudora from AmadhiX, Tronkyfran from Tronkyfran, and Retroplay Canela from InsecureSpike).  RetroArch joy-config tool removed (custom configs are now done through the RGUI or manually).  Various other bugfixes/improvements.", 
            "title": "Version 3.3: (December 21, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-321-october-28-2015", 
            "text": "Fixes issues with controller d-pad configurations for all RetroArch-based emulators.", 
            "title": "Version 3.2.1: (October 28, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-32-october-26-2015", 
            "text": "Fixed binaries of mupen64plus and lr-tyrquake and removed mupen64plus-testing as it is now included in the default mupen64plus.  Updated to Hatari 1.9, and built in IPF image support.  Binary installs are now supported for those running under Raspbian Jessie - although there still may be bugs.  New experimental modules - ppsspp / lr-ppsspp (PlayStation Portable emulator), px68k (X68000 emulator - too slow to be usable on a rpi2 though), opentyrian (a port of the DOS shoot-em-up Tyrian), and SuperTux.\nuae4arm is now moved from experimental.  Improvements to the generic bluetooth pairing module.  Improvements to ps3controller pairing  Fixed SNESDev driver building (failed on first attempt).  New Turtle Pi Emulation Station theme installable via the themes installer  GLideN64 video plugin for mupen64plus  Various other bugfixes.", 
            "title": "Version 3.2: (October 26, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-31-october-6-2015", 
            "text": "Workaround for lr-snes9x-next crashes for certain games.  New theme installation script and excellent new theme \u201cCarbon\u201d which is lighter on memory than the Simple theme (no more white screen of death! - works with all systems).  Initial bluetooth module for pairing keyboards.  We now provide images for use with Berryboot.  Moved Super Mario War out of experimental.  New default lr-fba-next emulator for rpi2 owners.  Added lr-mame2003 (based on MAME 0.78) emulator.  Minor Emulation Station tweaks, reduced time to skip buttons, and improved parsing with brackets in gamelists.  New experimental modules - sselph\u2019s scraper and lr-mame2010 (based on MAME 0.139)\nImproved ps3 controller pairing.  Initial support for installing RetroPie manually on Raspbian Jessie and OSMC (via source only - consider this experimental for now).  Splashscreen improvements- can be added from samba shares, splash videos play all the way through without emulationstation cutting them off.  Lots of bugfixes, and improvements to the RetroPie Wiki.", 
            "title": "Version 3.1: (October 6, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-300-stable-august-11-2015", 
            "text": "New GUI for basic WiFi configuration and Config editing  Added Dragon 32 / TRS-80 (CoCo) emulator xroar  Added Super Mario War to ports  Move some emulators out of experimental \u2013 lr-bluemsx (Now default for msx), lr-mednafen-ngp, lr-mednafen-wswan, lr-mgba, lr-tgbdual, lr-vba-next  Added virtualgamepad to experimental which allows gamepad emulation via a mobile  Restarting setup script no longer needed after updating the setup script.  Improved support for video splashscreens and a centralised splashscreen repo (https://github.com/RetroPie/retropie-splashscreens)", 
            "title": "Version 3.0.0 Stable : (August 11, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-300-rc1-july-18-2015", 
            "text": "Input configuration improvements / fixes / optimisations  Basic joypad control in RetroPie-Setup / emulator prelaunch menus.  Make libretro Fuse default spectrum emulator (for easier joypad control)  Added new spectrum emulator ZEsarUX to the experimental section.  Added launching RetroArch with RGUI from the RetroPie menu in EmulationStation.  Various other bugfixes \u2013 you can follow changes as they happen on the GitHub site \u2013https://github.com/RetroPie/RetroPie-Setup/commits/master", 
            "title": "Version 3.0.0 RC1: (July 18, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-300-beta-4-june-18-2015", 
            "text": "Work around issue with RetroArch GUI not accepting input/freezing.  Fixed up RetroArch control configuration via our new integrated input configuration.  Moved RetroArch joypad cofigurations to /opt/retropie/configs/all/retroarch-joypads", 
            "title": "Version 3.0.0 BETA 4: (June 18, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-300-beta-3-june-10-2015", 
            "text": "Integrated controls configuration for EmulationStation and RetroArch \u2013 On first start EmulationStation will ask for controls to be configured, and will then also configure RetroArch based on your choices. Note that there will be a delay after selecting OK whilst this is done \u2013 this will be improved later to give feedback so it doesn\u2019t look as though EmulationStation has frozen.  New experimental modules/emulators: limelight (Networked game streamer for Steam), lr-tgbdual (gameboy color emu with link support), DXX-Rebirth port (Decent 1/2), r-mednafen-wswan (Wonderswan emu), lr-mednagen-gbp (NeoGeo Pocket emu), uae4arm (Amiga emu), lr-fuse (ZX Spectrum emu), lr-caprice32 (Amstrad CPC emu), lr-gw (Game and Watch simulator). All modules prefixed with lr- are libretro cores for use with Retroarch.  New startup picture with new RetroPie logo.  Added additional ES theme \u201cColor Pi\u201d  Dosbox bug fixes / Ability to launch custom shell scripts.  Wifi configuration under RetroPie menu.  PS3 controller setup improvements  Disabled root password by default  Various other fixes / improvements.", 
            "title": "Version 3.0.0 BETA 3: (June 10, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-300-beta-2-april-4-2015", 
            "text": "More launch options for Hatari  Resize framebuffer with video mode change (and allow framebuffer res to be changed independently for terminal/X apps)  Improvements to minecraft-pi launch script  Added some experimental modules \u2013 Adventure Game Studio engine, yabause (Sega saturn), virtualjaguar (Atari Jaguar), beetle-vb (Virtualboy), mgba (game boy advance)  Added ProSystem (Atari 7800 emulator)  Fixes to mupen64plus build  Various other fixes / Improvements", 
            "title": "Version 3.0.0 BETA 2: (April 4, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-300-beta-march-26-2015", 
            "text": "Overhaul of emulator selection / launching \u2013 single rom folder per platform, with the facility to change default emulator per platform or per rom on launch. Also allows launch of certain emulators with specific configurations, such as render plugin for mupen64plus, and model configuration for fuse.  RetroArch render resolution is also configurable on launch. Video output is no longer switched by default, but can be adjusted by the user if needed.  New retropie menu in EmulationStation with easy access to retropie-setup, file manager, audio settings, controller settings, raspi-config and so on.  Emulationstation entries are now sorted (by name) \u2013 should mostly match alphabetical order of rom folders.  Work to ensure user configurations are preserved. More configuration files moved to /opt/retropie/configs/ structure.  EmulationStation restarts on exit by default unless a key is pressed. Makes it easier for those that want to quick and let it restart to pick up any new roms.  New platforms.cfg file that contains emulator names / supported file extensions. This can be copied to /opt/retropie/configs/all to override extensions added to emulationstation (A reinstall / re-configuration of\nthe a related emulator is needed after to update the emulationstation configuration)  Addition of AdvanceMAME 1.2 (based on MAME 0.106) which may be useful for rpi2 owners over the 0.94 version. Framebuffer output code adjusted to work better with the Pi.  rpix86 is included again by default (was missing from the last image).  Updates to the usbromservice. If you want to sync rom folders it now requires a folder in the root of the usb stick called \u201cretropie\u201d. The roms will be synced from a sub folder called roms. It also can backup/restore your custom emulationstation gameslists / data.  RetroArch includes additional shaders and overlays  Various other emulator updates and fixes.", 
            "title": "Version 3.0.0 BETA (March 26, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-260-february-17-2015", 
            "text": "new uae4all emulator  updated sdl 1.x with rpi fixes for fbcon and dispmanx backend.  rpi2 optimisations for dosbox  update hatari emulator  jzintv updates  mupen64plus/mupen64plus-libretro changes/fixes  atari800 updates (with gles support on rpi)  allow genesis libretro core to be used for mastersystem  new experimental cores for gb advance (rpi2 only), and nes  optimisation / fixes for rpi  various other fixes / improvements", 
            "title": "Version 2.6.0 (February 17, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-250-february-7-2015", 
            "text": "Updated to latest firmware to support Raspberry Pi 2 (TM)  Usb rom service should now be working  updated all binaries  mupen64plus is out of experimental  added gpu_mem_1024 to config.txt  removed overclocking settings  simplified rom folder permissions  removed ignore_safe_mode as safe mode is removed since march 2014", 
            "title": "Version 2.5.0 (February 7, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-242-january-17-2015", 
            "text": "reworked vice c64 emulator \u2013 defaults with dispmanx, but should run without now without also. Comes with a default config which is better  suited for the pi. config now resides in /opt/retropie/configs/c64/ rather than home directory.  retronet improvements \u2013 now can enable on game launch from runcommand menu.  added vectrex libretro core  always reset framebuffer even when not switching screen mode in runcommmand.sh which should help some emulators that seem to leave the framebuffer in an unusable state.  fix for fmsx rom install  use dispmanx sdl by default for uae4all  use dispmanx sdl by default for dgen  mame4all configs moved to /opt/retropie/configs/mame/ rather than mame4all (to match existing structure)", 
            "title": "Version 2.4.2 (January 17, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-241-january-11-2015", 
            "text": "Minor bug fixes  Updated RetroPie-Setup Script", 
            "title": "Version 2.4.1 (January 11, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-24-january-6-2015", 
            "text": "Update of all components, e.g., RetroArch supports ZIP files natively now  Dispmanx can be activated or deactivated for each emulator individually now  The screen mode is configurable for each emulator individually now  Added Atari Lynx emulator  Added Darkplaces Quake (experimental)  Added Minecraft-Pi (experimental)  Added OpenMSX (experimental)  Enhanced integration of ScummVM  Stripped down number of installed system packages to a minimum  Several bug fixes  Reorganization of the binaries  Separation of sources and binaries", 
            "title": "Version 2.4 (January 6, 2015)"
        }, 
        {
            "location": "/Changelogs/#version-23-july-20-2014", 
            "text": "Several bug fixes", 
            "title": "Version 2.3 (July 20, 2014)"
        }, 
        {
            "location": "/Changelogs/#version-22-july-5-2014", 
            "text": "Added Mednafen PCE Fast  Fixed configurations for sega32x, segacd  Updated SAMBA configuration  Fixed imame4all-rpi rom dir configuration  Updated Python help scripts", 
            "title": "Version 2.2 (July 5, 2014)"
        }, 
        {
            "location": "/Changelogs/#version-21-june-29-2014", 
            "text": "Fixed black screen when exiting to console  Fixed Doom Shareware starter  Removed hidden meta data files from FBA and Megadrive rome directory", 
            "title": "Version 2.1 (June 29, 2014)"
        }, 
        {
            "location": "/Changelogs/#version-20-may-29-2014", 
            "text": "Reorganized folder structure (root dir is now /opt/retropie)  Complete rebuild of all binaries with latest versions  EmulationStation 2 as new front-end  Added MSX emulator OpenMSX  Refactored RetroPie-Setup Script with command line capabilities", 
            "title": "Version 2.0 (May 29, 2014)"
        }, 
        {
            "location": "/Changelogs/#version-1101-dec-2-2013", 
            "text": "Updated Raspbian to the latest packages  Updated the default splash screen  Added x86 emulator FastDosbox", 
            "title": "Version 1.10.1 (Dec 2, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-191-november-12-2013", 
            "text": "Fixed \u201cfreezing\u201d bug", 
            "title": "Version 1.9.1 (November 12, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-19-november-6-2013", 
            "text": "Added emulator Mame4All-RPi  Added emulator Mupen64Plus-RPi  Added splash screen configuration to RetroPie Setup Script  Added configuration menu for RetroArch NetPlay to RetroPie Setup Script  Enhanced debug log functionality of RetroPie Setup Script", 
            "title": "Version 1.9 (November 6, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-181-september-13-2013", 
            "text": "Added freezing fix for Emulation Station  Re-added source-based installation function for PC-Engine Libretro core", 
            "title": "Version 1.8.1 (September 13, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-18-september-4-2013", 
            "text": "Added (Libretro based) Genesis emulator Picodrive  Added emulator PiFBA  Updated Emulation Station, x86 emulator, and RetroArch to latest release", 
            "title": "Version 1.8 (September 4, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-17-july-14-2013", 
            "text": "Added ES-Config  Added Atari 2600 emulator Stella  Updated Emulation Station, x86 emulator to latest releases", 
            "title": "Version 1.7 (July 14, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-161-june-12-2013", 
            "text": "Fixed GPSP binary", 
            "title": "Version 1.6.1 (June 12, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-16-june-5-2013", 
            "text": "Added emulator Basilisk II  Added Dispmanx  Updated every installable component  Enhanced script for switching between resolutions", 
            "title": "Version 1.6 (June 5, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-15-may-5-2013", 
            "text": "Added emulator gpSP  Added emulator SNES9X-RPi  Added emulator PiSNES  Added GPIO gamepad drivers  Updated Emulation Station  Updated rpix86", 
            "title": "Version 1.5 (May 5 2013)"
        }, 
        {
            "location": "/Changelogs/#version-141-april-17-2013", 
            "text": "Updated Emulation Station  Updated rpix86", 
            "title": "Version 1.4.1 (April 17, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-14-april-7-2013", 
            "text": "Added system-dependent change of HDMI video resolution for increased performance for RetroArch-based emulators.  Added automatic USB ROM-copy service  Added x86 emulator rpix86  Added Apple ][ emulator Linapple  Enhanced themes", 
            "title": "Version 1.4 (April 7, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-131-march-18-2013", 
            "text": "Minor changes in the file organization", 
            "title": "Version 1.3.1 (March 18, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-13-march-7-2013", 
            "text": "Added NXEngine / Cavestory  Updated DGEN to version 1.32  Enhanced pre-defined RetroArch input configuration", 
            "title": "Version 1.3 (March 7, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-121-february-25-2013", 
            "text": "Resized partition so that the image fits on 4 GB cards", 
            "title": "Version 1.2.1 (February 25, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-12-february-20-2013", 
            "text": "Added Intellivision emulator  Added SAMBA share installation and configuration  Used binaries-based setup for generating the SD-card image  Updated themes", 
            "title": "Version 1.2 (February 20, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-11-february-10-2013", 
            "text": "Added AdvMAME emulator  (Re-)added Genesis-GX RetroArch core  Added Final Burn Alpha emulator", 
            "title": "Version 1.1 (February 10, 2013)"
        }, 
        {
            "location": "/Changelogs/#version-10-july-22-2012", 
            "text": "RetroPie is Born!", 
            "title": "Version 1.0 (July 22, 2012)"
        }, 
        {
            "location": "/Configuration-Editor/", 
            "text": "The configuration editor allows a user to edit the configurations for RetroPie and Retroarch from a gui interface. Many common settings are set up so that a user can change the settings with a gamepad.\n\n\nManual configurations can also be set with the use of a keyboard.\n\n\nThe Configuration Editor can be accessed from the RetroPie Menu or through the \nRetroPie Setup Script\n and navigate to \nSetup / Configuration\n Edit RetroPie/RetroArch Configurations\n\n\nWhen changing settings, there are notes at the bottom of the screen that explain each setting and what they do. \n\n\nVideo Guide\n\n\n  \n\n\nBasic Configuration\n\n\n\n\n\n\n\n\nAdvanced Configuration\n\n\n\n\n\n\n\n\n\n\n\n\nWhen making manual edits you'll press \ntab\n on the keyboard to exit out of the edit session. Whatever edits you have made will be saved when you exit the dialog gui.", 
            "title": "Configuration Editor"
        }, 
        {
            "location": "/Configuration-Editor/#video-guide", 
            "text": "", 
            "title": "Video Guide"
        }, 
        {
            "location": "/Configuration-Editor/#basic-configuration", 
            "text": "", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/Configuration-Editor/#advanced-configuration", 
            "text": "When making manual edits you'll press  tab  on the keyboard to exit out of the edit session. Whatever edits you have made will be saved when you exit the dialog gui.", 
            "title": "Advanced Configuration"
        }, 
        {
            "location": "/Mapping-a-Controller-for-Intellivision/", 
            "text": "To map a controller in jzintv, you need to create a Keyboard Hack File which is a text file that contains the mappings. This is a dirty fix meaning that you will have to manually create and edit text files on your pi. It would be useful that you are familiar with using SFTP and Samba shares for accessing files on your pi. Details can be found at the \nwiki\n.\n\n\nFind Joystick Events\n\n\nTo find the events sent by your joystick to jzintv, you need to run \nevent_diag.rom\n. You can download it from \nhere\n.\n\n\nPlace event_diag.rom in your intellivision rom folder and from a terminal on your pi, run the following command:\n\n\n/opt/retropie/emulators/jzintv/bin/jzintv -p /home/pi/RetroPie/BIOS -q /home/pi/RetroPie/roms/intellivision/event_diag.rom\n\n\n\nNow press buttons or move the left analog stick and you will see how jzintv reads the input.\n\n\nBelow is the output using a PS3 controller when pressing the X button (\nJS0_BTN_14\n), right on the D-pad (\nJS0_BTN_05\n) and pushing the left analog stick right (\nJS0_E\n), then left (\nJS0_W\n).\n\n\n\n\nMake a note of these bindings as they will be used in creating the keyboard hack file.\n\n\nMappings in a Keyboard Hack File\n\n\nTo create a keyboard hack file, it is a case of taking each joystick event and mapping it to the appropriate INTV controller input. The latter is detailed in the \nofficial documentation\n and the relevant section is given below:\n\n\n\nController inputs start with one of the following four prefixes:\n\nPD0L_   Left controller, Master Component\nPD0R_   Right controller, Master Component\nPD1L_   Left controller, ECS\nPD1R_   Right controller, ECS\n\nThose four prefixes get combined with these suffixes:\n\nKPx     Keypad key.  x=0,1,2,3,4,5,6,7,8,9,C,E\nA_x     Action key.  x=T,L,R\nD_ddd   Disc input.  ddd=E,ENE,NE,NNE,N,NNW,NW,WNW,W,WSW,SW,SSW,S,SSE,SE,ESE\nJ_ddd   Disc input from joystick.  ddd same as above.\n\n\n\n\nBelow are example mappings.\n\n\n\n\nTo map the Start button on a PS3 controller to the Enter key on the left Intellivision controller, it would be a case of mapping \nJS0_BTN_03\n to \nPD0L_KPE\n.\n\n\nTo map the X button on a PS3 controller to the top side action button, it would be a case of mapping \nJS0_BTN_14\n to \nPD0L_A_T\n.\n\n\nTo map the X button on a second PS3 controller to the top side action button on right Intellivision controller, it would be a case of mapping \nJS1_BTN_14\n (JS1_ represents the second controller) to \nPD0R_A_T\n (PD0R_ represents the right Intellivision controller).\n\n\n\n\nEach keyboard hack file will have a first line of \nMAP 0\n to denote the default keymap in jzintv.\n\n\nFor each joystick mapping, you will need to add a line mapping the joystick event to the INTV controller input. Comments can be added by including a semi-colon at the beginning of a line.\n\n\nAn sample keyboard hack file would be:\n\n\n; -----------------------------------------------------------------------------------------\nMAP 0      ; keymap 0 (default keymap)\n; -----------------------------------------------------------------------------------------\n\n; ***** Joystick #0 - Left Controller *****\n; ** Side Buttons and Numeric Keypad **\nJS0_BTN_00 PD0L_A_T\nJS0_BTN_01 PD0L_A_L\nJS0_BTN_02 PD0L_A_R\nJS0_BTN_03 PD0L_KP1\nJS0_BTN_04 PD0L_KP2\nJS0_BTN_05 PD0L_KP3\nJS0_BTN_06 PD0L_KP4\nJS0_BTN_07 PD0L_KP5\nJS0_BTN_08 PD0L_KP6\nJS0_BTN_09 PD0L_KP7\nJS0_BTN_10 PD0L_KP8\nJS0_BTN_11 PD0L_KP9\nJS0_BTN_12 PD0L_KPC\nJS0_BTN_13 PD0L_KP0\nJS0_BTN_14 PD0L_KPE\n\n\n; ** Direction Disc **\nJS0_N      PD0L_J_N\nJS0_NNE    PD0L_J_NNE\nJS0_NE     PD0L_J_NE\nJS0_ENE    PD0L_J_ENE\nJS0_E      PD0L_J_E\nJS0_ESE    PD0L_J_ESE\nJS0_SE     PD0L_J_SE\nJS0_SSE    PD0L_J_SSE\nJS0_S      PD0L_J_S\nJS0_SSW    PD0L_J_SSW\nJS0_SW     PD0L_J_SW\nJS0_WSW    PD0L_J_WSW\nJS0_W      PD0L_J_W\nJS0_WNW    PD0L_J_WNW\nJS0_NW     PD0L_J_NW\nJS0_NNW    PD0L_J_NNW\n\n; ***** Joystick #1 - Right Controller *****\n; ** Side Buttons and Numeric Keypad **\nJS1_BTN_00 PD0R_A_T\nJS1_BTN_01 PD0R_A_L\nJS1_BTN_02 PD0R_A_R\nJS1_BTN_03 PD0R_KP1\nJS1_BTN_04 PD0R_KP2\nJS1_BTN_05 PD0R_KP3\nJS1_BTN_06 PD0R_KP4\nJS1_BTN_07 PD0R_KP5\nJS1_BTN_08 PD0R_KP6\nJS1_BTN_09 PD0R_KP7\nJS1_BTN_10 PD0R_KP8\nJS1_BTN_11 PD0R_KP9\nJS1_BTN_12 PD0R_KPC\nJS1_BTN_13 PD0R_KP0\nJS1_BTN_14 PD0R_KPE\n\n\n; ** Direction Disc **\nJS1_N      PD0R_J_N\nJS1_NNE    PD0R_J_NNE\nJS1_NE     PD0R_J_NE\nJS1_ENE    PD0R_J_ENE\nJS1_E      PD0R_J_E\nJS1_ESE    PD0R_J_ESE\nJS1_SE     PD0R_J_SE\nJS1_SSE    PD0R_J_SSE\nJS1_S      PD0R_J_S\nJS1_SSW    PD0R_J_SSW\nJS1_SW     PD0R_J_SW\nJS1_WSW    PD0R_J_WSW\nJS1_W      PD0R_J_W\nJS1_WNW    PD0R_J_WNW\nJS1_NW     PD0R_J_NW\nJS1_NNW    PD0R_J_NNW\n\n\n\n\nThis hack file will map every input available. For the left controller, you may wish to include only the input(s) you wish to remap. For example, if your gamepad has an analog stick, you can remove the Direction Disc mappings.\n\n\nFor the right controller, it is advised that every input is mapped as this is not done by default.\n\n\nOnce amended to suit, save the keyboard hack file as \nhackfile.cfg\n in your Intellivision roms folder.\n\n\nConfiguring jzIntv\n\n\nTo use the keyboard hack file, you need to add the \n--kbdhackfile\n flag when launching jzIntv.\n\n\nAmend the line in \n/opt/retropie/configs/intellivision/emulators.cfg\n to launch jzIntv to :\n\n\njzintv = \"/opt/retropie/emulators/jzintv/bin/jzintv -p /home/pi/RetroPie/BIOS -q --kbdhackfile=/home/pi/RetroPie/roms/intellivision/hackfile.cfg %ROM%\"", 
            "title": "Mapping a Controller for Intellivision"
        }, 
        {
            "location": "/Mapping-a-Controller-for-Intellivision/#find-joystick-events", 
            "text": "To find the events sent by your joystick to jzintv, you need to run  event_diag.rom . You can download it from  here .  Place event_diag.rom in your intellivision rom folder and from a terminal on your pi, run the following command:  /opt/retropie/emulators/jzintv/bin/jzintv -p /home/pi/RetroPie/BIOS -q /home/pi/RetroPie/roms/intellivision/event_diag.rom  Now press buttons or move the left analog stick and you will see how jzintv reads the input.  Below is the output using a PS3 controller when pressing the X button ( JS0_BTN_14 ), right on the D-pad ( JS0_BTN_05 ) and pushing the left analog stick right ( JS0_E ), then left ( JS0_W ).   Make a note of these bindings as they will be used in creating the keyboard hack file.", 
            "title": "Find Joystick Events"
        }, 
        {
            "location": "/Mapping-a-Controller-for-Intellivision/#mappings-in-a-keyboard-hack-file", 
            "text": "To create a keyboard hack file, it is a case of taking each joystick event and mapping it to the appropriate INTV controller input. The latter is detailed in the  official documentation  and the relevant section is given below:  \nController inputs start with one of the following four prefixes:\n\nPD0L_   Left controller, Master Component\nPD0R_   Right controller, Master Component\nPD1L_   Left controller, ECS\nPD1R_   Right controller, ECS\n\nThose four prefixes get combined with these suffixes:\n\nKPx     Keypad key.  x=0,1,2,3,4,5,6,7,8,9,C,E\nA_x     Action key.  x=T,L,R\nD_ddd   Disc input.  ddd=E,ENE,NE,NNE,N,NNW,NW,WNW,W,WSW,SW,SSW,S,SSE,SE,ESE\nJ_ddd   Disc input from joystick.  ddd same as above.  Below are example mappings.   To map the Start button on a PS3 controller to the Enter key on the left Intellivision controller, it would be a case of mapping  JS0_BTN_03  to  PD0L_KPE .  To map the X button on a PS3 controller to the top side action button, it would be a case of mapping  JS0_BTN_14  to  PD0L_A_T .  To map the X button on a second PS3 controller to the top side action button on right Intellivision controller, it would be a case of mapping  JS1_BTN_14  (JS1_ represents the second controller) to  PD0R_A_T  (PD0R_ represents the right Intellivision controller).   Each keyboard hack file will have a first line of  MAP 0  to denote the default keymap in jzintv.  For each joystick mapping, you will need to add a line mapping the joystick event to the INTV controller input. Comments can be added by including a semi-colon at the beginning of a line.  An sample keyboard hack file would be:  ; -----------------------------------------------------------------------------------------\nMAP 0      ; keymap 0 (default keymap)\n; -----------------------------------------------------------------------------------------\n\n; ***** Joystick #0 - Left Controller *****\n; ** Side Buttons and Numeric Keypad **\nJS0_BTN_00 PD0L_A_T\nJS0_BTN_01 PD0L_A_L\nJS0_BTN_02 PD0L_A_R\nJS0_BTN_03 PD0L_KP1\nJS0_BTN_04 PD0L_KP2\nJS0_BTN_05 PD0L_KP3\nJS0_BTN_06 PD0L_KP4\nJS0_BTN_07 PD0L_KP5\nJS0_BTN_08 PD0L_KP6\nJS0_BTN_09 PD0L_KP7\nJS0_BTN_10 PD0L_KP8\nJS0_BTN_11 PD0L_KP9\nJS0_BTN_12 PD0L_KPC\nJS0_BTN_13 PD0L_KP0\nJS0_BTN_14 PD0L_KPE\n\n\n; ** Direction Disc **\nJS0_N      PD0L_J_N\nJS0_NNE    PD0L_J_NNE\nJS0_NE     PD0L_J_NE\nJS0_ENE    PD0L_J_ENE\nJS0_E      PD0L_J_E\nJS0_ESE    PD0L_J_ESE\nJS0_SE     PD0L_J_SE\nJS0_SSE    PD0L_J_SSE\nJS0_S      PD0L_J_S\nJS0_SSW    PD0L_J_SSW\nJS0_SW     PD0L_J_SW\nJS0_WSW    PD0L_J_WSW\nJS0_W      PD0L_J_W\nJS0_WNW    PD0L_J_WNW\nJS0_NW     PD0L_J_NW\nJS0_NNW    PD0L_J_NNW\n\n; ***** Joystick #1 - Right Controller *****\n; ** Side Buttons and Numeric Keypad **\nJS1_BTN_00 PD0R_A_T\nJS1_BTN_01 PD0R_A_L\nJS1_BTN_02 PD0R_A_R\nJS1_BTN_03 PD0R_KP1\nJS1_BTN_04 PD0R_KP2\nJS1_BTN_05 PD0R_KP3\nJS1_BTN_06 PD0R_KP4\nJS1_BTN_07 PD0R_KP5\nJS1_BTN_08 PD0R_KP6\nJS1_BTN_09 PD0R_KP7\nJS1_BTN_10 PD0R_KP8\nJS1_BTN_11 PD0R_KP9\nJS1_BTN_12 PD0R_KPC\nJS1_BTN_13 PD0R_KP0\nJS1_BTN_14 PD0R_KPE\n\n\n; ** Direction Disc **\nJS1_N      PD0R_J_N\nJS1_NNE    PD0R_J_NNE\nJS1_NE     PD0R_J_NE\nJS1_ENE    PD0R_J_ENE\nJS1_E      PD0R_J_E\nJS1_ESE    PD0R_J_ESE\nJS1_SE     PD0R_J_SE\nJS1_SSE    PD0R_J_SSE\nJS1_S      PD0R_J_S\nJS1_SSW    PD0R_J_SSW\nJS1_SW     PD0R_J_SW\nJS1_WSW    PD0R_J_WSW\nJS1_W      PD0R_J_W\nJS1_WNW    PD0R_J_WNW\nJS1_NW     PD0R_J_NW\nJS1_NNW    PD0R_J_NNW  This hack file will map every input available. For the left controller, you may wish to include only the input(s) you wish to remap. For example, if your gamepad has an analog stick, you can remove the Direction Disc mappings.  For the right controller, it is advised that every input is mapped as this is not done by default.  Once amended to suit, save the keyboard hack file as  hackfile.cfg  in your Intellivision roms folder.", 
            "title": "Mappings in a Keyboard Hack File"
        }, 
        {
            "location": "/Mapping-a-Controller-for-Intellivision/#configuring-jzintv", 
            "text": "To use the keyboard hack file, you need to add the  --kbdhackfile  flag when launching jzIntv.  Amend the line in  /opt/retropie/configs/intellivision/emulators.cfg  to launch jzIntv to :  jzintv = \"/opt/retropie/emulators/jzintv/bin/jzintv -p /home/pi/RetroPie/BIOS -q --kbdhackfile=/home/pi/RetroPie/roms/intellivision/hackfile.cfg %ROM%\"", 
            "title": "Configuring jzIntv"
        }, 
        {
            "location": "/Memory-Split/", 
            "text": "Memory Split\n\n\nNOTE:\n Earlier versions of RetroPie included a default EmulationStation theme with large image files, that would eventually cause a 'white screen' when too many systems were active. Now the default theme ('Carbon') is much lighter so there is no reason to change the split unless you choose a heavier theme. Emulation itself uses very little video memory.\n\n\nAlso note that in order to ensure sensible memory splits across Pi models, RetroPie utilises the gpu_mem_256, gpu_mem_512 and gpu_mem_1024 overrides, which apply to Pis with that amount of memory (for example, the Pi 2 has 1024MB memory, so will use the gpu_mem_1024 setting). This setting \noverrides\n the gpu_mem setting that is described below, so if you still want to adjust the memory split, you will have to manually edit /boot/config.txt and adjust the relevant value, or delete the lines entirely.\n\n\nA complex display of the GPU memory usage can be viewed with:\n\n\nsudo vcdbg reloc\n\n\n\n\n\n\nSince the raspberry pi is a SoC the CPU and GPU share the same amount of RAM. The following option allows you to choose how much RAM you allocate to the GPU compared to the CPU.\n\n\n\n\n\n\nYou can choose a split from 16/32/64/128/256 (the settings may be different depending on the version of pi you have)", 
            "title": "Memory Split"
        }, 
        {
            "location": "/Memory-Split/#memory-split", 
            "text": "NOTE:  Earlier versions of RetroPie included a default EmulationStation theme with large image files, that would eventually cause a 'white screen' when too many systems were active. Now the default theme ('Carbon') is much lighter so there is no reason to change the split unless you choose a heavier theme. Emulation itself uses very little video memory.  Also note that in order to ensure sensible memory splits across Pi models, RetroPie utilises the gpu_mem_256, gpu_mem_512 and gpu_mem_1024 overrides, which apply to Pis with that amount of memory (for example, the Pi 2 has 1024MB memory, so will use the gpu_mem_1024 setting). This setting  overrides  the gpu_mem setting that is described below, so if you still want to adjust the memory split, you will have to manually edit /boot/config.txt and adjust the relevant value, or delete the lines entirely.  A complex display of the GPU memory usage can be viewed with:  sudo vcdbg reloc   Since the raspberry pi is a SoC the CPU and GPU share the same amount of RAM. The following option allows you to choose how much RAM you allocate to the GPU compared to the CPU.    You can choose a split from 16/32/64/128/256 (the settings may be different depending on the version of pi you have)", 
            "title": "Memory Split"
        }, 
        {
            "location": "/Optimization-for-Nintendo-64/", 
            "text": "Hardware and hardware setup.\n\n\nNintendo 64 emulation requires at a bare minimum a Raspberry Pi 2 and a Raspberry  Pi 3 is highly suggested due to its increased performance. \n\n\nA note on overclocking: A raspi 3 on default settings is comparable in speed to an overclocked raspi 2. \n\n\nSuggested overclock for Raspi 3 for optimal N64 emulation (This to be paired with proper power, cooling, please see \nthis article\n for further information.)\n\n\n#Overclock Settings\narm_freq=1300\ngpu_freq=500\nsdram_freq=500\nover_voltage=6\nv3d_freq=525\n\n\n\n\nOf most important note of categories that most correctly benefit the Nintendo 64 is v3d_freq this is not a setting that when increased fails warranty or even really has a huge impact on heat but it has a great effect on higher performing emulators such as N64 and Dreamcast. \n\n\nRun Command\nTo learn the community tested optimal settings please view either of the 2 rom compatibility lists located \nhere\n or \nhere\n.\nFrom Retropie 4 and on Glide is the Default Emulator and render has been hard coded to 320x240. \nThis can be scaled up for some games that perform really well like Mario kart and Super Mario 64 at your own discretion. \nIf you wish to enable a High Resolution Texture pack you will want to select the Glide or Rice High Rez options under category 2. \n\n\nCPU-Governor\n\n\nThe CPU governor can be throttled to max performance mode in one of two ways.\n\n\necho \nperformance\n |sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n\n\n\n\nOr you can enable it from Runcommand  Go to Retropie-Setup - Setup and Configuration to be used post install - Configure the runcommand launch script - cpu configuration force performance\nthen cancel exit and reboot\n\n\nNotes on Audio\n\n\nAudio\n\n\nUse HDMI as composite requires more CPU usage.\n\n\nHigh Resolution texture packs\n\n\nThe steps for this are to change the configuration in \n\n/opt/retropie/configs/n64/mupen64plus.cfg\n\nReplacing False for True in the Glide and Rice plugin\nMake sure you have launched a rom with both Rice and Glide before going to edit the file or the variables will not be there to edit. \n\n\nGlide Line\n\n\n# Use high-resolution texture packs if available.\ntxHiresEnable = False\n\n\n\n\nRice Line\n\n\n# Enable hi-resolution texture file loading\nLoadHiResTextures = False\n\n\n\n\nYou would then place high res texture packs in the directory\n\n\n/home/pi/.local/share/mupen64plus/hires_texture\n\n\nI would suggest \nmkdir /home/pi/.local/share/mupen64plus/hires_texture\ncd /home/pi/.local/share/mupen64plus/hires_texture\nand then you can use the command wget to download the texture packs to that directory and then unzip them. \n\n\nwget http://websitewithtexturepack/texturepack.zip\nsudo unzip texturepack.zip\n\n\nTexture packs are available for download \nhere\n\n\nThe folder name in that directory must match the core name in the rom header. \nMost cases the default directory name is ok but you may need to check if you find if your rom is not correctly launching the texture pack. \n\n\nTo find that you can use the command to display the core name just use the command below in terminal then exit and scroll up I do it from a ssh session cause i can scroll up and read it.  But in the first few lines it will show the core name \n\n\ncd /home/pi/RetroPie/roms/n64\n/opt/retropie/emulators/mupen64plus/bin/mupen64plus.sh mupen64plus-video-rice rom name\n\n\n\n\nYou can use the same command to launch the rom correctly loading the texture pack. \n\n\nTo get the texture pack to load from emulation station you must do the following.\nLaunch Retropie Setup\nUpdate Retropie Setup Script\nGo to Manage Packages \nupdate the mupen64plus package\n\n\nGo to launch one of the N64 games you have enabled a high resolution texture pack for. \nLaunch that game\nPress x when it launches \nchange the video mode to one of the High Resolution options. Most likely mupen64plus-GlideN64-highres \nYou can make that setting as the default for all 64 roms, which would be fine but likely as N64 stuff requires so much video tuning you will probably want to set this option on each rom you have uploaded a hi-resolution texture pack for. \n\n\nPlease also feel free to reference the Rice 64 github page for the source documentation \nhttps://github.com/mupen64plus/mupen64plus-video-rice\n\n\nQuality of Roms\nThere is a definite difference in some roms.  There are multiple versions of the SOTE rom some of which have noticeable stuttering and seizure screens but there are clean versions which play without the buggy effects.  I believe some of this could be due to the core name in the rom header not correctly matching what is in the .ini files for different plugins which apply different effects per game or could be as simple as bad rips which were never noticed on more powerfull hardware. \n\n\nOverclocking past 1400\nWell not going to say its impossible but 1400 is the only stable option I can get after testing on about 8 different pi 3s.  \n\n\nvire_refresh / fullspeed screen rate in mupen64plus.cfg\nContinue research as to why increasing options like vire_refresh and full screen framerate in the standalone config file seems to increase performance in plugin loaded non standalone application even though those configs are not supposed to apply to plugin versions.  \n\n\nOptimizations to mupen64plus.cfg\n\n\nThese are all experimental settings I am playing with\n\n\nGlide\n\n\n# Size of texture cache in megabytes. Good value is VRAM*3/4\nCacheSize = 900\n\n# Enable N64 depth compare instead of OpenGL standard one. Experimental.\nEnableN64DepthCompare = True\n\n# Use high-resolution texture packs if available.\ntxHiresEnable = True\n# Allow to use alpha channel of high-res texture fully.\ntxHiresFullAlphaChannel = True\n\n# Save texture cache to hard disk.\ntxSaveCache = True\nThis is currently set to True Investigating if setting to false will overload ram or not If texture cache is 500 by default is there enough overhead on ram to go with this setting.   \n\nRice Settings\n# Use a faster algorithm to speed up texture loading and CRC computation\nFastTextureLoading = True\n\n# Enable this option to have better render-to-texture quality\nDoubleSizeForSmallTxtrBuf = True\nA quality improver  need to verify any performance hit is negligible\n\n# N64 Texture Memory Full Emulation (may fix some games, may break others)\nFullTMEMEmulation = False\nWhat games does this fix?  Which ones does it break?\n\n# Widescreen hack\nWideScreenHack = True\n\nFix aspect ratio?", 
            "title": "Optimization for Nintendo 64"
        }, 
        {
            "location": "/Optimization-for-Nintendo-64/#hardware-and-hardware-setup", 
            "text": "Nintendo 64 emulation requires at a bare minimum a Raspberry Pi 2 and a Raspberry  Pi 3 is highly suggested due to its increased performance.   A note on overclocking: A raspi 3 on default settings is comparable in speed to an overclocked raspi 2.   Suggested overclock for Raspi 3 for optimal N64 emulation (This to be paired with proper power, cooling, please see  this article  for further information.)  #Overclock Settings\narm_freq=1300\ngpu_freq=500\nsdram_freq=500\nover_voltage=6\nv3d_freq=525  Of most important note of categories that most correctly benefit the Nintendo 64 is v3d_freq this is not a setting that when increased fails warranty or even really has a huge impact on heat but it has a great effect on higher performing emulators such as N64 and Dreamcast.   Run Command\nTo learn the community tested optimal settings please view either of the 2 rom compatibility lists located  here  or  here .\nFrom Retropie 4 and on Glide is the Default Emulator and render has been hard coded to 320x240. \nThis can be scaled up for some games that perform really well like Mario kart and Super Mario 64 at your own discretion. \nIf you wish to enable a High Resolution Texture pack you will want to select the Glide or Rice High Rez options under category 2.", 
            "title": "Hardware and hardware setup."
        }, 
        {
            "location": "/Optimization-for-Nintendo-64/#cpu-governor", 
            "text": "The CPU governor can be throttled to max performance mode in one of two ways.  echo  performance  |sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor  Or you can enable it from Runcommand  Go to Retropie-Setup - Setup and Configuration to be used post install - Configure the runcommand launch script - cpu configuration force performance\nthen cancel exit and reboot", 
            "title": "CPU-Governor"
        }, 
        {
            "location": "/Optimization-for-Nintendo-64/#notes-on-audio", 
            "text": "Audio  Use HDMI as composite requires more CPU usage.", 
            "title": "Notes on Audio"
        }, 
        {
            "location": "/Optimization-for-Nintendo-64/#high-resolution-texture-packs", 
            "text": "The steps for this are to change the configuration in  /opt/retropie/configs/n64/mupen64plus.cfg \nReplacing False for True in the Glide and Rice plugin\nMake sure you have launched a rom with both Rice and Glide before going to edit the file or the variables will not be there to edit.   Glide Line  # Use high-resolution texture packs if available.\ntxHiresEnable = False  Rice Line  # Enable hi-resolution texture file loading\nLoadHiResTextures = False  You would then place high res texture packs in the directory  /home/pi/.local/share/mupen64plus/hires_texture  I would suggest \nmkdir /home/pi/.local/share/mupen64plus/hires_texture\ncd /home/pi/.local/share/mupen64plus/hires_texture\nand then you can use the command wget to download the texture packs to that directory and then unzip them.   wget http://websitewithtexturepack/texturepack.zip\nsudo unzip texturepack.zip  Texture packs are available for download  here  The folder name in that directory must match the core name in the rom header. \nMost cases the default directory name is ok but you may need to check if you find if your rom is not correctly launching the texture pack.   To find that you can use the command to display the core name just use the command below in terminal then exit and scroll up I do it from a ssh session cause i can scroll up and read it.  But in the first few lines it will show the core name   cd /home/pi/RetroPie/roms/n64\n/opt/retropie/emulators/mupen64plus/bin/mupen64plus.sh mupen64plus-video-rice rom name  You can use the same command to launch the rom correctly loading the texture pack.   To get the texture pack to load from emulation station you must do the following.\nLaunch Retropie Setup\nUpdate Retropie Setup Script\nGo to Manage Packages \nupdate the mupen64plus package  Go to launch one of the N64 games you have enabled a high resolution texture pack for. \nLaunch that game\nPress x when it launches \nchange the video mode to one of the High Resolution options. Most likely mupen64plus-GlideN64-highres \nYou can make that setting as the default for all 64 roms, which would be fine but likely as N64 stuff requires so much video tuning you will probably want to set this option on each rom you have uploaded a hi-resolution texture pack for.   Please also feel free to reference the Rice 64 github page for the source documentation \nhttps://github.com/mupen64plus/mupen64plus-video-rice  Quality of Roms\nThere is a definite difference in some roms.  There are multiple versions of the SOTE rom some of which have noticeable stuttering and seizure screens but there are clean versions which play without the buggy effects.  I believe some of this could be due to the core name in the rom header not correctly matching what is in the .ini files for different plugins which apply different effects per game or could be as simple as bad rips which were never noticed on more powerfull hardware.   Overclocking past 1400\nWell not going to say its impossible but 1400 is the only stable option I can get after testing on about 8 different pi 3s.    vire_refresh / fullspeed screen rate in mupen64plus.cfg\nContinue research as to why increasing options like vire_refresh and full screen framerate in the standalone config file seems to increase performance in plugin loaded non standalone application even though those configs are not supposed to apply to plugin versions.", 
            "title": "High Resolution texture packs"
        }, 
        {
            "location": "/Optimization-for-Nintendo-64/#optimizations-to-mupen64pluscfg", 
            "text": "These are all experimental settings I am playing with  Glide  # Size of texture cache in megabytes. Good value is VRAM*3/4\nCacheSize = 900\n\n# Enable N64 depth compare instead of OpenGL standard one. Experimental.\nEnableN64DepthCompare = True\n\n# Use high-resolution texture packs if available.\ntxHiresEnable = True\n# Allow to use alpha channel of high-res texture fully.\ntxHiresFullAlphaChannel = True\n\n# Save texture cache to hard disk.\ntxSaveCache = True\nThis is currently set to True Investigating if setting to false will overload ram or not If texture cache is 500 by default is there enough overhead on ram to go with this setting.   \n\nRice Settings\n# Use a faster algorithm to speed up texture loading and CRC computation\nFastTextureLoading = True\n\n# Enable this option to have better render-to-texture quality\nDoubleSizeForSmallTxtrBuf = True\nA quality improver  need to verify any performance hit is negligible\n\n# N64 Texture Memory Full Emulation (may fix some games, may break others)\nFullTMEMEmulation = False\nWhat games does this fix?  Which ones does it break?\n\n# Widescreen hack\nWideScreenHack = True\n\nFix aspect ratio?", 
            "title": "Optimizations to mupen64plus.cfg"
        }, 
        {
            "location": "/Overclocking/", 
            "text": "Hardware Introduction\n\n\nThe Raspberry Pi's VideoCore IV System-on-Chip has several components, each of which can be run at different clock speeds. They are:\n\n\n\n\nARM - the main general-purpose CPU\n\n\nSDRAM - the 1Gb or 512Mb or 256Mb of main memory\n\n\nCore - the GPU processor core (confusingly named)\n\n\nGPU - a quick way to collectively refer to the following three parts:\n\n\nH264 - the hardware x264 decoder used when watching movies and TV shows\n\n\nISP - the Image Sensor Pipeline, does things like color profile correction and image scaling\n\n\nV3D - the 3D block, does the work described by OpenGL commands\n\n\n\n\n\n\n\n\nAll of these plus the voltages have an \"idle\" setting which they run at normally, only increasing to their individual maximums when they are used and placed under enough load. Changing this maximum is what Raspberry Pi overclocking does.\n\n\nThe H264, ISP, and V3D all share the same clock generator (a \nPLL\n) so all run at the same speed.\n\n\nBoth of these default behaviours can be changed if desired.\n\n\nAs a component is overclocked it may become unreliable. Unreliability is most often seen as program crashes, hardware lockups, and graphical glitches.\n\n\nOne way to increase that reliability is to increase the voltage to the component. This has the tradeoff that more heat is generated by the component. A component may be damaged if too much voltage is supplied.\n\n\nA cooler component will usually perform more reliably than a hotter component.\n\n\nLifespan and Warranty\n\n\nWhilst there are overclock settings which are considered \"supported\" by the Raspberry Pi Foundation, not every Pi will be able to reach all supplied overclock settings, and overclocking always runs the risk of shortening the lifespan of your Pi.\n\n\nThere are some settings which flip a hardware switch inside the Pi and void the warranty, these are:\n\n\n\n\nover_voltage\n greater than \n6\n\n\nforce_turbo=1\n\n\ntemp_limit\n greater than \n85\n\n\n\n\nBest Settings\n\n\nThere are no \"best settings\" for overclocking, each individual Raspberry Pi has a different maximum capability. Just because some guy on the internet says he can reach some huge speed and play every game smoothly does not mean your Pi will be able to do the same. Likewise perhaps yours will run even faster.\n\n\nWhy is this?\n\n\nThere is no way for a silicon chip manufacturer to make a processor which runs \"at\" a certain speed. There will always be some variance in the reliability of the components. Manufacturers make silicon chips so that the majority of a production run can achieve the chip's advertised speed, then they test all of the chips at that speed and throw out the small number of failures. This means there are always some chips which can do more than their advertised speed, though it's not known exactly how much more any given individual chip can do. It might be a significant percentage or it might be none.\n\n\nThis is seen all throughout processor history. Intel originally tried to make the first Pentium a 66MHz CPU but they couldn't get the production reliable enough, however, the chips which didn't run at 66MHz did run just fine at 60MHz so they printed \"60MHz\" on those chips and sold them at a slightly lower cost than ones with \"66MHz\" printed on them. The Raspberry Pi 1 (700MHz) and the Raspberry Pi Zero (1GHz) use the exact same System-on-Chip, the only difference being in the ~4 years between those models, Broadcom managed to make the production process better so they could make faster chips more reliably.\n\n\nThat said, there are some sensible starting points for Pi overclocking which are discussed below.\n\n\nPower Supply\n\n\nA good reliable power source and power cable are strongly recommended for overclocking.\n\n\nAn overclocked Pi 3 could draw over 1.5A of current, so a 2A supply should be the \nminimum\n considered. Many power supplies drop their voltage as current draw increases towards their maximum rating, so a 2.5A or higher power supply is a better choice than 2A. Some good suggestions are:\n\n\n\n\nRaspberry Pi Foundation official 2.5A power supply\n\n\nAdafruit 2.4A power supply w/ 20AWG MicroUSB cable\n\n\nGenuine Samsung and HP tablet chargers\n\n\n\n\nUsers have reported success with:\n\n\n\n\nCanakit 2.5A power supply, common on Amazon\n\n\nKootek 2.5A power supply\n\n\nGenuine Apple 12W 2.4A iPad charger, available in stores\n\n\nPro-Elec 5.25V 2.4A power supply\n\n\n\n\nThe Pi runs off 5V but there's nothing wrong with a power supply providing 5.1V or 5.25V. There's usually about 0.25V drop over a typical USB power cable so the extra voltage helps compensate.\n\n\nA good power cable is just as important as a good power supply. The wire in the cable should be 22AWG or thicker. Wire gauge goes \ndown\n as it gets thicker, so 20AWG is thicker than 22AWG which is thicker than 25AWG. A longer cable drops much more voltage than a shorter cable, so use USB cables under 1M/3ft in length. A mobile phone or tablet \"fast charge\" cable should be sufficient.\n\n\nEnsure you have a good solid connection at the MicroUSB connector, a loose or poorly-fitting connector can pass less current than a well-seated connector.\n\n\nIf you are powering many USB devices or power-hungry USB devices like rechargable game controllers off the Pi's USB ports, consider powering them off an externally-powered USB hub instead: http://elinux.org/RPi_Powered_USB_Hubs\n\n\nThere is a maximum current you can draw through the Pi board itself, dictated by the polyfuse next to the power connector:\n\n\n\n\nPi 1: 750mA\n\n\nPi 2: 2A\n\n\nPi 3: 2.5A\n\n\n\n\nSo there's no point getting a massively over-rated power supply like 10A and continuing to run many devices off the USB ports. There is also a smaller polyfuse on the USB ports which makes doing this even more unfeasible.\n\n\nThe exception to this is the Pi Zero, which has no current protection anywhere.\n\n\nRainbow Square or Lightning Bolt\n\n\nIf you see either a little rainbow square or a lightning bolt icon in the top right corner of the screen, those are the \"under voltage\" warnings, indicating your power supply is sending under 4.65V.\n\n\nIf this appears, shut down your Pi down properly and:\n\n\n\n\nPull out your power cable and plug it back in, at both ends if using a USB-A to MicroUSB cable, to ensure a good firm connection\n\n\nTest without any powered USB devices\n\n\nTry a different power cable\n\n\nTry a different power supply\n\n\n\n\nTemperature and Cooling\n\n\nThe Pi idles around 35C with usual operating temperatures as high as 75C depending on environment.\n\n\nAt 80C you'll start to see the red/orange/yellow square or thermometer icon in the top right corner of the screen, this is the temperature warning.\n\n\nAt 85C the Pi will throttle the CPU speed down to reduce temperature and performance will suffer greatly.\n\n\nCooling can be mainly broken up into two parts: heatsinks and fans.\n\n\nHeatsinks\n\n\nThe small (14mm x 14mm x 4mm) heatsinks that come with most Pi kits are next to useless on their own without a fan, they'll only drop 5C at most.\n\n\nDepending on the case used to house the Pi, a larger heatsink up to 25mm x 25mm x 15mm can \nusually\n be fit in. These will perform a bit better, dropping up to 20C without a fan.\n\n\nHeatsink material - copper vs aluminium - is a never-ending debate within the overclocking community. For a relatively small Raspberry Pi heatsink, it's unlikely to make a huge difference.\n\n\nThere are three main areas available to cool on the Pi 2 and Pi 3 - the main SoC, the Ethernet controller, and the voltage regulator - however only the SoC in the middle of the board really benefits from any cooling. The Ethernet chip and the voltage regulator operate within specification without a heatsink. The RAM is underneath on the bottom on the board so is more difficult to cool.\n\n\nWhen applying a heatsink, clean the surface of the SoC chip with isopropyl alcohol (aka rubbing alcohol) and a lint-free cloth to clean off any impurities or fingerprint oil and to ensure good contact with the thermal conductor to the heatsink.\n\n\nThe usual method to hold heatsinks on is thermal transfer tape. This is an extremely thin (less than 0.5mm) sticky layer and is designed specifically for thermal conductivity. 3M are a common brand to see. You can buy rolls or squares of it if you need to.\n\n\nCheap heatsink kits have been seen with double-sided tape to hold the heatsinks on. This material will act more as an insulator and probably raise temperatures! Double-sided tape is easily spotted as it's over 2mm thick and can be compressed then slowly springs back and retains its shape like a sponge. If you have this, remove it and get proper thermal transfer tape.\n\n\nAnother method to hold heatsinks on is a thermal glue/epoxy like \nArctic Silver Thermal Adhesive\n however be aware this is a permanent solution. Trying to take off a heatsink fastened with thermal adhesive is more likely to remove the chip from the board and cause permanent damage.\n\n\nFans\n\n\nA fan is needed to make the Raspberry Pi cool very well. With the right heatsink and fan combination, flat-out running temperatures as low as 55C are possible.\n\n\nFans can be powered externally, via the USB ports, or via the 5V GPIO pins. Do not power a fan off the 3.3V GPIO pin, it cannot supply enough current.\n\n\nFans are available from electronics suppliers, as well as the usual eBay and Amazon and Chinese gadget manufacturers. Specifically getting a \nquiet fan\n is a really good idea, some 5V fans sound like small jet engines!\n\n\nIt is sometimes possible to use a 12V fan like from a PC. Popular overclocker brands like Noctua make PC fans which are designed to run off a low voltage so these should work well. Cheap 12V computer fans often don't have enough power to start spinning with only 5V, though they may continue spinning with 5V once you start the blades turning with your finger.\n\n\nSome Pi cases have a place specifically to mount a fan, sometimes you can cut a hole in a case, sometimes you have to get creative to mount your fan.\n\n\nOverclocking Methods\n\n\nThere are two ways to overclock, either the Pi Foundation's \nraspi-config\n tool, or by manually editing \n/boot/config.txt\n.\n\n\nAfter making any changes, reboot to apply the new settings.\n\n\nSupported Overclocking\n\n\nThe Pi Foundation's supported overclocking tool provides some options for the Pi 1 and Pi 2. It does not provide any options for the Pi 3 or Pi Zero.\n\n\nThis tool can be accessed from the RetroPie menu in EmulationStation, or by typing \nsudo raspi-config\n in the terminal, and selecting the Overclock option:\n\n\n\n\nYou'll see this warning that overclocking may shorten the lifespan of your Pi:\n\n\n\n\nThen select your preferred overclock setting:\n\n\n\n\nThis menu shows the options for Pi 1, the Pi 2 has only None and Turbo.\n\n\nManual Overclocking\n\n\nAll Raspberry Pi models can be manually overclocked by editing \n/boot/config.txt\n and rebooting. Read the \nSSH\n page if you are not familiar with editing text files in Linux.\n\n\nParameters are set like:\n\n\nparameter=value\n\n\n\n\nFor example, to set the ARM to 1000MHz:\n\n\narm_freq=1000\n\n\n\n\nUseful Parameters\n\n\nThe following speed parameters can be set:\n\n\n\n\narm_freq\n - speed of the ARM core\n\n\ncore_freq\n - speed of GPU processor core, keep it the same as \ngpu_freq\n\n\ngpu_freq\n - speed of all GPU components, keep it the same as \ncore_freq\n\n\nsdram_freq\n - speed of SDRAM\n\n\nsdram_schmoo\n - a set of SDRAM timings\n\n\n\n\nThe following voltage parameters can be set:\n\n\n\n\nover_voltage\n - voltage of ARM and GPU\n\n\nover_voltage_sdram\n - voltage of all SDRAM parts (\nc\n, \ni\n, and \np\n)\n\n\n\n\nThe voltage starts at 1.2V and adjusts up or down in 0.025V steps. \n0\n is equal to 1.2V, the minimum \n-16\n is 0.8V, and the maximum \n8\n is 1.4V. Voltage starts to help when running core/GPU/SDRAM at or over 500MHz.\n\n\nTo set voltage greater than \n6\n you must set \nforce_turbo=1\n which voids the warranty.\n\n\nOther Parameters\n\n\nThere is a complex mathematical relationship between the clocks for the GPU core and the individual GPU components. Setting these without understanding their relationship may result in running a component faster or slower than intended.\n\n\nYou are better to just set \ncore_freq\n and \ngpu_freq\n to the same thing and don't worry about it. The individual components only get faster when they are used anyway.\n\n\nBy setting \navoid_pwm_pll=1\n (which negatively affects 3.5mm audio quality) and \nforce_turbo=1\n (which voids the warranty) you can overclock the individual GPU components with the parameters:\n\n\n\n\nv3d_freq\n - speed of OpenGL 3D graphics processor\n\n\nisp_freq\n - speed of Image Sensor Pipeline\n\n\nh264_freq\n - speed of x264 video decoder (not used by emulators, used by Kodi)\n\n\n\n\nThese more complex RAM voltages are set together by \nover_voltage_sdram\n and there is often not a need to set them individually:\n\n\n\n\nover_voltage_sdram_c\n - voltage of SDRAM controller\n\n\nover_voltage_sdram_i\n - voltage of SDRAM I/O\n\n\nover_voltage_sdram_p\n - voltage of SDRAM PHY (physical RAM chip)\n\n\n\n\nThere is also:\n\n\n\n\ntemp_limit\n - CPU throttling temperature in Celsius\n\n\n\n\nYou can set \ntemp_limit\n lower than the default \n85\n if you'd like your Pi to slow down sooner than normal. You can also set it higher if you like, which voids the warranty and heavily risks killing your Pi due to over-temperature.\n\n\n\n\nforce_turbo\n - disable dynamic clocking\n\n\n\n\nSetting \nforce_turbo=1\n results in all components running at their maximum speed at all times. This will void the warranty and make your Pi run quite hot, though it may also perform faster.\n\n\nDefault Settings\n\n\nThe default settings for each model Pi are:\n\n\n        ARM   Core    GPU   RAM\nPi 1    700    250    250   400\nPi 2    900    250    250   400\nPi 3   1200    400    300   450\nZero   1000    400    300   450\n\n\n\n\nWhere Do I Start?\n\n\nWhere emulation benefits from overclocks, there are two types:\n\n\n\n\n\n\nEmulation restricted by the CPU\n\n    such as MAME which has no 3D acceleration at all (neither on the Pi or on any other computer)\n\n\n\n\n\n\nEmulation restricted by the GPU\n\n    such as N64 which is based around graphics plugins and is relying mostly on the OpenGL V3D core to do work for it\n\n\n\n\n\n\nYou can measure CPU usage with \ntop\n or \nhtop\n. If emulation runs poorly and CPU usage is at maximum, emulation is probably limited by the CPU. If emulation runs poorly and CPU usage is \nnot\n at 100%, emulation is probably limited by the GPU.\n\n\nCPU-restricted emulation will not benefit from GPU speed increases, though GPU-restricted emulation may benefit \nslightly\n from CPU speed increases.\n\n\nAll types of emulation will benefit from increased RAM speed.\n\n\nSome rules of thumb to start Raspberry Pi overclocking:\n\n\nIf overclocking the CPU (\narm_freq\n), start at the original speed and take it up in steps of 50MHz.\n\n\nIf overclocking the GPU (\ncore_freq\n and \ngpu_freq\n), start at \n500\n (or \n400\n for Pi 1)  and take both up in steps of 20MHz or 25MHz. Always set the two GPU frequencies to the same thing.\n\n\nFor voltage, you are probably best to start with \nover_voltage=2\n then increase by \n1\n if the system becomes unstable.\n\n\nFor RAM, start with the original speed and again go up in small steps of 20MHz or 25MHz, increasing voltage in steps of \n1\n if things become unstable. The \nschmoo\n setting is some timings known to help increase stability of overclocked RAM:\n\n\nsdram_schmoo=0x02000020\nsdram_over_voltage=2\n\n\n\n\nAfter many config file edits and reboots it's difficult to remember exactly which settings were best and which didn't have any effect and which broke things. It's best to:\n\n\n\n\nchange only one setting at a time\n\n\nwrite down exactly what you changed\n\n\nwrite down the results of that change\n\n\n\n\nTest your overclock thoroughly before going up to the next speed. Some people like to leave automated tests running overnight, some people only test for 15 minutes or so. Besides automated tests, test the things you actually care about and are trying to improve. There's no use making a commandline benchmark faster if your games don't run any better.\n\n\nIf emulators start crashing (check logs for \nsegmentation fault\n or \ngeneral protection fault\n or similar) or the kernel panics or the system freezes or any other such unexpected result, you're probably past the limit of what your individual Pi can do. Back off the overclock to the previous stable setting. That's probably as good as it gets.\n\n\nHow Do I Test?\n\n\nThis is a difficult question to answer for RetroPie, as there are not many easy automated ways to fully exercise the GPU and 3D components.\n\n\nIf you wish to install \nQuake 3\n and have a keyboard, running the ioQuake3 console commands \n\\timedemo 1\n and \n\\demo four\n provide a good exercise of the GPU.\n\n\nPlaying an N64 game is also a good way to use the GPU. A game which runs poorly and totally maxes out the system, like Conker's Bad Fur Day, might be a better choice than a game which runs well.\n\n\nSome cryptographical functions to exercise the CPU can be benchmarked by running: \nopenssl speed\n\n\nThe LINPACK benchmark runs a multi-computer CPU-based workload on one computer: https://www.howtoforge.com/tutorial/hpl-high-performance-linpack-benchmark-raspberry-pi/\n\n\nA test script which runs simple processes in the background then does sdcard I/O is available at: http://elinux.org/RPiconfig#Overclock_stability_test\n\n\nHelp! I Overclocked Too Far and Cannot Boot\n\n\nPlace the sdcard in your computer, both Windows and Mac will see the small FAT32 partition which contains \nconfig.txt\n which you can edit and change the bad overclock settings.\n\n\nIf you have a USB keyboard attached to your Pi, holding Shift key while powering on tells the GPU core to avoid applying overclock settings until the next boot.\n\n\nWhat Speeds Can I Expect?\n\n\nWhilst every individual Pi is differerent, experience shows \nmost\n are able to reach at least these frequencies. Some get higher, some get lower, but these are common:\n\n\n\n\nPi 1 - ARM 900 and core/GPU/RAM 400, any higher is pretty lucky\n\n\nPi 2 - ARM 1000 and core/GPU/RAM 500, RAM over 600 is not unheard of\n\n\nPi 3 - ARM 1300 and core/GPU/RAM 500, RAM over 600 is not unheard of\n\n\nPi Zero - ARM not widely tested, core/GPU/RAM 500\n\n\n\n\nSettings Examples\n\n\nAs much as copying someone else's settings simply may not work, people still ask for them, so here are some usually-safe baselines to start from:\n\n\nRaspberry Pi 1\n\n\narm_freq=900\ngpu_freq=400\ncore_freq=400\nsdram_freq=400\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2\n\n\n\n\nRaspberry Pi 2\n\n\narm_freq=1000\ngpu_freq=500\ncore_freq=500\nsdram_freq=500\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2\n\n\n\n\nRaspberry Pi 3\n\n\narm_freq=1300\ngpu_freq=500\ncore_freq=500\nsdram_freq=500\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2\n\n\n\n\nRaspberry Pi Zero\n\n\narm_freq=1000\ngpu_freq=500\ncore_freq=500\nsdram_freq=500\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2\n\n\n\n\nMeasurement Tools\n\n\nTo display a Frames Per Second counter in RetroArch cores to see the effect on emulation speed, edit \n/opt/retropie/configs/all/retroarch.cfg\n and set:\n\n\nfps_show = \ntrue\n\n\n\n\n\nYou can \nSSH\n into your Pi while playing a game and run these commands to measure the effect of normal operation.\n\n\nThe temperature of the SoC can be queried with the command:\n\n\nvcgencmd measure_temp\n\n\n\n\nThe currently applied \nconfig.txt\n parameters which differ from default can be queried with:\n\n\nvcgencmd get_config int | egrep \n(arm|core|gpu|sdram)_freq|over_volt\n\n\n\n\n\nThe current frequency of the components (remember they only increase speed under load) can be queried with:\n\n\nfor src in arm core h264 isp v3d; do echo -e \n$src:\\t$(vcgencmd measure_clock $src)\n; done\n\n\n\n\nThe current voltages of the components can be queried with:\n\n\nfor id in core sdram_c sdram_i sdram_p ; do echo -e \n$id:\\t$(vcgencmd measure_volts $id)\n; done\n\n\n\n\nCPU usage of currently-running processes can be viewed with\n\n\ntop\n\n\n\n\nA nicer display of CPU usage can be installed with \nsudo apt update; sudo apt install htop\n and then:\n\n\nhtop\n\n\n\n\nStorage Overclocking\n\n\nWhile loading a small ROM of a few kilobytes or even a few megabytes happens almost instantly, improved storage speed has benefits such as faster booting and regular operation, as well as providing quicker loading time to emulators dealing with very large ROMs and disc images such as PlayStation, Dreamcast, and PSP.\n\n\nThe sdcard specification says that when operating in \"High Capacity (SDHC) mode\" an sdcard must run at 50MHz, but when running in the faster \"Ultra High Speed (UHS) mode\" an sdcard must be able to run at 100MHz.\n\n\nWhilst the Pi runs its sdcard reader at the 50MHz speed and does not enter sdcards into UHS mode, a UHS-capable card can \nprobably\n still run at 100MHz while in SDHC mode, so we run the sdcard reader faster and hope the card is happy with it.\n\n\nUHS cards are identified by the capital \nI\n of the UHS-I logo, as well as \nU1\n or \nU3\n speed markings. These are usually high-end expensive sdcards like Samsung Pro/Evo or Sandisk Extreme.\n\n\nIt is recommended \nnot\n to try this with a regular non-UHS SDHC card.\n\n\nThe sdcard reader speed can be increased in \n/boot/config.txt\n with the following line and a reboot:\n\n\ndtparam=sd_overclock=100\n\n\n\n\nOnce booted, the sdcard reader frequency can be queried with:\n\n\nsudo grep clock /sys/kernel/debug/mmc0/ios\n\n\n\n\nSpotting a bad sdcard overclock can be very difficult, as the sdcard will probably write corrupted data and everything will appear to work fine, you won't notice the data is corrupt until you access it again later on.\n\n\nIf your sdcard doesn't boot when overclocked, place the sdcard in your computer, both Windows and Mac will see the small FAT32 partition which contains \nconfig.txt\n which you can edit to remove the setting.\n\n\nThere are actually several frequencies in between 50MHz and 100MHz which can also be used, the exact speeds vary depending on Pi model. When a speed is applied which is \nnot\n one of the useable frequencies, the next lowest frequency is chosen.\n\n\nFor example, setting 100MHz on a Pi 3 results in 100MHz, but setting 99MHz actually results in the sdcard reader running at 83MHz, and setting 82MHz would bump down to the next frequency under that.\n\n\nFurther Reading\n\n\nOverclocking\n\n\n\n\nhttp://elinux.org/RPiconfig#Overclocking (some outdated info for Pi 1, not Pi 2/3/Zero)\n\n\nOfficial Pi Foundation forums thread (long): https://www.raspberrypi.org/forums/viewtopic.php?f=29\nt=6201\n\n\nhttp://linuxonflash.blogspot.com/2015/02/a-look-at-raspberry-pi-2-performance.html\n\n\n\n\nCooling\n\n\n\n\nExplainingComputers video series: \n1\n, \n2\n, \n3\n, \n4\n\n\nhttps://github.com/superjamie/lazyweb/wiki/Raspberry-Pi-Cooling\n\n\n\n\nPower\n\n\n\n\nhttps://www.raspberrypi.org/help/faqs/#powerReqs\n\n\nhttp://www.righto.com/2012/10/a-dozen-usb-chargers-in-lab-apple-is.html\n\n\nhttps://github.com/superjamie/lazyweb/wiki/Raspberry-Pi-Power\n\n\nhttp://www.calculator.net/voltage-drop-calculator.html\n\n\nhttp://www.powerstream.com/Wire_Size.htm\n\n\n\n\nSDcards\n\n\n\n\nhttps://en.wikipedia.org/wiki/Secure_Digital#Ultra_High_Speed_.28UHS.29_bus\n\n\nhttp://www.jeffgeerling.com/blog/2016/how-overclock-microsd-card-reader-on-raspberry-pi-3\n\n\nhttps://www.reddit.com/r/raspberry_pi/comments/4aoc3r/how_to_overclock_the_microsd_card_reader_on_a/\n\n\n\n\nOther\n\n\n\n\nhttp://www.elinux.org/RPI_vcgencmd_usage\n\n\nhttps://github.com/nezticle/RaspberryPi-BuildRoot/wiki/VideoCore-Tools", 
            "title": "Overclocking"
        }, 
        {
            "location": "/Overclocking/#hardware-introduction", 
            "text": "The Raspberry Pi's VideoCore IV System-on-Chip has several components, each of which can be run at different clock speeds. They are:   ARM - the main general-purpose CPU  SDRAM - the 1Gb or 512Mb or 256Mb of main memory  Core - the GPU processor core (confusingly named)  GPU - a quick way to collectively refer to the following three parts:  H264 - the hardware x264 decoder used when watching movies and TV shows  ISP - the Image Sensor Pipeline, does things like color profile correction and image scaling  V3D - the 3D block, does the work described by OpenGL commands     All of these plus the voltages have an \"idle\" setting which they run at normally, only increasing to their individual maximums when they are used and placed under enough load. Changing this maximum is what Raspberry Pi overclocking does.  The H264, ISP, and V3D all share the same clock generator (a  PLL ) so all run at the same speed.  Both of these default behaviours can be changed if desired.  As a component is overclocked it may become unreliable. Unreliability is most often seen as program crashes, hardware lockups, and graphical glitches.  One way to increase that reliability is to increase the voltage to the component. This has the tradeoff that more heat is generated by the component. A component may be damaged if too much voltage is supplied.  A cooler component will usually perform more reliably than a hotter component.", 
            "title": "Hardware Introduction"
        }, 
        {
            "location": "/Overclocking/#lifespan-and-warranty", 
            "text": "Whilst there are overclock settings which are considered \"supported\" by the Raspberry Pi Foundation, not every Pi will be able to reach all supplied overclock settings, and overclocking always runs the risk of shortening the lifespan of your Pi.  There are some settings which flip a hardware switch inside the Pi and void the warranty, these are:   over_voltage  greater than  6  force_turbo=1  temp_limit  greater than  85", 
            "title": "Lifespan and Warranty"
        }, 
        {
            "location": "/Overclocking/#best-settings", 
            "text": "There are no \"best settings\" for overclocking, each individual Raspberry Pi has a different maximum capability. Just because some guy on the internet says he can reach some huge speed and play every game smoothly does not mean your Pi will be able to do the same. Likewise perhaps yours will run even faster.", 
            "title": "Best Settings"
        }, 
        {
            "location": "/Overclocking/#why-is-this", 
            "text": "There is no way for a silicon chip manufacturer to make a processor which runs \"at\" a certain speed. There will always be some variance in the reliability of the components. Manufacturers make silicon chips so that the majority of a production run can achieve the chip's advertised speed, then they test all of the chips at that speed and throw out the small number of failures. This means there are always some chips which can do more than their advertised speed, though it's not known exactly how much more any given individual chip can do. It might be a significant percentage or it might be none.  This is seen all throughout processor history. Intel originally tried to make the first Pentium a 66MHz CPU but they couldn't get the production reliable enough, however, the chips which didn't run at 66MHz did run just fine at 60MHz so they printed \"60MHz\" on those chips and sold them at a slightly lower cost than ones with \"66MHz\" printed on them. The Raspberry Pi 1 (700MHz) and the Raspberry Pi Zero (1GHz) use the exact same System-on-Chip, the only difference being in the ~4 years between those models, Broadcom managed to make the production process better so they could make faster chips more reliably.  That said, there are some sensible starting points for Pi overclocking which are discussed below.", 
            "title": "Why is this?"
        }, 
        {
            "location": "/Overclocking/#power-supply", 
            "text": "A good reliable power source and power cable are strongly recommended for overclocking.  An overclocked Pi 3 could draw over 1.5A of current, so a 2A supply should be the  minimum  considered. Many power supplies drop their voltage as current draw increases towards their maximum rating, so a 2.5A or higher power supply is a better choice than 2A. Some good suggestions are:   Raspberry Pi Foundation official 2.5A power supply  Adafruit 2.4A power supply w/ 20AWG MicroUSB cable  Genuine Samsung and HP tablet chargers   Users have reported success with:   Canakit 2.5A power supply, common on Amazon  Kootek 2.5A power supply  Genuine Apple 12W 2.4A iPad charger, available in stores  Pro-Elec 5.25V 2.4A power supply   The Pi runs off 5V but there's nothing wrong with a power supply providing 5.1V or 5.25V. There's usually about 0.25V drop over a typical USB power cable so the extra voltage helps compensate.  A good power cable is just as important as a good power supply. The wire in the cable should be 22AWG or thicker. Wire gauge goes  down  as it gets thicker, so 20AWG is thicker than 22AWG which is thicker than 25AWG. A longer cable drops much more voltage than a shorter cable, so use USB cables under 1M/3ft in length. A mobile phone or tablet \"fast charge\" cable should be sufficient.  Ensure you have a good solid connection at the MicroUSB connector, a loose or poorly-fitting connector can pass less current than a well-seated connector.  If you are powering many USB devices or power-hungry USB devices like rechargable game controllers off the Pi's USB ports, consider powering them off an externally-powered USB hub instead: http://elinux.org/RPi_Powered_USB_Hubs  There is a maximum current you can draw through the Pi board itself, dictated by the polyfuse next to the power connector:   Pi 1: 750mA  Pi 2: 2A  Pi 3: 2.5A   So there's no point getting a massively over-rated power supply like 10A and continuing to run many devices off the USB ports. There is also a smaller polyfuse on the USB ports which makes doing this even more unfeasible.  The exception to this is the Pi Zero, which has no current protection anywhere.", 
            "title": "Power Supply"
        }, 
        {
            "location": "/Overclocking/#rainbow-square-or-lightning-bolt", 
            "text": "If you see either a little rainbow square or a lightning bolt icon in the top right corner of the screen, those are the \"under voltage\" warnings, indicating your power supply is sending under 4.65V.  If this appears, shut down your Pi down properly and:   Pull out your power cable and plug it back in, at both ends if using a USB-A to MicroUSB cable, to ensure a good firm connection  Test without any powered USB devices  Try a different power cable  Try a different power supply", 
            "title": "Rainbow Square or Lightning Bolt"
        }, 
        {
            "location": "/Overclocking/#temperature-and-cooling", 
            "text": "The Pi idles around 35C with usual operating temperatures as high as 75C depending on environment.  At 80C you'll start to see the red/orange/yellow square or thermometer icon in the top right corner of the screen, this is the temperature warning.  At 85C the Pi will throttle the CPU speed down to reduce temperature and performance will suffer greatly.  Cooling can be mainly broken up into two parts: heatsinks and fans.", 
            "title": "Temperature and Cooling"
        }, 
        {
            "location": "/Overclocking/#heatsinks", 
            "text": "The small (14mm x 14mm x 4mm) heatsinks that come with most Pi kits are next to useless on their own without a fan, they'll only drop 5C at most.  Depending on the case used to house the Pi, a larger heatsink up to 25mm x 25mm x 15mm can  usually  be fit in. These will perform a bit better, dropping up to 20C without a fan.  Heatsink material - copper vs aluminium - is a never-ending debate within the overclocking community. For a relatively small Raspberry Pi heatsink, it's unlikely to make a huge difference.  There are three main areas available to cool on the Pi 2 and Pi 3 - the main SoC, the Ethernet controller, and the voltage regulator - however only the SoC in the middle of the board really benefits from any cooling. The Ethernet chip and the voltage regulator operate within specification without a heatsink. The RAM is underneath on the bottom on the board so is more difficult to cool.  When applying a heatsink, clean the surface of the SoC chip with isopropyl alcohol (aka rubbing alcohol) and a lint-free cloth to clean off any impurities or fingerprint oil and to ensure good contact with the thermal conductor to the heatsink.  The usual method to hold heatsinks on is thermal transfer tape. This is an extremely thin (less than 0.5mm) sticky layer and is designed specifically for thermal conductivity. 3M are a common brand to see. You can buy rolls or squares of it if you need to.  Cheap heatsink kits have been seen with double-sided tape to hold the heatsinks on. This material will act more as an insulator and probably raise temperatures! Double-sided tape is easily spotted as it's over 2mm thick and can be compressed then slowly springs back and retains its shape like a sponge. If you have this, remove it and get proper thermal transfer tape.  Another method to hold heatsinks on is a thermal glue/epoxy like  Arctic Silver Thermal Adhesive  however be aware this is a permanent solution. Trying to take off a heatsink fastened with thermal adhesive is more likely to remove the chip from the board and cause permanent damage.", 
            "title": "Heatsinks"
        }, 
        {
            "location": "/Overclocking/#fans", 
            "text": "A fan is needed to make the Raspberry Pi cool very well. With the right heatsink and fan combination, flat-out running temperatures as low as 55C are possible.  Fans can be powered externally, via the USB ports, or via the 5V GPIO pins. Do not power a fan off the 3.3V GPIO pin, it cannot supply enough current.  Fans are available from electronics suppliers, as well as the usual eBay and Amazon and Chinese gadget manufacturers. Specifically getting a  quiet fan  is a really good idea, some 5V fans sound like small jet engines!  It is sometimes possible to use a 12V fan like from a PC. Popular overclocker brands like Noctua make PC fans which are designed to run off a low voltage so these should work well. Cheap 12V computer fans often don't have enough power to start spinning with only 5V, though they may continue spinning with 5V once you start the blades turning with your finger.  Some Pi cases have a place specifically to mount a fan, sometimes you can cut a hole in a case, sometimes you have to get creative to mount your fan.", 
            "title": "Fans"
        }, 
        {
            "location": "/Overclocking/#overclocking-methods", 
            "text": "There are two ways to overclock, either the Pi Foundation's  raspi-config  tool, or by manually editing  /boot/config.txt .  After making any changes, reboot to apply the new settings.", 
            "title": "Overclocking Methods"
        }, 
        {
            "location": "/Overclocking/#supported-overclocking", 
            "text": "The Pi Foundation's supported overclocking tool provides some options for the Pi 1 and Pi 2. It does not provide any options for the Pi 3 or Pi Zero.  This tool can be accessed from the RetroPie menu in EmulationStation, or by typing  sudo raspi-config  in the terminal, and selecting the Overclock option:   You'll see this warning that overclocking may shorten the lifespan of your Pi:   Then select your preferred overclock setting:   This menu shows the options for Pi 1, the Pi 2 has only None and Turbo.", 
            "title": "Supported Overclocking"
        }, 
        {
            "location": "/Overclocking/#manual-overclocking", 
            "text": "All Raspberry Pi models can be manually overclocked by editing  /boot/config.txt  and rebooting. Read the  SSH  page if you are not familiar with editing text files in Linux.  Parameters are set like:  parameter=value  For example, to set the ARM to 1000MHz:  arm_freq=1000", 
            "title": "Manual Overclocking"
        }, 
        {
            "location": "/Overclocking/#useful-parameters", 
            "text": "The following speed parameters can be set:   arm_freq  - speed of the ARM core  core_freq  - speed of GPU processor core, keep it the same as  gpu_freq  gpu_freq  - speed of all GPU components, keep it the same as  core_freq  sdram_freq  - speed of SDRAM  sdram_schmoo  - a set of SDRAM timings   The following voltage parameters can be set:   over_voltage  - voltage of ARM and GPU  over_voltage_sdram  - voltage of all SDRAM parts ( c ,  i , and  p )   The voltage starts at 1.2V and adjusts up or down in 0.025V steps.  0  is equal to 1.2V, the minimum  -16  is 0.8V, and the maximum  8  is 1.4V. Voltage starts to help when running core/GPU/SDRAM at or over 500MHz.  To set voltage greater than  6  you must set  force_turbo=1  which voids the warranty.", 
            "title": "Useful Parameters"
        }, 
        {
            "location": "/Overclocking/#other-parameters", 
            "text": "There is a complex mathematical relationship between the clocks for the GPU core and the individual GPU components. Setting these without understanding their relationship may result in running a component faster or slower than intended.  You are better to just set  core_freq  and  gpu_freq  to the same thing and don't worry about it. The individual components only get faster when they are used anyway.  By setting  avoid_pwm_pll=1  (which negatively affects 3.5mm audio quality) and  force_turbo=1  (which voids the warranty) you can overclock the individual GPU components with the parameters:   v3d_freq  - speed of OpenGL 3D graphics processor  isp_freq  - speed of Image Sensor Pipeline  h264_freq  - speed of x264 video decoder (not used by emulators, used by Kodi)   These more complex RAM voltages are set together by  over_voltage_sdram  and there is often not a need to set them individually:   over_voltage_sdram_c  - voltage of SDRAM controller  over_voltage_sdram_i  - voltage of SDRAM I/O  over_voltage_sdram_p  - voltage of SDRAM PHY (physical RAM chip)   There is also:   temp_limit  - CPU throttling temperature in Celsius   You can set  temp_limit  lower than the default  85  if you'd like your Pi to slow down sooner than normal. You can also set it higher if you like, which voids the warranty and heavily risks killing your Pi due to over-temperature.   force_turbo  - disable dynamic clocking   Setting  force_turbo=1  results in all components running at their maximum speed at all times. This will void the warranty and make your Pi run quite hot, though it may also perform faster.", 
            "title": "Other Parameters"
        }, 
        {
            "location": "/Overclocking/#default-settings", 
            "text": "The default settings for each model Pi are:          ARM   Core    GPU   RAM\nPi 1    700    250    250   400\nPi 2    900    250    250   400\nPi 3   1200    400    300   450\nZero   1000    400    300   450", 
            "title": "Default Settings"
        }, 
        {
            "location": "/Overclocking/#where-do-i-start", 
            "text": "Where emulation benefits from overclocks, there are two types:    Emulation restricted by the CPU \n    such as MAME which has no 3D acceleration at all (neither on the Pi or on any other computer)    Emulation restricted by the GPU \n    such as N64 which is based around graphics plugins and is relying mostly on the OpenGL V3D core to do work for it    You can measure CPU usage with  top  or  htop . If emulation runs poorly and CPU usage is at maximum, emulation is probably limited by the CPU. If emulation runs poorly and CPU usage is  not  at 100%, emulation is probably limited by the GPU.  CPU-restricted emulation will not benefit from GPU speed increases, though GPU-restricted emulation may benefit  slightly  from CPU speed increases.  All types of emulation will benefit from increased RAM speed.  Some rules of thumb to start Raspberry Pi overclocking:  If overclocking the CPU ( arm_freq ), start at the original speed and take it up in steps of 50MHz.  If overclocking the GPU ( core_freq  and  gpu_freq ), start at  500  (or  400  for Pi 1)  and take both up in steps of 20MHz or 25MHz. Always set the two GPU frequencies to the same thing.  For voltage, you are probably best to start with  over_voltage=2  then increase by  1  if the system becomes unstable.  For RAM, start with the original speed and again go up in small steps of 20MHz or 25MHz, increasing voltage in steps of  1  if things become unstable. The  schmoo  setting is some timings known to help increase stability of overclocked RAM:  sdram_schmoo=0x02000020\nsdram_over_voltage=2  After many config file edits and reboots it's difficult to remember exactly which settings were best and which didn't have any effect and which broke things. It's best to:   change only one setting at a time  write down exactly what you changed  write down the results of that change   Test your overclock thoroughly before going up to the next speed. Some people like to leave automated tests running overnight, some people only test for 15 minutes or so. Besides automated tests, test the things you actually care about and are trying to improve. There's no use making a commandline benchmark faster if your games don't run any better.  If emulators start crashing (check logs for  segmentation fault  or  general protection fault  or similar) or the kernel panics or the system freezes or any other such unexpected result, you're probably past the limit of what your individual Pi can do. Back off the overclock to the previous stable setting. That's probably as good as it gets.", 
            "title": "Where Do I Start?"
        }, 
        {
            "location": "/Overclocking/#how-do-i-test", 
            "text": "This is a difficult question to answer for RetroPie, as there are not many easy automated ways to fully exercise the GPU and 3D components.  If you wish to install  Quake 3  and have a keyboard, running the ioQuake3 console commands  \\timedemo 1  and  \\demo four  provide a good exercise of the GPU.  Playing an N64 game is also a good way to use the GPU. A game which runs poorly and totally maxes out the system, like Conker's Bad Fur Day, might be a better choice than a game which runs well.  Some cryptographical functions to exercise the CPU can be benchmarked by running:  openssl speed  The LINPACK benchmark runs a multi-computer CPU-based workload on one computer: https://www.howtoforge.com/tutorial/hpl-high-performance-linpack-benchmark-raspberry-pi/  A test script which runs simple processes in the background then does sdcard I/O is available at: http://elinux.org/RPiconfig#Overclock_stability_test", 
            "title": "How Do I Test?"
        }, 
        {
            "location": "/Overclocking/#help-i-overclocked-too-far-and-cannot-boot", 
            "text": "Place the sdcard in your computer, both Windows and Mac will see the small FAT32 partition which contains  config.txt  which you can edit and change the bad overclock settings.  If you have a USB keyboard attached to your Pi, holding Shift key while powering on tells the GPU core to avoid applying overclock settings until the next boot.", 
            "title": "Help! I Overclocked Too Far and Cannot Boot"
        }, 
        {
            "location": "/Overclocking/#what-speeds-can-i-expect", 
            "text": "Whilst every individual Pi is differerent, experience shows  most  are able to reach at least these frequencies. Some get higher, some get lower, but these are common:   Pi 1 - ARM 900 and core/GPU/RAM 400, any higher is pretty lucky  Pi 2 - ARM 1000 and core/GPU/RAM 500, RAM over 600 is not unheard of  Pi 3 - ARM 1300 and core/GPU/RAM 500, RAM over 600 is not unheard of  Pi Zero - ARM not widely tested, core/GPU/RAM 500", 
            "title": "What Speeds Can I Expect?"
        }, 
        {
            "location": "/Overclocking/#settings-examples", 
            "text": "As much as copying someone else's settings simply may not work, people still ask for them, so here are some usually-safe baselines to start from:", 
            "title": "Settings Examples"
        }, 
        {
            "location": "/Overclocking/#raspberry-pi-1", 
            "text": "arm_freq=900\ngpu_freq=400\ncore_freq=400\nsdram_freq=400\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2", 
            "title": "Raspberry Pi 1"
        }, 
        {
            "location": "/Overclocking/#raspberry-pi-2", 
            "text": "arm_freq=1000\ngpu_freq=500\ncore_freq=500\nsdram_freq=500\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2", 
            "title": "Raspberry Pi 2"
        }, 
        {
            "location": "/Overclocking/#raspberry-pi-3", 
            "text": "arm_freq=1300\ngpu_freq=500\ncore_freq=500\nsdram_freq=500\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2", 
            "title": "Raspberry Pi 3"
        }, 
        {
            "location": "/Overclocking/#raspberry-pi-zero", 
            "text": "arm_freq=1000\ngpu_freq=500\ncore_freq=500\nsdram_freq=500\nsdram_schmoo=0x02000020\nover_voltage=2\nsdram_over_voltage=2", 
            "title": "Raspberry Pi Zero"
        }, 
        {
            "location": "/Overclocking/#measurement-tools", 
            "text": "To display a Frames Per Second counter in RetroArch cores to see the effect on emulation speed, edit  /opt/retropie/configs/all/retroarch.cfg  and set:  fps_show =  true   You can  SSH  into your Pi while playing a game and run these commands to measure the effect of normal operation.  The temperature of the SoC can be queried with the command:  vcgencmd measure_temp  The currently applied  config.txt  parameters which differ from default can be queried with:  vcgencmd get_config int | egrep  (arm|core|gpu|sdram)_freq|over_volt   The current frequency of the components (remember they only increase speed under load) can be queried with:  for src in arm core h264 isp v3d; do echo -e  $src:\\t$(vcgencmd measure_clock $src) ; done  The current voltages of the components can be queried with:  for id in core sdram_c sdram_i sdram_p ; do echo -e  $id:\\t$(vcgencmd measure_volts $id) ; done  CPU usage of currently-running processes can be viewed with  top  A nicer display of CPU usage can be installed with  sudo apt update; sudo apt install htop  and then:  htop", 
            "title": "Measurement Tools"
        }, 
        {
            "location": "/Overclocking/#storage-overclocking", 
            "text": "While loading a small ROM of a few kilobytes or even a few megabytes happens almost instantly, improved storage speed has benefits such as faster booting and regular operation, as well as providing quicker loading time to emulators dealing with very large ROMs and disc images such as PlayStation, Dreamcast, and PSP.  The sdcard specification says that when operating in \"High Capacity (SDHC) mode\" an sdcard must run at 50MHz, but when running in the faster \"Ultra High Speed (UHS) mode\" an sdcard must be able to run at 100MHz.  Whilst the Pi runs its sdcard reader at the 50MHz speed and does not enter sdcards into UHS mode, a UHS-capable card can  probably  still run at 100MHz while in SDHC mode, so we run the sdcard reader faster and hope the card is happy with it.  UHS cards are identified by the capital  I  of the UHS-I logo, as well as  U1  or  U3  speed markings. These are usually high-end expensive sdcards like Samsung Pro/Evo or Sandisk Extreme.  It is recommended  not  to try this with a regular non-UHS SDHC card.  The sdcard reader speed can be increased in  /boot/config.txt  with the following line and a reboot:  dtparam=sd_overclock=100  Once booted, the sdcard reader frequency can be queried with:  sudo grep clock /sys/kernel/debug/mmc0/ios  Spotting a bad sdcard overclock can be very difficult, as the sdcard will probably write corrupted data and everything will appear to work fine, you won't notice the data is corrupt until you access it again later on.  If your sdcard doesn't boot when overclocked, place the sdcard in your computer, both Windows and Mac will see the small FAT32 partition which contains  config.txt  which you can edit to remove the setting.  There are actually several frequencies in between 50MHz and 100MHz which can also be used, the exact speeds vary depending on Pi model. When a speed is applied which is  not  one of the useable frequencies, the next lowest frequency is chosen.  For example, setting 100MHz on a Pi 3 results in 100MHz, but setting 99MHz actually results in the sdcard reader running at 83MHz, and setting 82MHz would bump down to the next frequency under that.", 
            "title": "Storage Overclocking"
        }, 
        {
            "location": "/Overclocking/#further-reading", 
            "text": "", 
            "title": "Further Reading"
        }, 
        {
            "location": "/Overclocking/#overclocking", 
            "text": "http://elinux.org/RPiconfig#Overclocking (some outdated info for Pi 1, not Pi 2/3/Zero)  Official Pi Foundation forums thread (long): https://www.raspberrypi.org/forums/viewtopic.php?f=29 t=6201  http://linuxonflash.blogspot.com/2015/02/a-look-at-raspberry-pi-2-performance.html", 
            "title": "Overclocking"
        }, 
        {
            "location": "/Overclocking/#cooling", 
            "text": "ExplainingComputers video series:  1 ,  2 ,  3 ,  4  https://github.com/superjamie/lazyweb/wiki/Raspberry-Pi-Cooling", 
            "title": "Cooling"
        }, 
        {
            "location": "/Overclocking/#power", 
            "text": "https://www.raspberrypi.org/help/faqs/#powerReqs  http://www.righto.com/2012/10/a-dozen-usb-chargers-in-lab-apple-is.html  https://github.com/superjamie/lazyweb/wiki/Raspberry-Pi-Power  http://www.calculator.net/voltage-drop-calculator.html  http://www.powerstream.com/Wire_Size.htm", 
            "title": "Power"
        }, 
        {
            "location": "/Overclocking/#sdcards", 
            "text": "https://en.wikipedia.org/wiki/Secure_Digital#Ultra_High_Speed_.28UHS.29_bus  http://www.jeffgeerling.com/blog/2016/how-overclock-microsd-card-reader-on-raspberry-pi-3  https://www.reddit.com/r/raspberry_pi/comments/4aoc3r/how_to_overclock_the_microsd_card_reader_on_a/", 
            "title": "SDcards"
        }, 
        {
            "location": "/Overclocking/#other", 
            "text": "http://www.elinux.org/RPI_vcgencmd_usage  https://github.com/nezticle/RaspberryPi-BuildRoot/wiki/VideoCore-Tools", 
            "title": "Other"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/", 
            "text": "Storing your ROMs on a separate computer (NAS) solves a number of problems and has equally as many benefits.\n\n\n\n\nIt's more convenient\n\n\nIt Negates the need to transfer ROMs to your Raspberry PI MicroSD card\n\n\nYour storage is limited only by the size of your server\n\n\nBy reducing the number of times you write to your MicroSD card you minimize the chance at corrupting it\n\n\n\n\n\n\nGood to know\n: If you are accessing your RetroPie installation over SSH the default Raspbian username is \npi\n and the default password is \nraspberry\n.\n\n\n\n\nCopy the existing 'roms' folder structure to your server\n\n\nFor EmulationStation to be able to see your rom files the paths given to it within \n/etc/es_systems.cfg\n need to be recreated on your networked server. Connect to your RetroPie and browse to its roms folder for reference on how each system folder is named. Either copy these folders to your networked server or manually create the folders on your networked server using the same directory names.\n\n\nIf you prefer to not use the EmulationStation system directory names and keep the current folder structure you have on your networked server you'll need to edit \nes_systems.cfg\n. Use this command to copy the configuration file to the home directory wherein it will be editable through SMB (//RETROPIE/configs/all/emulationstation) or FTP.\n\n\ncp /etc/emulationstation/es_systems.cfg /home/pi/.emulationstation/es_systems.cfg\n\n\n\nMount your Share\n\n\nIf you haven't already, now is a good time to tell Raspbian to wait for your network at boot.\n\n\nsudo raspi-config\n\n\n\nIn there, select \"Boot Options\" and tell it Yes.\n\n\nOption 1: Add to autostart.sh (Preferred if using v4.0+)\n\n\nsudo nano /opt/retropie/configs/all/autostart.sh\n\n\n\nAdd the following line to the top of that file, being sure to adjust it for your personal settings, paths and options. This will make the local roms folder use your remote server roms folder instead.\n\n\nsudo mount -t cifs -o username=something,password=something //REMOTEHOST/path/to/roms /home/pi/RetroPie/roms\n\n\n\n\n\nGood to know\n: If you'd like to host the entire RetroPie folder remotely you can do so by removing the \n/roms\n directories from the mount command above. Make sure to have a copy of the RetroPie installation on your remote server or EmulationStation won't be able to start RetroPie!\n\n\n\n\nRestart your Raspberry Pi with \nsudo reboot\n or by simply unplugging the power cord.\n\n\nAlternatively, if you have a shared folder that allows guest access, you can use the following line in your \nautostart.sh\n:\n\n\nsudo mount -t cifs -o guest,uid=pi //hostname/retropie /home/pi/RetroPie\n\n\n\nThis should also allow you to write save files to your NAS.\n\n\nOption 2: Add to fstab\n\n\nUsing your favorite editor, open up fstab:\n\n\nsudo nano /etc/fstab\n\n\n\nAdd the line to mount your network share. Mine looks like this:\n\n\n//192.168.1.10/Storage/ROMs /home/pi/RetroPie cifs username=Username,password=Password,nounix,noserverino,defaults,users,auto 0 0\n\n\n\nFirst, make sure it will mount:\n\n\nsudo mount -a\n\n\n\nRestart and check the folder to make sure it didn't have any issues mounting at boot\n\n\nsudo reboot\nsudo ls RetroPie/roms/snes\n\n\n\nWith any luck (and if you have a ton of SNES ROMs like myself), it will be fairly apparent that it was able to mount the share at boot.\n\n\nApple Time Capsule\n\n\nThis will give you read/write access, so you could keep your saves there as well (i.e. no need to create separate saves folder and editing save paths).\n\nFirst \ncreate an account on your Time Capsule\n with the same credentials as your Pi (default: pi/raspberry).\n\n\nInstall \ncifs-utils\n if it's not already installed  \n\n\nsudo apt-get update \n sudo apt-get install cifs-utils\n\n\n\n\nEdit your \nautostart.sh\n file  \n\n\nsudo nano /opt/retropie/configs/all/autostart.sh\n\n\n\n\nAnd instead of \n\n\nsudo mount -t cifs -o username=something,password=something //hostname/retropie /home/pi/RetroPie\n\n\n\n\nyou enter \n\n\nsudo mount -t cifs //hostname/retropie -o username=USERNAME,password=PASSWORD,sec=ntlm,file_mode=0777,dir_mode=0777 /home/pi/RetroPie\n\n\n\n\nSaving Games\n\n\nGo ahead and make sure everything works. Don't get to far into a game though, you might not be able to save. If you hit 'Select + R' (default save command) and it gives you an error, the easiest solution I've found is as follows.\n\n\nWe need to edit retroarch.cfg by deleting the # infront of the savestate_directory and savefile_directory lines and put in the desired path. I'll be using ~/RetroPie-Save. First, make the target folder:\n\n\ncd\nmkdir RetroPie-Save\nsudo nano /opt/retropie/configs/all/retroarch.cfg\n\n\n\nMine looks like this:\n\n\nsavestate_directory = /home/pi/RetroPie-Save\nsavefile_directory = /home/pi/RetroPie-Save\n\n\n\nIf you already have some save files, it would be a good idea to move them to the ~/RetroPie-Save folder we created.\n\n\nScraping\n\n\nAt this point, everything should be good to go. You can play and save games from your childhood. If you want to make things pretty, you'll need to scrape. You may also find that scraping just doesn't work. Thank you \n@sselph\n for this tip:\n\n\n\n\nA simple solution if you just want things to work would be to run\n\n\n\n\nsudo /opt/retropie/supplementary/scraper/scraper -scrape_all -thumb_only -workers 4\n\n\n\n\n\nThat will parse the config the same as EmulationStation does then it will check every listed folder and scrape it placing the gamelist.xml in the rom folder for that system and the images in a folder called images in each system's rom folder. If the system isn't supported you may see a bunch of errors about not finding hashes or it might just take a while to not do anything.\n\n\nThe other option that is a little slower is to cd to each directory and run the scraper\n\n\n\n\ncd /home/pi/RetroPie/roms/nes\nsudo /opt/retropie/supplementary/scraper/scraper -thumb_only -workers 4\n\n\n\nTroubleshooting\n\n\nGames Won't Load\n\n\nIf you have a known working game that won't load after doing this setup, you may need to make sure the folder on your Windows system isn't marked as 'Read-Only'\n\n\nRight click the folder that contains your roms and BIOS folders, select \"Properties\", clear the box labeled \"Read Only\".\nSometimes this box will have a check mark or it may just be filled with gray, either way, make sure the box is clear. Select \"Apply\" and tell it to \"Apply to all subfolders and files\". After that process completes, you should be able to load your games. You may need to restart the Raspberry\n\n\nAdditional Help\n\n\nI started a discussion on the forums for this article. I haven't written any guides for many years so this will be a good place to provide any feedback or ask any questions. If I'm not advanced enough to help, hopefully someone else can chime in or you may need to make your own thread depending on the nature of the issue.\n\nROMs from a Network Share (Discussion)\n\n\nThank You\n\n\nThank you, everyone at the Raspberry Pi foundation, everyone involved in the development of EmulationStation and RetroPie, authors of several guides that I can't recall the names of, @sselph, @BuZz and probably a few other people.", 
            "title": "Running ROMs from a Network Share"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#copy-the-existing-roms-folder-structure-to-your-server", 
            "text": "For EmulationStation to be able to see your rom files the paths given to it within  /etc/es_systems.cfg  need to be recreated on your networked server. Connect to your RetroPie and browse to its roms folder for reference on how each system folder is named. Either copy these folders to your networked server or manually create the folders on your networked server using the same directory names.  If you prefer to not use the EmulationStation system directory names and keep the current folder structure you have on your networked server you'll need to edit  es_systems.cfg . Use this command to copy the configuration file to the home directory wherein it will be editable through SMB (//RETROPIE/configs/all/emulationstation) or FTP.  cp /etc/emulationstation/es_systems.cfg /home/pi/.emulationstation/es_systems.cfg", 
            "title": "Copy the existing 'roms' folder structure to your server"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#mount-your-share", 
            "text": "If you haven't already, now is a good time to tell Raspbian to wait for your network at boot.  sudo raspi-config  In there, select \"Boot Options\" and tell it Yes.", 
            "title": "Mount your Share"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#option-1-add-to-autostartsh-preferred-if-using-v40", 
            "text": "sudo nano /opt/retropie/configs/all/autostart.sh  Add the following line to the top of that file, being sure to adjust it for your personal settings, paths and options. This will make the local roms folder use your remote server roms folder instead.  sudo mount -t cifs -o username=something,password=something //REMOTEHOST/path/to/roms /home/pi/RetroPie/roms   Good to know : If you'd like to host the entire RetroPie folder remotely you can do so by removing the  /roms  directories from the mount command above. Make sure to have a copy of the RetroPie installation on your remote server or EmulationStation won't be able to start RetroPie!   Restart your Raspberry Pi with  sudo reboot  or by simply unplugging the power cord.  Alternatively, if you have a shared folder that allows guest access, you can use the following line in your  autostart.sh :  sudo mount -t cifs -o guest,uid=pi //hostname/retropie /home/pi/RetroPie  This should also allow you to write save files to your NAS.", 
            "title": "Option 1: Add to autostart.sh (Preferred if using v4.0+)"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#option-2-add-to-fstab", 
            "text": "Using your favorite editor, open up fstab:  sudo nano /etc/fstab  Add the line to mount your network share. Mine looks like this:  //192.168.1.10/Storage/ROMs /home/pi/RetroPie cifs username=Username,password=Password,nounix,noserverino,defaults,users,auto 0 0  First, make sure it will mount:  sudo mount -a  Restart and check the folder to make sure it didn't have any issues mounting at boot  sudo reboot\nsudo ls RetroPie/roms/snes  With any luck (and if you have a ton of SNES ROMs like myself), it will be fairly apparent that it was able to mount the share at boot.", 
            "title": "Option 2: Add to fstab"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#apple-time-capsule", 
            "text": "This will give you read/write access, so you could keep your saves there as well (i.e. no need to create separate saves folder and editing save paths). \nFirst  create an account on your Time Capsule  with the same credentials as your Pi (default: pi/raspberry).  Install  cifs-utils  if it's not already installed    sudo apt-get update   sudo apt-get install cifs-utils  Edit your  autostart.sh  file    sudo nano /opt/retropie/configs/all/autostart.sh  And instead of   sudo mount -t cifs -o username=something,password=something //hostname/retropie /home/pi/RetroPie  you enter   sudo mount -t cifs //hostname/retropie -o username=USERNAME,password=PASSWORD,sec=ntlm,file_mode=0777,dir_mode=0777 /home/pi/RetroPie", 
            "title": "Apple Time Capsule"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#saving-games", 
            "text": "Go ahead and make sure everything works. Don't get to far into a game though, you might not be able to save. If you hit 'Select + R' (default save command) and it gives you an error, the easiest solution I've found is as follows.  We need to edit retroarch.cfg by deleting the # infront of the savestate_directory and savefile_directory lines and put in the desired path. I'll be using ~/RetroPie-Save. First, make the target folder:  cd\nmkdir RetroPie-Save\nsudo nano /opt/retropie/configs/all/retroarch.cfg  Mine looks like this:  savestate_directory = /home/pi/RetroPie-Save\nsavefile_directory = /home/pi/RetroPie-Save  If you already have some save files, it would be a good idea to move them to the ~/RetroPie-Save folder we created.", 
            "title": "Saving Games"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#scraping", 
            "text": "At this point, everything should be good to go. You can play and save games from your childhood. If you want to make things pretty, you'll need to scrape. You may also find that scraping just doesn't work. Thank you  @sselph  for this tip:   A simple solution if you just want things to work would be to run   sudo /opt/retropie/supplementary/scraper/scraper -scrape_all -thumb_only -workers 4   That will parse the config the same as EmulationStation does then it will check every listed folder and scrape it placing the gamelist.xml in the rom folder for that system and the images in a folder called images in each system's rom folder. If the system isn't supported you may see a bunch of errors about not finding hashes or it might just take a while to not do anything.  The other option that is a little slower is to cd to each directory and run the scraper   cd /home/pi/RetroPie/roms/nes\nsudo /opt/retropie/supplementary/scraper/scraper -thumb_only -workers 4", 
            "title": "Scraping"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#games-wont-load", 
            "text": "If you have a known working game that won't load after doing this setup, you may need to make sure the folder on your Windows system isn't marked as 'Read-Only'  Right click the folder that contains your roms and BIOS folders, select \"Properties\", clear the box labeled \"Read Only\".\nSometimes this box will have a check mark or it may just be filled with gray, either way, make sure the box is clear. Select \"Apply\" and tell it to \"Apply to all subfolders and files\". After that process completes, you should be able to load your games. You may need to restart the Raspberry", 
            "title": "Games Won't Load"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#additional-help", 
            "text": "I started a discussion on the forums for this article. I haven't written any guides for many years so this will be a good place to provide any feedback or ask any questions. If I'm not advanced enough to help, hopefully someone else can chime in or you may need to make your own thread depending on the nature of the issue. ROMs from a Network Share (Discussion)", 
            "title": "Additional Help"
        }, 
        {
            "location": "/Running-ROMs-from-a-Network-Share/#thank-you", 
            "text": "Thank you, everyone at the Raspberry Pi foundation, everyone involved in the development of EmulationStation and RetroPie, authors of several guides that I can't recall the names of, @sselph, @BuZz and probably a few other people.", 
            "title": "Thank You"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/", 
            "text": "Rather than running everything from an SD card, it can be desirable to store and run ROMs from an external USB drive. The benefits of this are as follows:\n\n \nReliability\n: USB storage can be less sensitive to corruption than SD cards.\n\n \nSeparation of data\n: In the event that a RetroPie installation becomes corrupted or a new image is required, any ROMs, saves, etc, are not lost. Simply remove the USB stick, re-image the SD card, re-apply these setup instructions, and all that data is retained.\n\n \nEasy ROM transfer\n: When the system is off, you can remove the stick and plug it into any other computer and easily copy-and-paste ROMs into the correct folders.\n\n \nSpeed\n: USB transfer speeds can be faster than SD card transfer speeds (see http://www.roylongbottom.org.uk/Raspberry%20Pi%20Benchmarks.htm#anchor21).\n\n\nThere are a number of ways you can achieve this, but the following method is desirable as it fully integrates the USB drive with the existing directory structure, rather than requiring you to tweak configuration files so RetroPie is looking for ROMs in a different place. Below there are two ways to accomplish this: an automated method, or a manual method.\n\n\nFormat USB drive\n\n\nEither on linux, or on a PC, format the USB drive to FAT32 (used in this guide as it is the most compatible across different operating systems).\n\n \nInstructions to format on Linux\n\n\n \nInstructions to format on Windows 10\n\n* \nInstructions to format on OSX\n\n\nAutomatic Mount (Easiest Method)\n\n\nAs of December 30, 2016 a simple automated method was added to run roms from a USB drive. \n\n\n\n\nFirst Update the RetroPie Setup Script\n\n\nRe-Enable the USB ROM Transfer Service\n\n\nFormat your USB drive to FAT32 per directions above\n\n\nCreate a folder called \nretropie-mount\n on the USB drive\n\n\nPlug into Raspberry Pi\n\n\nIt will proceed to automatically copy the \nRetroPie\n folder AND all of its contents (you may need to reboot to start the copying)\n\n\n\n\nNOTE if you have a large ROM collection already on the SD card it will copy all of the ROMs too so make sure your USB is large enough. It is easiest if you haven't added any roms yet.\n\n\nOnce the folder structure is copied over the USB will be mounted over the RetroPie folder so any ROMs you add to your pi will be run off of the USB. \n\n\nManual Mount\n\n\nAfter formatting your USB based on the above step:\n\n\nDisable USB transfer daemon\n\n\n\n\nEnter the \nRetroPie Setup\n menu within the \nRetroPie\n menu in [[EmulationStation]].\n\n\nSelect \nSetup / Tools\n.\n\n\nSelect \nusbromservice - USB ROM Service\n\n\nDisable USB ROM Service\n.\n\n\n\n\nPlug in USB drive\n\n\nThis can be done when the system is powered on.\n\n\nTransfer the existing RetroPie file structure\n\n\nThis step is mandatory regardless of whether you have any roms on your system. RetroPie has a specific directory structure and a number of files required packaged with even empty installations.\n\n\nEither via \nSFTP\n, or using the terminal (via exiting emulationstation, pressing F4, or remotely using [[SSH]]), move the \n/home/pi/RetroPie\n folder into your USB stick. The reason for moving the whole folder, and not just \n/home/pi/RetroPie/roms\n is that there are other folders, such as /home/pi/RetroPie/BIOS` that are worth keeping on the external drive also.\n\n\nTo do this via terminal, First enter the command \ndf\n to print a list of the file systems. Example output:\n\n\npi@retropie:~ $ df\nFilesystem     1K-blocks     Used Available Use% Mounted on\n/dev/root        7318456  3367852   3609928  49% /\ndevtmpfs          372100        0    372100   0% /dev\ntmpfs             376436        0    376436   0% /dev/shm\ntmpfs             376436     5424    371012   2% /run\ntmpfs               5120        4      5116   1% /run/lock\ntmpfs             376436        0    376436   0% /sys/fs/cgroup\n/dev/mmcblk0p1     58234    20476     37758  36% /boot\n/dev/sda1       30480256 26921632   3558624  89% /media/usb0\n\n\n\n\nLook for an entry on /media/usb0, or similar. In our above example:\n\n\n/dev/sda1       30480256 26921632   3558624  89% /media/usb0\n\n\n\n\nThe important things to note down are the mount point: \n/media/usb0\n, and the position on the device tree: \n/dev/sda1\n\n\nNow we can move our existing RetroPie folder to our new USB drive. Enter the command:\n\n\nsudo mv -v /home/pi/RetroPie/* /media/usb0/\n\n\n\n\nAfter this, the USB directory structure should look something like:\n\n\npi@retropie:~ $ ls /media/usb0 -l\ntotal 96\ndrwxrwxrwx  8 root root 16384 Jun 15 00:17 BIOS\ndrwxrwxrwx  3 root root 16384 Apr 22 17:05 retropiemenu\ndrwxrwxrwx 52 root root 16384 Jun  3 00:11 roms\ndrwxrwxrwx  2 root root 16384 Apr 13 16:14 splashscreens\n\n\n\n\nConfigure fstab to automatically mount USB drive\n\n\nEstablish the drive's UUID number by entering the command \nls -l /dev/disk/by-uuid/\n. Example output:\n\n\npi@retropie:~ $ ls -l /dev/disk/by-uuid/\ntotal 0\nlrwxrwxrwx 1 root root 15 Jun 19 21:59 7cc81461-50b9-45a8-a561-fd5c4aa71934 -\n ../../mmcblk0p2\nlrwxrwxrwx 1 root root 15 Jun 19 21:59 AE51-7D54 -\n ../../mmcblk0p1\nlrwxrwxrwx 1 root root 10 Jun 19 21:59 E44B-FC4E -\n ../../sda1\n\n\n\n\nsda1\n was our device tree position from earlier, so \nE44B-FC4E\n is our UUID.\n\n\nEdit fstab with this command: \nsudo nano /etc/fstab\n and add a new line like the below:\n\n\nproc            /proc           proc    defaults          0       0\n/dev/mmcblk0p1  /boot           vfat    defaults          0       2\n/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1\n# a swapfile is not a swap partition, no line here\n#   use  dphys-swapfile swap[on|off]  for that\nUUID=E44B-FC4E  /home/pi/RetroPie      vfat    nofail,user,uid=pi,gid=pi 0       2\n\n\n\n\n...where \nUUID=\n the UUID of your drive, and everything else is the same as the example.\n\n\nIn the case of errors with ext4 file systems use\n\n\nUUID=\nXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX\n /home/pi/RetroPie ext4 nofail,defaults 0    0\n\n\n\n\nRestart system\n\n\nThis must be a full restart, not just emulationstation. When it boots up you should see any ROMs you previously had show up in emulationstation.\n\n\nTransfer ROMs\n\n\nNow transfer ROMs either directly to the USB drive, or via any of the usual methods (aside from using the automatic USB copy, obviously!). Now that the USB drive is mounted directly to \nhome/pi/RetroPie\n, every time this directory is accessed, you're actually accessing the USB drive.\n\n\nEdit command launcher for ports\n\n\nYou may start seeing permission denied errors when launching a .sh file, especially for FAT formatted drives/keys. In that case you need to prefix the command with bash.\n\n\nNotably to get the 'Ports' launchers working:\n - edit es_systems.cfg with \nsudo nano /etc/emulationstation/es_systems.cfg\n and search for the PORTS Section\n - Find the \n command \n section and simply add bash so it looks \ncommand\nbash %ROM\n/command", 
            "title": "Running ROMs from a USB drive"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#format-usb-drive", 
            "text": "Either on linux, or on a PC, format the USB drive to FAT32 (used in this guide as it is the most compatible across different operating systems).   Instructions to format on Linux    Instructions to format on Windows 10 \n*  Instructions to format on OSX", 
            "title": "Format USB drive"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#automatic-mount-easiest-method", 
            "text": "As of December 30, 2016 a simple automated method was added to run roms from a USB drive.    First Update the RetroPie Setup Script  Re-Enable the USB ROM Transfer Service  Format your USB drive to FAT32 per directions above  Create a folder called  retropie-mount  on the USB drive  Plug into Raspberry Pi  It will proceed to automatically copy the  RetroPie  folder AND all of its contents (you may need to reboot to start the copying)   NOTE if you have a large ROM collection already on the SD card it will copy all of the ROMs too so make sure your USB is large enough. It is easiest if you haven't added any roms yet.  Once the folder structure is copied over the USB will be mounted over the RetroPie folder so any ROMs you add to your pi will be run off of the USB.", 
            "title": "Automatic Mount (Easiest Method)"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#manual-mount", 
            "text": "After formatting your USB based on the above step:", 
            "title": "Manual Mount"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#disable-usb-transfer-daemon", 
            "text": "Enter the  RetroPie Setup  menu within the  RetroPie  menu in [[EmulationStation]].  Select  Setup / Tools .  Select  usbromservice - USB ROM Service  Disable USB ROM Service .", 
            "title": "Disable USB transfer daemon"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#plug-in-usb-drive", 
            "text": "This can be done when the system is powered on.", 
            "title": "Plug in USB drive"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#transfer-the-existing-retropie-file-structure", 
            "text": "This step is mandatory regardless of whether you have any roms on your system. RetroPie has a specific directory structure and a number of files required packaged with even empty installations.  Either via  SFTP , or using the terminal (via exiting emulationstation, pressing F4, or remotely using [[SSH]]), move the  /home/pi/RetroPie  folder into your USB stick. The reason for moving the whole folder, and not just  /home/pi/RetroPie/roms  is that there are other folders, such as /home/pi/RetroPie/BIOS` that are worth keeping on the external drive also.  To do this via terminal, First enter the command  df  to print a list of the file systems. Example output:  pi@retropie:~ $ df\nFilesystem     1K-blocks     Used Available Use% Mounted on\n/dev/root        7318456  3367852   3609928  49% /\ndevtmpfs          372100        0    372100   0% /dev\ntmpfs             376436        0    376436   0% /dev/shm\ntmpfs             376436     5424    371012   2% /run\ntmpfs               5120        4      5116   1% /run/lock\ntmpfs             376436        0    376436   0% /sys/fs/cgroup\n/dev/mmcblk0p1     58234    20476     37758  36% /boot\n/dev/sda1       30480256 26921632   3558624  89% /media/usb0  Look for an entry on /media/usb0, or similar. In our above example:  /dev/sda1       30480256 26921632   3558624  89% /media/usb0  The important things to note down are the mount point:  /media/usb0 , and the position on the device tree:  /dev/sda1  Now we can move our existing RetroPie folder to our new USB drive. Enter the command:  sudo mv -v /home/pi/RetroPie/* /media/usb0/  After this, the USB directory structure should look something like:  pi@retropie:~ $ ls /media/usb0 -l\ntotal 96\ndrwxrwxrwx  8 root root 16384 Jun 15 00:17 BIOS\ndrwxrwxrwx  3 root root 16384 Apr 22 17:05 retropiemenu\ndrwxrwxrwx 52 root root 16384 Jun  3 00:11 roms\ndrwxrwxrwx  2 root root 16384 Apr 13 16:14 splashscreens", 
            "title": "Transfer the existing RetroPie file structure"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#configure-fstab-to-automatically-mount-usb-drive", 
            "text": "Establish the drive's UUID number by entering the command  ls -l /dev/disk/by-uuid/ . Example output:  pi@retropie:~ $ ls -l /dev/disk/by-uuid/\ntotal 0\nlrwxrwxrwx 1 root root 15 Jun 19 21:59 7cc81461-50b9-45a8-a561-fd5c4aa71934 -  ../../mmcblk0p2\nlrwxrwxrwx 1 root root 15 Jun 19 21:59 AE51-7D54 -  ../../mmcblk0p1\nlrwxrwxrwx 1 root root 10 Jun 19 21:59 E44B-FC4E -  ../../sda1  sda1  was our device tree position from earlier, so  E44B-FC4E  is our UUID.  Edit fstab with this command:  sudo nano /etc/fstab  and add a new line like the below:  proc            /proc           proc    defaults          0       0\n/dev/mmcblk0p1  /boot           vfat    defaults          0       2\n/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1\n# a swapfile is not a swap partition, no line here\n#   use  dphys-swapfile swap[on|off]  for that\nUUID=E44B-FC4E  /home/pi/RetroPie      vfat    nofail,user,uid=pi,gid=pi 0       2  ...where  UUID=  the UUID of your drive, and everything else is the same as the example.  In the case of errors with ext4 file systems use  UUID= XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX  /home/pi/RetroPie ext4 nofail,defaults 0    0", 
            "title": "Configure fstab to automatically mount USB drive"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#restart-system", 
            "text": "This must be a full restart, not just emulationstation. When it boots up you should see any ROMs you previously had show up in emulationstation.", 
            "title": "Restart system"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#transfer-roms", 
            "text": "Now transfer ROMs either directly to the USB drive, or via any of the usual methods (aside from using the automatic USB copy, obviously!). Now that the USB drive is mounted directly to  home/pi/RetroPie , every time this directory is accessed, you're actually accessing the USB drive.", 
            "title": "Transfer ROMs"
        }, 
        {
            "location": "/Running-ROMs-from-a-USB-drive/#edit-command-launcher-for-ports", 
            "text": "You may start seeing permission denied errors when launching a .sh file, especially for FAT formatted drives/keys. In that case you need to prefix the command with bash.  Notably to get the 'Ports' launchers working:\n - edit es_systems.cfg with  sudo nano /etc/emulationstation/es_systems.cfg  and search for the PORTS Section\n - Find the   command   section and simply add bash so it looks  command bash %ROM /command", 
            "title": "Edit command launcher for ports"
        }, 
        {
            "location": "/Splashscreen/", 
            "text": "Splashcreen Menu\n\n\nThe Splash Screen Menu can be accessed from the RetroPie Menu in EmulationStation or through the setup script under option 3. \n\n\n\n\n\n\n\n\nChoose RetroPie Splashscreen:\n This option allows you to choose a splashscreen that has been installed on RetroPie by default. See the gallery of images \nHERE\n\n\n\n\n\n\nChoose Own Splashscreen:\n Once you've opened up the splashscreen menu in the setup script at least once a folder will be created in \n/home/pi/RetroPie/splashscreens\n you can also access this splashscreens folder from \nsamba shares\n once its created. (\nNote you may need to install or restart samba shares from the setup script for the splashscreens folder to show up over samba shares\n) Make sure you create a new folder to place your splashscreen in- for example:  \n/home/pi/RetroPie/splashscreens/video/yourvideo.mp4\n\n\n\n\n\n\nEnable Custom Splashscreen On Boot:\n This is pretty self explanatory- if you've disabled splashscreens the you select this to re-enable splashscreens on boot.\n\n\n\n\n\n\nDisable Custom Splashscreen On Boot:\n Select this option to disable splashscreens on boot\n\n\n\n\n\n\nUse Default Splashscreen:\n This makes the blue retropie splashscreen the default splash screen (the splashscreen you see the first time it boots up)\n\n\n\n\n\n\nManually Edit Splashscreen List:\n You can edit the splashscreen.list manually to point to multiple images to be played as a slideshow (you'll use tab to get out of edit mode)\n\n\n\n\n\n\nUpdate RetroPie Splashscreens:\n This updates the latest default splashscreens included with the RetroPie image from \nretropie-splashscreens repo\n\n\n\n\n\n\nDownload RetroPie-Extra Splashscreens:\n You can download a mass of user created splashscreens from the \nretropie-splashscreens-extra\n repository. Splashes will be placed in \n/home/pi/RetroPie/splashscreens/retropie-extra\n\n\n\n\n\n\nVideo Splash Screens\n\n\nA few notes:\n\n\n\n\n\n\nyou add the video to a folder just like you would a regular splashscreen image and select that folder from the splashscreen menu as described above\n\n\n\n\n\n\nfor best results use .mp4 filetype. If you have a video in another format and it isn't working try converting it with a program like \nvlc\n or \nhandbrake\n I've found that h.264 is a good codec and .mp4 is a good filetype- but others may also work.\n\n\n\n\n\n\nFor a raspberry pi 1 a good video time is ~20-40 seconds, for the rpi 2 a good video time is ~5-10 seconds. It will vary depending on the number of roms and systems you have installed on RetroPie. \n\n\n\n\n\n\nOMXPlayer is coded to play on the highest layer of the framebuffer while EmulationStation loads up, so you no longer have to worry about EmulationStation cutting in front of your video before the video finishes. This way your video can be as long or as short as you want it to be.", 
            "title": "Splashscreen"
        }, 
        {
            "location": "/Splashscreen/#splashcreen-menu", 
            "text": "The Splash Screen Menu can be accessed from the RetroPie Menu in EmulationStation or through the setup script under option 3.      Choose RetroPie Splashscreen:  This option allows you to choose a splashscreen that has been installed on RetroPie by default. See the gallery of images  HERE    Choose Own Splashscreen:  Once you've opened up the splashscreen menu in the setup script at least once a folder will be created in  /home/pi/RetroPie/splashscreens  you can also access this splashscreens folder from  samba shares  once its created. ( Note you may need to install or restart samba shares from the setup script for the splashscreens folder to show up over samba shares ) Make sure you create a new folder to place your splashscreen in- for example:   /home/pi/RetroPie/splashscreens/video/yourvideo.mp4    Enable Custom Splashscreen On Boot:  This is pretty self explanatory- if you've disabled splashscreens the you select this to re-enable splashscreens on boot.    Disable Custom Splashscreen On Boot:  Select this option to disable splashscreens on boot    Use Default Splashscreen:  This makes the blue retropie splashscreen the default splash screen (the splashscreen you see the first time it boots up)    Manually Edit Splashscreen List:  You can edit the splashscreen.list manually to point to multiple images to be played as a slideshow (you'll use tab to get out of edit mode)    Update RetroPie Splashscreens:  This updates the latest default splashscreens included with the RetroPie image from  retropie-splashscreens repo    Download RetroPie-Extra Splashscreens:  You can download a mass of user created splashscreens from the  retropie-splashscreens-extra  repository. Splashes will be placed in  /home/pi/RetroPie/splashscreens/retropie-extra", 
            "title": "Splashcreen Menu"
        }, 
        {
            "location": "/Splashscreen/#video-splash-screens", 
            "text": "A few notes:    you add the video to a folder just like you would a regular splashscreen image and select that folder from the splashscreen menu as described above    for best results use .mp4 filetype. If you have a video in another format and it isn't working try converting it with a program like  vlc  or  handbrake  I've found that h.264 is a good codec and .mp4 is a good filetype- but others may also work.    For a raspberry pi 1 a good video time is ~20-40 seconds, for the rpi 2 a good video time is ~5-10 seconds. It will vary depending on the number of roms and systems you have installed on RetroPie.     OMXPlayer is coded to play on the highest layer of the framebuffer while EmulationStation loads up, so you no longer have to worry about EmulationStation cutting in front of your video before the video finishes. This way your video can be as long or as short as you want it to be.", 
            "title": "Video Splash Screens"
        }, 
        {
            "location": "/Supported-Systems/", 
            "text": "System\n\n\nEmulator\n\n\nRom Extens.\n\n\nBIOS\n\n\nManufact.\n\n\nImage\n\n\n\n\n\n\n\n\n\n\n3do\n\n\nlr-4do\n \n\n\n.iso\n\n\npanafz10.bin\n\n\n1993: Panasonic\n\n\n\n\n\n\n\n\nAmiga\n\n\nUAE4ALL2\n, \nUAE4ARM\n\n\n.adf\n\n\nkick13.rom, kick20.rom, kick31.rom\n\n\n1985: Commodore\n\n\n\n\n\n\n\n\nAmstrad CPC\n\n\nCapriceRPI\n, \nlr-cap32\n\n\n.dsk .cpc\n\n\n-\n\n\n1984: Amstrad\n\n\n\n\n\n\n\n\nApple II\n\n\nLinapple\n\n\n.dsk\n\n\n-\n\n\n1977: Apple\n\n\n\n\n\n\n\n\nAtari 2600\n\n\nStella\n, \nlr-stella\n\n\n.bin .a26 .rom\n\n\n-\n\n\n1977: Atari\n\n\n\n\n\n\n\n\nAtari 5200, 8 bit\n\n\nAtari800\n\n\n.a52 .bas .bin .xex .atr .xfd .dcm .atr.gz .xfd.gz\n\n\nATARIXL.ROM, ATARIBAS.ROM, ATARIOSA.ROM, ATARIOSB.ROM, 5200.rom\n\n\n1982: Atari\n\n\n\n\n\n\n\n\nAtari 7800\n\n\nlr-prosystem\n\n\n.a78 .bin\n\n\n7800 BIOS (U).rom\n\n\n1986: Atari\n\n\n\n\n\n\n\n\nAtari Jaguar\n\n\nlr-virtualjaguar\n \n\n\n.j64 .jag\n\n\n-\n\n\n1993: Atari\n\n\n\n\n\n\n\n\nAtari Lynx\n\n\nlr-handy\n\n\n.lnx\n\n\n-\n\n\n1989: Atari\n\n\n\n\n\n\n\n\nAtari ST, STE, TT, Falcon\n\n\nHatari\n\n\n.st .stx .img .rom .raw .ipf .ctr\n\n\n-\n\n\n1985: Atari\n\n\n\n\n\n\n\n\nCoCo\n\n\nXRoar\n\n\n.cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna\n\n\nbas13.rom\n\n\n1980: Tandy\n\n\n\n\n\n\n\n\nCommodore 64\n\n\nVice\n\n\n.crt .d64 .g64 .t64 .tap .x64\n\n\n-\n\n\n1982: Commodore\n\n\n\n\n\n\n\n\nDragon 32\n\n\nXRoar\n\n\n.cas .wav .bas .asc .dmk .jvc .os9 .dsk .vdk .rom .ccc .sna\n\n\nd32.rom\n\n\n1982: Dragon\n\n\n\n\n\n\n\n\nDreamcast\n\n\nReicast\n\n\n.cdi .gdi\n\n\ndc_boot.bin, dc_flash.bin\n\n\n1998: Sega\n\n\n\n\n\n\n\n\nFinalBurn Alpha\n\n\nPiFBA\n, \nlr-fbalpha2012\n, \nlr-fbalpha\n\n\n.zip\n\n\nneogeo.zip\n\n\n2000: N/A\n\n\n\n\n\n\n\n\nGenesis /Megadrive\n\n\nDGEN\n, \nlr-Genesis-Plus-GX\n, [lr-picodrive] (https://github.com/libretro/picodrive)\n\n\n.smd .bin .md .iso\n\n\n-\n\n\n1988: Sega\n\n\n\n\n\n\n\n\nGame Gear\n\n\nOsmose\n, \nlr-Genesis-Plus-GX\n\n\n.gg\n\n\n-\n\n\n1990: Sega\n\n\n\n\n\n\n\n\nGame Boy\n\n\nlr-gambatte\n\n\n.gb\n\n\n-\n\n\n1989: Nintendo\n\n\n\n\n\n\n\n\nGame Boy Color\n\n\nlr-gambatte\n\n\n.gbc\n\n\n-\n\n\n1998: Nintendo\n\n\n\n\n\n\n\n\nGame Boy Advance\n\n\ngpSP\n, \nlr-gpSP\n, \nlr-vba-next\n, \nlr-mgba\n\n\n.gba\n\n\ngba_bios.bin\n\n\n2001: Nintendo\n\n\n\n\n\n\n\n\nIntellivision\n\n\njzIntv\n\n\n.int .bin\n\n\nexec.bin, grom.bin\n\n\n1979: Mattel\n\n\n\n\n\n\n\n\nMacintosh\n\n\nBasiliskII\n\n\n.img .rom\n\n\nmac.rom, disk.img\n\n\n1984: Apple\n\n\n\n\n\n\n\n\nMAME\n\n\nAdvanceMAME\n, \nMAME4ALL-Pi\n, \nlr-imame4all\n, \nlr-mame2003\n, \nlr-mame2010\n\n\n.zip\n\n\nneogeo.zip\n\n\n1997: N/A\n\n\n\n\n\n\n\n\nMasterSystem\n\n\nlr-Genesis-Plus-GX\n, \nlr-picodrive\n, \nOsmose\n\n\n.sms\n\n\n-\n\n\n1985: Sega\n\n\n\n\n\n\n\n\nMSX\n\n\nlr-fmsx\n, \nlr-bluemsx\n\n\n.rom .mx1 .mx2 .col .dsk\n\n\nSee Wiki Page\n\n\n1983: Microsoft\n\n\n\n\n\n\n\n\nNeo Geo\n\n\nGnGeo-Pi\n, \nPiFBA\n, \nlr-fbalpha2012\n, \nlr-fbalpha\n\n\n.zip\n\n\nneogeo.zip\n\n\n1990: SNK\n\n\n\n\n\n\n\n\nNeo Geo Pocket\n\n\nlr-mednafen-ngp\n\n\n.ngp\n\n\n-\n\n\n1998: SNK\n\n\n\n\n\n\n\n\nNeo Geo Pocket Color\n\n\nlr-mednafen-ngp\n\n\n.ngc\n\n\n-\n\n\n1999: SNK\n\n\n\n\n\n\n\n\nNintendo 64\n\n\nMupen64plus\n, \nlr-mupen64plus\n\n\n.z64 .n64 .v64\n\n\n-\n\n\n1996: Nintendo\n\n\n\n\n\n\n\n\nNintendo DS\n\n\nlr-desmume\n \n\n\n.nds .bin\n\n\n-\n\n\n2004: Nintendo\n\n\n\n\n\n\n\n\nNintendo Entertainment System\n\n\nlr-fceumm\n, \nlr-nestopia\n\n\n.zip .nes .smc .sfc .fig .swc .mgd\n\n\ndisksys.rom (for famicom games)\n\n\n1983: Nintendo\n\n\n\n\n\n\n\n\nOric/Atmos\n\n\nOricutron\n\n\n.dsk .tap\n\n\n-\n\n\n1983: Tangerine Computer Systems\n\n\n\n\n\n\n\n\nPC\n\n\nDOSBox\n, \nrpix86\n\n\n.com .sh .bat .exe\n\n\n-\n\n\n1981: IBM\n\n\n\n\n\n\n\n\nPC Engine /TurboGrafx-16\n\n\nlr-mednafen-pce-fast\n\n\n.pce\n\n\nsyscard3.pce\n\n\n1987: NEC\n\n\n\n\n\n\n\n\nPlayStation 1\n\n\nlr-pcsx-rearmed\n, \npcsx-rearmed\n\n\n.bin .cue .img .mdf\n\n\nscph1001.BIN\n\n\n1994: Sony\n\n\n\n\n\n\n\n\nPSP\n\n\nlr-ppsspp\n, \nppsspp\n\n\n.bin .cue .cbn .img .iso .m3u .mdf .pbp .toc .z .znx\n\n\n-\n\n\n2004: Sony\n\n\n\n\n\n\n\n\nScummVM\n\n\nScummVM\n\n\n.sh .svm (see wiki)\n\n\n-\n\n\n2001: N/A\n\n\n\n\n\n\n\n\nSega 32X\n\n\nlr-picodrive\n\n\n.32x .smd .bin .md\n\n\n-\n\n\n1994: Sega\n\n\n\n\n\n\n\n\nSega CD\n\n\nlr-picodrive\n\n\n.smd .bin .md .iso\n\n\nus_scd1_9210.bin, eu_mcd1_9210.bin, jp_mcd1_9112.bin, or bios_CD_U.bin, bios_CD_E.bin, bios_CD_J.bin\n\n\n1991: Sega\n\n\n\n\n\n\n\n\nSega Saturn\n\n\nlr-yabause\n \n\n\n.bin .iso .mdf\n\n\nsaturn_bios.bin\n\n\n1994: Sega\n\n\n\n\n\n\n\n\nSega SG-1000\n\n\nlr-Genesis-Plus-GX\n\n\n.sg .zip\n\n\n-\n\n\n1983: Sega\n\n\n\n\n\n\n\n\nSuper Nintendo Entertainment System\n\n\nPiSNES\n, \nsnes9x-rpi\n, \nlr-armsnes\n, \nlr-catsfc\n, \nlr-pocketsnes\n, \nlr-snes9x-next\n\n\n.zip .smc .sfc .fig .swc\n\n\n-\n\n\n1990: Nintendo\n\n\n\n\n\n\n\n\nTI-99/4A\n\n\nti99sim\n\n\n.ctg\n\n\n-\n\n\n1981: Texas Instruments\n\n\n\n\n\n\n\n\nTRS-80\n\n\nsdltrs\n\n\n.dsk\n\n\nlevel2.rom\n\n\n1977: Tandy Corporation\n\n\n\n\n\n\n\n\nVectrex\n\n\nlr-vecx\n\n\n.vec .gam .bin\n\n\n-\n\n\n1982: Milton Bradley\n\n\n\n\n\n\n\n\nVideopac /Odyssey2\n\n\nlr-o2em\n\n\n.bin\n\n\no2rom.bin\n\n\n1983: Philips\n\n\n\n\n\n\n\n\nVirtual Boy\n\n\nlr-beetle-vb\n \n\n\n.vb\n\n\n-\n\n\n1995: Nintendo\n\n\n\n\n\n\n\n\nWonderSwan\n\n\nlr-mednafen-wswan\n\n\n.ws\n\n\n-\n\n\n1999: Bandai\n\n\n\n\n\n\n\n\nWonderSwan Color\n\n\nlr-mednafen-wswan\n\n\n.wsc\n\n\n-\n\n\n2000: Bandai\n\n\n\n\n\n\n\n\nZmachine\n\n\nFrotz\n\n\n.z3 .DAT\n\n\n-\n\n\n1979: Infocom\n\n\n\n\n\n\n\n\nZX Spectrum\n\n\nFBZX\n, \nFuse\n, \nlr-fuse\n\n\nsna .szx .z80 .tap .tzx .gz .udi .mgt .img .trd .scl .dsk\n\n\n-\n\n\n1982: Sinclair", 
            "title": "Supported Systems"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/", 
            "text": "Taking your  own screenshots and creating your own gamelists\n\n\nSometimes the boxarts and other sources for scraping can be low quality and inconsistent in sizes, whereas in game screenshots are standardised to the same size. The following is a simple guide with a script that will help automate the process of taking and scraping your own screenshots.\n\n\nA few disclaimers first:\n\n\n\n\n\n\nMAKE A BACKUP AND USE AT YOUR OWN RISK!\n\n\n\n\n\n\nYou have to be comfortable with basic Linux commands and simple file editing.\n\n\n\n\n\n\nYou need to have an updated version of RetroPie-Setup scripts (version 4+) (\nupdating instructions here\n).\n\n\n\n\n\n\nYou can only create one screenshot per game\n\n\n\n\n\n\nThis only works with RetroArch emulators\n\n\n\n\n\n\nIf using the methods described here, the \nRuncommand's Launch Menu Art option\n won't show the scraped screenshot image.\n\n\n\n\n\n\nTake a Screenshot\n\n\nBefore talk about the \"scraping your own screenshots\" trick, we need to know how to take screenshots in RetroArch. If you already know how to do it, you can go to the \nnext section\n.\n\n\nvia RGUI\n\n\nAccess the RGUI (usually with Select+X) and go to \nQuick Menu\n -\n \nTake Screenshot\n.\n\n\nvia hotkeys\n\n\nThe default screenshot button is \nF8\n which means if you've configured your keyboard through emulationstation you have to hold the hotkey button (by default the button you configured as select) and then press F8. If you want to have it so that you can take a screenshot with your controller you'll change the screenshot button to a button that isn't already being used for hotkey behaviour. To do this you'll edit the overall or global \nretroarch.cfg\n at\n\n/opt/retropie/configs/all/retroarch.cfg\n\n\nThe key line you want to change is ~line 580\n\n\n# Take screenshot\n# input_screenshot = f8\n\n\n\n\nSo in my case I changed it to my right analogue thumb on my xbox controller (number values vary with diff controllers)\n\n\n# Take screenshot\ninput_screenshot_btn = \n12\n\n\n\n\n\nSo in game when I want to take a screenshot I hold select (or rather the back button on the xbox controller) and press the right analogue thumb.\n\n\nruncommand\n\n\nThe runcommand menu is what is run every time you play a game, It is what allows you to change emulators, set video resolutions, among other things. One lesser known function is the ability to add customised scripts to be executed on the start and/or on the end of the game.\n\n\nThe \nruncommand-onstart.sh\n script is executed (if exists) before the game starts, and \nruncommand-onend.sh\n is executed (if exists) after you exit the emulator. Both files must be at \n/opt/retropie/configs/all/\n directory.\n\n\nThe two methods described here take advantage from these features.\n\n\nscraping methods\n\n\nHere we have two methods to scrape your own screenshots:\n\n\nMethod 1\n: uses the \nruncommand-onstart.sh\n to automatically set some screenshot related configs in system specifics \nretroarch.cfg\n files. And after you take some screenshots from the games, you use the SSelph scraper to create a \ngamelist.xml\n with them.\n\n\nMethod 2\n: uses the \nruncommand-onend.sh\n to automatically set the most recent screenshot from a game to be the emulationstation image for the respective game.\n\n\nThe main difference between them is:\n\n\n\n\n\n\nMethod 1\n: automates the \nretroarch.cfg\n configs but you have to use SSelph scraper tool from command line every time you want to update the \ngamelist.xml\n with your screenshots.\n\n\n\n\n\n\nMethod 2\n: you have to manually edit \nretroarch.cfg\n configs, but automates the placement of your screenshots as the respective emulationstation game images.\n\n\n\n\n\n\nNow you have to choose which one you want to follow (or read about both):\n\n\nMethod 1\n:\n- \nruncommand-onstart.sh\n\n- \nCreate gamelist with Sselphs scraper\n\n- \nBehind the Code\n\n\nMethod 2\n:\n- \nretroarch.cfg\n\n- \nruncommand-onend.sh\n\n- \n\"I didn't like how it looks! I want my old images back and disable this stuff!\"\n\n\nMETHOD 1\n\n\nruncommand-onstart.sh\n\n\nYou need to create a file called \nruncommand-onstart.sh\n in the folder \n/opt/retropie/configs/all/\n\n\ncopy the following contents:\n\n\n#!/usr/bin/env bash\n\nsystem=\n$1\n\nimgdir=\n$HOME/RetroPie/roms/$system/images\n\nconfigdir=\n/opt/retropie/configs\n \n\nmainretroarch=\n$configdir/all/retroarch.cfg\n\nsystemretroarch=\n$configdir/$system/retroarch.cfg\n\n\nsource \n/opt/retropie/lib/inifuncs.sh\n\n\niniConfig \n = \n '\n'\n\n# Create images folder in each respective rom folder\nmkdir -p \n$imgdir\n\n\n# If there is no auto screenshot setting in the main retroarch.cfg add it\nif ! grep -q \nauto_screenshot_filename\n \n$mainretroarch\n; then\n    iniSet \nauto_screenshot_filename\n \nfalse\n \n$mainretroarch\n\nfi\n\n# If there is no system based screenshot directory defined then define it in the system based retroarch.cfg\nif ! grep -q \nscreenshot_directory\n \n$systemretroarch\n; then\n    iniSet \nscreenshot_directory\n \n$imgdir\n \n$systemretroarch\n\nfi\n\n\n\n\nNow you can play your games and take your screenshots and it will fill your images folder with your screenshots. \n\n\nCreate gamelist with Sselphs scraper\n\n\nIf you haven't already, download sselphs scraper from the setup script\n\n\nNow that you've got your screenshots ready all you have to do is use sselph's scraper to generate a gamelist for your screenshots- this will effectually link your roms to their respective screenshots.\n\n\nYou need to exit emulationstation first\n\n\nso again using the snes as an example\n\n\ncd /home/pi/RetroPie/roms/snes\n/opt/retropie/supplementary/scraper/scraper -img_format=png -add_not_found=true -download_images=false -image_suffix=\n\n\n\n\nFor more information on the options for sselphs scraper see \nhere\n\n\nit will create a gamelist.xml file in \n/home/pi/RetroPie/roms/snes\n which takes precedence over the gamelist.xml in \n/home/pi/.emulationstation/gamelists/snes\n\n\nand if all went according to plan, when you boot emulationstation back up your images will be the screenshots that you took! TADA!\n\n\nAlso if you want to only add images and leave metadata out entirely you can tell it not to scrape from any databases with \n-use_gdb=false -use_ovgdb=false\n\n\nBehind the Code\n\n\nThe following is all taken care of by the aformentioned script but if you're interested this explains essentially what the code is doing (and how you can set it up manually without a script)\n\n\nOverall retroarch.cfg\n\n\nYou need to add the following line to \n/opt/retropie/configs/all/retroarch.cfg\n\n\nauto_screenshot_filename = \nfalse\n\n\n\n\n\nThis will tell retroarch to name any screenshots taken after the rom name you are playing\n\n\nSystem Specific retroarch.cfg\n\n\nYou need create an \nimages\n folder in each rom folder you want screenshots for and then set the system based retroarch.cfg screenshot path to each respective \nimages\n folder so that the images can be easily joined with sselphs scraper,  unlike the default retropie behaviour this will keep your images and gamelists in each system folder with your roms; the pattern is as follows:\n\n\n/home/pi/RetroPie/roms/\nsystem\n/images\n\n\nso for example if I'm adding screenshots to the snes I would create:\n\n\n/home/pi/RetroPie/roms/snes/images\n\n\nThen I would add that screenshot path to:\n\n\n/opt/retropie/configs/snes/retroarch.cfg\n \n\n\n# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = \n/opt/retropie/configs/snes/\n\nscreenshot_directory = \n/home/pi/RetroPie/roms/snes/images/\n\n\n#include \n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n\nthen we would take our screenshots and use sselphs scraper to generate our gamelist.xml's as above.\n\n\nMETHOD 2\n\n\nWhat exactly this method do\n\n\nIf you take a screenshot during a gaming session, the most recent screenshot will be the emulationstation image for this game. This task is done by a \nruncommand-onend.sh\n script.\n\n\nObviously, there are some conditions to make it happen, in order to let the user easily turn on/off this functionality.\n\n\nLimitation: This method doesn't work if the emulationstation \"save metadata on exit\" option is turned on, because it makes emulationstation overwrite the changes made by the \nruncommand-onend.sh\n.\n Turn it off in the emulationstation Main Menu -\n Other Settings -\n Save Metadata On Exit.\n\n\nretroarch.cfg\n\n\nThere are two conditions related to RetroArch configuration in order to make it works: \n\n\n\n\nauto_screenshot_filename = \"false\"\n\n\nscreenshot_directory = \"/some/path/to/screenshots\"\n\n\n\n\nThe \nauto_screenshot_filename = \"false\"\n means that your screenshots will \nNOT\n be named automatically, they will always be named as \nROM file name.png\n. Therefore your most recent screenshot will always overwrite the previous one.\n\n\nRemember this to avoid confusion: \nauto_screenshot_filename = false\n means ON for this \"scrape screenshots\" method. If \nauto_screenshot_filename\n is true (or absent), it means OFF.\n\n\nThe directory assigned to \nscreenshot_directory\n \nMUST\n exist, otherwise RetroArch won't be able to save the screenshots.\n\n\nThose options can be set in global or system specific \nretroarch.cfg\n.\n\n\nglobal config (easy way)\n\n\nEdit your \n/opt/retropie/configs/all/retroarch.cfg\n and put the option \nauto_screenshot_filename = \"false\"\n. This option isn't present in the default \nretroarch.cfg\n, so put it in the beggining of the file is good idea (easy to edit it later).\n\n\nAnd then put another line to the option \nscreenshot_directory = \"/path/to/screenshots\"\n (I use \n/home/pi/screenshots\n, but you can set any other valid path). Remember: the directory \nMUST\n exist, otherwise RetroArch won't be able to save the screenshots.\n\n\nsystem specific config\n\n\nIf you are happy with the global config, you can jump to the next section. If you want system specific customizations, go on with the reading.\n\n\nEdit your \n/opt/retropie/configs/SYSTEM_NAME/retroarch.cfg\n (replace SYSTEM_NAME with the obvious) and configure it like in the global config above.\n\n\nThe system specific configs take precedence over the global ones. So if you want to explicitly turn on/off this functionality for a specific system, you can set \nauto_screenshot_filename\n to \nfalse\n or \ntrue\n, respectively. Note that you have to explicitly set it to \ntrue\n to turn off the scrape screenshots for a specific system. If it is absent, the script will look for this config in the global \nretroarch.cfg\n.\n\n\nIf you want to use system specific folders for screenshots, set the \nscreenshot_directory\n option in the system specific \nretroarch.cfg\n. If it is absent, the script will look for this config in the global file.\n\n\nruncommand-onend.sh\n\n\nHere we will add a script to be executed when the game ends. If you took a screenshot in a gaming session, the script will automatically set the most recent screenshot as the emulationstation image for the game you've just played.\n\n\nGet the script that makes it happen here: https://raw.githubusercontent.com/meleu/share/master/screeper.sh\n\n\nFrom the command line:\n\n\nwget https://raw.githubusercontent.com/meleu/share/master/screeper.sh\nmv screeper.sh /opt/retropie/configs/all/runcommand-onend.sh\n\n\n\n\n(If you are a shell script guy, maybe you like to read the code. It's well commented.)\n\n\nNow you can play your game and take your screenshots. The most recent screenshot will be put in your screenshots folder and will be the emulationstation image for this game.\n\n\nRestart emulationstation\n\n\nYou have to restart emulationstation in order to see the changes. If all went according to plan, your screenshots will be the game images!\n\n\n\"I didn't like how it looks! I want my old images back and disable this stuff!\"\n\n\nEasy, only two steps:\n\n\n\n\nChange the \nauto_screenshot_filename\n to true in \nretroarch.cfg\n (the \nruncommand-onend.sh\n will do nothing if this option is true).\n\n\nDelete the system specific \ngamelist.xml\n that is at the system roms directory (example for SNES: \n~/RetroPie/roms/snes/gamelist.xml\n). It makes the emulationstation get the configs from the original \ngamelist.xml\n (more details on how gamelists works \nhere\n).\n\n\n\n\nRestart emulationstation and done!, you have your old scrapes back!\n\n\nReferences\n\n\nhttps://retropie.org.uk/forum/topic/3353/take-and-scrape-your-own-screenshots/\n\n\nhttps://github.com/RetroPie/EmulationStation/blob/master/GAMELISTS.md\n\n\nhttps://github.com/retropie/retropie-setup/wiki/scraper\n\n\nhttps://github.com/sselph/scraper/wiki/Flags\n\n\nhttps://retropie.org.uk/forum/topic/1975/taking-an-actual-screenshot/\n\n\nhttps://retropie.org.uk/forum/topic/2483/screenshot-with-rom-name/\n\n\nhttps://github.com/RetroPie/RetroPie-Setup/issues/1242", 
            "title": "Take and Scrape Your Own Screenshots"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#taking-your-own-screenshots-and-creating-your-own-gamelists", 
            "text": "Sometimes the boxarts and other sources for scraping can be low quality and inconsistent in sizes, whereas in game screenshots are standardised to the same size. The following is a simple guide with a script that will help automate the process of taking and scraping your own screenshots.  A few disclaimers first:    MAKE A BACKUP AND USE AT YOUR OWN RISK!    You have to be comfortable with basic Linux commands and simple file editing.    You need to have an updated version of RetroPie-Setup scripts (version 4+) ( updating instructions here ).    You can only create one screenshot per game    This only works with RetroArch emulators    If using the methods described here, the  Runcommand's Launch Menu Art option  won't show the scraped screenshot image.", 
            "title": "Taking your  own screenshots and creating your own gamelists"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#take-a-screenshot", 
            "text": "Before talk about the \"scraping your own screenshots\" trick, we need to know how to take screenshots in RetroArch. If you already know how to do it, you can go to the  next section .", 
            "title": "Take a Screenshot"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#via-rgui", 
            "text": "Access the RGUI (usually with Select+X) and go to  Quick Menu  -   Take Screenshot .", 
            "title": "via RGUI"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#via-hotkeys", 
            "text": "The default screenshot button is  F8  which means if you've configured your keyboard through emulationstation you have to hold the hotkey button (by default the button you configured as select) and then press F8. If you want to have it so that you can take a screenshot with your controller you'll change the screenshot button to a button that isn't already being used for hotkey behaviour. To do this you'll edit the overall or global  retroarch.cfg  at /opt/retropie/configs/all/retroarch.cfg  The key line you want to change is ~line 580  # Take screenshot\n# input_screenshot = f8  So in my case I changed it to my right analogue thumb on my xbox controller (number values vary with diff controllers)  # Take screenshot\ninput_screenshot_btn =  12   So in game when I want to take a screenshot I hold select (or rather the back button on the xbox controller) and press the right analogue thumb.", 
            "title": "via hotkeys"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#runcommand", 
            "text": "The runcommand menu is what is run every time you play a game, It is what allows you to change emulators, set video resolutions, among other things. One lesser known function is the ability to add customised scripts to be executed on the start and/or on the end of the game.  The  runcommand-onstart.sh  script is executed (if exists) before the game starts, and  runcommand-onend.sh  is executed (if exists) after you exit the emulator. Both files must be at  /opt/retropie/configs/all/  directory.  The two methods described here take advantage from these features.", 
            "title": "runcommand"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#scraping-methods", 
            "text": "Here we have two methods to scrape your own screenshots:  Method 1 : uses the  runcommand-onstart.sh  to automatically set some screenshot related configs in system specifics  retroarch.cfg  files. And after you take some screenshots from the games, you use the SSelph scraper to create a  gamelist.xml  with them.  Method 2 : uses the  runcommand-onend.sh  to automatically set the most recent screenshot from a game to be the emulationstation image for the respective game.  The main difference between them is:    Method 1 : automates the  retroarch.cfg  configs but you have to use SSelph scraper tool from command line every time you want to update the  gamelist.xml  with your screenshots.    Method 2 : you have to manually edit  retroarch.cfg  configs, but automates the placement of your screenshots as the respective emulationstation game images.    Now you have to choose which one you want to follow (or read about both):  Method 1 :\n-  runcommand-onstart.sh \n-  Create gamelist with Sselphs scraper \n-  Behind the Code  Method 2 :\n-  retroarch.cfg \n-  runcommand-onend.sh \n-  \"I didn't like how it looks! I want my old images back and disable this stuff!\"", 
            "title": "scraping methods"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#method-1", 
            "text": "", 
            "title": "METHOD 1"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#runcommand-onstartsh", 
            "text": "You need to create a file called  runcommand-onstart.sh  in the folder  /opt/retropie/configs/all/  copy the following contents:  #!/usr/bin/env bash\n\nsystem= $1 \nimgdir= $HOME/RetroPie/roms/$system/images \nconfigdir= /opt/retropie/configs  \n\nmainretroarch= $configdir/all/retroarch.cfg \nsystemretroarch= $configdir/$system/retroarch.cfg \n\nsource  /opt/retropie/lib/inifuncs.sh \n\niniConfig   =   ' '\n\n# Create images folder in each respective rom folder\nmkdir -p  $imgdir \n\n# If there is no auto screenshot setting in the main retroarch.cfg add it\nif ! grep -q  auto_screenshot_filename   $mainretroarch ; then\n    iniSet  auto_screenshot_filename   false   $mainretroarch \nfi\n\n# If there is no system based screenshot directory defined then define it in the system based retroarch.cfg\nif ! grep -q  screenshot_directory   $systemretroarch ; then\n    iniSet  screenshot_directory   $imgdir   $systemretroarch \nfi  Now you can play your games and take your screenshots and it will fill your images folder with your screenshots.", 
            "title": "runcommand-onstart.sh"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#create-gamelist-with-sselphs-scraper", 
            "text": "If you haven't already, download sselphs scraper from the setup script  Now that you've got your screenshots ready all you have to do is use sselph's scraper to generate a gamelist for your screenshots- this will effectually link your roms to their respective screenshots.  You need to exit emulationstation first  so again using the snes as an example  cd /home/pi/RetroPie/roms/snes\n/opt/retropie/supplementary/scraper/scraper -img_format=png -add_not_found=true -download_images=false -image_suffix=  For more information on the options for sselphs scraper see  here  it will create a gamelist.xml file in  /home/pi/RetroPie/roms/snes  which takes precedence over the gamelist.xml in  /home/pi/.emulationstation/gamelists/snes  and if all went according to plan, when you boot emulationstation back up your images will be the screenshots that you took! TADA!  Also if you want to only add images and leave metadata out entirely you can tell it not to scrape from any databases with  -use_gdb=false -use_ovgdb=false", 
            "title": "Create gamelist with Sselphs scraper"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#behind-the-code", 
            "text": "The following is all taken care of by the aformentioned script but if you're interested this explains essentially what the code is doing (and how you can set it up manually without a script)", 
            "title": "Behind the Code"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#overall-retroarchcfg", 
            "text": "You need to add the following line to  /opt/retropie/configs/all/retroarch.cfg  auto_screenshot_filename =  false   This will tell retroarch to name any screenshots taken after the rom name you are playing", 
            "title": "Overall retroarch.cfg"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#system-specific-retroarchcfg", 
            "text": "You need create an  images  folder in each rom folder you want screenshots for and then set the system based retroarch.cfg screenshot path to each respective  images  folder so that the images can be easily joined with sselphs scraper,  unlike the default retropie behaviour this will keep your images and gamelists in each system folder with your roms; the pattern is as follows:  /home/pi/RetroPie/roms/ system /images  so for example if I'm adding screenshots to the snes I would create:  /home/pi/RetroPie/roms/snes/images  Then I would add that screenshot path to:  /opt/retropie/configs/snes/retroarch.cfg    # Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory =  /opt/retropie/configs/snes/ \nscreenshot_directory =  /home/pi/RetroPie/roms/snes/images/ \n\n#include  /opt/retropie/configs/all/retroarch.cfg   then we would take our screenshots and use sselphs scraper to generate our gamelist.xml's as above.", 
            "title": "System Specific retroarch.cfg"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#method-2", 
            "text": "", 
            "title": "METHOD 2"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#what-exactly-this-method-do", 
            "text": "If you take a screenshot during a gaming session, the most recent screenshot will be the emulationstation image for this game. This task is done by a  runcommand-onend.sh  script.  Obviously, there are some conditions to make it happen, in order to let the user easily turn on/off this functionality.  Limitation: This method doesn't work if the emulationstation \"save metadata on exit\" option is turned on, because it makes emulationstation overwrite the changes made by the  runcommand-onend.sh .  Turn it off in the emulationstation Main Menu -  Other Settings -  Save Metadata On Exit.", 
            "title": "What exactly this method do"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#retroarchcfg", 
            "text": "There are two conditions related to RetroArch configuration in order to make it works:    auto_screenshot_filename = \"false\"  screenshot_directory = \"/some/path/to/screenshots\"   The  auto_screenshot_filename = \"false\"  means that your screenshots will  NOT  be named automatically, they will always be named as  ROM file name.png . Therefore your most recent screenshot will always overwrite the previous one.  Remember this to avoid confusion:  auto_screenshot_filename = false  means ON for this \"scrape screenshots\" method. If  auto_screenshot_filename  is true (or absent), it means OFF.  The directory assigned to  screenshot_directory   MUST  exist, otherwise RetroArch won't be able to save the screenshots.  Those options can be set in global or system specific  retroarch.cfg .", 
            "title": "retroarch.cfg"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#global-config-easy-way", 
            "text": "Edit your  /opt/retropie/configs/all/retroarch.cfg  and put the option  auto_screenshot_filename = \"false\" . This option isn't present in the default  retroarch.cfg , so put it in the beggining of the file is good idea (easy to edit it later).  And then put another line to the option  screenshot_directory = \"/path/to/screenshots\"  (I use  /home/pi/screenshots , but you can set any other valid path). Remember: the directory  MUST  exist, otherwise RetroArch won't be able to save the screenshots.", 
            "title": "global config (easy way)"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#system-specific-config", 
            "text": "If you are happy with the global config, you can jump to the next section. If you want system specific customizations, go on with the reading.  Edit your  /opt/retropie/configs/SYSTEM_NAME/retroarch.cfg  (replace SYSTEM_NAME with the obvious) and configure it like in the global config above.  The system specific configs take precedence over the global ones. So if you want to explicitly turn on/off this functionality for a specific system, you can set  auto_screenshot_filename  to  false  or  true , respectively. Note that you have to explicitly set it to  true  to turn off the scrape screenshots for a specific system. If it is absent, the script will look for this config in the global  retroarch.cfg .  If you want to use system specific folders for screenshots, set the  screenshot_directory  option in the system specific  retroarch.cfg . If it is absent, the script will look for this config in the global file.", 
            "title": "system specific config"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#runcommand-onendsh", 
            "text": "Here we will add a script to be executed when the game ends. If you took a screenshot in a gaming session, the script will automatically set the most recent screenshot as the emulationstation image for the game you've just played.  Get the script that makes it happen here: https://raw.githubusercontent.com/meleu/share/master/screeper.sh  From the command line:  wget https://raw.githubusercontent.com/meleu/share/master/screeper.sh\nmv screeper.sh /opt/retropie/configs/all/runcommand-onend.sh  (If you are a shell script guy, maybe you like to read the code. It's well commented.)  Now you can play your game and take your screenshots. The most recent screenshot will be put in your screenshots folder and will be the emulationstation image for this game.", 
            "title": "runcommand-onend.sh"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#restart-emulationstation", 
            "text": "You have to restart emulationstation in order to see the changes. If all went according to plan, your screenshots will be the game images!", 
            "title": "Restart emulationstation"
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#i-didnt-like-how-it-looks-i-want-my-old-images-back-and-disable-this-stuff", 
            "text": "Easy, only two steps:   Change the  auto_screenshot_filename  to true in  retroarch.cfg  (the  runcommand-onend.sh  will do nothing if this option is true).  Delete the system specific  gamelist.xml  that is at the system roms directory (example for SNES:  ~/RetroPie/roms/snes/gamelist.xml ). It makes the emulationstation get the configs from the original  gamelist.xml  (more details on how gamelists works  here ).   Restart emulationstation and done!, you have your old scrapes back!", 
            "title": "\"I didn't like how it looks! I want my old images back and disable this stuff!\""
        }, 
        {
            "location": "/Take-and-Scrape-Your-Own-Screenshots/#references", 
            "text": "https://retropie.org.uk/forum/topic/3353/take-and-scrape-your-own-screenshots/  https://github.com/RetroPie/EmulationStation/blob/master/GAMELISTS.md  https://github.com/retropie/retropie-setup/wiki/scraper  https://github.com/sselph/scraper/wiki/Flags  https://retropie.org.uk/forum/topic/1975/taking-an-actual-screenshot/  https://retropie.org.uk/forum/topic/2483/screenshot-with-rom-name/  https://github.com/RetroPie/RetroPie-Setup/issues/1242", 
            "title": "References"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/", 
            "text": "This guide will attempt to detail several advanced controller mappings and calibration techniques suitable for just about any controller. The focus will be on the use of xboxdrv, as it is an extremely versatile tool that can handle almost any situation and is able to be installed directly from from the 'RetroPie Setup' menu. A complete list of its capabilities can be found \nhere\n. What follows is a grouping of use case scenarios that would be of direct interest to RetroPie Users. New scenarios will be added from time to time. Some of these scenarios will include:\n\n\n\n\nKeyboard mapping for emulators that don't support controllers natively\n\n\nMouse mapping to analog joysticks for full use of certain computer games as well as improved performance in ScummVM and Atari emulators\n\n\nMapping analog triggers as buttons for a faster response time (Commonly seen in the competitive Smash Bros community pre-WiiU)\n\n\nFour-way directional input restriction for games like Pac-Man that suffer when diagonal control input is introduced\n\n\nCorrecting the inner and outer deadzones of analog sticks for finer control and to prevent drifting problems in overly-sensitive or well-worn controllers.\n\n\nConfiguring a toggle or utilizing unused buttons for auto-fire in any game or emulator\n\n\nCorrecting unruly analog trigger behavior found in some controllers\n\n\n\n\n------------------------------------------------------------------------------\n\n\n(1) Mapping any controller to be read as a standard XBox360 controller.\n\n\nNone of what is to follow can be accomplished without this first step. The sheer multitude of existing controllers and their loose implementation of \"standards\" presents a problem to computer software that has a limited definition of what to expect from controller input. Simply mapping a troublesome controller to be read as a standardized XBox360 controller can solve many communication problems without any additional tweaking. However, this same process can also be used to fine-tune a controller in much the same way that you might normally only find in Windows-based solutions. \n\n\nFirst, we need to make sure xboxdrv is installed. This can be done from the 'RetroPie Setup' listing in the 'RetroPie' menu of Emulation Station. Navigate from 'Setup / Tools' to 'xboxdrv - XBox / XBox360 gamepad driver'. From here, select 'Enable xboxdrv' and wait for it to finish. Once installed and enabled, a configuration will be added to \n/etc/rc.local\n. Since we will be adding our own custom configuration there later, this command should be removed by selecting 'Disable xboxdrv' from the same menu we enabled it from. With xboxdrv now installed, we now need to discover the core-level device input codes for each button and axis on the physical controller, so that we may then map them to the virtual XBox360 controller. To do this, drop down to the command line by pressing 'F4' on your keyboard, then type:\n\n\ncat /proc/bus/input/devices\n\n\n\n\nPress 'Enter' and look for the controller in the list of devices. It can be identified by it's name in the device groupings next to the line beginning with \nN: Name=\n. Once you find it, make a note of it's event number next to the line beginning with \nH: Handlers=\n. Next, we'll also need to make note of the event location by name for later use. To do that that, type:\n\n\nls /dev/input/by-id/\n\n\n\n\nPress 'Enter' and your device should be listed here by name. In the event that you see multiple entries, look for the listing containing \"event\" in the title. If you find that your controller is not listed by name, you can substitute the event number when it comes time. Now let's move on to discovering the event codes for each button of the controller by typing:\n\n\nevtest /dev/input/event*\n\n\n\n\nMake sure to replace the star with the controllers event number, then press 'Enter'. Here you will see a printout of information regarding your controller. Wait for it to finish and you will be met with a message that reads, \"Testing ... (interrupt to exit)\". Now, when you press any button on your controller, a few lines of text will appear that make reference to the button's event \nBTN_\n name. Make a note of it's name and repeat with each button until all the names are known. After that, press your left analog stick in the up direction and you will notice that it is given an \nABS_\n name. As up and down make the complete Y-Axis, both will have an identical name. The same goes for left and right that make up the X-Axis. After you note those two names, repeat the process for the right analog stick, as well as the directional pad. Depending on whether or not your controller has analog triggers, pressing them will either produce a \nBTN_\n name or an \nABS_\n name. Also, you may find that your directional pad outputs a separate \nBTN_\n name for each direction rather than \nABS_\n axis names. If your controller doesn't have any analog sticks or triggers, you will still be able to move forward using only the \nBTN_\n codes.\n\n\nNow that we have all the event codes from the controller, we can begin mapping them to the virtual XBox360 controller in a command that will be added to \n/etc/rc.local\n so that it may launch along with RetroPie as it boots up. Below is a template that illustrates the command format. In essence, this command is simply mapping each of the event codes from the physical controller to the virtual XBox360 controller that xboxdrv will create. The specific information gathered from the steps above are marked with an asterisks. A legend for the virtual Xbox 360 controls can be found \nhere\n.\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n    \n\n\n\n\n\nIf the directional pad of your controller outputs individual \nBTN_\n names instead of \nABS_\n axis names, the command is altered to accommodate as seen below. Notice the addition of \n--dpad-as-button\n as well as the inclusion of individual 'BTN_' assignments marked 'du,dd,dl\ndr' under \n--evdev-keymap\n.\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --dpad-as-button \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start,BTN_*=du,BTN_*=dd,BTN_*=dl,BTN_*=dr \\\n    \n\n\n\n\n\nIf you're mapping a controller that doesn't have analog controls, or the full set of buttons found on an XBox360 controller, below is a SNES controller type example of how you would ignore those unused controls to prevent some software from trying to access them automatically. Here you will notice the addition of \n--dpad-only\n, which will ignore both sticks as well as the added argument for \n--ui-axismap\n and \n--ui-buttonmap\n where the voided buttons are defined. You can also use the \n--dpad-as-button\n argument and the accompanying \n-evdev-keymap\n direction buttons found in the example above if this controller also outputs it's Dpad as individual buttons.\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=back,BTN_*=start \\\n    --dpad-only \\\n    --ui-axismap lt=void,rt=void\n    --ui-buttonmap tl=void,tr-void,guide=void \\\n    \n\n\n\n\n\nAll that is really left is to add the command to \n/etc/rc.local\n. To do this type:\n\n\nsudo nano /etc/rc.local\n\n\n\n\nPress 'Enter\" and paste the command into the file above \"exit 0\". Now press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. Seeing as how this command is run as the system boots up, you'll now need to reboot by typing:\n\n\nsudo reboot\n\n\n\n\nPress 'Enter' and wait for Emulation Station to load where you can then remap the controller which will now be seen as being no different from a standard XBox 360 wired Controller. If for some reason you should wish your controller to be seen as a wireless XBox360 controller, just change \n--mimic-xpad\n to \n--mimic-xpad-wireless\n in the configuration.\n\n\n------------------------------------------------------------------------------\n\n\n(2) Fine tuning your controller.\n\n\nAs mentioned in the first section, xboxdrv can also be used to fine-tune a controller's operation in ways that aren't often found in most Linux tools. This is very important when you have a controller that misbehaves in one way or another and would be unusable without proper calibration. \n\n\n(2A) Analog control calibration\n\n\nYou may have noticed that we've already done a bit of fine-tuning with \"deadzones\" in the three examples from section one. When a pressure-sensitive analog control is used, activity is reported from the controller. The problem is that many controllers, both new and old, sometimes report applied pressure when at rest. This can be due to an overly sensitive new controller or a worn out old controller. Setting a deadzone value specifies that a certain amount of pressure be applied before any activity is reported. This prevents drifting and unwanted character movement. The applied values from the examples above are recommended in the xboxdrv manual, but naturally adjustments can be made when needed.\n\n\nTo further adjust the accuracy of your analog controls, you can also set the minimum and maximum range of the X and Y axis of your triggers and sticks. This becomes very important to get the full range of movement from your controller, that might otherwise be hindered in some way. One example is the gate surrounding an analog stick sometimes prohibits the maximum outside movement of a joystick causing, among other things, Emulation Station to not register an up, down, left or right movement, preventing a successful map. To calibrate your analog controls we'll first need to make note of the minimum, maximum and center positions using \njstest\n. To do this, drop down to the command line by pressing 'F4'. If your controller has an xboxdrv configuration applied to it you'll first need to type:\n\n\nsudo killall xboxdrv\n\n\n\n\nPress 'Enter' and then we will need to determine which js* you controller is at. To do this, type:\n\n\ncat /proc/bus/input/devices\n\n\n\n\n\nPress 'Enter' and look for the controller in the list of devices. It can be identified by it's name in the device groupings next to the line beginning with \nN: Name=\n. Once you find it, make a note of it's js\n number next to the line beginning with \nH: Handlers=\n. After you know the js\n number, you will then type:\n\n\njstest /dev/input/js*\n\n\n\n\nMake sure to replace the star with your joystick's number and press 'Enter'. You should now see the joystick testing interface. Starting with the left joystick, slowly push in the left direction until it will not move anymore. You should see numerical onscreen feedback representing the absolute minimum X-axis value. Make a note of that value and release the joystick completely. At this point, make a note of the absolute center X-axis numerical value. Then, slowly push in the right direction until it will not move anymore and make note of the absolute maximum X-axis numerical value. Repeat that process moving slowly from top, center to bottom of the Y-axis, making notes of each value. When completed, you will then repeat the entire process on the right joystick. This process can also be applied to your analog triggers as well if needed. Once of of the values are known for your analog controls, you will add them to your xboxdrv configuration formatted as: \n--calibration AXIS=MIN:CENTER:MAX\n. Using the base configuration example from the first section, it would look like this in practice:\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --calibration x1=MIN:CENTER:MAX,y1=MIN:CENTER:MAX,x2=MIN:CENTER:MAX,y2=MIN:CENTER:MAX \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n    \n\n\n\n\n\nOnce this is added, each of your joysticks will benefit from the absolute full range of movement possible allowing for much finer control. If your xboxdrv configuration is invoked in \n/etc/rc.local\n, you'll need to reboot your system to see the changes.\n\n\n(2B) Converting analog triggers to digital\n\n\nThis next one is a quick, easy and very effective for retro-gamers. Pressure sensitive analog triggers bring an extra level of realism and control to the few games that can make use of them, such as Mame racing games. However, most retro games and console emulation software don't really benefit from analog triggers and in some cases, they can slow response time and even prevent functionality altogether. For these reasons, it is generally suggested that analog triggers be converted to digital input in almost all cases. to do this, you would simply add \n--trigger-as-button\n to your xboxdrv configuration. Using the base configuration example from the first section, it would look like this in practice:\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --trigger-as-button \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n    \n\n\n\n\n\nOnce added, the system will register any analog increase or decrease as an on/off digital button state. If your xboxdrv configuration is invoked in \n/etc/rc.local\n, you'll need to reboot your system to see the changes.\n\n\n(2C) Personalizing your controller's ID name\n\n\nAfter fine-tuning your controller, you may want to give it a personalized ID. Outside of the novelty, this technique can be used as a tool to separate identification of multiple identical controllers in some software that can otherwise get confused when identically named controllers are discovered. To do this, you would replace \n--mimic-xpad\n with \n--device-name \"My Most Non-Non-Triumphant Controller Name Here\"\n. Using the base configuration example from the first section, it would look like this in practice:\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --device-name \nMy Most Non-Non-Triumphant Controller Name Here\n \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n    \n\n\n\n\n\nOnce added the entire system will identify the controller by the new name, so remapping will be necessary in Emulation Station. If your xboxdrv configuration is invoked in \n/etc/rc.local\n, you'll need to reboot your system to see the changes.\n\n\n(2D) Restricting directional control to four ways\n\n\nWhen emulating classic video games, sometimes having a modern controller can work against you. Games like 'Burger Time' or the 'Pac-Man' series were only ever designed for 4-way directional control. This becomes a problem when using a controller with a free range of analog movement. When Pac-Man tries to turn a corner or Chef Peter Pepper tries to climb a ladder, a brief, but deadly pause often happens as a result of getting mixed directional input when the joystick hits a diagonal position. This can be eliminated in an xboxdrv control scheme by simply adding \n--four-way-restrictor\n. Using the base configuration example from the first section, it would look like this in practice:\n\n\nsudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n\n\n\n\nOnce added, the games will perform just as fluidly as they did using their original joysticks.\n\n\n------------------------------------------------------------------------------\n\n\n(3) Key-Mapping For Individual Emulators\n\n\n(3A) Key-Mapping and Launch Fundamentals\n\n\nNote:\n This section is soon to be replaced with the simplified information found \nhere\n\n\nThe foundation has been laid. Controller's have been fine-tuned. Now, we'll take a look at how to map keyboard keys and mouse movements to a controller's analog sticks and buttons for use in emulators that lack native controller support and how to launch and maintain multiple mappings accordingly. So far we have dealt with xboxdrv on a system level. This first step in facilitating program-specific key-mappings requires that xboxdrv be able to run at a user level. To do this, drop down to the command line by pressing 'F4' on your keyboard, then type:\n\n\nsudo nano /etc/udev/rules.d/55-permissions-uinput.rules\n\n\n\n\nPress 'Enter\" and type the following:\n\n\nKERNEL==\nuinput\n, MODE=\n0660\n, GROUP=\nusers\n\n\n\n\n\nNow press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. Seeing as how this command is run as the system boots up, you'll now need to reboot by typing:\n\n\nsudo reboot\n\n\n\n\nNow that we've prepared xboxdrv to operate at a user level, we are ready to key-map our emulator. I've chosen to use ScummVM as an example because it's easy and it involves mapping both keyboard keys to buttons and the mouse to the analog stick. Those who have tried using the internal joystick support in ScummVM know that it leaves much to be desired. The cursor movement is shakey and you still need a keyboard to quit the program. This mapping will solve both of those problems. As with any emulator or port in RetroPie, you'll first need to figure out where the launch command is located for the specific emulator or port you wish to map. This command is usually found in the \n/opt/retropie/configs/systemname/emulators.cfg\n file. However, it is sometimes located in different places. In the case of ScummVM, we find by checking it's \nemulators.cfg\n file that it is actually launched from a script located at \n/home/pi/RetroPie/roms/scummvm/+Start\\ ScummVM.sh\n. Once located, adding an xboxdrv mapping is just a matter of adding the configuration to the beginning of the command and separating it by using the \n--\n entry. Using the base configuration example from the first section, below is a before and after look at how this should be formatted. \n\n\nBefore\n\n\n#!/bin/bash\ngame=\n$1\n\npushd \n/home/pi/RetroPie/roms/scummvm\n \n/dev/null\n/opt/retropie/emulators/scummvm/bin/scummvm --fullscreen --joystick=0 --extrapath=\n/opt/retropie/emulators/scummvm/extra\n $game\nwhile read line; do\n    id=($line);\n    touch \n/home/pi/RetroPie/roms/scummvm/$id.svm\n\ndone \n \n(/opt/retropie/emulators/scummvm/bin/scummvm --list-targets | tail -n +3)\npopd \n/dev/null\n\n\n\n\nAfter\n\n\n#!/bin/sh\ngame=\n$1\n\npushd \n/home/pi/RetroPie/roms/scummvm\n \n/dev/null\nsudo killall \n/dev/null xboxdrv\n/opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    \n/dev/null \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n    --axismap -Y1=Y1,-Y2=Y2 \\\n    --ui-axismap x1=REL_X:10,y1=REL_Y:10 \\\n    --ui-buttonmap b=BTN_LEFT,a=BTN_RIGHT,start=KEY_F5 \\\n    --ui-buttonmap guide=void,x=void,y=void,lb=void,rb=void,tl=void,tr=void,lt=void,rt=void,back=void \\\n    --ui-axismap x2=void \\\n    -- \\\n    /opt/retropie/emulators/scummvm/bin/scummvm --fullscreen --joystick=0 --extrapath=\n/opt/retropie/emulators/scummvm/extra\n $game\nwhile read line; do\n    id=($line);\n    touch \n/home/pi/RetroPie/roms/scummvm/$id.svm\n\ndone \n \n(/opt/retropie/emulators/scummvm/bin/scummvm --list-targets | tail -n +3)\npopd \n/dev/null\n\n\n\n\nNotice that it begins with a sudo command to kill any other instances of xboxdrv. This is in case you have already configured your controller with a system-wide mapping from the earlier steps. We'll go over later how to re-enable that system-wide mapping automatically when the emulator shuts down so that you will be left where you started. If you have no system-wide mapping, the basic controls you have set up in Emulation Station will return once the emulator quits without any further setting. For this particular mapping, we have enabled mouse support to the left joystick, mouse left and right buttons to controller buttons 'b' and 'a', as well as mapping the 'F5' key to the controller's 'start' button so that we can bring up the menu and control the entire software from the controller. To do this, we added two new lines to our basic configuration in the form of \n--ui-axismap\n and \n--ui-buttonmap\n. \n\n\nThis particular example works well for mapping a controller's left analog stick to mouse support using the \n--ui-axismap\n variable and can be changed to the right stick by simply altering the line to \n--ui-axismap x2=REL_X:10,y2=REL_Y:10\n. To change the speed of the mouse, just change the \nREL_*:*\n integer of the X and Y axis higher or lower than \n10\n. If you should ever want to map keyboard keys to an analog stick, a classic example would look like \n--ui-axismap X1=KEY_A:KEY_D,Y1=KEY_W:KEY_S\n, giving you the ADWS control scheme found in many classic computer titles. As far as key-mapping buttons is concerned, first you must consider which buttons are available to you. Seeing as how xboxdrv emulates a standard XBox 360 controller, you will have any of those buttons that you have already assigned to your controller in the earlier steps. If you have assigned all the buttons that are possible, you'll have access to a,b,x,y,lb,rb,lt,rt,tl,tr,start,back and guide. The placement of these buttons can be seen \nhere\n. By using the \n--ui-buttonmap\n variable, you can then map any one of the buttons to a key using the format above. To discover all the possible keyboard keys that are available to you, type \n/opt/retropie/supplementary/xboxdrv/bin/xboxdrv --help-key\n. Finally, you'll notice that their are two more lines added with the \n--ui-axismap\n and \n--ui-buttonmap\n variables that are solely responsible for voiding the unused control elements. This is optional, but it will make the control scheme cleaner by eliminating the possibility of those elements conflicting in any way.\n\n\nSo now that we have our control scheme added to the launch command, we can save it and try it out. I've had this particular example running for some time, so it should load right up and tear itself down once the emulator quits. If it doesn't, you'll want to troubleshoot your xboxdrv command separately by removing the \n/dev/null \\\n line and executing it from the command line. It should report any errors that need correcting. From there you would add the \n/dev/null \\\n back to the command and place it back in the launch command. For those who have a system-wide xboxdrv mapping that should be restored afterward, copy that same configuration from your \n/etc/rc.local\n to the '/opt/retropie/configs/all/runcommand-onend.sh' bash script. If the script doesn't exist, drop to the command line and type:\n\n\nnano /opt/retropie/configs/all/runcommand-onend.sh\n\n\n\n\nPress 'Enter\" and type the following:\n\n\n#!/bin/sh\n\n\n\n\nOn a line below, you can now add the global xboxdrv command you previously added to \n/etc/rc.local\n. To keep things nice and silent, you may wish to alter your original command by changing the first two lines to read:\n\n\n/opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    \n/dev/null \\\n\n\n\n\nThis will keep xboxdrv from printing any onscreen feedback, making the whole process completely transparent to the user. Now, press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. All that is left is to make the script executable in the terminal by typing:\n\n\nchmod +x /opt/retropie/configs/all/runcommand-onend.sh\n\n\n\n\nTo fully round out this section on key-mapping, it should be mentioned that in some rare scenarios, the keyboard that xbmc virtualizes may not be recognized as being a keyboard by the software you intend to use it with. In this situation, you can create a udev rule that will authenticate the input as being from an actual keyboard at a system level, allowing it to function anywhere. To add this udev rule, drop to the command line and type:\n\n\nsudo nano /etc/udev/rules.d/99-xboxdrv.rules\n\n\n\n\nPress 'Enter\" and type the following:\n\n\nSUBSYSTEM==\ninput\n, ATTRS{name}==\nMicrosoft X-Box 360 pad - Keyboard Emulation\n, GROUP=\nusers\n, MODE=\n0666\n, ENV{ID_INPUT_KEYBOARD}=\n1\n\n\n\n\n\nNow press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. The name \"Microsoft X-Box 360 pad - Keyboard Emulation\" is dependent on the use of the \n--mimic-xpad\n variable used in your xboxdrv command. If you have customized that name using the \n--device-name\n variable instead, as seen in the earlier example, it would then be replaced with \"My Most Non-Non-Triumphant Controller Name Here - Keyboard Emulation\".\n\n\n(3B) Expanding Launch Capabilities\n\n\nThe above method of combining the xboxdrv configuration with the launch command is a function that is built in to xboxdrv. However, it can be a bit unwieldy when considering the multiple launch methods found in RetroPie. What follows is an alternate method that utilizes the \nruncommand-onstart.sh\n shell script, allowing a unified location and format for multiple xboxdrv configurations that launch based on a case statement. In addition, all the xboxdrv parameters are assigned to variables, making the case statement easier to read.\n\n\nIf it doesn't already exist, start by creating the \nruncommand-onstart.sh\n:\n\n\nnano /opt/retropie/configs/all/runcommand-onstart.sh\n\n\n\n\nThe following is just an example, everyone should change the configuration based on their own controller\n\n\n#!/bin/sh\n## Uncomment one or all of the following if you need to find some information about the emulator or roms\n## Name of the emulator\n#echo $1 \n /dev/shm/runcommand.log\n\n## Name of the software used for running the emulation\n#echo $2 \n /dev/shm/runcommand.log\n\n## Name of the rom\n#echo $3 \n /dev/shm/runcommand.log\n\n##Executed command line\n#echo $4 \n /dev/shm/runcommand.log\n\n\n### The FUN begins\n#Get ROM name striping full path\nrom=\n${3##*/}\n\n\n### Set variables for your joypad and emulator\n### Basic Configuraions - Standard controller mappings \nbasicPS3=\n/opt/retropie/supplementary/xboxdrv/bin/xboxdrv \n/dev/null \\\n    --evdev /dev/input/event2 \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --mimic-xpad \\\n    --dpad-as-button \\\n    --trigger-as-button \\\n    --evdev-absmap ABS_X=x1,ABS_Y=y1,ABS_Z=x2,ABS_RX=y2 \\\n    --evdev-keymap KEY_#302=a,KEY_#301=b,BTN_DEAD=x,KEY_#300=y,BTN_THUMB=tl,BTN_THUMB2=tr,BTN_BASE5=lb,BTN_BASE6=rb,BTN_BASE3=lt,BTN_BASE4=rt,BTN_TRIGGER=back,BTN_TOP=start,BTN_SOUTH=guide,BTN_TOP2=du,BTN_PINKIE=dr,BTN_BASE=dd,BTN_BASE2=dl\n    --calibration x1=-32767:0:32767,y1=-32767:0:32767,x2=-32767:0:32767,y2=-32767:0:32767\n\n\n\n### Extended Configurations\n### Specific emulator configuration or any other parameters you will need only for some emulators\nscummVM=\n--axismap -Y1=Y1,-Y2=Y2 \\\n    --ui-axismap x1=REL_X:10,y1=REL_Y:10 \\\n    --ui-buttonmap a=BTN_LEFT,b=BTN_RIGHT,start=KEY_F5,back=KEY_ESC \\\n    --ui-buttonmap guide=void,x=void,y=void,lb=void,rb=void,tl=void,tr=void,lt=void,rt=void,back=void \\\n    --ui-axismap x2=void\n\n\namiga=\n--axismap -Y1=Y1,-Y2=Y2 \\\n    --ui-axismap x2=REL_X:1,y2=REL_Y:1 \\\n    --ui-axismap x1=KEY_LEFT:KEY_RIGHT,y1=KEY_DOWN:KEY_UP \\\n    --ui-buttonmap du=KEY_UP,dd=KEY_DOWN,dl=KEY_LEFT,dr=KEY_RIGHT \\\n    --ui-buttonmap lt=BTN_LEFT,rt=BTN_RIGHT,start=KEY_ESC,back=KEY_LEFTCTRL,y=KEY_SPACE,a=KEY_LEFTCTRL,b=KEY_LEFTALT,x=KEY_LEFTSHIFT \\\n    --ui-buttonmap guide=void,tl=void,lt=void,rt=void,back=void \\\n    --ui-axismap x2=void\n\n\nfourway=\n--four-way-restrictor\n\n\ninvert=\n--ui-buttonmap du=KEY_DOWN,dd=KEY_UP\n\n\n### Kill Command\nxboxkill=\nsudo killall \n/dev/null xboxdrv\n\n\n### Execute the driver with the configuration you need\n# $1 is the name of the emulation, not the name of the software used\n# it is intellivision not jzintv\ncase $1 in\n\n    mame-libretro)\n    ;;\n\n    fba)\n        case $rom in\n            \namidar.zip\n|\natetris.zip\n|\npuckman.zip\n) # Configuration used only for these ROMs\n                $xboxkill\n                joycommand=\n$basicPS3 $fourway \n\n                eval $joycommand\n            ;;\n            *) # Configuration for every other ROMs on this emulator\n                $xboxkill\n                joycommand=\n$basicPS3 \n\n                eval $joycommand\n            ;;\n        esac\n    ;;\n\n    daphne)\n    ;;\n\n    scummvm)\n        $xboxkill\n        joycommand=\n$basicPS3 $scummVM \n\n        eval $joycommand\n    ;;\n\n    amiga)\n        $xboxkill\n        joycommand=\n$basicPS3 $amiga \n\n        eval $joycommand\n    ;;\n\n    intellivision)\n    ;;\nesac\n\n\n\n\nWe assign to the \njoycommand\n variable, the list of variables that contains the parameters we need for example \njoycommand=\"BasicVAR var1 var2 var3 $\"\n. The Basic variables must be the first, and \n must be the last.\n\n\nNext, we make the script executable:\n\n\nsudo chmod +x /opt/retropie/configs/all/runcommand-onstart.sh\n\n\n\n\nFor some emulators we could face some problem, i have a PS3 controller recognized as input device \nevent2\n, when i execute xboxdrv the controller is recognized as input device \nevent3\n. The system now see 2 controller device, the PS3 as controller with id 0 and an Xbox360 controller with id 1, for the emulator you are now using the controller for player2 and this will cause some problem, for example you can only start a 2 players game, you can't quit the emulation pushing 'select+start'. To solve the problem we have to specify on \nretroarch.cfg\n the id of the controller used by player1 and player2.\n\n\nThis is the configuration for Final Burn Alpha, we have to add \ninput_playerx_joypad_index = \"x\"\n for every controller between \ninput_remapping_directory = \"/opt/retropie/configs/fba/\"\n and \n#include \"/opt/retropie/configs/all/retroarch.cfg\"\n where the first X is the player number, and the secon X is the controller ID.\n\n\n# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = \n/opt/retropie/configs/fba/\n\n\ninput_player1_joypad_index = \n1\n\ninput_player2_joypad_index = \n0\n\ninput_player2_analog_dpad_mode = 1\n\n#include \n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n\n\nIf you want this configuration for every retroarch emulators, you have to edit \nnano /opt/retropie/configs/all/retroarch.cfg\n\n\nNow we need to kill xboxdrv when we exit from the emulator, we do this with the onend script\n\n\nnano /opt/retropie/configs/all/runcommand-onend.sh\n\n\n\n\n#!/bin/sh\nsudo killall \n/dev/null xboxdrv\n\n\n\n\nand make it executable\n\n\nsudo chmod +x /opt/retropie/configs/all/runcommand-onend.sh\n\n\n\n\n------------------------------------------------------------------------------", 
            "title": "Universal Controller Calibration & Mapping Using xboxdrv"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#1-mapping-any-controller-to-be-read-as-a-standard-xbox360-controller", 
            "text": "None of what is to follow can be accomplished without this first step. The sheer multitude of existing controllers and their loose implementation of \"standards\" presents a problem to computer software that has a limited definition of what to expect from controller input. Simply mapping a troublesome controller to be read as a standardized XBox360 controller can solve many communication problems without any additional tweaking. However, this same process can also be used to fine-tune a controller in much the same way that you might normally only find in Windows-based solutions.   First, we need to make sure xboxdrv is installed. This can be done from the 'RetroPie Setup' listing in the 'RetroPie' menu of Emulation Station. Navigate from 'Setup / Tools' to 'xboxdrv - XBox / XBox360 gamepad driver'. From here, select 'Enable xboxdrv' and wait for it to finish. Once installed and enabled, a configuration will be added to  /etc/rc.local . Since we will be adding our own custom configuration there later, this command should be removed by selecting 'Disable xboxdrv' from the same menu we enabled it from. With xboxdrv now installed, we now need to discover the core-level device input codes for each button and axis on the physical controller, so that we may then map them to the virtual XBox360 controller. To do this, drop down to the command line by pressing 'F4' on your keyboard, then type:  cat /proc/bus/input/devices  Press 'Enter' and look for the controller in the list of devices. It can be identified by it's name in the device groupings next to the line beginning with  N: Name= . Once you find it, make a note of it's event number next to the line beginning with  H: Handlers= . Next, we'll also need to make note of the event location by name for later use. To do that that, type:  ls /dev/input/by-id/  Press 'Enter' and your device should be listed here by name. In the event that you see multiple entries, look for the listing containing \"event\" in the title. If you find that your controller is not listed by name, you can substitute the event number when it comes time. Now let's move on to discovering the event codes for each button of the controller by typing:  evtest /dev/input/event*  Make sure to replace the star with the controllers event number, then press 'Enter'. Here you will see a printout of information regarding your controller. Wait for it to finish and you will be met with a message that reads, \"Testing ... (interrupt to exit)\". Now, when you press any button on your controller, a few lines of text will appear that make reference to the button's event  BTN_  name. Make a note of it's name and repeat with each button until all the names are known. After that, press your left analog stick in the up direction and you will notice that it is given an  ABS_  name. As up and down make the complete Y-Axis, both will have an identical name. The same goes for left and right that make up the X-Axis. After you note those two names, repeat the process for the right analog stick, as well as the directional pad. Depending on whether or not your controller has analog triggers, pressing them will either produce a  BTN_  name or an  ABS_  name. Also, you may find that your directional pad outputs a separate  BTN_  name for each direction rather than  ABS_  axis names. If your controller doesn't have any analog sticks or triggers, you will still be able to move forward using only the  BTN_  codes.  Now that we have all the event codes from the controller, we can begin mapping them to the virtual XBox360 controller in a command that will be added to  /etc/rc.local  so that it may launch along with RetroPie as it boots up. Below is a template that illustrates the command format. In essence, this command is simply mapping each of the event codes from the physical controller to the virtual XBox360 controller that xboxdrv will create. The specific information gathered from the steps above are marked with an asterisks. A legend for the virtual Xbox 360 controls can be found  here .  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n       If the directional pad of your controller outputs individual  BTN_  names instead of  ABS_  axis names, the command is altered to accommodate as seen below. Notice the addition of  --dpad-as-button  as well as the inclusion of individual 'BTN_' assignments marked 'du,dd,dl dr' under  --evdev-keymap .  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --dpad-as-button \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start,BTN_*=du,BTN_*=dd,BTN_*=dl,BTN_*=dr \\\n       If you're mapping a controller that doesn't have analog controls, or the full set of buttons found on an XBox360 controller, below is a SNES controller type example of how you would ignore those unused controls to prevent some software from trying to access them automatically. Here you will notice the addition of  --dpad-only , which will ignore both sticks as well as the added argument for  --ui-axismap  and  --ui-buttonmap  where the voided buttons are defined. You can also use the  --dpad-as-button  argument and the accompanying  -evdev-keymap  direction buttons found in the example above if this controller also outputs it's Dpad as individual buttons.  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=back,BTN_*=start \\\n    --dpad-only \\\n    --ui-axismap lt=void,rt=void\n    --ui-buttonmap tl=void,tr-void,guide=void \\\n       All that is really left is to add the command to  /etc/rc.local . To do this type:  sudo nano /etc/rc.local  Press 'Enter\" and paste the command into the file above \"exit 0\". Now press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. Seeing as how this command is run as the system boots up, you'll now need to reboot by typing:  sudo reboot  Press 'Enter' and wait for Emulation Station to load where you can then remap the controller which will now be seen as being no different from a standard XBox 360 wired Controller. If for some reason you should wish your controller to be seen as a wireless XBox360 controller, just change  --mimic-xpad  to  --mimic-xpad-wireless  in the configuration.  ------------------------------------------------------------------------------", 
            "title": "(1) Mapping any controller to be read as a standard XBox360 controller."
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#2-fine-tuning-your-controller", 
            "text": "As mentioned in the first section, xboxdrv can also be used to fine-tune a controller's operation in ways that aren't often found in most Linux tools. This is very important when you have a controller that misbehaves in one way or another and would be unusable without proper calibration.", 
            "title": "(2) Fine tuning your controller."
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#2a-analog-control-calibration", 
            "text": "You may have noticed that we've already done a bit of fine-tuning with \"deadzones\" in the three examples from section one. When a pressure-sensitive analog control is used, activity is reported from the controller. The problem is that many controllers, both new and old, sometimes report applied pressure when at rest. This can be due to an overly sensitive new controller or a worn out old controller. Setting a deadzone value specifies that a certain amount of pressure be applied before any activity is reported. This prevents drifting and unwanted character movement. The applied values from the examples above are recommended in the xboxdrv manual, but naturally adjustments can be made when needed.  To further adjust the accuracy of your analog controls, you can also set the minimum and maximum range of the X and Y axis of your triggers and sticks. This becomes very important to get the full range of movement from your controller, that might otherwise be hindered in some way. One example is the gate surrounding an analog stick sometimes prohibits the maximum outside movement of a joystick causing, among other things, Emulation Station to not register an up, down, left or right movement, preventing a successful map. To calibrate your analog controls we'll first need to make note of the minimum, maximum and center positions using  jstest . To do this, drop down to the command line by pressing 'F4'. If your controller has an xboxdrv configuration applied to it you'll first need to type:  sudo killall xboxdrv  Press 'Enter' and then we will need to determine which js* you controller is at. To do this, type:  cat /proc/bus/input/devices  Press 'Enter' and look for the controller in the list of devices. It can be identified by it's name in the device groupings next to the line beginning with  N: Name= . Once you find it, make a note of it's js  number next to the line beginning with  H: Handlers= . After you know the js  number, you will then type:  jstest /dev/input/js*  Make sure to replace the star with your joystick's number and press 'Enter'. You should now see the joystick testing interface. Starting with the left joystick, slowly push in the left direction until it will not move anymore. You should see numerical onscreen feedback representing the absolute minimum X-axis value. Make a note of that value and release the joystick completely. At this point, make a note of the absolute center X-axis numerical value. Then, slowly push in the right direction until it will not move anymore and make note of the absolute maximum X-axis numerical value. Repeat that process moving slowly from top, center to bottom of the Y-axis, making notes of each value. When completed, you will then repeat the entire process on the right joystick. This process can also be applied to your analog triggers as well if needed. Once of of the values are known for your analog controls, you will add them to your xboxdrv configuration formatted as:  --calibration AXIS=MIN:CENTER:MAX . Using the base configuration example from the first section, it would look like this in practice:  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --calibration x1=MIN:CENTER:MAX,y1=MIN:CENTER:MAX,x2=MIN:CENTER:MAX,y2=MIN:CENTER:MAX \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n       Once this is added, each of your joysticks will benefit from the absolute full range of movement possible allowing for much finer control. If your xboxdrv configuration is invoked in  /etc/rc.local , you'll need to reboot your system to see the changes.", 
            "title": "(2A) Analog control calibration"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#2b-converting-analog-triggers-to-digital", 
            "text": "This next one is a quick, easy and very effective for retro-gamers. Pressure sensitive analog triggers bring an extra level of realism and control to the few games that can make use of them, such as Mame racing games. However, most retro games and console emulation software don't really benefit from analog triggers and in some cases, they can slow response time and even prevent functionality altogether. For these reasons, it is generally suggested that analog triggers be converted to digital input in almost all cases. to do this, you would simply add  --trigger-as-button  to your xboxdrv configuration. Using the base configuration example from the first section, it would look like this in practice:  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --trigger-as-button \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n       Once added, the system will register any analog increase or decrease as an on/off digital button state. If your xboxdrv configuration is invoked in  /etc/rc.local , you'll need to reboot your system to see the changes.", 
            "title": "(2B) Converting analog triggers to digital"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#2c-personalizing-your-controllers-id-name", 
            "text": "After fine-tuning your controller, you may want to give it a personalized ID. Outside of the novelty, this technique can be used as a tool to separate identification of multiple identical controllers in some software that can otherwise get confused when identically named controllers are discovered. To do this, you would replace  --mimic-xpad  with  --device-name \"My Most Non-Non-Triumphant Controller Name Here\" . Using the base configuration example from the first section, it would look like this in practice:  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --device-name  My Most Non-Non-Triumphant Controller Name Here  \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n       Once added the entire system will identify the controller by the new name, so remapping will be necessary in Emulation Station. If your xboxdrv configuration is invoked in  /etc/rc.local , you'll need to reboot your system to see the changes.", 
            "title": "(2C) Personalizing your controller's ID name"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#2d-restricting-directional-control-to-four-ways", 
            "text": "When emulating classic video games, sometimes having a modern controller can work against you. Games like 'Burger Time' or the 'Pac-Man' series were only ever designed for 4-way directional control. This becomes a problem when using a controller with a free range of analog movement. When Pac-Man tries to turn a corner or Chef Peter Pepper tries to climb a ladder, a brief, but deadly pause often happens as a result of getting mixed directional input when the joystick hits a diagonal position. This can be eliminated in an xboxdrv control scheme by simply adding  --four-way-restrictor . Using the base configuration example from the first section, it would look like this in practice:  sudo /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\  Once added, the games will perform just as fluidly as they did using their original joysticks.  ------------------------------------------------------------------------------", 
            "title": "(2D) Restricting directional control to four ways"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#3-key-mapping-for-individual-emulators", 
            "text": "", 
            "title": "(3) Key-Mapping For Individual Emulators"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#3a-key-mapping-and-launch-fundamentals", 
            "text": "Note:  This section is soon to be replaced with the simplified information found  here  The foundation has been laid. Controller's have been fine-tuned. Now, we'll take a look at how to map keyboard keys and mouse movements to a controller's analog sticks and buttons for use in emulators that lack native controller support and how to launch and maintain multiple mappings accordingly. So far we have dealt with xboxdrv on a system level. This first step in facilitating program-specific key-mappings requires that xboxdrv be able to run at a user level. To do this, drop down to the command line by pressing 'F4' on your keyboard, then type:  sudo nano /etc/udev/rules.d/55-permissions-uinput.rules  Press 'Enter\" and type the following:  KERNEL== uinput , MODE= 0660 , GROUP= users   Now press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. Seeing as how this command is run as the system boots up, you'll now need to reboot by typing:  sudo reboot  Now that we've prepared xboxdrv to operate at a user level, we are ready to key-map our emulator. I've chosen to use ScummVM as an example because it's easy and it involves mapping both keyboard keys to buttons and the mouse to the analog stick. Those who have tried using the internal joystick support in ScummVM know that it leaves much to be desired. The cursor movement is shakey and you still need a keyboard to quit the program. This mapping will solve both of those problems. As with any emulator or port in RetroPie, you'll first need to figure out where the launch command is located for the specific emulator or port you wish to map. This command is usually found in the  /opt/retropie/configs/systemname/emulators.cfg  file. However, it is sometimes located in different places. In the case of ScummVM, we find by checking it's  emulators.cfg  file that it is actually launched from a script located at  /home/pi/RetroPie/roms/scummvm/+Start\\ ScummVM.sh . Once located, adding an xboxdrv mapping is just a matter of adding the configuration to the beginning of the command and separating it by using the  --  entry. Using the base configuration example from the first section, below is a before and after look at how this should be formatted.   Before  #!/bin/bash\ngame= $1 \npushd  /home/pi/RetroPie/roms/scummvm   /dev/null\n/opt/retropie/emulators/scummvm/bin/scummvm --fullscreen --joystick=0 --extrapath= /opt/retropie/emulators/scummvm/extra  $game\nwhile read line; do\n    id=($line);\n    touch  /home/pi/RetroPie/roms/scummvm/$id.svm \ndone    (/opt/retropie/emulators/scummvm/bin/scummvm --list-targets | tail -n +3)\npopd  /dev/null  After  #!/bin/sh\ngame= $1 \npushd  /home/pi/RetroPie/roms/scummvm   /dev/null\nsudo killall  /dev/null xboxdrv\n/opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n     /dev/null \\\n    --evdev /dev/input/by-id/* \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --deadzone-trigger 15% \\\n    --deadzone 4000 \\\n    --mimic-xpad \\\n    --evdev-absmap ABS_*=x1,ABS_*=y1,ABS_*=x2,ABS_*=y2,ABS_*=lt,ABS_*=rt,ABS_*=dpad_x,ABS_*=dpad_y \\\n    --evdev-keymap BTN_*=a,BTN_*=b,BTN_*=x,BTN_*=y,BTN_*=lb,BTN_*=rb,BTN_*=tl,BTN_*=tr,BTN_*=guide,BTN_*=back,BTN_*=start \\\n    --axismap -Y1=Y1,-Y2=Y2 \\\n    --ui-axismap x1=REL_X:10,y1=REL_Y:10 \\\n    --ui-buttonmap b=BTN_LEFT,a=BTN_RIGHT,start=KEY_F5 \\\n    --ui-buttonmap guide=void,x=void,y=void,lb=void,rb=void,tl=void,tr=void,lt=void,rt=void,back=void \\\n    --ui-axismap x2=void \\\n    -- \\\n    /opt/retropie/emulators/scummvm/bin/scummvm --fullscreen --joystick=0 --extrapath= /opt/retropie/emulators/scummvm/extra  $game\nwhile read line; do\n    id=($line);\n    touch  /home/pi/RetroPie/roms/scummvm/$id.svm \ndone    (/opt/retropie/emulators/scummvm/bin/scummvm --list-targets | tail -n +3)\npopd  /dev/null  Notice that it begins with a sudo command to kill any other instances of xboxdrv. This is in case you have already configured your controller with a system-wide mapping from the earlier steps. We'll go over later how to re-enable that system-wide mapping automatically when the emulator shuts down so that you will be left where you started. If you have no system-wide mapping, the basic controls you have set up in Emulation Station will return once the emulator quits without any further setting. For this particular mapping, we have enabled mouse support to the left joystick, mouse left and right buttons to controller buttons 'b' and 'a', as well as mapping the 'F5' key to the controller's 'start' button so that we can bring up the menu and control the entire software from the controller. To do this, we added two new lines to our basic configuration in the form of  --ui-axismap  and  --ui-buttonmap .   This particular example works well for mapping a controller's left analog stick to mouse support using the  --ui-axismap  variable and can be changed to the right stick by simply altering the line to  --ui-axismap x2=REL_X:10,y2=REL_Y:10 . To change the speed of the mouse, just change the  REL_*:*  integer of the X and Y axis higher or lower than  10 . If you should ever want to map keyboard keys to an analog stick, a classic example would look like  --ui-axismap X1=KEY_A:KEY_D,Y1=KEY_W:KEY_S , giving you the ADWS control scheme found in many classic computer titles. As far as key-mapping buttons is concerned, first you must consider which buttons are available to you. Seeing as how xboxdrv emulates a standard XBox 360 controller, you will have any of those buttons that you have already assigned to your controller in the earlier steps. If you have assigned all the buttons that are possible, you'll have access to a,b,x,y,lb,rb,lt,rt,tl,tr,start,back and guide. The placement of these buttons can be seen  here . By using the  --ui-buttonmap  variable, you can then map any one of the buttons to a key using the format above. To discover all the possible keyboard keys that are available to you, type  /opt/retropie/supplementary/xboxdrv/bin/xboxdrv --help-key . Finally, you'll notice that their are two more lines added with the  --ui-axismap  and  --ui-buttonmap  variables that are solely responsible for voiding the unused control elements. This is optional, but it will make the control scheme cleaner by eliminating the possibility of those elements conflicting in any way.  So now that we have our control scheme added to the launch command, we can save it and try it out. I've had this particular example running for some time, so it should load right up and tear itself down once the emulator quits. If it doesn't, you'll want to troubleshoot your xboxdrv command separately by removing the  /dev/null \\  line and executing it from the command line. It should report any errors that need correcting. From there you would add the  /dev/null \\  back to the command and place it back in the launch command. For those who have a system-wide xboxdrv mapping that should be restored afterward, copy that same configuration from your  /etc/rc.local  to the '/opt/retropie/configs/all/runcommand-onend.sh' bash script. If the script doesn't exist, drop to the command line and type:  nano /opt/retropie/configs/all/runcommand-onend.sh  Press 'Enter\" and type the following:  #!/bin/sh  On a line below, you can now add the global xboxdrv command you previously added to  /etc/rc.local . To keep things nice and silent, you may wish to alter your original command by changing the first two lines to read:  /opt/retropie/supplementary/xboxdrv/bin/xboxdrv \\\n     /dev/null \\  This will keep xboxdrv from printing any onscreen feedback, making the whole process completely transparent to the user. Now, press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. All that is left is to make the script executable in the terminal by typing:  chmod +x /opt/retropie/configs/all/runcommand-onend.sh  To fully round out this section on key-mapping, it should be mentioned that in some rare scenarios, the keyboard that xbmc virtualizes may not be recognized as being a keyboard by the software you intend to use it with. In this situation, you can create a udev rule that will authenticate the input as being from an actual keyboard at a system level, allowing it to function anywhere. To add this udev rule, drop to the command line and type:  sudo nano /etc/udev/rules.d/99-xboxdrv.rules  Press 'Enter\" and type the following:  SUBSYSTEM== input , ATTRS{name}== Microsoft X-Box 360 pad - Keyboard Emulation , GROUP= users , MODE= 0666 , ENV{ID_INPUT_KEYBOARD}= 1   Now press 'ctrl+o' to save the file, 'Enter' to confirm and 'ctrl+x' to exit. The name \"Microsoft X-Box 360 pad - Keyboard Emulation\" is dependent on the use of the  --mimic-xpad  variable used in your xboxdrv command. If you have customized that name using the  --device-name  variable instead, as seen in the earlier example, it would then be replaced with \"My Most Non-Non-Triumphant Controller Name Here - Keyboard Emulation\".", 
            "title": "(3A) Key-Mapping and Launch Fundamentals"
        }, 
        {
            "location": "/Universal-Controller-Calibration-&-Mapping-Using-xboxdrv/#3b-expanding-launch-capabilities", 
            "text": "The above method of combining the xboxdrv configuration with the launch command is a function that is built in to xboxdrv. However, it can be a bit unwieldy when considering the multiple launch methods found in RetroPie. What follows is an alternate method that utilizes the  runcommand-onstart.sh  shell script, allowing a unified location and format for multiple xboxdrv configurations that launch based on a case statement. In addition, all the xboxdrv parameters are assigned to variables, making the case statement easier to read.  If it doesn't already exist, start by creating the  runcommand-onstart.sh :  nano /opt/retropie/configs/all/runcommand-onstart.sh  The following is just an example, everyone should change the configuration based on their own controller  #!/bin/sh\n## Uncomment one or all of the following if you need to find some information about the emulator or roms\n## Name of the emulator\n#echo $1   /dev/shm/runcommand.log\n\n## Name of the software used for running the emulation\n#echo $2   /dev/shm/runcommand.log\n\n## Name of the rom\n#echo $3   /dev/shm/runcommand.log\n\n##Executed command line\n#echo $4   /dev/shm/runcommand.log\n\n\n### The FUN begins\n#Get ROM name striping full path\nrom= ${3##*/} \n\n### Set variables for your joypad and emulator\n### Basic Configuraions - Standard controller mappings \nbasicPS3= /opt/retropie/supplementary/xboxdrv/bin/xboxdrv  /dev/null \\\n    --evdev /dev/input/event2 \\\n    --silent \\\n    --detach-kernel-driver \\\n    --force-feedback \\\n    --mimic-xpad \\\n    --dpad-as-button \\\n    --trigger-as-button \\\n    --evdev-absmap ABS_X=x1,ABS_Y=y1,ABS_Z=x2,ABS_RX=y2 \\\n    --evdev-keymap KEY_#302=a,KEY_#301=b,BTN_DEAD=x,KEY_#300=y,BTN_THUMB=tl,BTN_THUMB2=tr,BTN_BASE5=lb,BTN_BASE6=rb,BTN_BASE3=lt,BTN_BASE4=rt,BTN_TRIGGER=back,BTN_TOP=start,BTN_SOUTH=guide,BTN_TOP2=du,BTN_PINKIE=dr,BTN_BASE=dd,BTN_BASE2=dl\n    --calibration x1=-32767:0:32767,y1=-32767:0:32767,x2=-32767:0:32767,y2=-32767:0:32767 \n\n\n### Extended Configurations\n### Specific emulator configuration or any other parameters you will need only for some emulators\nscummVM= --axismap -Y1=Y1,-Y2=Y2 \\\n    --ui-axismap x1=REL_X:10,y1=REL_Y:10 \\\n    --ui-buttonmap a=BTN_LEFT,b=BTN_RIGHT,start=KEY_F5,back=KEY_ESC \\\n    --ui-buttonmap guide=void,x=void,y=void,lb=void,rb=void,tl=void,tr=void,lt=void,rt=void,back=void \\\n    --ui-axismap x2=void \n\namiga= --axismap -Y1=Y1,-Y2=Y2 \\\n    --ui-axismap x2=REL_X:1,y2=REL_Y:1 \\\n    --ui-axismap x1=KEY_LEFT:KEY_RIGHT,y1=KEY_DOWN:KEY_UP \\\n    --ui-buttonmap du=KEY_UP,dd=KEY_DOWN,dl=KEY_LEFT,dr=KEY_RIGHT \\\n    --ui-buttonmap lt=BTN_LEFT,rt=BTN_RIGHT,start=KEY_ESC,back=KEY_LEFTCTRL,y=KEY_SPACE,a=KEY_LEFTCTRL,b=KEY_LEFTALT,x=KEY_LEFTSHIFT \\\n    --ui-buttonmap guide=void,tl=void,lt=void,rt=void,back=void \\\n    --ui-axismap x2=void \n\nfourway= --four-way-restrictor \n\ninvert= --ui-buttonmap du=KEY_DOWN,dd=KEY_UP \n\n### Kill Command\nxboxkill= sudo killall  /dev/null xboxdrv \n\n### Execute the driver with the configuration you need\n# $1 is the name of the emulation, not the name of the software used\n# it is intellivision not jzintv\ncase $1 in\n\n    mame-libretro)\n    ;;\n\n    fba)\n        case $rom in\n             amidar.zip | atetris.zip | puckman.zip ) # Configuration used only for these ROMs\n                $xboxkill\n                joycommand= $basicPS3 $fourway  \n                eval $joycommand\n            ;;\n            *) # Configuration for every other ROMs on this emulator\n                $xboxkill\n                joycommand= $basicPS3  \n                eval $joycommand\n            ;;\n        esac\n    ;;\n\n    daphne)\n    ;;\n\n    scummvm)\n        $xboxkill\n        joycommand= $basicPS3 $scummVM  \n        eval $joycommand\n    ;;\n\n    amiga)\n        $xboxkill\n        joycommand= $basicPS3 $amiga  \n        eval $joycommand\n    ;;\n\n    intellivision)\n    ;;\nesac  We assign to the  joycommand  variable, the list of variables that contains the parameters we need for example  joycommand=\"BasicVAR var1 var2 var3 $\" . The Basic variables must be the first, and   must be the last.  Next, we make the script executable:  sudo chmod +x /opt/retropie/configs/all/runcommand-onstart.sh  For some emulators we could face some problem, i have a PS3 controller recognized as input device  event2 , when i execute xboxdrv the controller is recognized as input device  event3 . The system now see 2 controller device, the PS3 as controller with id 0 and an Xbox360 controller with id 1, for the emulator you are now using the controller for player2 and this will cause some problem, for example you can only start a 2 players game, you can't quit the emulation pushing 'select+start'. To solve the problem we have to specify on  retroarch.cfg  the id of the controller used by player1 and player2.  This is the configuration for Final Burn Alpha, we have to add  input_playerx_joypad_index = \"x\"  for every controller between  input_remapping_directory = \"/opt/retropie/configs/fba/\"  and  #include \"/opt/retropie/configs/all/retroarch.cfg\"  where the first X is the player number, and the secon X is the controller ID.  # Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory =  /opt/retropie/configs/fba/ \n\ninput_player1_joypad_index =  1 \ninput_player2_joypad_index =  0 \ninput_player2_analog_dpad_mode = 1\n\n#include  /opt/retropie/configs/all/retroarch.cfg   If you want this configuration for every retroarch emulators, you have to edit  nano /opt/retropie/configs/all/retroarch.cfg  Now we need to kill xboxdrv when we exit from the emulator, we do this with the onend script  nano /opt/retropie/configs/all/runcommand-onend.sh  #!/bin/sh\nsudo killall  /dev/null xboxdrv  and make it executable  sudo chmod +x /opt/retropie/configs/all/runcommand-onend.sh  ------------------------------------------------------------------------------", 
            "title": "(3B) Expanding Launch Capabilities"
        }, 
        {
            "location": "/RetroArch/", 
            "text": "RetroArch is the Frontend for the Libretro API and makes a up a large portion of the emulators included in RetroPie.\n\n\nThe menu system is a graphical way of making changes to retroach configurations and has 3 different drivers (RGUI, XMB, GLUI) but the RGUI driver is the most common.   RetroArch configurations are kept in a file called retroarch.cfg by default.\n\n\nDefault retroarch.cfg\n\n\n## Skeleton config file for RetroArch\n\n# Save all save files (*.srm) to this directory. This includes related files like .bsv, .rtc, .psrm, etc ...\n# This will be overridden by explicit command line options.\n# savefile_directory =\n\n# Save all save states (*.state) to this directory.\n# This will be overridden by explicit command line options.\n# savestate_directory =\n\n# If set to a directory, Content which is temporarily extracted\n# will be extracted to this directory.\n# extraction_directory =\n\n# Save all input remapping files to this directory.\n# input_remapping_directory =\n\n# Save all playlist files to this directory.\n# playlist_directory =\n\n# If set to a directory, the content history playlist will be saved\n# to this directory.\n# content_history_dir =\n\n# Automatically saves a savestate at the end of RetroArch's lifetime.\n# The path is $SRAM_PATH.auto.\n# RetroArch will automatically load any savestate with this path on startup if savestate_auto_load is set.\n# savestate_auto_save = false\n# savestate_auto_load = true\n\n# Load libretro from a dynamic location for dynamically built RetroArch.\n# This option is mandatory.\n\n# Path to a libretro implementation.\n# libretro_path = \n/path/to/libretro.so\n\n\n# A directory for where to search for libretro core implementations.\n# libretro_directory =\n\n# A directory for where to search for libretro core information.\n# libretro_info_path =\n\n# Sets log level for libretro cores (GET_LOG_INTERFACE).\n# If a log level issued by a libretro core is below libretro_log_level, it is ignored.\n# DEBUG logs are always ignored unless verbose mode is activated (--verbose).\n# DEBUG = 0, INFO = 1, WARN = 2, ERROR = 3.\n# libretro_log_level = 0\n\n# Enable or disable verbosity level of frontend.\n# log_verbosity = false\n\n# If this option is enabled, every content file loaded in RetroArch will be\n# automatically added to a history list.\n# history_list_enable = true\n\n# Enable or disable RetroArch performance counters\n# perfcnt_enable = false\n\n# Path to core options config file.\n# This config file is used to expose core-specific options.\n# It will be written to by RetroArch.\n# A default path will be assigned if not set.\ncore_options_path = /opt/retropie/configs/all/retroarch-core-options.cfg\n\n# Path to content load history file.\n# RetroArch keeps track of all content loaded in the menu and from CLI directly for convenient quick loading.\n# A default path will be assigned if not set.\n# content_history_path =\n\n# Number of entries that will be kept in content history file.\n# content_history_size = 100\n\n# Sets the \nsystem\n directory.\n# Implementations can query for this directory to load BIOSes, system-specific configs, etc.\nsystem_directory = /home/pi/RetroPie/BIOS\n\n# Sets start directory for menu content browser.\n# rgui_browser_directory =\n\n# Content directory. Interacts with RETRO_ENVIRONMENT_GET_CONTENT_DIRECTORY.\n# Usually set by developers who bundle libretro/RetroArch apps to point to assets.\n# content_directory =\n\n# Assets directory. This location is queried by default when menu interfaces try to look for\n# loadable assets, etc.\nassets_directory = /opt/retropie/emulators/retroarch/assets\n\n# Dynamic wallpapers directory. The place to store the wallpapers dynamically\n# loaded by the menu depending on context.\n# dynamic_wallpapers_directory =\n\n# Boxarts directory. To store boxart PNG files.\n# boxarts_directory =\n\n# Sets start directory for menu config browser.\n# rgui_config_directory =\n\n# Show startup screen in menu.\n# Is automatically set to false when seen for the first time.\n# This is only updated in config if config_save_on_exit is set to true, however.\n# rgui_show_start_screen = true\n\n# Flushes config to disk on exit. Useful for menu as settings can be modified.\n# Overwrites the config. #include's and comments are not preserved.\nconfig_save_on_exit = false\n\n# Load up a specific config file based on the core being used.\n# core_specific_config = false\n\n#### Video\n\n# Video driver to use. \ngl\n, \nxvideo\n, \nsdl\n\n# video_driver = \ngl\n\n\n# Which OpenGL context implementation to use.\n# Possible ones for desktop are: glx, x-egl, kms-egl, sdl-gl, wgl.\n# By default, tries to use first suitable driver.\n# video_context_driver =\n\n# Windowed x resolution scale and y resolution scale\n# (Real x res: base_size * xscale * aspect_ratio, real y res: base_size * yscale)\n# video_scale = 3.0\n\n# Fullscreen resolution. Resolution of 0 uses the resolution of the desktop.\n# video_fullscreen_x = 0\n# video_fullscreen_y = 0\n\n# Start in fullscreen. Can be changed at runtime.\n# video_fullscreen = false\n\n# If fullscreen, prefer using a windowed fullscreen mode.\n# video_windowed_fullscreen = true\n\n# Which monitor to prefer. 0 (default) means no particular monitor is preferred, 1 and up (1 being first monitor),\n# suggests RetroArch to use that particular monitor.\n# video_monitor_index = 0\n\n# Forcibly disable composition. Only works in Windows Vista/7 for now.\n# video_disable_composition = false\n\n# Video vsync.\n# video_vsync = true\n\n# Forcibly disable sRGB FBO support. Some Intel OpenGL drivers on Windows\n# have video problems with sRGB FBO support enabled.\n# video_force_srgb_disable = false\n\n# Attempts to hard-synchronize CPU and GPU. Can reduce latency at cost of performance.\n# video_hard_sync = false\n\n# Sets how many frames CPU can run ahead of GPU when using video_hard_sync.\n# Maximum is 3.\n# video_hard_sync_frames = 0\n\n# Sets how many milliseconds to delay after VSync before running the core.\n# Can reduce latency at cost of higher risk of stuttering.\n# Maximum is 15.\n# video_frame_delay = 0\n\n# Inserts a black frame inbetween frames.\n# Useful for 120 Hz monitors who want to play 60 Hz material with eliminated ghosting.\n# video_refresh_rate should still be configured as if it is a 60 Hz monitor (divide refresh rate by 2).\n# video_black_frame_insertion = false\n\n# Use threaded video driver. Using this might improve performance at possible cost of latency and more video stuttering.\nvideo_threaded = true\n\n# Use a shared context for HW rendered libretro cores.\n# Avoids having to assume HW state changes inbetween frames.\n# video_shared_context = false\n\n# Smoothens picture with bilinear filtering. Should be disabled if using pixel shaders.\nvideo_smooth = true\n\n# Forces rendering area to stay equal to content aspect ratio or as defined in video_aspect_ratio.\n# video_force_aspect = true\n\n# Only scales video in integer steps.\n# The base size depends on system-reported geometry and aspect ratio.\n# If video_force_aspect is not set, X/Y will be integer scaled independently.\n# video_scale_integer = false\n\n# A floating point value for video aspect ratio (width / height).\n# If this is not set, aspect ratio is assumed to be automatic.\n# Behavior then is defined by video_aspect_ratio_auto.\n# video_aspect_ratio =\n\n# If this is true and video_aspect_ratio is not set,\n# aspect ratio is decided by libretro implementation.\n# If this is false, 1:1 PAR will always be assumed if video_aspect_ratio is not set.\nvideo_aspect_ratio_auto = true\n\n# Forces cropping of overscanned frames.\n# Exact behavior of this option is implementation specific.\n# video_crop_overscan = true \n\n# Path to shader. Shader can be either Cg, CGP (Cg preset) or GLSL, GLSLP (GLSL preset)\n# video_shader = \n/path/to/shader.{cg,cgp,glsl,glslp}\n\n\n# Load video_shader on startup.\n# Other shaders can still be loaded later in runtime.\n# video_shader_enable = false\n\n# Defines a directory where shaders (Cg, CGP, GLSL) are kept for easy access.\nvideo_shader_dir = /opt/retropie/emulators/retroarch/shader/\n\n# CPU-based video filter. Path to a dynamic library.\n# video_filter =\n\n# Defines a directory where CPU-based video filters are kept.\n# video_filter_dir =\n\n# Path to a font used for rendering messages. This path must be defined to enable fonts.\n# Do note that the _full_ path of the font is necessary!\n# video_font_path = \n\n# Size of the font rendered.\nvideo_font_size = 12\n\n# Enable usage of OSD messages.\n# video_font_enable = true\n\n# Offset for where messages will be placed on screen. Values are in range 0.0 to 1.0 for both x and y values. \n# [0.0, 0.0] maps to the lower left corner of the screen.\n# video_message_pos_x = 0.05\n# video_message_pos_y = 0.05\n\n# Color for message. The value is treated as a hexadecimal value.\n# It is a regular RGB hex number, i.e. red is \nff0000\n.\n# video_message_color = ffffff\n\n# Video refresh rate of your monitor.\n# Used to calculate a suitable audio input rate.\n# video_refresh_rate = 59.95\n\n# Allows libretro cores to set rotation modes.\n# Setting this to false will honor, but ignore this request.\n# This is useful for vertically oriented content where one manually rotates the monitor.\n# video_allow_rotate = true\n\n# Forces a certain rotation of the screen.\n# The rotation is added to rotations which the libretro core sets (see video_allow_rotate).\n# The angle is \nvalue\n * 90 degrees counter-clockwise.\n# video_rotation = 0\n\n#### Audio\n\n# Enable audio.\n# audio_enable = true\n\n# Mutes audio.\n# audio_mute_enable = false\n\n# Audio output samplerate.\n# audio_out_rate = 48000\n\n# Audio resampler backend. Which audio resampler to use.\n# Default will use \nsinc\n.\n# audio_resampler =\n\n# Audio driver backend. Depending on configuration possible candidates are: alsa, pulse, oss, jack, rsound, roar, openal, sdl, xaudio.\n# audio_driver =\n\n# Override the default audio device the audio_driver uses. This is driver dependant. E.g. ALSA wants a PCM device, OSS wants a path (e.g. /dev/dsp), Jack wants portnames (e.g. system:playback1,system:playback_2), and so on ...\n# audio_device =\n\n# Audio DSP plugin that processes audio before it's sent to the driver. Path to a dynamic library.\n# audio_dsp_plugin =\n\n# Directory where DSP plugins are kept.\n# audio_filter_dir =\n\n# Will sync (block) on audio. Recommended.\n# audio_sync = true\n\n# Desired audio latency in milliseconds. Might not be honored if driver can't provide given latency.\n# audio_latency = 64\n\n# Enable audio rate control.\n# audio_rate_control = true\n\n# Controls audio rate control delta. Defines how much input rate can be adjusted dynamically.\n# Input rate = in_rate * (1.0 +/- audio_rate_control_delta)\n# audio_rate_control_delta = 0.005\n\n# Controls maximum audio timing skew. Defines the maximum change in input rate.\n# Input rate = in_rate * (1.0 +/- max_timing_skew)\n# audio_max_timing_skew = 0.05\n\n# Audio volume. Volume is expressed in dB.\n# 0 dB is normal volume. No gain will be applied.\n# Gain can be controlled in runtime with input_volume_up/input_volume_down.\n# audio_volume = 0.0\n\n#### Overlay\n\n# Defines a directory where overlays are kept for easy access.\noverlay_directory = /opt/retropie/emulators/retroarch/overlays\n\n# Enable or disable the current overlay.\n# input_overlay_enable = true\n\n# Hide the current overlay from appearing in menu screens.\n# input_overlay_hide_in_menu = true\n\n# Path to input overlay\n# input_overlay =\n\n# Overlay opacity\n# input_overlay_opacity = 1.0\n\n# Overlay scale\n# input_overlay_scale = 1.0\n\n#### OSK (Onscreen Keyboard) Overlay\n\n# Defines a directory where overlays are kept for easy access.\n# osk_overlay_directory =\n\n# Enable OSK overlay.\n# input_osk_overlay_enable = true\n\n# Path to OSK overlay\n# input_osk_overlay =\n\n# OSK Overlay opacity\n# input_osk_overlay_opacity = 1.0\n\n# OSK Overlay scale\n# input_osk_overlay_scale = 1.0\n\n#### Input\n\n# Input driver. Depending on video driver, it might force a different input driver.\n# input_driver = sdl\n\n# Input device driver. (Valid: linuxraw, sdl, dinput)\ninput_joypad_driver = udev\n\n# Path to input remapping file.\n# input_remapping_path =\n\n# If enabled, overrides the input binds with the remapped binds set for the current core.\n# input_remap_binds_enable = true\n\n# Maximum amount of users supported by RetroArch.\n# input_max_users = 16\n\n# Keyboard layout for input driver if applicable (udev/evdev for now).\n# Syntax is either just layout (e.g. \nno\n), or a layout and variant separated with colon (\nno:nodeadkeys\n).\n# input_keyboard_layout =\n\n# Defines axis threshold. Possible values are [0.0, 1.0]\n# input_axis_threshold = 0.5\n\n# Enable input auto-detection. Will attempt to autoconfigure\n# joypads, Plug-and-Play style.\ninput_autodetect_enable = true\n\n# Show the input descriptors set by the core instead of the\n# default ones.\n# input_descriptor_label_show = true\n\n# Hide input descriptors that were not set by the core.\n# input_descriptor_hide_unbound = false\n\n# Directory for joypad autoconfigs.\n# If a joypad is plugged in, that joypad will be autoconfigured if a config file\n# corresponding to that joypad is present in joypad_autoconfig_dir.\n# Input binds which are made explicit (input_playerN_*_btn/axis) will take priority over autoconfigs.\n# Autoconfigs can be created with retroarch-joyconfig, manually, or with a frontend.\n# Requires input_autodetect_enable to be enabled.\njoypad_autoconfig_dir = /opt/retropie/configs/all/retroarch-joypads/\n\n# Sets which libretro device is used for a user.\n# Devices are indentified with a number.\n# This is normally saved by the menu.\n# Device IDs are found in libretro.h.\n# These settings are overridden by explicit command-line arguments which refer to input devices.\n# None: 0\n# Joypad (RetroPad): 1\n# Mouse: 2\n# Keyboard: 3\n# Generic Lightgun: 4\n# Joypad w/ Analog (RetroPad + Analog sticks): 5\n# Multitap (SNES specific): 257\n# Super Scope (SNES specific): 260\n# Justifier (SNES specific): 516\n# Justifiers (SNES specific): 772\n\n# input_libretro_device_p1 =\n# input_libretro_device_p2 =\n# input_libretro_device_p3 =\n# input_libretro_device_p4 =\n# input_libretro_device_p5 =\n# input_libretro_device_p6 =\n# input_libretro_device_p7 =\n# input_libretro_device_p8 =\n\n# Keyboard input. Will recognize letters (\na\n to \nz\n) and the following special keys (where \nkp_\n\n# is for keypad keys):\n#\n#   left, right, up, down, enter, kp_enter, tab, insert, del, end, home,\n#   rshift, shift, ctrl, alt, space, escape, add, subtract, kp_plus, kp_minus,\n#   f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12,\n#   num0, num1, num2, num3, num4, num5, num6, num7, num8, num9, pageup, pagedown,\n#   keypad0, keypad1, keypad2, keypad3, keypad4, keypad5, keypad6, keypad7, keypad8, keypad9,\n#   period, capslock, numlock, backspace, multiply, divide, print_screen, scroll_lock,\n#   tilde, backquote, pause, quote, comma, minus, slash, semicolon, equals, leftbracket,\n#   backslash, rightbracket, kp_period, kp_equals, rctrl, ralt\n#\n# Keyboard input, Joypad and Joyaxis will all obey the \nnul\n bind, which disables the bind completely, \n# rather than relying on a default.\ninput_player1_a = x\ninput_player1_b = z\ninput_player1_y = a\ninput_player1_x = s\ninput_player1_start = enter\ninput_player1_select = rshift\ninput_player1_l = q\ninput_player1_r = w\ninput_player1_left = left\ninput_player1_right = right\ninput_player1_up = up\ninput_player1_down = down\n# input_player1_l2 =\n# input_player1_r2 =\n# input_player1_l3 =\n# input_player1_r3 =\n\n# Two analog sticks (DualShock-esque).\n# Bound as usual, however, if a real analog axis is bound,\n# it can be read as a true analog.\n# Positive X axis is right, Positive Y axis is down.\n# input_player1_l_x_plus =\n# input_player1_l_x_minus =\n# input_player1_l_y_plus =\n# input_player1_l_y_minus =\n# input_player1_r_x_plus =\n# input_player1_r_x_minus =\n# input_player1_r_y_plus =\n# input_player1_r_y_minus =\n\n# If desired, it is possible to override which joypads are being used for user 1 through 8.\n# First joypad available is 0.\n# input_player1_joypad_index = 0\n# input_player2_joypad_index = 1\n# input_player3_joypad_index = 2\n# input_player4_joypad_index = 3\n# input_player5_joypad_index = 4\n# input_player6_joypad_index = 5\n# input_player7_joypad_index = 6\n# input_player8_joypad_index = 7\n\n# Input device buttons.\n# Figure these out by using RetroArch-Phoenix or retroarch-joyconfig.\n# You can use joypad hats with hnxx, where n is the hat, and xx is a string representing direction. \n# E.g. \nh0up\n\n# input_player1_a_btn =\n# input_player1_b_btn =\n# input_player1_y_btn =\n# input_player1_x_btn =\n# input_player1_start_btn =\n# input_player1_select_btn =\n# input_player1_l_btn =\n# input_player1_r_btn =\n# input_player1_left_btn =\n# input_player1_right_btn =\n# input_player1_up_btn =\n# input_player1_down_btn =\n# input_player1_l2_btn =\n# input_player1_r2_btn =\n# input_player1_l3_btn =\n# input_player1_r3_btn =\n\n# Menu buttons.\n# menu_ok_btn          =\n# menu_cancel_btn      =\n# menu_search_btn      =\n# menu_info_btn        =\n# menu_default_btn     =\n# menu_scroll_down_btn =\n# menu_scroll_up_btn   =\n\n# Axis for RetroArch D-Pad. \n# Needs to be either '+' or '-' in the first character signaling either positive or negative direction of the axis, then the axis number. \n# Do note that every other input option has the corresponding _btn and _axis binds as well; they are omitted here for clarity.\n# input_player1_left_axis =\n# input_player1_right_axis =\n# input_player1_up_axis =\n# input_player1_down_axis =\n\n# Holding the turbo while pressing another button will let the button enter a turbo mode\n# where the button state is modulated with a periodic signal.\n# The modulation stops when the button itself (not turbo button) is released.\n# input_player1_turbo =\n\n# Describes the period and how long of that period a turbo-enabled button should behave.\n# Numbers are described in frames.\n# input_turbo_period = 6\n# input_turbo_duty_cycle = 3\n\n# This goes all the way to user 8 (*_player2_*, *_player3_*, etc), but omitted for clarity.\n# All input binds have corresponding binds for keyboard (none), joykeys (_btn) and joyaxes (_axis) as well.\n\n# Toggles fullscreen.\n# input_toggle_fullscreen = f\n\n# Saves state.\n# input_save_state = f2\n# Loads state.\n# input_load_state = f4\n\n# State slots. With slot set to 0, save state name is *.state (or whatever defined on commandline).\n# When slot is != 0, path will be $path%d, where %d is slot number.\n# input_state_slot_increase = f7\n# input_state_slot_decrease = f6\n\n# Toggles between fast-forwarding and normal speed.\n# input_toggle_fast_forward = space\n\n# Hold for fast-forward. Releasing button disables fast-forward.\n# input_hold_fast_forward = l\n\n# Key to exit RetroArch cleanly. \n# Killing it in any hard way (SIGKILL, etc) will terminate RetroArch without saving RAM, etc.\n# On Unix-likes, SIGINT/SIGTERM allows a clean deinitialization.\ninput_exit_emulator = escape\n\n\n# Applies next and previous shader in directory.\ninput_shader_next = m\ninput_shader_prev = n\n\n# Hold button down to rewind. Rewinding must be enabled.\ninput_rewind = r\n\n# Toggle between recording and not.\n# input_movie_record_toggle = o\n\n# Toggle between paused and non-paused state\n# input_pause_toggle = p\n\n# Frame advance when content is paused\n# input_frame_advance = k\n\n# Reset the content.\n# input_reset = h\n\n# Cheats.\n# input_cheat_index_plus = y\n# input_cheat_index_minus = t\n# input_cheat_toggle = u\n\n# Mute/unmute audio\n# input_audio_mute = f9\n\n# Take screenshot\n# input_screenshot = f8\n\n# Netplay flip users.\n# input_netplay_flip_players = i\n\n# Hold for slowmotion.\n# input_slowmotion = e\n\n# Enable other hotkeys.\n# If this hotkey is bound to either keyboard, joybutton or joyaxis,\n# all other hotkeys will be disabled unless this hotkey is also held at the same time.\n# This is useful for RETRO_KEYBOARD centric implementations\n# which query a large area of the keyboard, where it is not desirable\n# that hotkeys get in the way.\n\n# Alternatively, all hotkeys for keyboard could be disabled by the user.\n# input_enable_hotkey_btn =\n\n# Increases audio volume.\n# input_volume_up = kp_plus\n# Decreases audio volume.\n# input_volume_down = kp_minus\n\n# Toggles to next overlay. Wraps around.\n# input_overlay_next =\n\n# Toggles eject for disks. Used for multiple-disk content.\n# input_disk_eject_toggle =\n\n# Cycles through disk images. Use after ejecting.\n# Complete by toggling eject again.\n# input_disk_next =\n\n# Toggles menu.\n# input_menu_toggle = f1\n\n# RetroPad button combination to toggle menu\n# 0 = none, 1 = L + R + Y + D-Pad Down, 2 = L3 + R3\n# input_menu_toggle_gamepad_combo = 0\n\n# Toggles mouse grab. When mouse is grabbed, RetroArch hides the mouse,\n# and keeps the mouse pointer inside the window to allow relative mouse input\n# to work better.\n# input_grab_mouse_toggle = f11\n\n#### Menu\n\n# Menu driver to use. \nrgui\n, \nlakka\n, etc. \n# menu_driver = \nrgui\n\n\n# If enabled, the libretro core will keep running in the background when we\n# are in the menu.\n# menu_pause_libretro = false\n\n# Enable mouse input inside the menu.\n# menu_mouse_enable = false\n\n# Enable touch input inside the menu.\n# menu_pointer_enable = false\n\n# Shows current date and/or time inside menu.\n# menu_timedate_enable = true\n\n# Shows current core inside menu.\n# menu_core_enable = true\n\n# Path to a .png image to set as menu wallpaper.\n# menu_wallpaper =\n\n# Dynamically load a new wallpaper depending on context.\n# menu_dynamic_wallpaper_enable = false\n\n# Display boxart in place of the content icon if available\n# menu_boxart_enable = false\n\n# Wrap-around toe beginning and/or end if boundary of list reached horizontally\n# menu_navigation_wraparound_horizontal_enable = false\n\n# Wrap-around to beginning and/or end if boundary of list reached vertically\n# menu_navigation_wraparound_vertical_enable = false\n\n# Filter files being show in 'Load Content' by supported extensions\n# menu_navigation_browser_filter_supported_extensions_enable = true\n\n# Collapse subgroup settings into main group to create one big listing of settings\n# per category.\n# menu_collapse_subgroups_enable = false\n\n#### UI\n\n# Suspends the screensaver if set to true. Is a hint that does not necessarily have to be honored\n# by video driver.\n# suspend_screensaver_enable  = true\n\n# Start UI companion driver's interface on boot (if available).\n# ui_companion_start_on_boot  = true\n\n#### Camera\n\n# Override the default camera device the camera driver uses. This is driver dependant.\n# camera_device =\n\n# Override the default privacy permission for cores that want to access camera services. Is \nfalse\n by default.\n# camera_allow = false\n\n#### Location\n\n# Override the default privacy permission for cores that want to access location services. Is \nfalse\n by default.\n# location_allow = false\n\n#### Core Updater\n\n# URL to core update directory on buildbot.\n# core_updater_buildbot_url = \nhttp://buildbot.libretro.com\n\n\n# URL to assets update directory on buildbot.\n# core_updater_buildbot_assets_url = \nhttp://buildbot.libretro.com/assets/\n\n\n# Automatically extract archives that the cores are contained in to the libretro cores directory.\n# core_updater_auto_extract_archive = true\n\n#### Network\n\n# When being client over netplay, use keybinds for user 1.\n# netplay_client_swap_input = false\n\n# The username of the person running RetroArch. This will be used for playing online, for instance.\n# netplay_nickname = \n\n# The amount of delay frames to use for netplay. Increasing this value will increase\n# performance, but introduce more latency.\n# netplay_delay_frames = 0\n\n# Netplay mode for the current user.\n# false is Server, true is Client.\n# netplay_mode = false\n\n# Enable or disable spectator mode for the user during netplay.\n# netplay_spectator_mode_enable = false\n\n# The IP Address of the host to connect to.\n# netplay_ip_address = \n\n# The port of the host IP Address. Can be either a TCP or an UDP port.\n# netplay_ip_port = 55435\n\n#### Misc\n\n# Enable rewinding. This will take a performance hit when playing, so it is disabled by default.\nrewind_enable = false\n\n# Rewinding buffer size in megabytes. Bigger rewinding buffer means you can rewind longer.\n# The buffer should be approx. 20MB per minute of buffer time.\nrewind_buffer_size = 10\n\n# Rewind granularity. When rewinding defined number of frames, you can rewind several frames at a time, increasing the rewinding speed.\nrewind_granularity = 2\n\n# Pause gameplay when window focus is lost.\n# pause_nonactive = true\n\n# Autosaves the non-volatile SRAM at a regular interval. This is disabled by default unless set otherwise.\n# The interval is measured in seconds. A value of 0 disables autosave.\n# autosave_interval =\n\n# Path to content database directory.\n# content_database_path =\n\n# Path to cheat database directory.\n# cheat_database_path =\n\n# Path to XML cheat config, a file which keeps track of which\n# cheat settings are used for individual games.\n# If the file does not exist, it will be created.\n# cheat_settings_path =\n\n# Directory to dump screenshots to.\n# screenshot_directory =\n\n# Records video after CPU video filter.\n# video_post_filter_record = false\n\n# Records output of GPU shaded material if available.\n# video_gpu_record = false\n\n# Screenshots output of GPU shaded material if available.\nvideo_gpu_screenshot = true\n\n# Block SRAM from being overwritten when loading save states.\n# Might potentially lead to buggy games.\n# block_sram_overwrite = false\n\n# When saving a savestate, save state index is automatically increased before\n# it is saved.\n# Also, when loading content, the index will be set to the highest existing index.\n# There is no upper bound on the index.\n# savestate_auto_index = false\n\n# Slowmotion ratio. When slowmotion, content will slow down by factor.\n# slowmotion_ratio = 3.0\n\n# The maximum rate at which content will be run when using fast forward. (E.g. 5.0 for 60 fps content =\n 300 fps cap).\n# RetroArch will go to sleep to ensure that the maximum rate will not be exceeded.\n# Do not rely on this cap to be perfectly accurate.\n# If this is set at 0, then fastforward ratio is unlimited (no FPS cap)\n# fastforward_ratio = 0.0\n\n# Enable stdin/network command interface.\n# network_cmd_enable = false\n# network_cmd_port = 55355\n# stdin_cmd_enable = false\ninput_enable_hotkey = nul\nauto_remaps_enable = true", 
            "title": "RetroArch"
        }, 
        {
            "location": "/RetroArch/#default-retroarchcfg", 
            "text": "## Skeleton config file for RetroArch\n\n# Save all save files (*.srm) to this directory. This includes related files like .bsv, .rtc, .psrm, etc ...\n# This will be overridden by explicit command line options.\n# savefile_directory =\n\n# Save all save states (*.state) to this directory.\n# This will be overridden by explicit command line options.\n# savestate_directory =\n\n# If set to a directory, Content which is temporarily extracted\n# will be extracted to this directory.\n# extraction_directory =\n\n# Save all input remapping files to this directory.\n# input_remapping_directory =\n\n# Save all playlist files to this directory.\n# playlist_directory =\n\n# If set to a directory, the content history playlist will be saved\n# to this directory.\n# content_history_dir =\n\n# Automatically saves a savestate at the end of RetroArch's lifetime.\n# The path is $SRAM_PATH.auto.\n# RetroArch will automatically load any savestate with this path on startup if savestate_auto_load is set.\n# savestate_auto_save = false\n# savestate_auto_load = true\n\n# Load libretro from a dynamic location for dynamically built RetroArch.\n# This option is mandatory.\n\n# Path to a libretro implementation.\n# libretro_path =  /path/to/libretro.so \n\n# A directory for where to search for libretro core implementations.\n# libretro_directory =\n\n# A directory for where to search for libretro core information.\n# libretro_info_path =\n\n# Sets log level for libretro cores (GET_LOG_INTERFACE).\n# If a log level issued by a libretro core is below libretro_log_level, it is ignored.\n# DEBUG logs are always ignored unless verbose mode is activated (--verbose).\n# DEBUG = 0, INFO = 1, WARN = 2, ERROR = 3.\n# libretro_log_level = 0\n\n# Enable or disable verbosity level of frontend.\n# log_verbosity = false\n\n# If this option is enabled, every content file loaded in RetroArch will be\n# automatically added to a history list.\n# history_list_enable = true\n\n# Enable or disable RetroArch performance counters\n# perfcnt_enable = false\n\n# Path to core options config file.\n# This config file is used to expose core-specific options.\n# It will be written to by RetroArch.\n# A default path will be assigned if not set.\ncore_options_path = /opt/retropie/configs/all/retroarch-core-options.cfg\n\n# Path to content load history file.\n# RetroArch keeps track of all content loaded in the menu and from CLI directly for convenient quick loading.\n# A default path will be assigned if not set.\n# content_history_path =\n\n# Number of entries that will be kept in content history file.\n# content_history_size = 100\n\n# Sets the  system  directory.\n# Implementations can query for this directory to load BIOSes, system-specific configs, etc.\nsystem_directory = /home/pi/RetroPie/BIOS\n\n# Sets start directory for menu content browser.\n# rgui_browser_directory =\n\n# Content directory. Interacts with RETRO_ENVIRONMENT_GET_CONTENT_DIRECTORY.\n# Usually set by developers who bundle libretro/RetroArch apps to point to assets.\n# content_directory =\n\n# Assets directory. This location is queried by default when menu interfaces try to look for\n# loadable assets, etc.\nassets_directory = /opt/retropie/emulators/retroarch/assets\n\n# Dynamic wallpapers directory. The place to store the wallpapers dynamically\n# loaded by the menu depending on context.\n# dynamic_wallpapers_directory =\n\n# Boxarts directory. To store boxart PNG files.\n# boxarts_directory =\n\n# Sets start directory for menu config browser.\n# rgui_config_directory =\n\n# Show startup screen in menu.\n# Is automatically set to false when seen for the first time.\n# This is only updated in config if config_save_on_exit is set to true, however.\n# rgui_show_start_screen = true\n\n# Flushes config to disk on exit. Useful for menu as settings can be modified.\n# Overwrites the config. #include's and comments are not preserved.\nconfig_save_on_exit = false\n\n# Load up a specific config file based on the core being used.\n# core_specific_config = false\n\n#### Video\n\n# Video driver to use.  gl ,  xvideo ,  sdl \n# video_driver =  gl \n\n# Which OpenGL context implementation to use.\n# Possible ones for desktop are: glx, x-egl, kms-egl, sdl-gl, wgl.\n# By default, tries to use first suitable driver.\n# video_context_driver =\n\n# Windowed x resolution scale and y resolution scale\n# (Real x res: base_size * xscale * aspect_ratio, real y res: base_size * yscale)\n# video_scale = 3.0\n\n# Fullscreen resolution. Resolution of 0 uses the resolution of the desktop.\n# video_fullscreen_x = 0\n# video_fullscreen_y = 0\n\n# Start in fullscreen. Can be changed at runtime.\n# video_fullscreen = false\n\n# If fullscreen, prefer using a windowed fullscreen mode.\n# video_windowed_fullscreen = true\n\n# Which monitor to prefer. 0 (default) means no particular monitor is preferred, 1 and up (1 being first monitor),\n# suggests RetroArch to use that particular monitor.\n# video_monitor_index = 0\n\n# Forcibly disable composition. Only works in Windows Vista/7 for now.\n# video_disable_composition = false\n\n# Video vsync.\n# video_vsync = true\n\n# Forcibly disable sRGB FBO support. Some Intel OpenGL drivers on Windows\n# have video problems with sRGB FBO support enabled.\n# video_force_srgb_disable = false\n\n# Attempts to hard-synchronize CPU and GPU. Can reduce latency at cost of performance.\n# video_hard_sync = false\n\n# Sets how many frames CPU can run ahead of GPU when using video_hard_sync.\n# Maximum is 3.\n# video_hard_sync_frames = 0\n\n# Sets how many milliseconds to delay after VSync before running the core.\n# Can reduce latency at cost of higher risk of stuttering.\n# Maximum is 15.\n# video_frame_delay = 0\n\n# Inserts a black frame inbetween frames.\n# Useful for 120 Hz monitors who want to play 60 Hz material with eliminated ghosting.\n# video_refresh_rate should still be configured as if it is a 60 Hz monitor (divide refresh rate by 2).\n# video_black_frame_insertion = false\n\n# Use threaded video driver. Using this might improve performance at possible cost of latency and more video stuttering.\nvideo_threaded = true\n\n# Use a shared context for HW rendered libretro cores.\n# Avoids having to assume HW state changes inbetween frames.\n# video_shared_context = false\n\n# Smoothens picture with bilinear filtering. Should be disabled if using pixel shaders.\nvideo_smooth = true\n\n# Forces rendering area to stay equal to content aspect ratio or as defined in video_aspect_ratio.\n# video_force_aspect = true\n\n# Only scales video in integer steps.\n# The base size depends on system-reported geometry and aspect ratio.\n# If video_force_aspect is not set, X/Y will be integer scaled independently.\n# video_scale_integer = false\n\n# A floating point value for video aspect ratio (width / height).\n# If this is not set, aspect ratio is assumed to be automatic.\n# Behavior then is defined by video_aspect_ratio_auto.\n# video_aspect_ratio =\n\n# If this is true and video_aspect_ratio is not set,\n# aspect ratio is decided by libretro implementation.\n# If this is false, 1:1 PAR will always be assumed if video_aspect_ratio is not set.\nvideo_aspect_ratio_auto = true\n\n# Forces cropping of overscanned frames.\n# Exact behavior of this option is implementation specific.\n# video_crop_overscan = true \n\n# Path to shader. Shader can be either Cg, CGP (Cg preset) or GLSL, GLSLP (GLSL preset)\n# video_shader =  /path/to/shader.{cg,cgp,glsl,glslp} \n\n# Load video_shader on startup.\n# Other shaders can still be loaded later in runtime.\n# video_shader_enable = false\n\n# Defines a directory where shaders (Cg, CGP, GLSL) are kept for easy access.\nvideo_shader_dir = /opt/retropie/emulators/retroarch/shader/\n\n# CPU-based video filter. Path to a dynamic library.\n# video_filter =\n\n# Defines a directory where CPU-based video filters are kept.\n# video_filter_dir =\n\n# Path to a font used for rendering messages. This path must be defined to enable fonts.\n# Do note that the _full_ path of the font is necessary!\n# video_font_path = \n\n# Size of the font rendered.\nvideo_font_size = 12\n\n# Enable usage of OSD messages.\n# video_font_enable = true\n\n# Offset for where messages will be placed on screen. Values are in range 0.0 to 1.0 for both x and y values. \n# [0.0, 0.0] maps to the lower left corner of the screen.\n# video_message_pos_x = 0.05\n# video_message_pos_y = 0.05\n\n# Color for message. The value is treated as a hexadecimal value.\n# It is a regular RGB hex number, i.e. red is  ff0000 .\n# video_message_color = ffffff\n\n# Video refresh rate of your monitor.\n# Used to calculate a suitable audio input rate.\n# video_refresh_rate = 59.95\n\n# Allows libretro cores to set rotation modes.\n# Setting this to false will honor, but ignore this request.\n# This is useful for vertically oriented content where one manually rotates the monitor.\n# video_allow_rotate = true\n\n# Forces a certain rotation of the screen.\n# The rotation is added to rotations which the libretro core sets (see video_allow_rotate).\n# The angle is  value  * 90 degrees counter-clockwise.\n# video_rotation = 0\n\n#### Audio\n\n# Enable audio.\n# audio_enable = true\n\n# Mutes audio.\n# audio_mute_enable = false\n\n# Audio output samplerate.\n# audio_out_rate = 48000\n\n# Audio resampler backend. Which audio resampler to use.\n# Default will use  sinc .\n# audio_resampler =\n\n# Audio driver backend. Depending on configuration possible candidates are: alsa, pulse, oss, jack, rsound, roar, openal, sdl, xaudio.\n# audio_driver =\n\n# Override the default audio device the audio_driver uses. This is driver dependant. E.g. ALSA wants a PCM device, OSS wants a path (e.g. /dev/dsp), Jack wants portnames (e.g. system:playback1,system:playback_2), and so on ...\n# audio_device =\n\n# Audio DSP plugin that processes audio before it's sent to the driver. Path to a dynamic library.\n# audio_dsp_plugin =\n\n# Directory where DSP plugins are kept.\n# audio_filter_dir =\n\n# Will sync (block) on audio. Recommended.\n# audio_sync = true\n\n# Desired audio latency in milliseconds. Might not be honored if driver can't provide given latency.\n# audio_latency = 64\n\n# Enable audio rate control.\n# audio_rate_control = true\n\n# Controls audio rate control delta. Defines how much input rate can be adjusted dynamically.\n# Input rate = in_rate * (1.0 +/- audio_rate_control_delta)\n# audio_rate_control_delta = 0.005\n\n# Controls maximum audio timing skew. Defines the maximum change in input rate.\n# Input rate = in_rate * (1.0 +/- max_timing_skew)\n# audio_max_timing_skew = 0.05\n\n# Audio volume. Volume is expressed in dB.\n# 0 dB is normal volume. No gain will be applied.\n# Gain can be controlled in runtime with input_volume_up/input_volume_down.\n# audio_volume = 0.0\n\n#### Overlay\n\n# Defines a directory where overlays are kept for easy access.\noverlay_directory = /opt/retropie/emulators/retroarch/overlays\n\n# Enable or disable the current overlay.\n# input_overlay_enable = true\n\n# Hide the current overlay from appearing in menu screens.\n# input_overlay_hide_in_menu = true\n\n# Path to input overlay\n# input_overlay =\n\n# Overlay opacity\n# input_overlay_opacity = 1.0\n\n# Overlay scale\n# input_overlay_scale = 1.0\n\n#### OSK (Onscreen Keyboard) Overlay\n\n# Defines a directory where overlays are kept for easy access.\n# osk_overlay_directory =\n\n# Enable OSK overlay.\n# input_osk_overlay_enable = true\n\n# Path to OSK overlay\n# input_osk_overlay =\n\n# OSK Overlay opacity\n# input_osk_overlay_opacity = 1.0\n\n# OSK Overlay scale\n# input_osk_overlay_scale = 1.0\n\n#### Input\n\n# Input driver. Depending on video driver, it might force a different input driver.\n# input_driver = sdl\n\n# Input device driver. (Valid: linuxraw, sdl, dinput)\ninput_joypad_driver = udev\n\n# Path to input remapping file.\n# input_remapping_path =\n\n# If enabled, overrides the input binds with the remapped binds set for the current core.\n# input_remap_binds_enable = true\n\n# Maximum amount of users supported by RetroArch.\n# input_max_users = 16\n\n# Keyboard layout for input driver if applicable (udev/evdev for now).\n# Syntax is either just layout (e.g.  no ), or a layout and variant separated with colon ( no:nodeadkeys ).\n# input_keyboard_layout =\n\n# Defines axis threshold. Possible values are [0.0, 1.0]\n# input_axis_threshold = 0.5\n\n# Enable input auto-detection. Will attempt to autoconfigure\n# joypads, Plug-and-Play style.\ninput_autodetect_enable = true\n\n# Show the input descriptors set by the core instead of the\n# default ones.\n# input_descriptor_label_show = true\n\n# Hide input descriptors that were not set by the core.\n# input_descriptor_hide_unbound = false\n\n# Directory for joypad autoconfigs.\n# If a joypad is plugged in, that joypad will be autoconfigured if a config file\n# corresponding to that joypad is present in joypad_autoconfig_dir.\n# Input binds which are made explicit (input_playerN_*_btn/axis) will take priority over autoconfigs.\n# Autoconfigs can be created with retroarch-joyconfig, manually, or with a frontend.\n# Requires input_autodetect_enable to be enabled.\njoypad_autoconfig_dir = /opt/retropie/configs/all/retroarch-joypads/\n\n# Sets which libretro device is used for a user.\n# Devices are indentified with a number.\n# This is normally saved by the menu.\n# Device IDs are found in libretro.h.\n# These settings are overridden by explicit command-line arguments which refer to input devices.\n# None: 0\n# Joypad (RetroPad): 1\n# Mouse: 2\n# Keyboard: 3\n# Generic Lightgun: 4\n# Joypad w/ Analog (RetroPad + Analog sticks): 5\n# Multitap (SNES specific): 257\n# Super Scope (SNES specific): 260\n# Justifier (SNES specific): 516\n# Justifiers (SNES specific): 772\n\n# input_libretro_device_p1 =\n# input_libretro_device_p2 =\n# input_libretro_device_p3 =\n# input_libretro_device_p4 =\n# input_libretro_device_p5 =\n# input_libretro_device_p6 =\n# input_libretro_device_p7 =\n# input_libretro_device_p8 =\n\n# Keyboard input. Will recognize letters ( a  to  z ) and the following special keys (where  kp_ \n# is for keypad keys):\n#\n#   left, right, up, down, enter, kp_enter, tab, insert, del, end, home,\n#   rshift, shift, ctrl, alt, space, escape, add, subtract, kp_plus, kp_minus,\n#   f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12,\n#   num0, num1, num2, num3, num4, num5, num6, num7, num8, num9, pageup, pagedown,\n#   keypad0, keypad1, keypad2, keypad3, keypad4, keypad5, keypad6, keypad7, keypad8, keypad9,\n#   period, capslock, numlock, backspace, multiply, divide, print_screen, scroll_lock,\n#   tilde, backquote, pause, quote, comma, minus, slash, semicolon, equals, leftbracket,\n#   backslash, rightbracket, kp_period, kp_equals, rctrl, ralt\n#\n# Keyboard input, Joypad and Joyaxis will all obey the  nul  bind, which disables the bind completely, \n# rather than relying on a default.\ninput_player1_a = x\ninput_player1_b = z\ninput_player1_y = a\ninput_player1_x = s\ninput_player1_start = enter\ninput_player1_select = rshift\ninput_player1_l = q\ninput_player1_r = w\ninput_player1_left = left\ninput_player1_right = right\ninput_player1_up = up\ninput_player1_down = down\n# input_player1_l2 =\n# input_player1_r2 =\n# input_player1_l3 =\n# input_player1_r3 =\n\n# Two analog sticks (DualShock-esque).\n# Bound as usual, however, if a real analog axis is bound,\n# it can be read as a true analog.\n# Positive X axis is right, Positive Y axis is down.\n# input_player1_l_x_plus =\n# input_player1_l_x_minus =\n# input_player1_l_y_plus =\n# input_player1_l_y_minus =\n# input_player1_r_x_plus =\n# input_player1_r_x_minus =\n# input_player1_r_y_plus =\n# input_player1_r_y_minus =\n\n# If desired, it is possible to override which joypads are being used for user 1 through 8.\n# First joypad available is 0.\n# input_player1_joypad_index = 0\n# input_player2_joypad_index = 1\n# input_player3_joypad_index = 2\n# input_player4_joypad_index = 3\n# input_player5_joypad_index = 4\n# input_player6_joypad_index = 5\n# input_player7_joypad_index = 6\n# input_player8_joypad_index = 7\n\n# Input device buttons.\n# Figure these out by using RetroArch-Phoenix or retroarch-joyconfig.\n# You can use joypad hats with hnxx, where n is the hat, and xx is a string representing direction. \n# E.g.  h0up \n# input_player1_a_btn =\n# input_player1_b_btn =\n# input_player1_y_btn =\n# input_player1_x_btn =\n# input_player1_start_btn =\n# input_player1_select_btn =\n# input_player1_l_btn =\n# input_player1_r_btn =\n# input_player1_left_btn =\n# input_player1_right_btn =\n# input_player1_up_btn =\n# input_player1_down_btn =\n# input_player1_l2_btn =\n# input_player1_r2_btn =\n# input_player1_l3_btn =\n# input_player1_r3_btn =\n\n# Menu buttons.\n# menu_ok_btn          =\n# menu_cancel_btn      =\n# menu_search_btn      =\n# menu_info_btn        =\n# menu_default_btn     =\n# menu_scroll_down_btn =\n# menu_scroll_up_btn   =\n\n# Axis for RetroArch D-Pad. \n# Needs to be either '+' or '-' in the first character signaling either positive or negative direction of the axis, then the axis number. \n# Do note that every other input option has the corresponding _btn and _axis binds as well; they are omitted here for clarity.\n# input_player1_left_axis =\n# input_player1_right_axis =\n# input_player1_up_axis =\n# input_player1_down_axis =\n\n# Holding the turbo while pressing another button will let the button enter a turbo mode\n# where the button state is modulated with a periodic signal.\n# The modulation stops when the button itself (not turbo button) is released.\n# input_player1_turbo =\n\n# Describes the period and how long of that period a turbo-enabled button should behave.\n# Numbers are described in frames.\n# input_turbo_period = 6\n# input_turbo_duty_cycle = 3\n\n# This goes all the way to user 8 (*_player2_*, *_player3_*, etc), but omitted for clarity.\n# All input binds have corresponding binds for keyboard (none), joykeys (_btn) and joyaxes (_axis) as well.\n\n# Toggles fullscreen.\n# input_toggle_fullscreen = f\n\n# Saves state.\n# input_save_state = f2\n# Loads state.\n# input_load_state = f4\n\n# State slots. With slot set to 0, save state name is *.state (or whatever defined on commandline).\n# When slot is != 0, path will be $path%d, where %d is slot number.\n# input_state_slot_increase = f7\n# input_state_slot_decrease = f6\n\n# Toggles between fast-forwarding and normal speed.\n# input_toggle_fast_forward = space\n\n# Hold for fast-forward. Releasing button disables fast-forward.\n# input_hold_fast_forward = l\n\n# Key to exit RetroArch cleanly. \n# Killing it in any hard way (SIGKILL, etc) will terminate RetroArch without saving RAM, etc.\n# On Unix-likes, SIGINT/SIGTERM allows a clean deinitialization.\ninput_exit_emulator = escape\n\n\n# Applies next and previous shader in directory.\ninput_shader_next = m\ninput_shader_prev = n\n\n# Hold button down to rewind. Rewinding must be enabled.\ninput_rewind = r\n\n# Toggle between recording and not.\n# input_movie_record_toggle = o\n\n# Toggle between paused and non-paused state\n# input_pause_toggle = p\n\n# Frame advance when content is paused\n# input_frame_advance = k\n\n# Reset the content.\n# input_reset = h\n\n# Cheats.\n# input_cheat_index_plus = y\n# input_cheat_index_minus = t\n# input_cheat_toggle = u\n\n# Mute/unmute audio\n# input_audio_mute = f9\n\n# Take screenshot\n# input_screenshot = f8\n\n# Netplay flip users.\n# input_netplay_flip_players = i\n\n# Hold for slowmotion.\n# input_slowmotion = e\n\n# Enable other hotkeys.\n# If this hotkey is bound to either keyboard, joybutton or joyaxis,\n# all other hotkeys will be disabled unless this hotkey is also held at the same time.\n# This is useful for RETRO_KEYBOARD centric implementations\n# which query a large area of the keyboard, where it is not desirable\n# that hotkeys get in the way.\n\n# Alternatively, all hotkeys for keyboard could be disabled by the user.\n# input_enable_hotkey_btn =\n\n# Increases audio volume.\n# input_volume_up = kp_plus\n# Decreases audio volume.\n# input_volume_down = kp_minus\n\n# Toggles to next overlay. Wraps around.\n# input_overlay_next =\n\n# Toggles eject for disks. Used for multiple-disk content.\n# input_disk_eject_toggle =\n\n# Cycles through disk images. Use after ejecting.\n# Complete by toggling eject again.\n# input_disk_next =\n\n# Toggles menu.\n# input_menu_toggle = f1\n\n# RetroPad button combination to toggle menu\n# 0 = none, 1 = L + R + Y + D-Pad Down, 2 = L3 + R3\n# input_menu_toggle_gamepad_combo = 0\n\n# Toggles mouse grab. When mouse is grabbed, RetroArch hides the mouse,\n# and keeps the mouse pointer inside the window to allow relative mouse input\n# to work better.\n# input_grab_mouse_toggle = f11\n\n#### Menu\n\n# Menu driver to use.  rgui ,  lakka , etc. \n# menu_driver =  rgui \n\n# If enabled, the libretro core will keep running in the background when we\n# are in the menu.\n# menu_pause_libretro = false\n\n# Enable mouse input inside the menu.\n# menu_mouse_enable = false\n\n# Enable touch input inside the menu.\n# menu_pointer_enable = false\n\n# Shows current date and/or time inside menu.\n# menu_timedate_enable = true\n\n# Shows current core inside menu.\n# menu_core_enable = true\n\n# Path to a .png image to set as menu wallpaper.\n# menu_wallpaper =\n\n# Dynamically load a new wallpaper depending on context.\n# menu_dynamic_wallpaper_enable = false\n\n# Display boxart in place of the content icon if available\n# menu_boxart_enable = false\n\n# Wrap-around toe beginning and/or end if boundary of list reached horizontally\n# menu_navigation_wraparound_horizontal_enable = false\n\n# Wrap-around to beginning and/or end if boundary of list reached vertically\n# menu_navigation_wraparound_vertical_enable = false\n\n# Filter files being show in 'Load Content' by supported extensions\n# menu_navigation_browser_filter_supported_extensions_enable = true\n\n# Collapse subgroup settings into main group to create one big listing of settings\n# per category.\n# menu_collapse_subgroups_enable = false\n\n#### UI\n\n# Suspends the screensaver if set to true. Is a hint that does not necessarily have to be honored\n# by video driver.\n# suspend_screensaver_enable  = true\n\n# Start UI companion driver's interface on boot (if available).\n# ui_companion_start_on_boot  = true\n\n#### Camera\n\n# Override the default camera device the camera driver uses. This is driver dependant.\n# camera_device =\n\n# Override the default privacy permission for cores that want to access camera services. Is  false  by default.\n# camera_allow = false\n\n#### Location\n\n# Override the default privacy permission for cores that want to access location services. Is  false  by default.\n# location_allow = false\n\n#### Core Updater\n\n# URL to core update directory on buildbot.\n# core_updater_buildbot_url =  http://buildbot.libretro.com \n\n# URL to assets update directory on buildbot.\n# core_updater_buildbot_assets_url =  http://buildbot.libretro.com/assets/ \n\n# Automatically extract archives that the cores are contained in to the libretro cores directory.\n# core_updater_auto_extract_archive = true\n\n#### Network\n\n# When being client over netplay, use keybinds for user 1.\n# netplay_client_swap_input = false\n\n# The username of the person running RetroArch. This will be used for playing online, for instance.\n# netplay_nickname = \n\n# The amount of delay frames to use for netplay. Increasing this value will increase\n# performance, but introduce more latency.\n# netplay_delay_frames = 0\n\n# Netplay mode for the current user.\n# false is Server, true is Client.\n# netplay_mode = false\n\n# Enable or disable spectator mode for the user during netplay.\n# netplay_spectator_mode_enable = false\n\n# The IP Address of the host to connect to.\n# netplay_ip_address = \n\n# The port of the host IP Address. Can be either a TCP or an UDP port.\n# netplay_ip_port = 55435\n\n#### Misc\n\n# Enable rewinding. This will take a performance hit when playing, so it is disabled by default.\nrewind_enable = false\n\n# Rewinding buffer size in megabytes. Bigger rewinding buffer means you can rewind longer.\n# The buffer should be approx. 20MB per minute of buffer time.\nrewind_buffer_size = 10\n\n# Rewind granularity. When rewinding defined number of frames, you can rewind several frames at a time, increasing the rewinding speed.\nrewind_granularity = 2\n\n# Pause gameplay when window focus is lost.\n# pause_nonactive = true\n\n# Autosaves the non-volatile SRAM at a regular interval. This is disabled by default unless set otherwise.\n# The interval is measured in seconds. A value of 0 disables autosave.\n# autosave_interval =\n\n# Path to content database directory.\n# content_database_path =\n\n# Path to cheat database directory.\n# cheat_database_path =\n\n# Path to XML cheat config, a file which keeps track of which\n# cheat settings are used for individual games.\n# If the file does not exist, it will be created.\n# cheat_settings_path =\n\n# Directory to dump screenshots to.\n# screenshot_directory =\n\n# Records video after CPU video filter.\n# video_post_filter_record = false\n\n# Records output of GPU shaded material if available.\n# video_gpu_record = false\n\n# Screenshots output of GPU shaded material if available.\nvideo_gpu_screenshot = true\n\n# Block SRAM from being overwritten when loading save states.\n# Might potentially lead to buggy games.\n# block_sram_overwrite = false\n\n# When saving a savestate, save state index is automatically increased before\n# it is saved.\n# Also, when loading content, the index will be set to the highest existing index.\n# There is no upper bound on the index.\n# savestate_auto_index = false\n\n# Slowmotion ratio. When slowmotion, content will slow down by factor.\n# slowmotion_ratio = 3.0\n\n# The maximum rate at which content will be run when using fast forward. (E.g. 5.0 for 60 fps content =  300 fps cap).\n# RetroArch will go to sleep to ensure that the maximum rate will not be exceeded.\n# Do not rely on this cap to be perfectly accurate.\n# If this is set at 0, then fastforward ratio is unlimited (no FPS cap)\n# fastforward_ratio = 0.0\n\n# Enable stdin/network command interface.\n# network_cmd_enable = false\n# network_cmd_port = 55355\n# stdin_cmd_enable = false\ninput_enable_hotkey = nul\nauto_remaps_enable = true", 
            "title": "Default retroarch.cfg"
        }, 
        {
            "location": "/RetroArch-Configuration/", 
            "text": "RetroArch is the official front end for the \nlibretro API\n. RetroArch and libretro provide a way to take an existing emulator and load that emulator as a library or \"core\". RetroArch then handles the input (controls) and output (graphics and audio) while the emulator core handles the emulation of the original system. With a few simple changes to the emulator source code, almost any existing emulator could become a libretro core.\n\n\nIn RetroPie, the libretro emulator cores are identified with a \nlr-\n in front of their name. For example, \nlr-snes9x-next\n is the libretro core of the SNES emulator called snes9x.\n\n\nRetroArch and libretro provide ability to configure controllers once for many emulators instead of having to configure each emulator individually. However, RetroArch also provides the freedom to configure specific emulators individually and even individual games differently if the user wants. This allows a specific setting or button mapping for a certain console or even just for a certain game.\n\n\nFor emulators which are not libretro cores, there are emulator-specific configurations under the respective system's wiki page.\n\n\nThe RetroPad concept\n\n\nWhen you configure your controller in EmulationStation, the RetroPie setup script automatically configures RetroArch with the same controls.\n\n\nRetroArch controls map real-world controller buttons to a virtual controller called a \"RetroPad\". A RetroPad does not exist in real life, it's a concept only within RetroArch. A RetroPad has an ABXY layout like a SNES controller plus four shoulder buttons and dual analog sticks like a Sony DualShock.\n\n\nYou don't have to map all of the RetroPad buttons to a real world button. If your real controller has less buttons than a DualShock, then the virtual RetroPad also has less buttons, that's perfectly fine.\n\n\nAs RetroArch starts an emulator core, it maps the RetroPad configuration to the emulated system's original controls. The mapping for many consoles is represented by the pictures below and on each system's wiki page. If you wish, you can reconfigure this control mapping, either for all RetroArch, for a specific system, or even for a specific ROM.\n\n\nRetroarch Controls\n\n\nThere are 3 main ways to configure input for RetroArch:\n\n\n\n\nAutoconfigurations\n - made in EmulationStation\n\n\nHardcoded Configurations\n - made by editing \nretroarch.cfg\n file(s)\n\n\nCore Input Remapping\n - an easy way to do specific control configurations for specific cores, made in the RetroArch RGUI\n\n\n\n\nAutoConfigurations\n\n\nRetroArch controls have been integrated into EmulationStation and will be the first thing you see when you boot from the RetroPie SD image the first time. You can also access it from the start menu within EmulationStation under the Configure Input option. Your joypad is automagically configured for libretro (RetroArch) emulators when you configure your controller in EmulationStation. You'll know if your controller has been automagically configured if you see a flash of yellow text on the bottom of the screen with your gamepad ID when you start a game.  \n\n\nThe following diagrams are for the 3 most common controllers: Super Nintendo, Xbox 360, and PlayStation 3. They can be used as a reference when configuring your controllers. Each emulator page on the wiki has a diagram of the original controller for its respective console that will correspond to the same inputs listed below.\n\n\n\n\n\n\n\n\nAfter you've configured your controller the autoconfig will be created here:\n\n\n/opt/retropie/configs/all/retroarch-joypads\n\n\n\n\nThis is an example config for a USB SNES controller\n\n\ninput_device = \nUSB gamepad           \n\ninput_driver = \nudev\n\ninput_r_btn = \n5\n\ninput_save_state_btn = \n5\n\ninput_start_btn = \n9\n\ninput_exit_emulator_btn = \n9\n\ninput_l_btn = \n4\n\ninput_load_state_btn = \n4\n\ninput_up_axis = \n-1\n\ninput_a_btn = \n1\n\ninput_b_btn = \n2\n\ninput_reset_btn = \n2\n\ninput_down_axis = \n+1\n\ninput_right_axis = \n+0\n\ninput_state_slot_increase_axis = \n+0\n\ninput_x_btn = \n0\n\ninput_menu_toggle_btn = \n0\n\ninput_select_btn = \n8\n\ninput_enable_hotkey_btn = \n8\n\ninput_y_btn = \n3\n\ninput_left_axis = \n-0\n\ninput_state_slot_decrease_axis = \n-0\n\n\n\n\n\nAs seen above in the config for the USB SNES controller, each input on the controller has an associated value.  When setting up the controller in EmulationStation, these values are then assigned a respective action on RetroArch.  \n\n\nFor example, suppose the \"A\" button on a USB SNES controller has a value of \"1.\"  When setting up the controller, EmulationStation would prompt you to press the \"A\" button on your controller.  Pressing the \"A\" button would then record into the config file as \ninput_a_btn = \"1\"\n, so RetroArch will know that the \"A\" button on your physical controller corresponds to the \"A\" button on RetroArch's virtual controller, the RetroPad.  Therefore, the next time you play a game such as Super Mario Bros. pressing the \"A\" button will tell RetroArch to press the \"A\" button on its RetroPad, causing Mario to jump.  If you accidentally pressed the \"B\" button with a value of \"2\" during setup when it prompted for \"A,\" then it would be recorded into the config file as \ninput_a_btn = \"2\"\n, so if you want to jump in Super Mario Bros., you would have to press \"B\" on your controller.\n\n\nHotkeys\n\n\nHotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. The following defaults are set automatically the first time you set up your controller from EmulationStation (the numbers will vary depending the controller you use).\n\n\nDefault joypad hotkeys:\n\n\n\n\n\n\n\n\nHotkeys\n\n\nAction\n\n\nCode Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect\n\n\nHotkey\n\n\ninput_enable_hotkey_btn = \"6\"\n\n\n\n\n\n\n\n\n\n\nSelect+Start\n\n\nExit\n\n\ninput_exit_emulator_btn = \"7\"\n\n\n\n\n\n\n\n\n\n\nSelect+Right Shoulder\n\n\nSave\n\n\ninput_save_state_btn = \"5\"\n\n\n\n\n\n\n\n\n\n\nSelect+Left Shoulder\n\n\nLoad\n\n\ninput_load_state_btn = \"4\"\n\n\n\n\n\n\n\n\n\n\nSelect+Right\n\n\nInput State Slot Increase\n\n\ninput_state_slot_increase_btn = \"h0right\"\n\n\n\n\n\n\n\n\n\n\nSelect+Left\n\n\nInput State Slot Decrease\n\n\ninput_state_slot_decrease_btn = \"h0left\"\n\n\n\n\n\n\n\n\n\n\nSelect+X\n\n\nRGUI Menu\n\n\ninput_menu_toggle_btn = \"3\"\n\n\n\n\n\n\n\n\n\n\nSelect+B\n\n\nReset\n\n\ninput_reset_btn = \"0\"\n\n\n\n\n\n\n\n\n\n\n\n\nDetermining Button Values\n\n\nIf you want to edit the entries in the .cfg file for your controller, you will need to know the values corresponding to the buttons on your controller.  Usually the relationship between the two can be deduced by looking at the file and noting the entries' names along with the values next to them, assuming that the values have not been jumbled from previous edits or been mixed up due to unknown issues.  For example, the USB gamepad above has an entry for \ninput_x_btn = \"0\"\n, indicating that the \"X\" button on the controller (or the button that you associated as \"X\" during controller setup in EmulationStation) has a value of \"0.\"\n\n\nOn the other hand, maybe you are not sure if the values in the .cfg file is correct or the file is missing entries for buttons that are available on your own controller, such as a \"Home\" button.  You can run \njstest\n (joystick test) in the terminal by selecting \nQuit EmulationStation\n (a keyboard will be required for the following steps).\n\n\nIn the terminal, type and enter   \n\n\njstest /dev/input/js0\n     \n\n\nReplace js0 with js1, js2, js3, etc. as needed if not detected.\n\n\nA multitude of rows and columns should appear.  Pressing buttons or moving analog sticks/joystick will cause various entries in the columns to swap between on and off and fluctuate through a range of numbers.  The value next to an on/off entry corresponds to the button that you have pressed.  The fluctuation of numbers from -32767 to 32767 correspond to the input on your controller that has a range of motion, such as analog sticks/triggers.\n\n\nIf you are interested in figuring out which is your \"Select\" button, pressing and holding \"Select\" on your controller will cause one column to switch from off to on.  The value next to it corresponds to the \"Select\" button.  If you have a controller with a \"Home\" button, pressing the \"Home\" button will also cause one column to switch from off to on.  To exit \njstest\n, press \nCtrl + c\n.  To return to EmulationStation from the terminal, type and enter \nemulationstation\n.\n\n\nUsing these values, you can edit the .cfg file for that controller as needed.  For example, if you were interested in switching the default \"Select\" button as your Hotkey button to a \"Home\" button available on your controller, you would edit \ninput_enable_hotkey_btn = \"some number\"\n, replacing \"some number\" with the value you found for your \"Home\" button in \njstest\n.\n\n\nVideo Tutorial\n\n\n\n\nRetroPie: Using hotkeys in retroarch - mapping to joypad by Floob\n\n\n\n\nHardcoded Configurations\n\n\nThese configurations are manual edits you can make that are locked to a specific libretro core and controller. Hardcoded controls can be configured either globally, specific to the emulator core, or specific to an individual game.\n\n\nConfig Hierarchy\n\n\nAll RetroArch based emulators can be configured in the following way:\n\n\nGlobal\n settings - that are settings which should apply to all systems - are done in the file:\n\n\n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n(\nexample\n)\n\n\nSystem-specific\n settings are done in the files:\n\n\n/opt/retropie/configs/SYSTEMNAME/retroarch.cfg\n\n\n\n\n(\nexample\n)\n\n\nHere, SYSTEMNAME is \natari2600\n, \nsnes\n, etc. All settings in these files will overwrite the corresponding global setting as long as they are placed \nabove\n the \n#includeconfig\n line.\n\n\nROM-specific\n settings can be created in the \nruncommand\n menu and show up as configuration files by ROM title:\n\n\n/home/pi/RetroPie/roms/SYSTEMNAME/ROMNAME.cfg\n\n\n\n\n(\nexample\n)\n\n\nThe \nROMNAME\n includes the original file extension before the \n.cfg\n, e.g. \nsupermariobros.zip.cfg\n These configurations are used when starting this specific ROM.\n\n\nCustom RetroArch Override Examples\n\n\nExample Default Per-System retroarch.cfg\n\n\n# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/megadrive/\n\n\n#include \n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n\nExample Per-System Control Override retroarch.cfg\n\n\nNote\n the values below are for one person's controller, your values may differ. Make sure that these values are placed \nabove\n the \n#includeconfig\n line:\n\n\n# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/megadrive/\n\ninput_player1_joypad_index = 0\ninput_player1_b_btn = 2\ninput_player1_a_btn = 1\ninput_player1_y_btn = 3\ninput_player1_x_btn = 0\ninput_player1_l_btn = 4\ninput_player1_r_btn = 5\ninput_player1_start_btn = 9\ninput_player1_select_btn = 8\ninput_player2_joypad_index = 1\ninput_player2_b_btn = 2\ninput_player2_a_btn = 1\ninput_player2_y_btn = 3\ninput_player2_x_btn = 0\ninput_player2_l_btn = 4\ninput_player2_r_btn = 5\ninput_player2_start_btn = 9\ninput_player2_select_btn = 8\n\n# Axis for RetroArch D-Pad. \n# Needs to be either '+' or '-' in the first character signaling either positive or negative direction of the axis, then the axis number. \ninput_player1_up_axis = -1\ninput_player1_down_axis = +1\ninput_player1_left_axis = -0\ninput_player1_right_axis = +0\ninput_player2_up_axis = -1\ninput_player2_down_axis = +1\ninput_player2_left_axis = -0\ninput_player2_right_axis = +0\n\n#Hotkeys- Hotkeys enable you to press a combination of buttons to do such things as exit emulators, save states,\n# and load states, as well as any other functionality in an emulator. (In the example below 8 is the select key\n# and 9 is the start key so when I hold down select and press start it will exit the emulator.)\ninput_enable_hotkey_btn = 8\ninput_exit_emulator_btn = 9\ninput_save_state_btn = 5\ninput_load_state_btn = 4\ninput_menu_toggle_btn = 0\ninput_state_slot_increase_axis = +0\ninput_state_slot_decrease_axis = -0\n\n\n#include \n/opt/retropie/configs/all/retroarch.cfg\n\n\n\n\n\nExample Per-ROM Override retroarch.cfg\n\n\naspect_ratio_index = \n19\n\n\n# Never save-on-exit after an override config\n# or the override will make into the core config.\nconfig_save_on_exit = false\n\n\n\n\nCore Input Remapping\n\n\nCore Input Remapping differs from the other two methods as it remaps how the core receives input rather than how the gamepad is coded, for example you can tell the snes core to switch button A and B on the controller for gameplay, but you can still use \"A\" to select in the RGUI and \"B\" to go back where as hard-coding would make B select and A back. Core Remapping is much more practical than hard-coded mapping but is limited to the cores that support it. \n\n\nQuick way to do it:\n\n\n\n\nStart a game of the system you want to remap the buttons\n\n\nInvoke RGUI (\nSelect+X\n with player 1)\n\n\nGo to \nQuick Menu\n and then \nControls\n\n\nConfigure the buttons the way you want\n\n\nSelect \nSave Core Remap File\n\n\nOR, if you want to save this remapping for the current game only, select \nSave Game Remap File\n\n\n\n\nVideo Tutorials\n\n\n\n\nCore input remapping: \nRemapping your controller\n by Floob\n\n\nTesting Joypad: \nTesting joystick\n by Floob\n\n\nConfiguring USB Controllers With Retroarch, Controller not configured fix\n by Herb Fargus\n\n\nConfigure a wireless PS3 controller with RetroPie 3\n by Floob\n\n\nXBox 360 Wireless Controller Configuration\n by Herb Fargus\n\n\n\n\nDefault Core Controls for All Emulators\n\n\n\n\n3do\n\n\n\n\nAtari 2600\n\n\n\n\nAtari Lynx\n\n\n\n\nGameboy\n\n\n\n\nGameboy Color\n\n\n\n\nGameboy Advance\n\n\n\n\nGame Gear\n\n\n\n\nMastersystem\n\n\n\n\nMegadrive/Genesis (3 Button)\n\n\n\n\nMegadrive/Genesis (6 Button)\n\n\n\n\n\n\nNintendo 64\n\n\n\n\nNintendo DS\n\n\n\n\nNES\n\n\n\n\nNeo Geo\n\n\n\n\nNeo Geo Pocket\n\n\n\n\nPS1\n\n\n\n\nPSP\n\n\n\n\nSG-1000\n\n\n\n\nSuper Nintendo\n\n\n\n\nSega Saturn\n\n\n\n\nTurbografx16\n\n\n\n\nVideopac/Odyssey2\n\n\n\n\nVectrex\n\n\n\n\nVirtualBoy\n\n\n\n\nSega Dreamcast\n\n\n\n\nIntellivision", 
            "title": "RetroArch Configuration"
        }, 
        {
            "location": "/RetroArch-Configuration/#the-retropad-concept", 
            "text": "When you configure your controller in EmulationStation, the RetroPie setup script automatically configures RetroArch with the same controls.  RetroArch controls map real-world controller buttons to a virtual controller called a \"RetroPad\". A RetroPad does not exist in real life, it's a concept only within RetroArch. A RetroPad has an ABXY layout like a SNES controller plus four shoulder buttons and dual analog sticks like a Sony DualShock.  You don't have to map all of the RetroPad buttons to a real world button. If your real controller has less buttons than a DualShock, then the virtual RetroPad also has less buttons, that's perfectly fine.  As RetroArch starts an emulator core, it maps the RetroPad configuration to the emulated system's original controls. The mapping for many consoles is represented by the pictures below and on each system's wiki page. If you wish, you can reconfigure this control mapping, either for all RetroArch, for a specific system, or even for a specific ROM.", 
            "title": "The RetroPad concept"
        }, 
        {
            "location": "/RetroArch-Configuration/#retroarch-controls", 
            "text": "There are 3 main ways to configure input for RetroArch:   Autoconfigurations  - made in EmulationStation  Hardcoded Configurations  - made by editing  retroarch.cfg  file(s)  Core Input Remapping  - an easy way to do specific control configurations for specific cores, made in the RetroArch RGUI", 
            "title": "Retroarch Controls"
        }, 
        {
            "location": "/RetroArch-Configuration/#autoconfigurations", 
            "text": "RetroArch controls have been integrated into EmulationStation and will be the first thing you see when you boot from the RetroPie SD image the first time. You can also access it from the start menu within EmulationStation under the Configure Input option. Your joypad is automagically configured for libretro (RetroArch) emulators when you configure your controller in EmulationStation. You'll know if your controller has been automagically configured if you see a flash of yellow text on the bottom of the screen with your gamepad ID when you start a game.    The following diagrams are for the 3 most common controllers: Super Nintendo, Xbox 360, and PlayStation 3. They can be used as a reference when configuring your controllers. Each emulator page on the wiki has a diagram of the original controller for its respective console that will correspond to the same inputs listed below.     After you've configured your controller the autoconfig will be created here:  /opt/retropie/configs/all/retroarch-joypads  This is an example config for a USB SNES controller  input_device =  USB gamepad            \ninput_driver =  udev \ninput_r_btn =  5 \ninput_save_state_btn =  5 \ninput_start_btn =  9 \ninput_exit_emulator_btn =  9 \ninput_l_btn =  4 \ninput_load_state_btn =  4 \ninput_up_axis =  -1 \ninput_a_btn =  1 \ninput_b_btn =  2 \ninput_reset_btn =  2 \ninput_down_axis =  +1 \ninput_right_axis =  +0 \ninput_state_slot_increase_axis =  +0 \ninput_x_btn =  0 \ninput_menu_toggle_btn =  0 \ninput_select_btn =  8 \ninput_enable_hotkey_btn =  8 \ninput_y_btn =  3 \ninput_left_axis =  -0 \ninput_state_slot_decrease_axis =  -0   As seen above in the config for the USB SNES controller, each input on the controller has an associated value.  When setting up the controller in EmulationStation, these values are then assigned a respective action on RetroArch.    For example, suppose the \"A\" button on a USB SNES controller has a value of \"1.\"  When setting up the controller, EmulationStation would prompt you to press the \"A\" button on your controller.  Pressing the \"A\" button would then record into the config file as  input_a_btn = \"1\" , so RetroArch will know that the \"A\" button on your physical controller corresponds to the \"A\" button on RetroArch's virtual controller, the RetroPad.  Therefore, the next time you play a game such as Super Mario Bros. pressing the \"A\" button will tell RetroArch to press the \"A\" button on its RetroPad, causing Mario to jump.  If you accidentally pressed the \"B\" button with a value of \"2\" during setup when it prompted for \"A,\" then it would be recorded into the config file as  input_a_btn = \"2\" , so if you want to jump in Super Mario Bros., you would have to press \"B\" on your controller.", 
            "title": "AutoConfigurations"
        }, 
        {
            "location": "/RetroArch-Configuration/#hotkeys", 
            "text": "Hotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. The following defaults are set automatically the first time you set up your controller from EmulationStation (the numbers will vary depending the controller you use).", 
            "title": "Hotkeys"
        }, 
        {
            "location": "/RetroArch-Configuration/#default-joypad-hotkeys", 
            "text": "Hotkeys  Action  Code Example        Select  Hotkey  input_enable_hotkey_btn = \"6\"      Select+Start  Exit  input_exit_emulator_btn = \"7\"      Select+Right Shoulder  Save  input_save_state_btn = \"5\"      Select+Left Shoulder  Load  input_load_state_btn = \"4\"      Select+Right  Input State Slot Increase  input_state_slot_increase_btn = \"h0right\"      Select+Left  Input State Slot Decrease  input_state_slot_decrease_btn = \"h0left\"      Select+X  RGUI Menu  input_menu_toggle_btn = \"3\"      Select+B  Reset  input_reset_btn = \"0\"", 
            "title": "Default joypad hotkeys:"
        }, 
        {
            "location": "/RetroArch-Configuration/#determining-button-values", 
            "text": "If you want to edit the entries in the .cfg file for your controller, you will need to know the values corresponding to the buttons on your controller.  Usually the relationship between the two can be deduced by looking at the file and noting the entries' names along with the values next to them, assuming that the values have not been jumbled from previous edits or been mixed up due to unknown issues.  For example, the USB gamepad above has an entry for  input_x_btn = \"0\" , indicating that the \"X\" button on the controller (or the button that you associated as \"X\" during controller setup in EmulationStation) has a value of \"0.\"  On the other hand, maybe you are not sure if the values in the .cfg file is correct or the file is missing entries for buttons that are available on your own controller, such as a \"Home\" button.  You can run  jstest  (joystick test) in the terminal by selecting  Quit EmulationStation  (a keyboard will be required for the following steps).  In the terminal, type and enter     jstest /dev/input/js0        Replace js0 with js1, js2, js3, etc. as needed if not detected.  A multitude of rows and columns should appear.  Pressing buttons or moving analog sticks/joystick will cause various entries in the columns to swap between on and off and fluctuate through a range of numbers.  The value next to an on/off entry corresponds to the button that you have pressed.  The fluctuation of numbers from -32767 to 32767 correspond to the input on your controller that has a range of motion, such as analog sticks/triggers.  If you are interested in figuring out which is your \"Select\" button, pressing and holding \"Select\" on your controller will cause one column to switch from off to on.  The value next to it corresponds to the \"Select\" button.  If you have a controller with a \"Home\" button, pressing the \"Home\" button will also cause one column to switch from off to on.  To exit  jstest , press  Ctrl + c .  To return to EmulationStation from the terminal, type and enter  emulationstation .  Using these values, you can edit the .cfg file for that controller as needed.  For example, if you were interested in switching the default \"Select\" button as your Hotkey button to a \"Home\" button available on your controller, you would edit  input_enable_hotkey_btn = \"some number\" , replacing \"some number\" with the value you found for your \"Home\" button in  jstest .", 
            "title": "Determining Button Values"
        }, 
        {
            "location": "/RetroArch-Configuration/#video-tutorial", 
            "text": "RetroPie: Using hotkeys in retroarch - mapping to joypad by Floob", 
            "title": "Video Tutorial"
        }, 
        {
            "location": "/RetroArch-Configuration/#hardcoded-configurations", 
            "text": "These configurations are manual edits you can make that are locked to a specific libretro core and controller. Hardcoded controls can be configured either globally, specific to the emulator core, or specific to an individual game.", 
            "title": "Hardcoded Configurations"
        }, 
        {
            "location": "/RetroArch-Configuration/#config-hierarchy", 
            "text": "All RetroArch based emulators can be configured in the following way:  Global  settings - that are settings which should apply to all systems - are done in the file:  /opt/retropie/configs/all/retroarch.cfg  ( example )  System-specific  settings are done in the files:  /opt/retropie/configs/SYSTEMNAME/retroarch.cfg  ( example )  Here, SYSTEMNAME is  atari2600 ,  snes , etc. All settings in these files will overwrite the corresponding global setting as long as they are placed  above  the  #includeconfig  line.  ROM-specific  settings can be created in the  runcommand  menu and show up as configuration files by ROM title:  /home/pi/RetroPie/roms/SYSTEMNAME/ROMNAME.cfg  ( example )  The  ROMNAME  includes the original file extension before the  .cfg , e.g.  supermariobros.zip.cfg  These configurations are used when starting this specific ROM.", 
            "title": "Config Hierarchy"
        }, 
        {
            "location": "/RetroArch-Configuration/#custom-retroarch-override-examples", 
            "text": "", 
            "title": "Custom RetroArch Override Examples"
        }, 
        {
            "location": "/RetroArch-Configuration/#example-default-per-system-retroarchcfg", 
            "text": "# Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/megadrive/\n\n\n#include  /opt/retropie/configs/all/retroarch.cfg", 
            "title": "Example Default Per-System retroarch.cfg"
        }, 
        {
            "location": "/RetroArch-Configuration/#example-per-system-control-override-retroarchcfg", 
            "text": "Note  the values below are for one person's controller, your values may differ. Make sure that these values are placed  above  the  #includeconfig  line:  # Settings made here will only override settings in the global retroarch.cfg if placed above the #include line\n\ninput_remapping_directory = /opt/retropie/configs/megadrive/\n\ninput_player1_joypad_index = 0\ninput_player1_b_btn = 2\ninput_player1_a_btn = 1\ninput_player1_y_btn = 3\ninput_player1_x_btn = 0\ninput_player1_l_btn = 4\ninput_player1_r_btn = 5\ninput_player1_start_btn = 9\ninput_player1_select_btn = 8\ninput_player2_joypad_index = 1\ninput_player2_b_btn = 2\ninput_player2_a_btn = 1\ninput_player2_y_btn = 3\ninput_player2_x_btn = 0\ninput_player2_l_btn = 4\ninput_player2_r_btn = 5\ninput_player2_start_btn = 9\ninput_player2_select_btn = 8\n\n# Axis for RetroArch D-Pad. \n# Needs to be either '+' or '-' in the first character signaling either positive or negative direction of the axis, then the axis number. \ninput_player1_up_axis = -1\ninput_player1_down_axis = +1\ninput_player1_left_axis = -0\ninput_player1_right_axis = +0\ninput_player2_up_axis = -1\ninput_player2_down_axis = +1\ninput_player2_left_axis = -0\ninput_player2_right_axis = +0\n\n#Hotkeys- Hotkeys enable you to press a combination of buttons to do such things as exit emulators, save states,\n# and load states, as well as any other functionality in an emulator. (In the example below 8 is the select key\n# and 9 is the start key so when I hold down select and press start it will exit the emulator.)\ninput_enable_hotkey_btn = 8\ninput_exit_emulator_btn = 9\ninput_save_state_btn = 5\ninput_load_state_btn = 4\ninput_menu_toggle_btn = 0\ninput_state_slot_increase_axis = +0\ninput_state_slot_decrease_axis = -0\n\n\n#include  /opt/retropie/configs/all/retroarch.cfg", 
            "title": "Example Per-System Control Override retroarch.cfg"
        }, 
        {
            "location": "/RetroArch-Configuration/#example-per-rom-override-retroarchcfg", 
            "text": "aspect_ratio_index =  19 \n\n# Never save-on-exit after an override config\n# or the override will make into the core config.\nconfig_save_on_exit = false", 
            "title": "Example Per-ROM Override retroarch.cfg"
        }, 
        {
            "location": "/RetroArch-Configuration/#core-input-remapping", 
            "text": "Core Input Remapping differs from the other two methods as it remaps how the core receives input rather than how the gamepad is coded, for example you can tell the snes core to switch button A and B on the controller for gameplay, but you can still use \"A\" to select in the RGUI and \"B\" to go back where as hard-coding would make B select and A back. Core Remapping is much more practical than hard-coded mapping but is limited to the cores that support it.   Quick way to do it:   Start a game of the system you want to remap the buttons  Invoke RGUI ( Select+X  with player 1)  Go to  Quick Menu  and then  Controls  Configure the buttons the way you want  Select  Save Core Remap File  OR, if you want to save this remapping for the current game only, select  Save Game Remap File", 
            "title": "Core Input Remapping"
        }, 
        {
            "location": "/RetroArch-Configuration/#video-tutorials", 
            "text": "Core input remapping:  Remapping your controller  by Floob  Testing Joypad:  Testing joystick  by Floob  Configuring USB Controllers With Retroarch, Controller not configured fix  by Herb Fargus  Configure a wireless PS3 controller with RetroPie 3  by Floob  XBox 360 Wireless Controller Configuration  by Herb Fargus", 
            "title": "Video Tutorials"
        }, 
        {
            "location": "/RetroArch-Configuration/#default-core-controls-for-all-emulators", 
            "text": "", 
            "title": "Default Core Controls for All Emulators"
        }, 
        {
            "location": "/RetroArch-Configuration/#3do", 
            "text": "", 
            "title": "3do"
        }, 
        {
            "location": "/RetroArch-Configuration/#atari-2600", 
            "text": "", 
            "title": "Atari 2600"
        }, 
        {
            "location": "/RetroArch-Configuration/#atari-lynx", 
            "text": "", 
            "title": "Atari Lynx"
        }, 
        {
            "location": "/RetroArch-Configuration/#gameboy", 
            "text": "", 
            "title": "Gameboy"
        }, 
        {
            "location": "/RetroArch-Configuration/#gameboy-color", 
            "text": "", 
            "title": "Gameboy Color"
        }, 
        {
            "location": "/RetroArch-Configuration/#gameboy-advance", 
            "text": "", 
            "title": "Gameboy Advance"
        }, 
        {
            "location": "/RetroArch-Configuration/#game-gear", 
            "text": "", 
            "title": "Game Gear"
        }, 
        {
            "location": "/RetroArch-Configuration/#mastersystem", 
            "text": "", 
            "title": "Mastersystem"
        }, 
        {
            "location": "/RetroArch-Configuration/#megadrivegenesis-3-button", 
            "text": "", 
            "title": "Megadrive/Genesis (3 Button)"
        }, 
        {
            "location": "/RetroArch-Configuration/#megadrivegenesis-6-button", 
            "text": "", 
            "title": "Megadrive/Genesis (6 Button)"
        }, 
        {
            "location": "/RetroArch-Configuration/#nintendo-64", 
            "text": "", 
            "title": "Nintendo 64"
        }, 
        {
            "location": "/RetroArch-Configuration/#nintendo-ds", 
            "text": "", 
            "title": "Nintendo DS"
        }, 
        {
            "location": "/RetroArch-Configuration/#nes", 
            "text": "", 
            "title": "NES"
        }, 
        {
            "location": "/RetroArch-Configuration/#neo-geo", 
            "text": "", 
            "title": "Neo Geo"
        }, 
        {
            "location": "/RetroArch-Configuration/#neo-geo-pocket", 
            "text": "", 
            "title": "Neo Geo Pocket"
        }, 
        {
            "location": "/RetroArch-Configuration/#ps1", 
            "text": "", 
            "title": "PS1"
        }, 
        {
            "location": "/RetroArch-Configuration/#psp", 
            "text": "", 
            "title": "PSP"
        }, 
        {
            "location": "/RetroArch-Configuration/#sg-1000", 
            "text": "", 
            "title": "SG-1000"
        }, 
        {
            "location": "/RetroArch-Configuration/#super-nintendo", 
            "text": "", 
            "title": "Super Nintendo"
        }, 
        {
            "location": "/RetroArch-Configuration/#sega-saturn", 
            "text": "", 
            "title": "Sega Saturn"
        }, 
        {
            "location": "/RetroArch-Configuration/#turbografx16", 
            "text": "", 
            "title": "Turbografx16"
        }, 
        {
            "location": "/RetroArch-Configuration/#videopacodyssey2", 
            "text": "", 
            "title": "Videopac/Odyssey2"
        }, 
        {
            "location": "/RetroArch-Configuration/#vectrex", 
            "text": "", 
            "title": "Vectrex"
        }, 
        {
            "location": "/RetroArch-Configuration/#virtualboy", 
            "text": "", 
            "title": "VirtualBoy"
        }, 
        {
            "location": "/RetroArch-Configuration/#sega-dreamcast", 
            "text": "", 
            "title": "Sega Dreamcast"
        }, 
        {
            "location": "/RetroArch-Configuration/#intellivision", 
            "text": "", 
            "title": "Intellivision"
        }, 
        {
            "location": "/RetroAchievements/", 
            "text": "RetroAchievements are a way to log your achievements on oldschool console games. It is integrated into RetroArch and is only supported by select cores (\nsee chart\n).\n\n\nYou first need to create an account at http://retroachievements.org/ and then add your credentials to \n/opt/retropie/configs/all/retroarch.cfg\n\n\ncheevos_username = \nyourusername\n\ncheevos_password = \nyourpassword\n\ncheevos_enable = true\n\n\n\n\nSince RetroArch 1.3.2 (used in RetroPie 3.7), the Hardcore Mode is supported. It disables the savestates and is optional. If you want to enable it add this line too:\n\n\ncheevos_hardcore_mode_enable = true\n\n\n\n\nSupported Systems:\n\n\n\n\nNES\n\n\nSNES\n\n\nMega Drive / Genesis\n\n\nGame Boy / Game Boy Color\n\n\nGame Boy Advance\n\n\nPC Engine\n\n\n\n\nA libretro core compatibility list with RetroAchievements can be found here: https://github.com/libretro/RetroArch/wiki/RetroAchievements\n\n\nRetroAchievements Messages\n\n\nA common user question is \"How do I increase the size of the RetroAchievements messages on RetroArch?\".\n\n\nActually this configuration is done by changing the font size of all the RetroArch messages, not only the RetroAchievements related ones. How to do it:\n\n\nOpen the file \n/opt/retropie/configs/all/retroarch.cfg\n and change the line with \nvideo_font_size\n. Values between 26-32 should be good on a 40\" TV.\n\n\nIf you are used to configure RetroArch with RGUI (not the default on RetroPie), you can go to \nSettings\n -\n \nOnscreen Display\n -\n \nOSD Message Size\n and change it.", 
            "title": "RetroAchievements"
        }, 
        {
            "location": "/RetroAchievements/#supported-systems", 
            "text": "NES  SNES  Mega Drive / Genesis  Game Boy / Game Boy Color  Game Boy Advance  PC Engine   A libretro core compatibility list with RetroAchievements can be found here: https://github.com/libretro/RetroArch/wiki/RetroAchievements", 
            "title": "Supported Systems:"
        }, 
        {
            "location": "/RetroAchievements/#retroachievements-messages", 
            "text": "A common user question is \"How do I increase the size of the RetroAchievements messages on RetroArch?\".  Actually this configuration is done by changing the font size of all the RetroArch messages, not only the RetroAchievements related ones. How to do it:  Open the file  /opt/retropie/configs/all/retroarch.cfg  and change the line with  video_font_size . Values between 26-32 should be good on a 40\" TV.  If you are used to configure RetroArch with RGUI (not the default on RetroPie), you can go to  Settings  -   Onscreen Display  -   OSD Message Size  and change it.", 
            "title": "RetroAchievements Messages"
        }, 
        {
            "location": "/Netplay/", 
            "text": "Netplay\n\n\nSome retroarch cores have netplay built in which means that if you have some friends in a different place and still want to play games with them you can.\n\n\nThere are a few stipulations that have to be met before you are able to utilise netplay:\n\n\n\n\nYou both need to be running the same version of retroarch\n\n\nYou both need to be running the same emulator\n\n\nYou both need to have the same exact rom\n\n\n\n\nConfiguration\n\n\nSo first things first- you need to set up your configurations for netplay:\n\n\nyou can access the netplay configurations from the retropie menu in emulationstation or from the setup script.\n\n\nOne person needs to be the host, the rest that are trying to connect to the host will be clients\n\n\nHost\n\n\nIf you will be acting as the host...\n\n\n\n\nSet your Netplay Mode to host\n\n\nChange Host IP Address to your ip address\n\n\nEither go to your router settings and open the port 55435 for both TCP and UDP, OR change the TCP/UDP Port setting in RetroArch to one that's already open\n\n\nSelect a number for Delay Frames. If you are experiencing a very low fps, try increasing this number.\n\n\nPick a Nickname\n\n\nWhen launching a rom to use netplay you'll open up the \nruncommand menu\n by pressing js0 (or any key on your keyboard) as your rom loads and then you'll select launch netplay\n\n\n\n\n\n\nMake sure to tell your friend:\n- Your IP Address\n- Your Open Port\n- Your Delay Frames Number\n- Your selected Core and ROM\n\n\nClient\n\n\nIf you will be joining a game...\n\n\n\n\nSet your Netplay Mode to Client\n\n\nSet Spectator Mode Enable to OFF\n\n\nChange Host IP Address to the IP Address your friend gave you\n\n\nChange TCP/UDP Port to the number your friend gave you\n\n\nChange Delay Frames to the number your friend gave you\n\n\nPick a Nickname\n\n\nWhen launching a rom to use netplay you'll open up the \nruncommand menu\n by pressing js0 (or any key on your keyboard) as your rom loads and then you'll select launch netplay\n\n\n\n\n\n\nNow if you and your friend successfully followed all of these steps, your game should load. If it didn't, try checking if you have the same ROM, the same core, and if your host's port is really open. If everything fails, consider switching server and client roles. \n\n\nWindows\n\n\nIf you are on a windows PC set up the network settings from the RGUI:\n\n\n\n\n\n\nNote that following are settings when running the pc as a client:\n\n\n\n\nif you want the pc to be the host change netplay client enable to off", 
            "title": "Netplay"
        }, 
        {
            "location": "/Netplay/#netplay", 
            "text": "Some retroarch cores have netplay built in which means that if you have some friends in a different place and still want to play games with them you can.  There are a few stipulations that have to be met before you are able to utilise netplay:   You both need to be running the same version of retroarch  You both need to be running the same emulator  You both need to have the same exact rom", 
            "title": "Netplay"
        }, 
        {
            "location": "/Netplay/#configuration", 
            "text": "So first things first- you need to set up your configurations for netplay:  you can access the netplay configurations from the retropie menu in emulationstation or from the setup script.  One person needs to be the host, the rest that are trying to connect to the host will be clients", 
            "title": "Configuration"
        }, 
        {
            "location": "/Netplay/#host", 
            "text": "If you will be acting as the host...   Set your Netplay Mode to host  Change Host IP Address to your ip address  Either go to your router settings and open the port 55435 for both TCP and UDP, OR change the TCP/UDP Port setting in RetroArch to one that's already open  Select a number for Delay Frames. If you are experiencing a very low fps, try increasing this number.  Pick a Nickname  When launching a rom to use netplay you'll open up the  runcommand menu  by pressing js0 (or any key on your keyboard) as your rom loads and then you'll select launch netplay    Make sure to tell your friend:\n- Your IP Address\n- Your Open Port\n- Your Delay Frames Number\n- Your selected Core and ROM", 
            "title": "Host"
        }, 
        {
            "location": "/Netplay/#client", 
            "text": "If you will be joining a game...   Set your Netplay Mode to Client  Set Spectator Mode Enable to OFF  Change Host IP Address to the IP Address your friend gave you  Change TCP/UDP Port to the number your friend gave you  Change Delay Frames to the number your friend gave you  Pick a Nickname  When launching a rom to use netplay you'll open up the  runcommand menu  by pressing js0 (or any key on your keyboard) as your rom loads and then you'll select launch netplay    Now if you and your friend successfully followed all of these steps, your game should load. If it didn't, try checking if you have the same ROM, the same core, and if your host's port is really open. If everything fails, consider switching server and client roles.", 
            "title": "Client"
        }, 
        {
            "location": "/Netplay/#windows", 
            "text": "If you are on a windows PC set up the network settings from the RGUI:    Note that following are settings when running the pc as a client:   if you want the pc to be the host change netplay client enable to off", 
            "title": "Windows"
        }, 
        {
            "location": "/Shaders-and-Smoothing/", 
            "text": "Why are my games so pixelated?\n\n\nBy default RetroPie displays games far crisper than an original console and cabling ever could. For some, this can appear jagged and harsh compared to their memories of the smoother, less refined output of old CRT televisions. Further, old games themselves were designed and tested using the same televisions, so the raw image RetroPie outputs by default may not be the original artists' intention. Fortunately, there are ways of emulating CRTs.\n\n\nWhat did CRTs televisions do?\n\n\nScan lines\n\n\nSee https://en.wikipedia.org/wiki/Scan_line. Broadly this is the horizontal dark lines that appear when using a CRT, and also darkens the image slightly. As well as helping to look like a CRT, it also helps to make the pixels seem less jagged and helps provide definition:\n\n\n\n\nSee also: \nshadow mask\n\n\nBloom\n\n\nThis describes the effect of lighter colours (particulary white) bleeding into their surrounding pixels, again helping to make things look less jagged:\n\n\n\n\nSignal distortion\n\n\nThe cabling used to connect consoles to CRTs was typically analogue and introduced noise to the image. This can have a pleasing effect by making the image smoother. Further, different broadcast regions had their own colour, resolutions, refresh and cabling standards, so a UK TV ('PAL' standard) would show the same game differently to a USA TV ('NTSC' standard).\n\n\nCurvature\n\n\nRather than today's flat screen displays, CRTs were not flat, and always featured some degree of curvature to the glass screen giving a 'fishbowl effect':\n\n\n\n\nRetroPie Alternatives\n\n\nShaders\n\n\nShaders are small programs that a dedicated graphics chip (GPU) runs to alter the image. Unfortunately, the Raspberry Pi series features a fairly weak GPU that struggles to run complex or multiple shaders. Fortunately, user @davej has created a fantastic shader specifically for the pi, aimed at recreating a CRT appearance whilst still maintaining full speed at 1080p on even a Pi 1 (overclocked). It is highly configurable, but four presets are included in RetroPie:\n\n\n\n\n\n\ncrt-pi.glslp\n\n\n\n\n\n\n\n\ncrt-pi-curvature.glslp\n\n\n\n\n\n\n\n\nThe second two presets are \ncrt-pi-vertical.glslp\n and \ncrt-pi-curvature-vertical.glslp\n, described in \nVertical games\n\n\nInstallation\n\n\nNote:\n Shaders can only be used in Libretro emulators. Most default emulators in RetroPie are Libretro emulators, but you can confirm by looking for the lr- prefix in the emulator name via the [[Runcommand]].\n\n\nYou can select either preset via the [[Configuration editor]]. Choose \nConfigure basic libretro emulator options\n, then choose a specific emulator or \nConfigure default options for all libretro emulators\n to make the change system-wide. Then, set \nVideo Shader Enable\n to \ntrue\n and then set \nVideo Shader File\n to the desired shader.\n\n\nScaling artifacts (particularly in Vertical games)\n\n\nSome arcade games were run on a vertical CRT; literally a regular TV flipped over on its side. Whilst libretro shaders are will automatically rotate for this, the shadow mask effect does not, causing an unsightly 'rainbow' effect. Rather than add logic to the shader (making it slower), a special version for vertical games is available:\n\n\n\n\n\n\ncrt-pi-vertical.glslp\n\n\n\n\n\n\n\n\ncrt-pi-curvature-vertical.glslp\n\n\n\n\n\n\n\n\nBoth vertical and horizontal games can be improved further by using special override CFGs that increase the accuracy and alignment of the scanline effect. A set of these overrides is available for [[lr-mame2003]] and [[lr-fbalpha]] in \nthis thread\n.\n\n\nNTSC filters\n\n\nWIP\n\n\nVideo smoothing\n\n\nRetroarch includes the facility to apply a basic bilinear smoothing filter across the screen. This filter reduces pixelation at essentially no performance cost, but gives a very soft image that may not be to everyone's taste. Here is example of it off and on:\n\n\n\n\nThis setting can be enabled in the [[Configuration Editor]]. Look for 'Video Smoothing'. It won't affect shaders, which control this setting independently.", 
            "title": "Shaders and Smoothing"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#why-are-my-games-so-pixelated", 
            "text": "By default RetroPie displays games far crisper than an original console and cabling ever could. For some, this can appear jagged and harsh compared to their memories of the smoother, less refined output of old CRT televisions. Further, old games themselves were designed and tested using the same televisions, so the raw image RetroPie outputs by default may not be the original artists' intention. Fortunately, there are ways of emulating CRTs.", 
            "title": "Why are my games so pixelated?"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#what-did-crts-televisions-do", 
            "text": "", 
            "title": "What did CRTs televisions do?"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#scan-lines", 
            "text": "See https://en.wikipedia.org/wiki/Scan_line. Broadly this is the horizontal dark lines that appear when using a CRT, and also darkens the image slightly. As well as helping to look like a CRT, it also helps to make the pixels seem less jagged and helps provide definition:   See also:  shadow mask", 
            "title": "Scan lines"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#bloom", 
            "text": "This describes the effect of lighter colours (particulary white) bleeding into their surrounding pixels, again helping to make things look less jagged:", 
            "title": "Bloom"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#signal-distortion", 
            "text": "The cabling used to connect consoles to CRTs was typically analogue and introduced noise to the image. This can have a pleasing effect by making the image smoother. Further, different broadcast regions had their own colour, resolutions, refresh and cabling standards, so a UK TV ('PAL' standard) would show the same game differently to a USA TV ('NTSC' standard).", 
            "title": "Signal distortion"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#curvature", 
            "text": "Rather than today's flat screen displays, CRTs were not flat, and always featured some degree of curvature to the glass screen giving a 'fishbowl effect':", 
            "title": "Curvature"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#retropie-alternatives", 
            "text": "", 
            "title": "RetroPie Alternatives"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#shaders", 
            "text": "Shaders are small programs that a dedicated graphics chip (GPU) runs to alter the image. Unfortunately, the Raspberry Pi series features a fairly weak GPU that struggles to run complex or multiple shaders. Fortunately, user @davej has created a fantastic shader specifically for the pi, aimed at recreating a CRT appearance whilst still maintaining full speed at 1080p on even a Pi 1 (overclocked). It is highly configurable, but four presets are included in RetroPie:    crt-pi.glslp     crt-pi-curvature.glslp     The second two presets are  crt-pi-vertical.glslp  and  crt-pi-curvature-vertical.glslp , described in  Vertical games", 
            "title": "Shaders"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#installation", 
            "text": "Note:  Shaders can only be used in Libretro emulators. Most default emulators in RetroPie are Libretro emulators, but you can confirm by looking for the lr- prefix in the emulator name via the [[Runcommand]].  You can select either preset via the [[Configuration editor]]. Choose  Configure basic libretro emulator options , then choose a specific emulator or  Configure default options for all libretro emulators  to make the change system-wide. Then, set  Video Shader Enable  to  true  and then set  Video Shader File  to the desired shader.", 
            "title": "Installation"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#scaling-artifacts-particularly-in-vertical-games", 
            "text": "Some arcade games were run on a vertical CRT; literally a regular TV flipped over on its side. Whilst libretro shaders are will automatically rotate for this, the shadow mask effect does not, causing an unsightly 'rainbow' effect. Rather than add logic to the shader (making it slower), a special version for vertical games is available:    crt-pi-vertical.glslp     crt-pi-curvature-vertical.glslp     Both vertical and horizontal games can be improved further by using special override CFGs that increase the accuracy and alignment of the scanline effect. A set of these overrides is available for [[lr-mame2003]] and [[lr-fbalpha]] in  this thread .", 
            "title": "Scaling artifacts (particularly in Vertical games)"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#ntsc-filters", 
            "text": "WIP", 
            "title": "NTSC filters"
        }, 
        {
            "location": "/Shaders-and-Smoothing/#video-smoothing", 
            "text": "Retroarch includes the facility to apply a basic bilinear smoothing filter across the screen. This filter reduces pixelation at essentially no performance cost, but gives a very soft image that may not be to everyone's taste. Here is example of it off and on:   This setting can be enabled in the [[Configuration Editor]]. Look for 'Video Smoothing'. It won't affect shaders, which control this setting independently.", 
            "title": "Video smoothing"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/", 
            "text": "Introduction\n\n\nSome people like to have their gameplay on a smaller area in the middle of the screen, rather than blown up to the full display resolution of their TV.\n\n\nThis is especially true of handhelds like Game Boy and Game Boy Advance where the original resolution was so low that blowing these up to 1080p results in HUGE pixels.\n\n\nThis tutorial covers making the display of a RetroArch libretro emulator smaller and centred on the screen.\n\n\nDetermine Display Resolution\n\n\nIf your TV is displaying at 1080p, the resolution is \n1920x1080\n.\n\n\nIf your TV or monitor displays at another resolution, find that out and keep it in mind.\n\n\nYou may wish to refer to the Wikipedia \nDisplay resolution\n page.\n\n\nDetermine Console Resolution\n\n\nFind the original resolution of the console by looking it up somewhere like Wikipedia. Here are a few popular resolutions:\n\n\n\n\nGBA: \n240x160\n\n\nGame Boy: \n160x144\n\n\nGame Gear: \n160x144\n\n\nNeo Geo Pocket: \n160x152\n\n\nAtari Lynx: \n160x102\n\n\nWonderSwan: \n224x144\n\n\n\n\nLater home consoles (SNES, Master System, Mega Drive) often had multiple display resolutions and are not covered by this article.\n\n\nMultiply Console Resolution\n\n\nTake the original console resolution and multiply both numbers by the same amount to get a larger gameplay resolution which is still in the same aspect ratio and fits within your actual display resolution.\n\n\nIt is best to multiply by a whole number (eg: 2, 3, 4) so the original pixels get sized up consistently. Multiplying by fractions (eg: 2.66, 3.75, 4.4) may end up with strange ugly pixel effects, especially if using shaders which apply scanlines or similar effects.\n\n\nFor example, the GBA resolution was \n240x160\n so we'll multiply those up by \n3\n to land on \n720x480\n. An image of this size fits within a 1920x1080 display, is smaller than the full 1920x1080 display, and is still in the same aspect ratio so the game won't look stretched.\n\n\nCentre Image\n\n\nNow we've determined our actual display resolution, and the resolution we want the game shown at, we need to centre the image on screen.\n\n\nTo do this, we take the \n(original resolution - console resolution) / 2\n.\n\n\nFollowing our example of a \n1920x1080\n screen showing a \n720x480\n GBA image, do the following:\n\n\n(1920 - 720) / 2 = 600\n is how far to offset horizontally.\n\n\n(1080 - 480) / 2 = 300\n is how far to offset vertically.\n\n\nEdit Configuration File\n\n\nLook at the console-specific page in the sidebar of this wiki and note where the system's configuration file.\n\n\nFor example, the GBA config file is \n/opt/retropie/configs/gba/retroarch.cfg\n so any changes made in there will apply only to GBA games, not to other systems.\n\n\nNow add the following above the \n#include\n line in that file:\n\n\n# 19 = Config, 20 = 1:1 PAR, 21 = Core Provided, 22 = Custom Viewport\naspect_ratio_index = \n22\n\n\n# these two define the pixel size of the emulated screen\n# keep this in the same ratio as the original console\n# eg: GBA 240x160 * 3 = 720 x 480\ncustom_viewport_width = \n720\n\ncustom_viewport_height = \n480\n\n\n# the following two decide how far from the left and top the game screen is shown\n# to centre the game display use your original resolution, minus the screen size, divided by two\n# this example for 1080p screen (1920x1080)\n# (1920 - 720) / 2 = 600\ncustom_viewport_x = \n600\n\n# (1080 - 480) / 2 = 300\ncustom_viewport_y = \n300\n\n\n\n\n\nNow when the desired console is started, the game should display in a smaller area in the middle of the screen.", 
            "title": "Smaller RetroArch Screen"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/#introduction", 
            "text": "Some people like to have their gameplay on a smaller area in the middle of the screen, rather than blown up to the full display resolution of their TV.  This is especially true of handhelds like Game Boy and Game Boy Advance where the original resolution was so low that blowing these up to 1080p results in HUGE pixels.  This tutorial covers making the display of a RetroArch libretro emulator smaller and centred on the screen.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/#determine-display-resolution", 
            "text": "If your TV is displaying at 1080p, the resolution is  1920x1080 .  If your TV or monitor displays at another resolution, find that out and keep it in mind.  You may wish to refer to the Wikipedia  Display resolution  page.", 
            "title": "Determine Display Resolution"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/#determine-console-resolution", 
            "text": "Find the original resolution of the console by looking it up somewhere like Wikipedia. Here are a few popular resolutions:   GBA:  240x160  Game Boy:  160x144  Game Gear:  160x144  Neo Geo Pocket:  160x152  Atari Lynx:  160x102  WonderSwan:  224x144   Later home consoles (SNES, Master System, Mega Drive) often had multiple display resolutions and are not covered by this article.", 
            "title": "Determine Console Resolution"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/#multiply-console-resolution", 
            "text": "Take the original console resolution and multiply both numbers by the same amount to get a larger gameplay resolution which is still in the same aspect ratio and fits within your actual display resolution.  It is best to multiply by a whole number (eg: 2, 3, 4) so the original pixels get sized up consistently. Multiplying by fractions (eg: 2.66, 3.75, 4.4) may end up with strange ugly pixel effects, especially if using shaders which apply scanlines or similar effects.  For example, the GBA resolution was  240x160  so we'll multiply those up by  3  to land on  720x480 . An image of this size fits within a 1920x1080 display, is smaller than the full 1920x1080 display, and is still in the same aspect ratio so the game won't look stretched.", 
            "title": "Multiply Console Resolution"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/#centre-image", 
            "text": "Now we've determined our actual display resolution, and the resolution we want the game shown at, we need to centre the image on screen.  To do this, we take the  (original resolution - console resolution) / 2 .  Following our example of a  1920x1080  screen showing a  720x480  GBA image, do the following:  (1920 - 720) / 2 = 600  is how far to offset horizontally.  (1080 - 480) / 2 = 300  is how far to offset vertically.", 
            "title": "Centre Image"
        }, 
        {
            "location": "/Smaller-RetroArch-Screen/#edit-configuration-file", 
            "text": "Look at the console-specific page in the sidebar of this wiki and note where the system's configuration file.  For example, the GBA config file is  /opt/retropie/configs/gba/retroarch.cfg  so any changes made in there will apply only to GBA games, not to other systems.  Now add the following above the  #include  line in that file:  # 19 = Config, 20 = 1:1 PAR, 21 = Core Provided, 22 = Custom Viewport\naspect_ratio_index =  22 \n\n# these two define the pixel size of the emulated screen\n# keep this in the same ratio as the original console\n# eg: GBA 240x160 * 3 = 720 x 480\ncustom_viewport_width =  720 \ncustom_viewport_height =  480 \n\n# the following two decide how far from the left and top the game screen is shown\n# to centre the game display use your original resolution, minus the screen size, divided by two\n# this example for 1080p screen (1920x1080)\n# (1920 - 720) / 2 = 600\ncustom_viewport_x =  600 \n# (1080 - 480) / 2 = 300\ncustom_viewport_y =  300   Now when the desired console is started, the game should display in a smaller area in the middle of the screen.", 
            "title": "Edit Configuration File"
        }, 
        {
            "location": "/EmulationStation/", 
            "text": "EmulationStation\n\n\nIntroduction\n\n\nThis is the graphical front-end installed by RetroPie. EmulationStation is designed to allow you to use your Pi as if it were a retro console - with only a controller, not requiring a keyboard. \n\n\nIt was developed specifically for the Raspberry Pi, on the Raspberry Pi. However, it uses cross-platform libraries, so it can be run on pretty much any Linux machine. If you try, you can also build it on Windows.\n\n\nFrom the dictionary:\n\n\n\n\nfront end\n\n\n\n\nthe front of a car or other vehicle.\n\n\nthe part of a radio or television receiver to which the aerial signal goes first.\n\n\nCOMPUTING - a part of a computer or program that allows access to other parts.\n\n\n\n\n\n\nEmulationStation is used to provide a polished user interface to present and interact with all the different aspects of the RetroPie distribution. It allows the user to use a UI that is controllable using a joypad or arcade controllers to navigate through the different emulators, and make (simple) edits to the systems configuration.\n\n\nAs it is the first thing that many users see, EmulationStation is often conflated with RetroPie as a whole, while ES is only a part of the RetroPie distribution.\n\n\nEmulationStation was developed by Alec Lofquist (programming) and Nils Bonenberger (design \n UI), see the \nofficial EmulationStation page\n. For the code and more info, see also the \nGithub Repository\n.\n\n\nFeatures\n\n\nEmulationStation offers the following features:\n\n Listing of emulated systems (systemlist), and their respective games (gamelist)\n\n Keyboard-less navigation\n\n Controller configuration which is propagated to RetroArch emulators\n\n Theming of certain elements (background, position/size of text elements)\n* Scraping of game information (see \nhere for more info\n)\n\n\nDevelopment status\n\n\nSince spring 2015, there has been little or no activity from the original ES developer, Aloshi. Recently, there has been some activities to get the project moving again (see the \ndiscussion here\n). It remains to be seen if this will gather enough momentum to become a viable alternative for RetroPie or not.\n\n\nUntil that time, further developments are done by 'unofficial' forks, which are not necessarily maintained/updated often. One example is \nthis extension of ES\n, which is currently under experimental features.\n\n\nHelp\n\n\nA great deal of information can be found in EmulationStation's \nREADME.md\n and \nTHEMES.md\n, also viewable on GitHub. Some links:\n\n\nBuilding from source (if you're getting dependency errors, this might help).\n\n\nConfiguring EmulationStation.\n\n\nCreating your own themes.\n\n\nCommon Problems\n\n\nMy ES_Sytems.cfg is being overwritten on updates!\n\n\nWhen you install themes from the retropie setup script they are installed to \n/etc/emulationstation\n and are overwritten when new themes are installed or RetroPie is updated.\n\n\nIf you want to customise your es_systems.cfg or add themes without them being overwritten on updates you can add them to \n/home/pi/.emulationstation\n EmulationStation first checks in \n/home/pi/.emulationstation\n and then checks \n/etc/emulationstation\n.\n\n\nFor customising themes you'll place them in \n/home/pi/.emulationstation/themes\n \n\n\nEmulationStation isn't detecting my ROMs!\n\n\n\n\nAre they in the right folders? \nRemember, paths are case sensitive\n. You can check what folders ES is using with: \nnano /etc/emulationstation/es_systems.cfg\n or better yet look at the documentation here on the wiki.\n\n\nIs ES looking for the right file extension? \nRemember, the extension is case sensitive\n. You can check what format ES is searching with: \nnano /etc/emulationstation/es_systems.cfg\n and again see the pages here on the wiki\n\n\nAre your ROMs in a compressed format? \nEmulationStation does not search inside zip files\n, though some emulators (like MAME) will expect a zip file.\n\n\n\n\nAll I see is the Amiga screen! Where are the rest of the emulators?\n\n\nYou've gone one screen too far ;) Press \nB\n to get back to the system screen and use the left and right arrows to navigate between the emulators. If you are wondering why some systems aren't there you need to add roms to their respective folders first before that system will show up.\n\n\nHow do I hide unused/unwanted systems?\n\n\nYou can delete the rom folders for the systems you don't want or you can move the rom folders you dont want into a folder you create called unused.\n\n\nHow do I change the order of the systems in EmulationStation?\n\n\nThe systems will appear in EmulationStation in the same order as they appear in the file \nes_systems.cfg\n. The order can be changed by editing this file so, first of all before you make any edits exit emulationstation by pressing f4 or exiting from the start menu. copy \n/etc/emulationstation/es_systems.cfg\n to the \n/home/pi/.emulationstation\n folder.\n\n\nNow edit es_systems.cfg, moving systems, everything from \nsystem\n...\n/system\n, to the order you are looking for. To keep things tidy, you can delete systems that you are not using.\n\n\nBear in mind that, if you update any systems, this will be reflected in \n/etc/emulationstation/es_systems.cfg\n and you will need to manually update your copy in \n/home/pi/.emulationstation\n.\n\n\nHow do I add a new system to EmulationStation?\n\n\nIt is possible to manually add a new system in EmulationStation but it is a process recommended for experienced users because, before you start, you should be comfortable with finding, creating, editing text files on your pi, using the command line, manually maintaining EmulationStation config files and possibly creating or modifying themes. It can be a lengthy and repetitive process so patience is a must. Having said this, this is a good opportunity to learn how to do all this and get an idea of how RetroPie works beneath the hood.\n\n\nIf you are looking to create a favourites lists within a system, then you may wish to consider the \nchild-friendly version of EmulationStation\n which has this feature .\n\n\nYou can find the tutorial to do this \nHERE\n\n\nMy emulator won't close through my gamepad!\n\n\nThis sometimes happens. ES does not monitor input while an emulator is running. If you want to close your emulator, you will have to do it from within the emulator. RetroArch has a binding for this and should automatically be generated when you first configure your controller in emulationstation. default to exit is \nselect+start\n, see \nHere\n for more info.\n\n\nAll I see is this weird white dot in the middle of the screen!\n\n\nThis dot is the \"fake\" SDL window ES uses to get input. Actual rendering is done through OpenGL ES. If all you see is this dot, then odds are something went wrong initializing the OpenGL ES surface. Are you sure you're running at least the 192/64mb memory split?\n\n\nES doesn't detect my controller when started at boot!\n\n\nYour controller driver is likely being started after EmulationStation. An easy way around this is to add a \"sleep\" command in the EmulationStation start script in \n/usr/bin/emulationstation\n.  \nMore information here.\n\n\nHow do I add another controller to navigate and control ES?\n\n\nOpen the Main Menu by pressing \nStart\n on the original controller that you have already setup. Then navigate to Configure Input and press \nA\n to start. Now on the other controller press and hold down any button. This should bring up the option to setup this controller. Just follow the on-screen directions. When finished, navigate to the OK button on screen, then press the button that you set as \nA\n on your recently configured controller to exit.\n\n\nI don't have enough buttons to finish the Configure Input screen?!\n\n\nJust hold down a button to skip each unused button until you get to the end of the configuration\n\n\nI messed up on the initial prompt that appears when Emulation Station starts for the first time. My controls are completely messed up and out of order. Is there a way to redo this prompt?\n\n\nYou need to delete the configurations you've made in \n/home/pi/.emulationstation/es_input.cfg\n but IMPORTANT: YOU NEED TO KEEP IN THE FOLLOWING LINES IF YOU WANT AUTOCONFIGURATIONS TO WORK:\n\n\n  \ninputAction type=\nonfinish\n\n    \ncommand\n/opt/retropie/supplementary/emulationstation/scripts/inputconfiguration.sh\n/command\n\n  \n/inputAction\n\n\n\n\n\nIf you lose the config you can re-install Emulation Station from Retropie-Setup. Note that you exit Emulation Station by pressing \nF4\n. When you (re-)start Emulation Station, the configuration prompt will appear again.\n\n\nPage-Up and Page-Down\n\n\nWhen configuring the inputs in EmulationStation, take into account that the Left Shoulder button will be used for Page-Up and the Right shoulder button will be used for Page-Down in the EmulationStation user interface. This in particular applies to using the keyboard with EmulationStation, you should map Left Shoulder and Right Shoulder to Page-Up and Page-Down respectively.\n\n\nAlternative Frontends\n\n\nBecause of the development hiatus, there has been some attention towards other front-ends.\n\n Attract-Mode (\nsite\n, \nforum thread\n)\n\n mehstation (\nsite\n)\n\n\nEmulation Station CEC support\n\n\n\n\nes-cec-input\n  Be sure to read the README", 
            "title": "EmulationStation"
        }, 
        {
            "location": "/EmulationStation/#emulationstation", 
            "text": "", 
            "title": "EmulationStation"
        }, 
        {
            "location": "/EmulationStation/#introduction", 
            "text": "This is the graphical front-end installed by RetroPie. EmulationStation is designed to allow you to use your Pi as if it were a retro console - with only a controller, not requiring a keyboard.   It was developed specifically for the Raspberry Pi, on the Raspberry Pi. However, it uses cross-platform libraries, so it can be run on pretty much any Linux machine. If you try, you can also build it on Windows.  From the dictionary:", 
            "title": "Introduction"
        }, 
        {
            "location": "/EmulationStation/#front-end", 
            "text": "the front of a car or other vehicle.  the part of a radio or television receiver to which the aerial signal goes first.  COMPUTING - a part of a computer or program that allows access to other parts.    EmulationStation is used to provide a polished user interface to present and interact with all the different aspects of the RetroPie distribution. It allows the user to use a UI that is controllable using a joypad or arcade controllers to navigate through the different emulators, and make (simple) edits to the systems configuration.  As it is the first thing that many users see, EmulationStation is often conflated with RetroPie as a whole, while ES is only a part of the RetroPie distribution.  EmulationStation was developed by Alec Lofquist (programming) and Nils Bonenberger (design   UI), see the  official EmulationStation page . For the code and more info, see also the  Github Repository .", 
            "title": "front end"
        }, 
        {
            "location": "/EmulationStation/#features", 
            "text": "EmulationStation offers the following features:  Listing of emulated systems (systemlist), and their respective games (gamelist)  Keyboard-less navigation  Controller configuration which is propagated to RetroArch emulators  Theming of certain elements (background, position/size of text elements)\n* Scraping of game information (see  here for more info )", 
            "title": "Features"
        }, 
        {
            "location": "/EmulationStation/#development-status", 
            "text": "Since spring 2015, there has been little or no activity from the original ES developer, Aloshi. Recently, there has been some activities to get the project moving again (see the  discussion here ). It remains to be seen if this will gather enough momentum to become a viable alternative for RetroPie or not.  Until that time, further developments are done by 'unofficial' forks, which are not necessarily maintained/updated often. One example is  this extension of ES , which is currently under experimental features.", 
            "title": "Development status"
        }, 
        {
            "location": "/EmulationStation/#help", 
            "text": "A great deal of information can be found in EmulationStation's  README.md  and  THEMES.md , also viewable on GitHub. Some links:  Building from source (if you're getting dependency errors, this might help).  Configuring EmulationStation.  Creating your own themes.", 
            "title": "Help"
        }, 
        {
            "location": "/EmulationStation/#common-problems", 
            "text": "", 
            "title": "Common Problems"
        }, 
        {
            "location": "/EmulationStation/#my-es_sytemscfg-is-being-overwritten-on-updates", 
            "text": "When you install themes from the retropie setup script they are installed to  /etc/emulationstation  and are overwritten when new themes are installed or RetroPie is updated.  If you want to customise your es_systems.cfg or add themes without them being overwritten on updates you can add them to  /home/pi/.emulationstation  EmulationStation first checks in  /home/pi/.emulationstation  and then checks  /etc/emulationstation .  For customising themes you'll place them in  /home/pi/.emulationstation/themes", 
            "title": "My ES_Sytems.cfg is being overwritten on updates!"
        }, 
        {
            "location": "/EmulationStation/#emulationstation-isnt-detecting-my-roms", 
            "text": "Are they in the right folders?  Remember, paths are case sensitive . You can check what folders ES is using with:  nano /etc/emulationstation/es_systems.cfg  or better yet look at the documentation here on the wiki.  Is ES looking for the right file extension?  Remember, the extension is case sensitive . You can check what format ES is searching with:  nano /etc/emulationstation/es_systems.cfg  and again see the pages here on the wiki  Are your ROMs in a compressed format?  EmulationStation does not search inside zip files , though some emulators (like MAME) will expect a zip file.", 
            "title": "EmulationStation isn't detecting my ROMs!"
        }, 
        {
            "location": "/EmulationStation/#all-i-see-is-the-amiga-screen-where-are-the-rest-of-the-emulators", 
            "text": "You've gone one screen too far ;) Press  B  to get back to the system screen and use the left and right arrows to navigate between the emulators. If you are wondering why some systems aren't there you need to add roms to their respective folders first before that system will show up.", 
            "title": "All I see is the Amiga screen! Where are the rest of the emulators?"
        }, 
        {
            "location": "/EmulationStation/#how-do-i-hide-unusedunwanted-systems", 
            "text": "You can delete the rom folders for the systems you don't want or you can move the rom folders you dont want into a folder you create called unused.", 
            "title": "How do I hide unused/unwanted systems?"
        }, 
        {
            "location": "/EmulationStation/#how-do-i-change-the-order-of-the-systems-in-emulationstation", 
            "text": "The systems will appear in EmulationStation in the same order as they appear in the file  es_systems.cfg . The order can be changed by editing this file so, first of all before you make any edits exit emulationstation by pressing f4 or exiting from the start menu. copy  /etc/emulationstation/es_systems.cfg  to the  /home/pi/.emulationstation  folder.  Now edit es_systems.cfg, moving systems, everything from  system ... /system , to the order you are looking for. To keep things tidy, you can delete systems that you are not using.  Bear in mind that, if you update any systems, this will be reflected in  /etc/emulationstation/es_systems.cfg  and you will need to manually update your copy in  /home/pi/.emulationstation .", 
            "title": "How do I change the order of the systems in EmulationStation?"
        }, 
        {
            "location": "/EmulationStation/#how-do-i-add-a-new-system-to-emulationstation", 
            "text": "It is possible to manually add a new system in EmulationStation but it is a process recommended for experienced users because, before you start, you should be comfortable with finding, creating, editing text files on your pi, using the command line, manually maintaining EmulationStation config files and possibly creating or modifying themes. It can be a lengthy and repetitive process so patience is a must. Having said this, this is a good opportunity to learn how to do all this and get an idea of how RetroPie works beneath the hood.  If you are looking to create a favourites lists within a system, then you may wish to consider the  child-friendly version of EmulationStation  which has this feature .  You can find the tutorial to do this  HERE", 
            "title": "How do I add a new system to EmulationStation?"
        }, 
        {
            "location": "/EmulationStation/#my-emulator-wont-close-through-my-gamepad", 
            "text": "This sometimes happens. ES does not monitor input while an emulator is running. If you want to close your emulator, you will have to do it from within the emulator. RetroArch has a binding for this and should automatically be generated when you first configure your controller in emulationstation. default to exit is  select+start , see  Here  for more info.", 
            "title": "My emulator won't close through my gamepad!"
        }, 
        {
            "location": "/EmulationStation/#all-i-see-is-this-weird-white-dot-in-the-middle-of-the-screen", 
            "text": "This dot is the \"fake\" SDL window ES uses to get input. Actual rendering is done through OpenGL ES. If all you see is this dot, then odds are something went wrong initializing the OpenGL ES surface. Are you sure you're running at least the 192/64mb memory split?", 
            "title": "All I see is this weird white dot in the middle of the screen!"
        }, 
        {
            "location": "/EmulationStation/#es-doesnt-detect-my-controller-when-started-at-boot", 
            "text": "Your controller driver is likely being started after EmulationStation. An easy way around this is to add a \"sleep\" command in the EmulationStation start script in  /usr/bin/emulationstation .   More information here.", 
            "title": "ES doesn't detect my controller when started at boot!"
        }, 
        {
            "location": "/EmulationStation/#how-do-i-add-another-controller-to-navigate-and-control-es", 
            "text": "Open the Main Menu by pressing  Start  on the original controller that you have already setup. Then navigate to Configure Input and press  A  to start. Now on the other controller press and hold down any button. This should bring up the option to setup this controller. Just follow the on-screen directions. When finished, navigate to the OK button on screen, then press the button that you set as  A  on your recently configured controller to exit.", 
            "title": "How do I add another controller to navigate and control ES?"
        }, 
        {
            "location": "/EmulationStation/#i-dont-have-enough-buttons-to-finish-the-configure-input-screen", 
            "text": "Just hold down a button to skip each unused button until you get to the end of the configuration", 
            "title": "I don't have enough buttons to finish the Configure Input screen?!"
        }, 
        {
            "location": "/EmulationStation/#i-messed-up-on-the-initial-prompt-that-appears-when-emulation-station-starts-for-the-first-time-my-controls-are-completely-messed-up-and-out-of-order-is-there-a-way-to-redo-this-prompt", 
            "text": "You need to delete the configurations you've made in  /home/pi/.emulationstation/es_input.cfg  but IMPORTANT: YOU NEED TO KEEP IN THE FOLLOWING LINES IF YOU WANT AUTOCONFIGURATIONS TO WORK:     inputAction type= onfinish \n     command /opt/retropie/supplementary/emulationstation/scripts/inputconfiguration.sh /command \n   /inputAction   If you lose the config you can re-install Emulation Station from Retropie-Setup. Note that you exit Emulation Station by pressing  F4 . When you (re-)start Emulation Station, the configuration prompt will appear again.", 
            "title": "I messed up on the initial prompt that appears when Emulation Station starts for the first time. My controls are completely messed up and out of order. Is there a way to redo this prompt?"
        }, 
        {
            "location": "/EmulationStation/#page-up-and-page-down", 
            "text": "When configuring the inputs in EmulationStation, take into account that the Left Shoulder button will be used for Page-Up and the Right shoulder button will be used for Page-Down in the EmulationStation user interface. This in particular applies to using the keyboard with EmulationStation, you should map Left Shoulder and Right Shoulder to Page-Up and Page-Down respectively.", 
            "title": "Page-Up and Page-Down"
        }, 
        {
            "location": "/EmulationStation/#alternative-frontends", 
            "text": "Because of the development hiatus, there has been some attention towards other front-ends.  Attract-Mode ( site ,  forum thread )  mehstation ( site )", 
            "title": "Alternative Frontends"
        }, 
        {
            "location": "/EmulationStation/#emulation-station-cec-support", 
            "text": "es-cec-input   Be sure to read the README", 
            "title": "Emulation Station CEC support"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/", 
            "text": "Introduction\n\n\nThis page describes the functioning of an experimental branch of EmulationStation (ES). This branch allows ES to be run in three different UI modes: Full, Kiosk and Kid mode. These modes have ever decreasing options available, and are meant for people who want to be able to leave the carefully set up installation alone with a group of friends/kids without having to re-flash the SD card afterwards.\nThe Full mode offers the same functionality as the vanilla ES UI. The Kiosk mode only shows items in the game-lists that are not explicitly hidden. The Kid only shows items which are explicitly selected to be kid-friendly (and excludes almost all system options).\n\n\n\n\nThis is in the experimental packages for a reason, backup everything you cannot afford to lose!\n\n\n\n\nOverview\n\n\n\n\nInstallation\n\n\nFeatures\n  \n\n\nFeatures - UI modes\n  \n\n\nFeatures - Switching UI modes\n  \n\n\nFeatures - Favorites\n\n\nFeatures - Gamelist.xml\n\n\nFeatures - Random game selection\n\n\nThemes\n\n\nFuture developments\n\n\nCredits\n\n\n\n\n  \n\n\nVideo Guide\n: https://www.youtube.com/watch?v=1BWjNp7Br9c  \n\n\n\n\nInstallation\n\n\nThe ES branch is located at: https://github.com/zigurana/EmulationStation/tree/UI_modes_Kiosk_Kid_Full . It can be installed \nover your current installation of ES\n via the RetroPie-Setup script. It is located under \nExperimental Packages \n option 306: emulationstation-kids\n\n\nFeatures\n\n\nUI modes\n\n\nTo allow different levels of system 'lock-down', user modes were introduced with different sets of functionalities. These modes are Full, Kiosk and Kid. Generally speaking, kids do not need to edit system settings, nor will visiting friends. The full set of options also complicates the UI, and the kid and kiosk modes hide these when they are not needed.\n\n\nFull user interface\n  \n\nAka admin mode \u2013 This is the current UI, it has all the options, bells and whistles.\n\n\nKiosk mode\n   \n\nThis mode hides most of the ui options, such as CONFIGURE INPUT, UI SETTINGS, SCRAPER, but also EDIT THIS GAMES METADATA, etc. In addition this mode also hides those entries in the gamelist which have their metadata-tag \nhidden\nset to true.\n\n\nKid mode\n  \n\nThis mode has all the restrictions of Kiosk mode, but in addition -only- lists games which are explicitly white-listed. This can be done by setting the metadata-tag \nKid-game\n to true.\n\n\n\nSwitching UI modes\n\n\nTo switch the UI mode from Full to one of the limited modes, a new menu option was implemented under UI OPTIONS:\n\n\n\nSwitching back to the Full UI\nOnce you are in one of the restricted modes, the UI options (where I put the UI Mode selector), is not shown anymore. So how to return to the full UI once your in Kid/kiosk mode? Well one way, is to go to the \n/home/pi/.emulationstation/es_settings.cfg\nfile and edit the UI_mode value manually:\n\nstring name=\"UIMode\" value=\"Full\" /\n\n\nAlternatively, you can use a pre-defined passkey sequence that you can enter while you are anywhere in the ES ui. The default passkey is [up,up, down, down, left, right, left, right, b, a] which some of you might recognize as the Konami cheat code from olden-times. This sequence can be changed in \nes_settings.cfg\n if need be:\n\nstring name=\"UIMode_passkey\" value=\"uuddlrlrba\" /\n\nWhen succesfully entered, this will exit (and restart) ES.\n\n\nFavorites\n\n\nThis branch of ES has incorporated the pull request by Kaptainka to allow the setting of favorites in the game-list, and subsequent filtering of said list to show only the favorites.\nSetting a game to be a favorite can be done using the metadata editor (press select, then 'edit this games metadata', scroll down to 'favorite on/off'). If your \ntheme\n allows it, you can also toggle the favorite state quickly by pressing 'x'.\n\n\nGamelist.xml\n\n\nSo in all, three new tags have been introduced: favorites, kid game, and hidden (all boolean). \n\n\ngame\n\n\n...\n \n\n\nfavorite\nfalse\n/favorite\n \n\n\nkidgame\ntrue\n/kidgame\n \n\n\nhidden\nfalse\n/hidden\n \n\n\n...\n \n\n\n/game\n   \n\n\nOf course, these new metadata tags are not present in the gamelists you have by default, but once you edit the metadata for a single game, they will be added for that specific system\u2019s \ngamelist.xml\n. If you want to edit your \ngamelist.xml\n files in some other tools (for instance SSelphs excellent scraper), you will need to take these new tags into account.\n\n\nThe values can be set using the meta-data editor in the UI, or by directly editing the gamelist.xml file (make sure to exit ES first, as it will overwrite the file upon exit).\n\nhttps://dl.dropboxusercontent.com/u/859248/RetroPieES/metadata_resize.png\n\n\nRandom Game selection\n\n\nThe original plan was to get a random game starter that could be triggered as some sort of screensaver, and act as a stand-in for an actual attract-mode. I got it working up to the point where it is an option in the GameList Options menu (what you get when you press \u2018select\u2019 while in a game-list view):\n\n\nThis will change the view focus to a new random game, in any of the systems that have games that are visible given the current UI mode. The implementation of the screensaver turned out to be very tricky and has been demoted to a someday-maybe project.\n\n\nThemes\n\n\nThe visualization for these tags are NOT included in most of the current themes (which are specified by version 3). \nIn his/her original pull request, kaptainkia suggested to increase the xml version to 4 to indicate the availability of the new favorite tag. This has been copied for the other tags as well. At least from the ES side of things, you can then keep on using the old themes, without anything breaking. You will just not be able to see the values at a glance.\n\n\nIf the theme supports it, the boolean status of metadata items Favorite, Hidden, and Kidgame is visualized using simple icons:\n\n\n\nTo see these changes, you will also need to update your theme(s). To make a start, I\u2019ve updated the Carbon theme to include these new elements. \nYou can download it here.\n\n\nThis theme will also allow you to toggle some values quickly using x for favorites and y for kidgames.\n\n\n\nIf you want in include this in your own theme, these are the items to add:  \n\n\nimage name=\"md_hidden\"\n\n\npos\n0.17 0.165\n/pos\n\n\npath\n./../art/hidden.svg\n/path\n\n\nmaxSize\n0.06 0.045\n/maxSize\n\n\norigin\n0 0\n/origin\n\n\n/image\n\n\nimage name=\"md_kidgame\"\n\n\npos\n0.10 0.16\n/pos\n\n\npath\n./../art/teddy.svg\n/path\n\n\nmaxSize\n0.06 0.06\n/maxSize\n\n\norigin\n0 0\n/origin\n\n\n/image\n\n\nimage name=\"md_favorite\"\n\n\npos\n0.03 0.165\n/pos\n\n\npath\n./../art/heart.svg\n/path\n\n\nmaxSize\n0.045 0.045\n/maxSize\n\n\norigin\n0 0\n/origin\n\n\n/image\n  \n\n\nThe corresponding images are in the folder \ncarbon_v4\\art\n. Of course, the values for pos and sizes will depend on the theme.\n\n\nFuture developments\n\n\nThe difference between the stock ES and this branch is rather large, with many small changes in a lot of files. Consequently, when any update occurs in the original ES branch (upstream), this might impact this branch as well. Therefore, the risk of a high maintenance burden for this branch was deemed too high to incorporate it into the RetroPie branch proper. Kid Mode ES will remain in the experimental packages menu, where it is available for users who which to test it out.\n\n\nFor the foreseeable future this ES version will be maintained by https://github.com/zigurana, merging in all relevant changes when they occur (or when someone alerts him to it).\n\n\nCredits\n\n\n\n\nAloshi, of course.\n\n\nThe RetroPie team: Buzz, Herb, Floob,  for bringing this to the masses.\n\n\nKaptainka, for the initial implementation of favorites in ES.\n\n\nGizmo98, for creating the module in the RetroPie-setup script.\n\n\nThe beta-testers who went bug hunting and helped make this better. See \nhere\n for the original forum thread.", 
            "title": "Child friendly EmulationStation"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#introduction", 
            "text": "This page describes the functioning of an experimental branch of EmulationStation (ES). This branch allows ES to be run in three different UI modes: Full, Kiosk and Kid mode. These modes have ever decreasing options available, and are meant for people who want to be able to leave the carefully set up installation alone with a group of friends/kids without having to re-flash the SD card afterwards.\nThe Full mode offers the same functionality as the vanilla ES UI. The Kiosk mode only shows items in the game-lists that are not explicitly hidden. The Kid only shows items which are explicitly selected to be kid-friendly (and excludes almost all system options).", 
            "title": "Introduction"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#this-is-in-the-experimental-packages-for-a-reason-backup-everything-you-cannot-afford-to-lose", 
            "text": "", 
            "title": "This is in the experimental packages for a reason, backup everything you cannot afford to lose!"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#overview", 
            "text": "Installation  Features     Features - UI modes     Features - Switching UI modes     Features - Favorites  Features - Gamelist.xml  Features - Random game selection  Themes  Future developments  Credits       Video Guide : https://www.youtube.com/watch?v=1BWjNp7Br9c", 
            "title": "Overview"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#installation", 
            "text": "The ES branch is located at: https://github.com/zigurana/EmulationStation/tree/UI_modes_Kiosk_Kid_Full . It can be installed  over your current installation of ES  via the RetroPie-Setup script. It is located under  Experimental Packages   option 306: emulationstation-kids", 
            "title": "Installation"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#ui-modes", 
            "text": "To allow different levels of system 'lock-down', user modes were introduced with different sets of functionalities. These modes are Full, Kiosk and Kid. Generally speaking, kids do not need to edit system settings, nor will visiting friends. The full set of options also complicates the UI, and the kid and kiosk modes hide these when they are not needed.  Full user interface    \nAka admin mode \u2013 This is the current UI, it has all the options, bells and whistles.  Kiosk mode     \nThis mode hides most of the ui options, such as CONFIGURE INPUT, UI SETTINGS, SCRAPER, but also EDIT THIS GAMES METADATA, etc. In addition this mode also hides those entries in the gamelist which have their metadata-tag  hidden set to true.  Kid mode    \nThis mode has all the restrictions of Kiosk mode, but in addition -only- lists games which are explicitly white-listed. This can be done by setting the metadata-tag  Kid-game  to true.", 
            "title": "UI modes"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#switching-ui-modes", 
            "text": "To switch the UI mode from Full to one of the limited modes, a new menu option was implemented under UI OPTIONS:  Switching back to the Full UI\nOnce you are in one of the restricted modes, the UI options (where I put the UI Mode selector), is not shown anymore. So how to return to the full UI once your in Kid/kiosk mode? Well one way, is to go to the  /home/pi/.emulationstation/es_settings.cfg file and edit the UI_mode value manually: string name=\"UIMode\" value=\"Full\" /  Alternatively, you can use a pre-defined passkey sequence that you can enter while you are anywhere in the ES ui. The default passkey is [up,up, down, down, left, right, left, right, b, a] which some of you might recognize as the Konami cheat code from olden-times. This sequence can be changed in  es_settings.cfg  if need be: string name=\"UIMode_passkey\" value=\"uuddlrlrba\" / \nWhen succesfully entered, this will exit (and restart) ES.", 
            "title": "Switching UI modes"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#favorites", 
            "text": "This branch of ES has incorporated the pull request by Kaptainka to allow the setting of favorites in the game-list, and subsequent filtering of said list to show only the favorites.\nSetting a game to be a favorite can be done using the metadata editor (press select, then 'edit this games metadata', scroll down to 'favorite on/off'). If your  theme  allows it, you can also toggle the favorite state quickly by pressing 'x'.", 
            "title": "Favorites"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#gamelistxml", 
            "text": "So in all, three new tags have been introduced: favorites, kid game, and hidden (all boolean).   game  ...    favorite false /favorite    kidgame true /kidgame    hidden false /hidden    ...    /game      Of course, these new metadata tags are not present in the gamelists you have by default, but once you edit the metadata for a single game, they will be added for that specific system\u2019s  gamelist.xml . If you want to edit your  gamelist.xml  files in some other tools (for instance SSelphs excellent scraper), you will need to take these new tags into account.  The values can be set using the meta-data editor in the UI, or by directly editing the gamelist.xml file (make sure to exit ES first, as it will overwrite the file upon exit). https://dl.dropboxusercontent.com/u/859248/RetroPieES/metadata_resize.png", 
            "title": "Gamelist.xml"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#random-game-selection", 
            "text": "The original plan was to get a random game starter that could be triggered as some sort of screensaver, and act as a stand-in for an actual attract-mode. I got it working up to the point where it is an option in the GameList Options menu (what you get when you press \u2018select\u2019 while in a game-list view): \nThis will change the view focus to a new random game, in any of the systems that have games that are visible given the current UI mode. The implementation of the screensaver turned out to be very tricky and has been demoted to a someday-maybe project.", 
            "title": "Random Game selection"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#themes", 
            "text": "The visualization for these tags are NOT included in most of the current themes (which are specified by version 3). \nIn his/her original pull request, kaptainkia suggested to increase the xml version to 4 to indicate the availability of the new favorite tag. This has been copied for the other tags as well. At least from the ES side of things, you can then keep on using the old themes, without anything breaking. You will just not be able to see the values at a glance.  If the theme supports it, the boolean status of metadata items Favorite, Hidden, and Kidgame is visualized using simple icons:  To see these changes, you will also need to update your theme(s). To make a start, I\u2019ve updated the Carbon theme to include these new elements.  You can download it here.  This theme will also allow you to toggle some values quickly using x for favorites and y for kidgames.  If you want in include this in your own theme, these are the items to add:    image name=\"md_hidden\"  pos 0.17 0.165 /pos  path ./../art/hidden.svg /path  maxSize 0.06 0.045 /maxSize  origin 0 0 /origin  /image  image name=\"md_kidgame\"  pos 0.10 0.16 /pos  path ./../art/teddy.svg /path  maxSize 0.06 0.06 /maxSize  origin 0 0 /origin  /image  image name=\"md_favorite\"  pos 0.03 0.165 /pos  path ./../art/heart.svg /path  maxSize 0.045 0.045 /maxSize  origin 0 0 /origin  /image     The corresponding images are in the folder  carbon_v4\\art . Of course, the values for pos and sizes will depend on the theme.", 
            "title": "Themes"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#future-developments", 
            "text": "The difference between the stock ES and this branch is rather large, with many small changes in a lot of files. Consequently, when any update occurs in the original ES branch (upstream), this might impact this branch as well. Therefore, the risk of a high maintenance burden for this branch was deemed too high to incorporate it into the RetroPie branch proper. Kid Mode ES will remain in the experimental packages menu, where it is available for users who which to test it out.  For the foreseeable future this ES version will be maintained by https://github.com/zigurana, merging in all relevant changes when they occur (or when someone alerts him to it).", 
            "title": "Future developments"
        }, 
        {
            "location": "/Child-friendly-EmulationStation/#credits", 
            "text": "Aloshi, of course.  The RetroPie team: Buzz, Herb, Floob,  for bringing this to the masses.  Kaptainka, for the initial implementation of favorites in ES.  Gizmo98, for creating the module in the RetroPie-setup script.  The beta-testers who went bug hunting and helped make this better. See  here  for the original forum thread.", 
            "title": "Credits"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/", 
            "text": "Table of Contents\n\n\n\n\nAbout This Tutorial\n\n\nNotes\n\n\nAbout Emulationstation Views\n\n\nCreating a Theme\n\n\nSystem View\n\n\nBasic View\n\n\nDetailed View\n\n\nThe End\n\n\nImportant Links\n\n\n\n\n\n\nAbout This Tutorial\n\n\nIn this tutorial I'm going to take you through the basics of creating a theme for Emulationstation and RetroPie.\n\n\nWe are going to create a simple theme called 'Spare'. We'll be using the default 'Carbon' theme as a guide, but creating all the XML from scratch so we can get a better understanding of it.\n\n\nWe'll be creating folders for 3 systems:\n\n\n\n\nGameboy (gb)\n\n\nNintendo Entertainment System (nes)\n\n\nSuper Nintendo Entertainment System (snes)\n\n\n\n\nI chose these 3 as they are pretty ubiquitous in the console world and most people should have heard of them. I also chose these 3 as they all have different shaped box art (square, portrait and landscape respectively), and we will be using those differences for some more advanced concepts in a later tutorial.\n\n\nWe are only doing 3 folders because once you've done one, the rest are pretty similar, and this tutorial is pretty long as it is, and you can only see 3 systems on the carousel anyway.\n\n\nThe theme we are going to make will look like this:\n\n\n\n\n['Spare' Theme System View]\n\n\n\n\n['Spare' Theme Basic View]\n\n\n\n\n['Spare' Theme Detailed View]\n\n\nIt is a simple, clean theme, not very outlandish, but it's enough to teach the essentials, and a few of the more advanced ideas.\n\n\n\n\nNotes\n\n\nI made this tutorial on a Windows PC, but all the main parts (the XML and images) can be done on any Operating System, and as long as you can FTP or SSH into the 'theme' folder on your Raspberry Pi, then you can test your theme there.\n\n\nWhat You Will Need\n\n\n\n\nA text editor\n\n\nNotepad will do fine, but something with syntax highlighting is helpful. I use Sublime Text 3, but others\nlike Notepad++ are good too.\n\n\nEmulationstation\n\n\nI use a version on my PC (more on that below), but the version on your Pi is fine.\n\n\nAn image editor\n\n\nThis is optional as all the images will be supplied, however you can use these images as a base to create your own, or make your own from scratch. I use Photoshop, but other programs like GIMP or Paint.net would work too.\n\n\nThe ES Theme Helper by @Rookervik\n\n\nNot essential, but very, very handy\n\n\nGet it from @Rookervik's DropBox here\n\n\nAny coding experience\n\n\nAgain, not essential, but it makes things easier. To be honest, as long as you know that \ntag\n opens a tag and \n/tag\n closes a tag, then you should be fine.\n\n\n\n\nThere will be a list of all links and resources at the end of the tutorial.\n\n\n\n\nAbout Emulationstation Views\n\n\nEmulationstation has 3 main sections, called Views:\n\n[All images taken from the default Carbon theme]\n\n\nSystem View\n\n\n\nThe System View is what you see when Emulationstation starts. It has a large white bar along the middle that houses a carousel that shows 3 System logos at a time.\n\n\nBasic View\n\n\n\nThis is a simple game list page. You see this if you haven't scraped any metadata for that system.\n\n\nDetailed View\n\n\n\nThe Detailed View is what you see if you \nhave\n scraped metadata. Different themes can show different data, in different places or a different order, but every theme can only display these values (along with the Game List):\n\n\n\n\nmd_image\n\n\nmd_rating\n\n\nmd_releasedate\n\n\nmd_developer\n\n\nmd_publisher\n\n\nmd_genre\n\n\nmd_players\n\n\nmd_lastplayed\n\n\nmd_playcount\n\n\nmd_description\n\n\n\n\nExtra values can be added by the Theme Maker, but the ones above are the only ones that get scraped by Emulationstation. Any others have to have their data entered by hand. (More on 'Extra' fields later)\n\n\n\n\nSetup\n\n\nI do the first 90% of my theme work on a portable version of Emulationstation created by @herb_fargus. I personally find it much easier to work on my Windows PC than directly on the Pi. It makes saving, testing and taking screenshots much simpler. I'm sorry Mac and Linux users, I don't know if there are any equivalents for you.\n\n\nHowever, this step is entirely optional. You can do all of this directly on the Pi over SSH/FTP if you so wish.\n\n\nSet Up EmulationStation on PC\n\n\n\n\nDownload the portable Emulationstation by @herb_fargus\n\n\nWatch the video first\n\n\nDownload the file\n\n\nInstall/unzip it where you want it. I have it on F:/ Drive, so the path is F:\\emulationstation\n\n\nDownload \nthis\n zip file. Within it are 3 folders: 'gb', 'nes' and 'snes'. Within each folder are 15 blank .txt files, each named after a game on that system. These files have also had their extensions changed to something that ES will see as a rom.\n\n\nThese are not real roms. They are blank text files that have been renamed to look like roms.\n\n\nEmulationstation sees these as real games. You won't be able to play them (since they are really just blank text files), but they will scrape with the built in Emulationstation scraper. They are also extremely small, so you don't have to worry about your test-bed getting too big.\n\n\nCopy those folders into F:\\emulationstation\\.emulationstation\\roms\n\n\n\n\nEmulationstation should now be set up with 45 (fake) games on 3 Systems, and ready for you to use.\n\n\nDouble click \nLaunch Portable (Windowed).bat\n to start Emulationstation.\n\n\n\n\nCreating a Theme\n\n\nWe're going to make the theme straight in the Portable Emulationstation's theme folder. This makes things a lot easier, because you can view a change straight away without having to move files each time.\n\n\nI have installed the portable Emulationstation on F:\\ Drive, so the path to my themes folder is F:\\emulationstation\\.emulationstation\\themes.\n\n\nFirst, \ndownload the full \nSpare\n theme from GitHub\n, so you have the images and fonts you need, and also so you have something to reference.\n\n\nWe'll start by setting up a simple file structure, with folders for the 3 console systems; Gameboy (gb), Nintendo Entertainment System (nes) and Super Nintendo Entertainment System (snes).\n\n\n\n\nWithin the themes folder make a folder called 'spare'.\n\n\n\n\nWithin the 'spare' folder make a new file called \nspare.xml\n.\n\n\n\n\n\n\nWithin the 'spare' folder make folders called 'nes', 'snes', 'gb' and '_inc'.\n\n\n\n\nWithin each of 'nes', 'snes', 'gb' make a new file called \ntheme.xml\n.\n\n\n\n\nAlso copy the system images from the downloaded file into the system folders\n\n\n\n\n\n\n'_inc' is your includes folder where you will hold your fonts and theme images. You can call it anything you like. Some people use \"art\", others use \"common\". I like \"_inc\", and the underscore keeps it at the top of the file tree.\n\n\n\n\nWithin '_inc' create 2 folders, called 'fonts' and 'images'. Copy the fonts and images from the downloaded file into their respective folders.\n\n\n\n\nYour folder structure should now look like this:\n\n\n\n\nNow onto the code.\n\n\n\n\nOpen \nspare.xml\n and add these lines:\n\n\n!--\ntheme name:     Spare\nversion:        1.0\nauthor:         Matt Kennedy\nemail:          \nwebsite:        \nlicense:        creative commons CC-BY-NC-SA\nbased on:       \nCarbon\n by Eric Hettervik\n--\n\n\n\ntheme\n\n\n    \nformatVersion\n4\n/formatVersion\n\n\n    \nview name=\nsystem\n/view\n\n    \nview name=\nbasic\n/view\n\n    \nview name=\ndetailed\n/view\n\n\n\n/theme\n\n\n\n\n\n\n\nWhen you are making your own theme you would obviously change the 'theme name' and 'author' fields to suit.\n\n\n\n\n\n\nThe theme details at the top just tell anyone looking who made the theme.\n\n\nAnything within \n!-- x --\n is a comment, visible to humans who read the code, but invisible to Emulationstation. \n\n\nThe \ntheme\n/theme\n fields tell Emulationstation that the code within is for a theme.\n\n\nThe \nformatVersion\n4\n/formatVersion\n sets the theme version. I don't really know much about this, just that most themes use version 3, but if you want to allow for the Child-Friendly version of ES, you need to use version 4.\n\n\nview name=\"x\"\n/view\n governs what happens in each of those views.\n\n\n\n\nSave \nspare.xml\n\n\n\n\nOpen \nspare/gb/theme.xml\n and add these lines:\n\n\ntheme\n\n\n    \nformatVersion\n4\n/formatVersion\n\n    \ninclude\n./../spare.xml\n/include\n\n\n    \nview name=\nsystem\n/view\n\n    \nview name=\nbasic\n/view\n\n    \nview name=\ndetailed\n/view\n\n\n\n/theme\n\n\n\n\n\nNotice it's almost identical to \nspare.xml\n, except for a few things. You don't need to specify any theme details, because we are using this line:\n\n\ninclude\n./../spare.xml\n/include\n\n\nThat line means, find a file up one level from here, called \nspare.xml\n, and include it in this file.\n\n\nThis is handy because it means you can have the bulk of your code in \nspare.xml\n and just call the file in each \ntheme.xml\n instead of having to put the code in each individual \ntheme.xml\n file.\n\n\nSave \ntheme.xml\n\n\n\n\nIf you switch Emulationstation to the 'spare' theme now, this is what you should see:\n\n\n\n\n[Blank System View]\n\n\n\n\n[Blank Basic View]\n\n\n\n\n[Blank Detailed View]\n\n\nWhat you are seeing are the Emulationstation defaults. We haven't yet told ES how we want anything to look, so for now it's just raw data with very very basic styling.\n\n\nIt's our job as Themers to change that.\n\n\n\n\nSystem View\n\n\nNow let's create the System View.\n\n\n\n\n['Spare' Theme System View]\n\n\nTake note of how it differs from the blank theme.\n\n\n\n\nThere are now Logos in place of simple folder names.\n\n\nThe white carousel and the grey bar below it haven't changed (unfortunately, they are hardcoded into Emulationstation and for the time being are not themeable).\n\n\nThere is a grey background color behind the carousel.\n\n\nThere is also a repeating background image behind the carousel.\n\n\nThere is a semi-transparent white bar behind the 'Help Menu' text in the footer.\n\n\nThe 'Help Menu' now has a different color and different font.\n\n\n\n\nOpen \nspare.xml\n\n\nWe'll start simple. Let's change the background color.\n\n\nExpand \nview name=\"system\"\n/view\n so it looks like this:\n\n\nview name=\nsystem\n\n\n\n/view\n\n\n\n\n\nNow we add some \nElements\n to the View. To start with we'll change the background color by creating a new Image Element called 'background_color'.\n\n\nview name=\nsystem\n\n    \nimage name=\nbackground_color\n extra=\ntrue\n/image\n\n\n/view\n\n\n\n\n\n\n\nThe \nextra=\"true\"\n means that this is a new \nElement\n being added, not something that is already defined by Emulationstation\n\n\n\n\nWe need to add some \nProperties\n to the Element to tell it what to do. There are 7 Properties accepted by the Image Element. They are:\n\n\n\n\npos\n\n\nThe position of the image within the screen.\n\n\nsize\n\n\nThe absolute size of the image. Does not maintain aspect ratio. Use either this or \nmaxSize\n, not both.\n\n\nmaxSize\n\n\nThe maximum size to stretch an image. Maintains aspect ratio. Use either this or \nsize\n, not both.\n\n\norigin\n\n\nThe origin point of the image. Default is top-left.\n\n\npath\n\n\nThe relative path to the image file.\n\n\ntile\n\n\nIf the image repeats or not.\n\n\ncolor\n\n\nA color overlay, allowing you to change the color and opacity of the image.\n\n\nUses 8 digit Hex values. The first 6 digits represent the Hex color code with the last 2 digits controlling the opacity.\n\n\n\n\n\n\nIf you want a more detailed explaination of Element Properties you can read \nthis section\n of the Emulationstation Themes documention.\n\n\n\n\nThe first thing we'll do is set the path to the image:\n\n\n\n\nYou should already have 'bg_color.png' in your images folder. If not, grab it from the full \nSpare\n theme you downloaded earlier and place it in the \nspare/_inc/images\n folder. This image is a simple, white 32 x 32px PNG.\n\n\nAdd the line:\n\npath\n./_inc/images/bg_color.png\n/path\n\nto\n\nimage name=\"background_color\" extra=\"true\"\n/image\n\nso it looks like this:\n\n\n\n\nimage name=\nbackground_color\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n\n/image\n\n\n\n\n\n\n\nHere we are telling ES to look for an image called \nbg_color.png\n within a folder called \nimages\n that sits within a folder called \n_inc\n that sits at \nroot\n level.\n\n\n\n\nNow we tell the Image where we want it to sit and how big we want it to be. We want it to start at the top left of the screen and stretch all the way to the bottom right. For that we need the \norigin\n, \npos\n and \nsize\n Properties.\n\n\n\n\n\n\norigin\n0 0\n/origin\n tells ES that the image originates at X position = 0 (left) and Y position = 0 (top).\n\n\n\n\n\n\npos\n0 0\n/pos\n tells ES to place the \norigin\n of the image in X position = 0 (left) and Y position = 0 (top).\n\n\n\n\n\n\nsize\n1 1\n/size\n tells ES the stretch the image 100% along the X-axis (horizontal) and 100% along the Y-axis (vertical).\n\n\n\n\n\n\nPut it all together and it looks like this:\n\n\nimage name=\nbackground_color\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_white.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0 0\n/pos\n\n    \nsize\n1 1\n/size\n\n\n/image\n\n\n\n\n\nIf you refresh the ES theme now you wouldn't see anything different, because the background was already white.\n\n\n\n\nNote: If you want to see any changes you have made to your theme files, first save the file, then within ES switch to any other theme and then back to your theme. From now on I will refer to this as \"refresh the theme\".\n\n\n\n\nThis is where the \ncolor\n Property comes into play. You can use this Property to change the white PNG to any color you want using \nHex color codes\n. There are many online \ncolor picker tools\n you can use to get your Hex color codes, just remember they need to be 6 numbers/letters to work correctly.\n\n\nIf we want to change our background color to Red, we add this line to the 'background_color' Element:\n\n\ncolor\nFF0000\n/color\n\n\nOther randomly chosen colors:\n\n\n\n\ncolor\n70D6F3\n/color\n = Light Blue\n\n\ncolor\n229C29\n/color\n = Dark Green\n\n\ncolor\nFF7700\n/color\n = Orange\n\n\ncolor\nCF1F97\n/color\n = Purple\n\n\n\n\nI'm just going to choose a lightish grey color so it stands out a little, but not too much. Your 'background_color' Element should now look like this:\n\n\nimage name=\nbackground_color\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0 0\n/pos\n\n    \nsize\n1 1\n/size\n\n    \ncolor\nd4d4d4\n/color\n\n\n/image\n\n\n\n\n\nAnd if you refresh ES, you'll now see a light grey background behind the Carousel.\n\n\nIt should look like this:\n\n\n\n\n\n\nNow for the \nBackground Pattern\n\n\n\n\n\n\n'bg_pattern.png' should already be in your \nspare/_inc/images\n folder.\n\n\n\n\n\n\nDuplicate the 'background_color' Element and change it so it looks like this:\n\n\n\n\n\n\nimage name=\nbackground_pattern\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_pattern.png\n/path\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.5 0.5\n/pos\n\n    \nsize\n1 1\n/size\n\n    \ncolor\naeaeae\n/color\n\n    \ntile\ntrue\n/tile\n\n\n/image\n\n\n\n\n\nWhat we've done here is:\n\n\n\n\nRenamed the Element to 'background_pattern'.\n\n\nChanged the \npath\n to point to the 'bg_pattern.png' image.\n\n\nChanged the \norigin\n to be the center of the image instead of the left-top.\n\n\nChanged the \npos\n to be the center of the screen instead of the left-top.\n\n\nChanged the \ncolor\n to be a darker grey.\n\n\nAdded the line \ntile\ntrue\n/tile\n. This line tells ES to repeat the image over the space instead of stretching it out.\n\n\n\n\n\n\nChanging the \norigin\n and \npos\n isn't strictly necessary, but I think it looks better with most patterns, so they start from the center of the screen instead of the left-top. As usual, it's up to the individual Themer which they prefer.\n\n\n\n\nIt should look like this:\n\n\n\n\n\n\nHelp Menu Background\n\n\nThis is the background that covers the Help menu items in the bottom left of the screen.\n\n\n\n\nAgain, duplicate the 'background_color' Element and change it so it looks like this:\n\n\n\n\nimage name=\nbackground_help\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 1\n/origin\n\n    \npos\n0 1\n/pos\n\n    \nsize\n1 0.070\n/size\n\n    \ncolor\nFFFFFF99\n/color\n\n\n/image\n\n\n\n\n\nWhat we've done here is:\n\n\n\n\nRenamed the Element to 'background_help'.\n\n\nChanged the \npath\n to point to the 'bg_help.png' image.\n\n\nChanged the \norigin\n to be the left-bottom of the image instead of the left-top.\n\n\nChanged the \npos\n to be the left-bottom of the screen instead of the left-top.\n\n\nChanged the \nsize\n from '1 1' to '1 0.070'. What this means is, we still want the image to stretch the full width of the screen, but we only want it to be 7% of the screen height.\n\n\nTold the background to be white \nFFFFFF\n, but we also added \n99\n to the end of the \ncolor\n to give it a slight transparency. \nFF\n is fully opaque and \n00\n is completely transparent.\n\n\n\n\nIt should look like this:\n\n\n\n\n\n\nHelp Menu Font\n\n\nWe're going to change the Font used in this theme to Roboto Light (and a little Roboto Bold), and also change the color of the Font.\n\n\nAdd these lines to \nspare.xml\n under \nbackground_help\n:\n\n\nhelpsystem name=\nhelp\n\n    \ntextColor\n000000\n/textColor\n\n    \niconColor\n000000\n/iconColor\n\n    \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n    \nfontSize\n0.03\n/fontSize\n\n\n/helpsystem\n\n\n\n\n\nThis changes:\n\n\n\n\nText and icon color to black.\n\n\nFont from default to Roboto Light.\n\n\nFont size.\n\n\n\n\nIt should look like this:\n\n\n\n\nSave \nspare.xml\n\n\n\n\nWe're nearly done with the \nSystem View\n. All that remains is to add the System \nLogos\n to the Carousel.\n\n\nOpen \nspare/gb/theme.xml\n\n\nExpand \nview name=\"system\"\n/view\n and insert the following line:\n\n\nimage name=\nlogo\n\n    \npath\n./logo.png\n/path\n\n\n/image\n\n\n\n\n\nSo it looks like this:\n\n\nview name=\nsystem\n\n    \nimage name=\nlogo\n\n        \npath\n./system.svg\n/path\n\n    \n/image\n\n\n/view\n\n\n\n\n\nThis tells ES to look in the same folder for an image called \nsystem.svg\n and to use it as the image for the Carousel in the System View.\n\n\nSave \ntheme.xml\n\n\nDo this for both the \nnes\n and \nsnes\n folders as well.\n\n\n\n\nRefresh ES and have a look at the \nSystem View\n. It should now look like this:\n\n\n\n\n\n\nBasic View\n\n\nThe Basic View should look like this:\n\n\n\n\nAs you can see, the background color, background pattern and Help menu are the same as the System View. That means we can use the same code for both.\n\n\nOpen \nspare.xml\n. It should look like this:\n\n\n!--\ntheme name:     Spare\nversion:        1.0\nauthor:         Matt Kennedy\nemail:          \nwebsite:        \nlicense:        creative commons CC-BY-NC-SA\nbased on:       \nCarbon\n by Eric Hettervik\n--\n\n\n\ntheme\n\n\n    \nformatVersion\n4\n/formatVersion\n\n\n    \nview name=\nsystem\n\n        \nimage name=\nbackground_color\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0 0\n/pos\n\n            \nsize\n1 1\n/size\n\n            \ncolor\nd4d4d4\n/color\n\n        \n/image\n\n\n        \nimage name=\nbackground_pattern\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_pattern.png\n/path\n\n            \norigin\n0.5 0.5\n/origin\n\n            \npos\n0.5 0.5\n/pos\n\n            \nsize\n1 1\n/size\n\n            \ncolor\naeaeae\n/color\n\n            \ntile\ntrue\n/tile\n\n        \n/image\n\n\n        \nimage name=\nbackground_help\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 1\n/origin\n\n            \npos\n0 1\n/pos\n\n            \nsize\n1 0.070\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n        \nhelpsystem name=\nhelp\n\n            \ntextColor\n000000\n/textColor\n\n            \niconColor\n000000\n/iconColor\n\n            \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n            \nfontSize\n0.03\n/fontSize\n\n        \n/helpsystem\n\n    \n/view\n\n    \nview name=\nbasic\n/view\n\n    \nview name=\ndetailed\n/view\n\n\n\n/theme\n\n\n\n\n\nNow, we could just copy all the \nimage\n Elements and paste them into \nview name=\"basic\"\n/view\n, but there is an easier way.\n\n\nChange:\n\nview name=\"system\"\n\nto\n\nview name=\"system, basic, detailed\"\n\n\nDone. Now, instead of saying that the following code is just for the System View, it's also for the Basic View and Detailed View. How easy was that? This trick will come in handy a lot later on.\n\n\nNow we just need to style the System Logo and the Gamelist.\n\n\n\n\nSystem Logo\n\n\nFor the \nSystem Logo\n, we're going to use the same trick as above. Open \nspare/gb/theme.xml\n and change:\n\nview name=\"system\"\n\nto\n\nview name=\"system, basic, detailed\"\n\n\nThat means anything within that \nview\n will apply to all 3 views.\n\n\nThe Basic View should now look like this:\n\n\n\n\nSave `theme.xml'\n\n\n\n\nBack in \nspare.xml\n we are going to create a semi-transparent white background box in the header to match the one in the footer (behind the Help menu).\n\n\nExpand \nview name=\"basic\"\n/view\n and insert the following:\n\n\nimage name=\nbackground_logo\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0 0\n/pos\n\n    \nsize\n1 0.18\n/size\n\n    \ncolor\nFFFFFF99\n/color\n\n\n/image\n\n\n\n\n\nThis places a white box across the top of the screen that is 100% of the screen in width and 18% of the screen in height:\n\n\n\n\n\n\nAt this point I like to bring in \nHelper Boxes\n. These are just semi-transparent colored boxes that I use to work out where an Element will sit on the screen. I'm going to use one to place the Logo.\n\n\nimage name=\nlogo_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.5 0.09\n/pos\n\n    \nsize\n0.4 0.16\n/size\n\n    \ncolor\nff0000aa\n/color\n\n\n/image\n\n\n\n\n\n\n\norigin\n0.5 0.5\n/origin\n sets the Origin Point to the center of the box.\n\n\npos\n0.5 0.09\n/pos\n puts the Origin Point of the box at 50% of the screen width, and at 9% of the screen height.\n\n\nsize\n0.4 0.16\n/size\n means the box is 40% wide and 16% high.\n\n\ncolor\nff0000aa\n/color\n gives the box a transparent red color.\n\n\n\n\nLike this:\n\n\n\nNow we can place the logo inside that box:\n\n\nimage name=\nlogo\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.5 0.09\n/pos\n\n    \nmaxSize\n0.4 0.16\n/maxSize\n\n\n/image\n\n\n\n\n\nNotice we are setting the \norigin\n and \npos\n the same as \"logo_helper\". Instead of \nsize\n we have used \nmaxSize\n, but kept the numbers the same. If we used \nsize\n the logo would stretch to fill the box, lose aspect ratio and look weird. Using \nmaxSize\n forces the image to maintain aspect ratio. It will grow until either the sides or top/bottom hit the edge and then stop.\n\n\n\n\n\n\nWe'll use another Helper Box to get the right spacing for the Gamelist:\n\n\nimage name=\ngamelist_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.05 0.2\n/pos\n\n    \nsize\n0.9 0.71\n/size\n\n    \ncolor\nff0000aa\n/color\n\n\n/image\n\n\n\n\n\n\n\nNow we know the size for the Gamelist:\n\n\ntextlist name=\ngamelist\n\n    \nselectorColor\n000000\n/selectorColor\n\n    \nselectedColor\nFFFFFF\n/selectedColor\n\n    \nprimaryColor\n000000\n/primaryColor\n\n    \nsecondaryColor\n888888\n/secondaryColor\n\n    \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n    \npos\n0.05 0.2\n/pos\n\n    \nsize\n0.9 0.71\n/size\n\n    \nfontSize\n0.04\n/fontSize\n\n\n/textlist\n\n\n\n\n\n\n\nselectorColor\n is the color of the bar that shows which game is selected. Set here to black.\n\n\nselectedColor\n is the color of the text of the selected game. Set here to white.\n\n\nprimaryColor\n is the main text color of the Gamelist. Set here to black.\n\n\nsecondaryColor\n is the color of any folders in your Gamelist. Set here to a mid-point grey.\n\n\n\n\n\n\n\n\nAll that is left is to remove the Helper Boxes.\n\n\nDelete the \nimage name=\"logo_helper\" extra=\"true\"\n Element to remove the red box in the header.\n\n\nInstead of deleting \nimage name=\"gamelist_helper\" extra=\"true\"\n, we can use it as the white background:\n\n\n\n\nRename it from \"gamelist_helper\" to \"background_gamelist\".\n\n\nChange \ncolor\nff0000aa\n/color\n to \ncolor\nFFFFFF99\n/color\n.\n\n\n\n\nYou should now be the owner of a shiny new Basic View:\n\n\n\n\n\n\nDetailed View\n\n\nNow for the Big One; the \nDetailed View\n. This one isn't too bad mostly, but the metadata can be a real hassle to order so it looks nice. Each part of the metadata has to be done individually... but we'll jump off that bridge when we come to it.\n\n\nThis is what we want to end up with:\n\n\n\n\nHowever, it starts off looking like this:\n\n\n\n\n\n\nRemember we have already styled the Logo, the Background and the Help menu.\n\n\n\n\n\n\nOpen \nspare.xml\n.\n\n\nWe're going to start by placing a bunch of Helper boxes to block out where we want everything. \n\n\n\n\nYou can use an image editing program to mock this up beforehand, and this is where the ES Theme Helper comes in very handy.\n\n\nOr you can just sort of freehand it. Add a box, check its shape, move it, resize it, check it again. Keep doing that until you are happy with it, and then add another box (this was the way I made this theme).\n\n\n\n\nAdd this code to \nview name=\"detailed\"\n/view\n:\n\n\nimage name=\ngamelist_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.01 0.02\n/pos\n\n    \nsize\n0.35 0.89\n/size\n\n    \ncolor\nDC143C44\n/color\n\n\n/image\n\n\n\nimage name=\nimage_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.37 0.02\n/pos\n\n    \nsize\n0.35 0.62\n/size\n\n    \ncolor\n4169E144\n/color\n\n\n/image\n\n\n\nimage name=\nmetadata_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.73 0.02\n/pos\n\n    \nsize\n0.26 0.62\n/size\n\n    \ncolor\n00C5CD44\n/color\n\n\n/image\n\n\n\nimage name=\ndesc_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.37 0.66\n/pos\n\n    \nsize\n0.62 0.25\n/size\n\n    \ncolor\nEEC90044\n/color\n\n\n/image\n\n\n\n\n\nWhich makes it look like this:\n\n\n\n\nThese colored boxes will eventually be the semi-transparent white boxes that go behind the content, but for now we make them colored so they are easier to see.\n\n\n\n\nNow we want to add in some more Helper boxes within these, so the content will have some padding:\n\n\nimage name=\nlogo_helper\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.186 0.14\n/pos\n\n    \nsize\n0.33 0.19\n/size\n\n    \ncolor\n8B636C44\n/color\n\n\n/image\n\n\n\nimage name=\ngamelist_helper_2\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.02 0.25\n/pos\n\n    \nsize\n0.33 0.64\n/size\n\n    \ncolor\n8B636C44\n/color\n\n\n/image\n\n\n\nimage name=\nimage_helper_2\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.545 0.33\n/pos\n\n    \nsize\n0.33 0.58\n/size\n\n    \ncolor\n0000EE44\n/color\n\n\n/image\n\n\n\nimage name=\nmetadata_helper_2\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.74 0.04\n/pos\n\n    \nsize\n0.24 0.58\n/size\n\n    \ncolor\n00868B44\n/color\n\n\n/image\n\n\n\nimage name=\ndesc_helper_2\n extra=\ntrue\n\n    \npath\n./_inc/images/bg_color.png\n/path\n\n    \norigin\n0 0\n/origin\n\n    \npos\n0.38 0.68\n/pos\n\n    \nsize\n0.60 0.21\n/size\n\n    \ncolor\nCDAD0044\n/color\n\n\n/image\n\n\n\n\n\n\n\n\n\nNotice \"logo_helper\" and \"image_helper_2\" both have \norigin\n0.5 0.5\n/origin\n. This is because we want the images to be aligned from the very center of their Helper box. It takes a bit more work to get these aligned properly, but it looks better once they are.\n\n\n\n\nNow it's just a matter of moving each piece of metadata into its correct place.\n\n\n\n\nMove the Logo:\n\n\nimage name=\nlogo\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.186 0.14\n/pos\n\n    \nmaxSize\n0.33 0.19\n/maxSize\n\n\n/image\n\n\n\n\n\n\n\n\n\nNow the Image:\n\n\nimage name=\nmd_image\n\n    \norigin\n0.5 0.5\n/origin\n\n    \npos\n0.545 0.33\n/pos\n\n    \nmaxSize\n0.33 0.58\n/maxSize\n\n\n/image\n\n\n\n\n\n\n\n\n\nThe Gamelist:\n\n\ntextlist name=\ngamelist\n\n    \nselectorColor\n000000\n/selectorColor\n\n    \nselectedColor\nFFFFFF\n/selectedColor\n\n    \nprimaryColor\n000000\n/primaryColor\n\n    \nsecondaryColor\n888888\n/secondaryColor\n\n    \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n    \npos\n0.02 0.25\n/pos\n\n    \nsize\n0.33 0.64\n/size\n\n    \nfontSize\n0.04\n/fontSize\n\n    \nhorizontalMargin\n0.01\n/horizontalMargin\n\n\n/textlist\n\n\n\n\n\n\n\n\n\nThe Description:\n\n\ntext name=\nmd_description\n\n    \npos\n0.38 0.68\n/pos\n\n    \nsize\n0.60 0.21\n/size\n\n    \ncolor\n000000\n/color\n\n    \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n    \nfontSize\n0.026\n/fontSize\n\n    \nalignment\nleft\n/alignment\n\n    \nforceUppercase\n0\n/forceUppercase\n\n    \nlineSpacing\n1.6\n/lineSpacing\n\n\n/text\n\n\n\n\n\n\n\n\n\n\nNow... the fun fun part. The metadata. So far everything has been pretty simple. Logos, gamelists, images, etc are all big things that you can place without too much thought. Metadata is different.\n\n\nMetadata is split up into 8 main sections (I'm not counting Image and Description in this list), and each of those sections has both a Label and a Value.\n\n\n\n\nmd_lbl_rating, md_rating\n\n\nmd_lbl_releasedate, md_releasedate\n\n\nmd_lbl_developer, md_developer\n\n\nmd_lbl_publisher, md_publisher\n\n\nmd_lbl_genre, md_genre\n\n\nmd_lbl_players, md_players\n\n\nmd_lbl_lastplayed, md_lastplayed\n\n\nmd_lbl_playcount, md_playcount\n\n\n\n\nTo make things more annoying, \nmd_releasedate\n and \nmd_lastplayed\n are both \ndatetime\n fields instead of just plain \ntext\n fields, so there are certain things the can't do, like be center aligned.\n\n\nThis is the code I used to place my metadata (this is long):\n\n\ntext name=\nmd_lbl_rating, md_lbl_releasedate, md_lbl_developer, md_lbl_publisher, md_lbl_genre, md_lbl_players, md_lbl_lastplayed, md_lbl_playcount\n\n    \ncolor\n000000\n/color\n\n    \nforceUppercase\n1\n/forceUppercase\n\n    \nfontPath\n./_inc/fonts/Roboto-Medium.ttf\n/fontPath\n\n    \nfontSize\n0.02\n/fontSize\n\n    \nsize\n0.24 0.01\n/size\n\n\n/text\n\n\n\ntext name=\nmd_developer, md_publisher, md_genre, md_players, md_playcount\n\n    \ncolor\n000000\n/color\n\n    \nforceUppercase\n0\n/forceUppercase\n\n    \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n    \nfontSize\n0.024\n/fontSize\n\n    \nsize\n0.23 0.02\n/size\n\n\n/text\n\n\ndatetime name=\nmd_releasedate, md_lastplayed\n\n    \ncolor\n000000\n/color\n\n    \nforceUppercase\n0\n/forceUppercase\n\n    \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n    \nfontSize\n0.024\n/fontSize\n\n    \nsize\n0.23 0.02\n/size\n\n\n/datetime\n\n\n    \nimage name=\nmetadata_helper_3\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.04\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_rating\n\n            \npos\n0.74 0.04\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_4\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.07\n/pos\n\n        \nsize\n0.23 0.04\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \nrating name=\nmd_rating\n\n            \npos\n0.75 0.07\n/pos\n\n            \nsize\n0.23 0.03\n/size\n\n            \nfilledPath\n./_inc/images/star_full.png\n/filledPath\n\n            \nunfilledPath\n./_inc/images/star_hollow.png\n/unfilledPath\n\n        \n/rating\n\n\n    \nimage name=\nmetadata_helper_5\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.12\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_players\n\n            \npos\n0.74 0.12\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_6\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.14\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_players\n\n            \npos\n0.75 0.14\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_7\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.18\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_genre\n\n            \npos\n0.74 0.18\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_8\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.20\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_genre\n\n            \npos\n0.75 0.20\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_9\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.24\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_developer\n\n            \npos\n0.74 0.24\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_10\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.26\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_developer\n\n            \npos\n0.75 0.26\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_11\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.30\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_publisher\n\n            \npos\n0.74 0.30\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_12\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.32\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_publisher\n\n            \npos\n0.75 0.32\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_13\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.36\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_releasedate\n\n            \npos\n0.74 0.36\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_14\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.38\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ndatetime name=\nmd_releasedate\n\n            \npos\n0.75 0.38\n/pos\n\n        \n/datetime\n\n\n    \nimage name=\nmetadata_helper_15\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.42\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_playcount\n\n            \npos\n0.74 0.42\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_16\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.44\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_playcount\n\n            \npos\n0.75 0.44\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_17\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.74 0.48\n/pos\n\n        \nsize\n0.24 0.02\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ntext name=\nmd_lbl_lastplayed\n\n            \npos\n0.74 0.48\n/pos\n\n        \n/text\n\n\n    \nimage name=\nmetadata_helper_18\n extra=\ntrue\n\n        \npath\n./_inc/images/bg_color.png\n/path\n\n        \norigin\n0 0\n/origin\n\n        \npos\n0.75 0.50\n/pos\n\n        \nsize\n0.23 0.03\n/size\n\n        \ncolor\n5bb80044\n/color\n\n    \n/image\n\n        \ndatetime name=\nmd_lastplayed\n\n            \npos\n0.75 0.50\n/pos\n\n        \n/datetime\n\n\n\n\n\nThat comes out looking like this:\n\n\n\n\nNote how I used more Helper boxes for each piece of metadata? This was a long process of trail and error. Originally the font and spacing were too big so they took up too much room. I shrunk them down and now they don't take up enough room. I consoled myself that at least now there is room for the Child-Friendly icons (once I figure out how they work) because I didn't want to do the metadata again.\n\n\n\n\nNow just remove the second layer of padding Helpers, and change the main helper boxes color to \nFFFFFF99\n. I also renamed the white Helper boxes to \"background_\" because they are now backgrounds rather than helpers.\n\n\nYou're all done. Congratulations!\n\n\n\n\nThis is my complete \nspare.xml\n:\n\n\n!--\ntheme name:     Spare\nversion:        1.0\nauthor:         Matt Kennedy\nemail:          \nwebsite:        \nlicense:        creative commons CC-BY-NC-SA\nbased on:       \nCarbon\n by Eric Hettervik\n--\n\n\n\ntheme\n\n\n    \nformatVersion\n4\n/formatVersion\n\n\n    \nview name=\nsystem, basic, detailed\n\n\n        \nimage name=\nbackground_color\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0 0\n/pos\n\n            \nsize\n1 1\n/size\n\n            \ncolor\nd4d4d4\n/color\n\n        \n/image\n\n\n        \nimage name=\nbackground_pattern\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_pattern.png\n/path\n\n            \norigin\n0.5 0.5\n/origin\n\n            \npos\n0.5 0.5\n/pos\n\n            \nsize\n1 1\n/size\n\n            \ncolor\naeaeae\n/color\n\n            \ntile\ntrue\n/tile\n\n        \n/image\n\n\n        \nimage name=\nbackground_help\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 1\n/origin\n\n            \npos\n0 1\n/pos\n\n            \nsize\n1 0.070\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n        \nhelpsystem name=\nhelp\n\n            \ntextColor\n000000\n/textColor\n\n            \niconColor\n000000\n/iconColor\n\n            \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n            \nfontSize\n0.03\n/fontSize\n\n        \n/helpsystem\n\n\n    \n/view\n\n\n    \nview name=\nbasic\n\n\n        \nimage name=\nbackground_logo\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0 0\n/pos\n\n            \nsize\n1 0.18\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n            \nimage name=\nlogo\n\n                \norigin\n0.5 0.5\n/origin\n\n                \npos\n0.5 0.09\n/pos\n\n                \nmaxSize\n0.4 0.16\n/maxSize\n\n            \n/image\n\n\n        \nimage name=\nbackground_gamelist\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0.05 0.2\n/pos\n\n            \nsize\n0.9 0.71\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n            \ntextlist name=\ngamelist\n\n                \nselectorColor\n000000\n/selectorColor\n\n                \nselectedColor\nFFFFFF\n/selectedColor\n\n                \nprimaryColor\n000000\n/primaryColor\n\n                \nsecondaryColor\n888888\n/secondaryColor\n\n                \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n                \npos\n0.05 0.2\n/pos\n\n                \nsize\n0.9 0.71\n/size\n\n                \nfontSize\n0.04\n/fontSize\n\n            \n/textlist\n\n\n    \n/view\n\n\n    \nview name=\ndetailed\n\n\n        \nimage name=\nbackground_logo_gamelist\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0.01 0.02\n/pos\n\n            \nsize\n0.35 0.89\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n            \nimage name=\nlogo\n\n                \norigin\n0.5 0.5\n/origin\n\n                \npos\n0.186 0.14\n/pos\n\n                \nmaxSize\n0.33 0.19\n/maxSize\n\n            \n/image\n\n\n            \ntextlist name=\ngamelist\n\n                \nselectorColor\n000000\n/selectorColor\n\n                \nselectedColor\nFFFFFF\n/selectedColor\n\n                \nprimaryColor\n000000\n/primaryColor\n\n                \nsecondaryColor\n888888\n/secondaryColor\n\n                \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n                \npos\n0.02 0.25\n/pos\n\n                \nsize\n0.33 0.64\n/size\n\n                \nfontSize\n0.04\n/fontSize\n\n                \nhorizontalMargin\n0.01\n/horizontalMargin\n\n            \n/textlist\n\n\n        \nimage name=\nbackground_image\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0.37 0.02\n/pos\n\n            \nsize\n0.35 0.62\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n            \nimage name=\nmd_image\n\n                \norigin\n0.5 0.5\n/origin\n\n                \npos\n0.545 0.33\n/pos\n\n                \nmaxSize\n0.33 0.58\n/maxSize\n\n            \n/image\n\n\n        \nimage name=\nbackground_metadata\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0.73 0.02\n/pos\n\n            \nsize\n0.26 0.62\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n            \ntext name=\nmd_lbl_rating, md_lbl_releasedate, md_lbl_developer, md_lbl_publisher, md_lbl_genre, md_lbl_players, md_lbl_lastplayed, md_lbl_playcount\n\n                \ncolor\n000000\n/color\n\n                \nforceUppercase\n1\n/forceUppercase\n\n                \nfontPath\n./_inc/fonts/Roboto-Medium.ttf\n/fontPath\n\n                \nfontSize\n0.02\n/fontSize\n\n                \nsize\n0.24 0.01\n/size\n\n            \n/text\n\n\n            \ntext name=\nmd_developer, md_publisher, md_genre, md_players, md_playcount\n\n                \ncolor\n000000\n/color\n\n                \nforceUppercase\n0\n/forceUppercase\n\n                \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n                \nfontSize\n0.024\n/fontSize\n\n                \nsize\n0.23 0.02\n/size\n\n            \n/text\n\n            \ndatetime name=\nmd_releasedate, md_lastplayed\n\n                \ncolor\n000000\n/color\n\n                \nforceUppercase\n0\n/forceUppercase\n\n                \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n                \nfontSize\n0.024\n/fontSize\n\n                \nsize\n0.23 0.02\n/size\n\n            \n/datetime\n\n\n                \ntext name=\nmd_lbl_rating\n\n                    \npos\n0.74 0.04\n/pos\n\n                \n/text\n\n                \nrating name=\nmd_rating\n\n                    \npos\n0.75 0.07\n/pos\n\n                    \nsize\n0.23 0.03\n/size\n\n                    \nfilledPath\n./_inc/images/star_full.png\n/filledPath\n\n                    \nunfilledPath\n./_inc/images/star_hollow.png\n/unfilledPath\n\n                \n/rating\n\n\n                \ntext name=\nmd_lbl_players\n\n                    \npos\n0.74 0.12\n/pos\n\n                \n/text\n\n                \ntext name=\nmd_players\n\n                    \npos\n0.75 0.14\n/pos\n\n                \n/text\n\n\n                \ntext name=\nmd_lbl_genre\n\n                    \npos\n0.74 0.18\n/pos\n\n                \n/text\n\n                \ntext name=\nmd_genre\n\n                    \npos\n0.75 0.20\n/pos\n\n                \n/text\n\n\n                \ntext name=\nmd_lbl_developer\n\n                    \npos\n0.74 0.24\n/pos\n\n                \n/text\n\n                \ntext name=\nmd_developer\n\n                    \npos\n0.75 0.26\n/pos\n\n                \n/text\n\n\n                \ntext name=\nmd_lbl_publisher\n\n                    \npos\n0.74 0.30\n/pos\n\n                \n/text\n\n                \ntext name=\nmd_publisher\n\n                    \npos\n0.75 0.32\n/pos\n\n                \n/text\n\n\n                \ntext name=\nmd_lbl_releasedate\n\n                    \npos\n0.74 0.36\n/pos\n\n                \n/text\n\n                \ndatetime name=\nmd_releasedate\n\n                    \npos\n0.75 0.38\n/pos\n\n                \n/datetime\n\n\n                \ntext name=\nmd_lbl_playcount\n\n                    \npos\n0.74 0.42\n/pos\n\n                \n/text\n\n                \ntext name=\nmd_playcount\n\n                    \npos\n0.75 0.44\n/pos\n\n                \n/text\n\n\n                \ntext name=\nmd_lbl_lastplayed\n\n                    \npos\n0.74 0.48\n/pos\n\n                \n/text\n\n                \ndatetime name=\nmd_lastplayed\n\n                    \npos\n0.75 0.50\n/pos\n\n                \n/datetime\n\n\n        \nimage name=\nbackground_description\n extra=\ntrue\n\n            \npath\n./_inc/images/bg_color.png\n/path\n\n            \norigin\n0 0\n/origin\n\n            \npos\n0.37 0.66\n/pos\n\n            \nsize\n0.62 0.25\n/size\n\n            \ncolor\nFFFFFF99\n/color\n\n        \n/image\n\n\n            \ntext name=\nmd_description\n\n                \npos\n0.38 0.68\n/pos\n\n                \nsize\n0.60 0.21\n/size\n\n                \ncolor\n000000\n/color\n\n                \nfontPath\n./_inc/fonts/Roboto-Light.ttf\n/fontPath\n\n                \nfontSize\n0.026\n/fontSize\n\n                \nalignment\nleft\n/alignment\n\n                \nforceUppercase\n0\n/forceUppercase\n\n                \nlineSpacing\n1.6\n/lineSpacing\n\n            \n/text\n\n\n    \n/view\n\n\n\n/theme\n\n\n\n\n\nAnd my complete \ntheme.xml\n, which is identical in each system folder:\n\n\ntheme\n\n\n    \nformatVersion\n4\n/formatVersion\n\n    \ninclude\n./../spare.xml\n/include\n\n\n    \nview name=\nsystem, basic, detailed\n\n\n        \nimage name=\nlogo\n\n            \npath\n./system.svg\n/path\n\n        \n/image\n\n\n    \n/view\n\n\n\n/theme\n\n\n\n\n\n\n\nThe End\n\n\nCongratulations to those that made it this far. It's been a heck of a journey. You now have everything you need to make your own themes. If I've missed something, or glossed over it, or I just didn't explain it very well, just let me know in the comments and I'll do my best to rectify it.\n\n\n\n\nImportant Links\n\n\n\n\nThe full \nSpare\n theme on GitHub:\n\n\nes-theme-spare\n\n\nFake \"games\" zip file from my DropBox\n\n\nfake_games.zip\n\n\nPortable Emulationstation by @herb_fargus:\n\n\nWatch the video first\n\n\nDownload the file\n\n\nThe ES Theme Helper by @Rookervik:\n\n\nGet it from @Rookervik's DropBox here\n\n\nOfficial Emulationstation Themes documention:\n\n\nGitHub Docs\n\n\nThe full album of images used in this tutorial:\n\n\nImgur\n\n\nMy other theme:\n\n\nMetaPixel", 
            "title": "Creating Your Own EmulationStation Theme"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#table-of-contents", 
            "text": "About This Tutorial  Notes  About Emulationstation Views  Creating a Theme  System View  Basic View  Detailed View  The End  Important Links", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#about-this-tutorial", 
            "text": "In this tutorial I'm going to take you through the basics of creating a theme for Emulationstation and RetroPie.  We are going to create a simple theme called 'Spare'. We'll be using the default 'Carbon' theme as a guide, but creating all the XML from scratch so we can get a better understanding of it.  We'll be creating folders for 3 systems:   Gameboy (gb)  Nintendo Entertainment System (nes)  Super Nintendo Entertainment System (snes)   I chose these 3 as they are pretty ubiquitous in the console world and most people should have heard of them. I also chose these 3 as they all have different shaped box art (square, portrait and landscape respectively), and we will be using those differences for some more advanced concepts in a later tutorial.  We are only doing 3 folders because once you've done one, the rest are pretty similar, and this tutorial is pretty long as it is, and you can only see 3 systems on the carousel anyway.  The theme we are going to make will look like this:   ['Spare' Theme System View]   ['Spare' Theme Basic View]   ['Spare' Theme Detailed View]  It is a simple, clean theme, not very outlandish, but it's enough to teach the essentials, and a few of the more advanced ideas.", 
            "title": "About This Tutorial"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#notes", 
            "text": "I made this tutorial on a Windows PC, but all the main parts (the XML and images) can be done on any Operating System, and as long as you can FTP or SSH into the 'theme' folder on your Raspberry Pi, then you can test your theme there.  What You Will Need   A text editor  Notepad will do fine, but something with syntax highlighting is helpful. I use Sublime Text 3, but others\nlike Notepad++ are good too.  Emulationstation  I use a version on my PC (more on that below), but the version on your Pi is fine.  An image editor  This is optional as all the images will be supplied, however you can use these images as a base to create your own, or make your own from scratch. I use Photoshop, but other programs like GIMP or Paint.net would work too.  The ES Theme Helper by @Rookervik  Not essential, but very, very handy  Get it from @Rookervik's DropBox here  Any coding experience  Again, not essential, but it makes things easier. To be honest, as long as you know that  tag  opens a tag and  /tag  closes a tag, then you should be fine.   There will be a list of all links and resources at the end of the tutorial.", 
            "title": "Notes"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#about-emulationstation-views", 
            "text": "Emulationstation has 3 main sections, called Views: [All images taken from the default Carbon theme]  System View  \nThe System View is what you see when Emulationstation starts. It has a large white bar along the middle that houses a carousel that shows 3 System logos at a time.  Basic View  \nThis is a simple game list page. You see this if you haven't scraped any metadata for that system.  Detailed View  \nThe Detailed View is what you see if you  have  scraped metadata. Different themes can show different data, in different places or a different order, but every theme can only display these values (along with the Game List):   md_image  md_rating  md_releasedate  md_developer  md_publisher  md_genre  md_players  md_lastplayed  md_playcount  md_description   Extra values can be added by the Theme Maker, but the ones above are the only ones that get scraped by Emulationstation. Any others have to have their data entered by hand. (More on 'Extra' fields later)", 
            "title": "About Emulationstation Views"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#setup", 
            "text": "I do the first 90% of my theme work on a portable version of Emulationstation created by @herb_fargus. I personally find it much easier to work on my Windows PC than directly on the Pi. It makes saving, testing and taking screenshots much simpler. I'm sorry Mac and Linux users, I don't know if there are any equivalents for you.  However, this step is entirely optional. You can do all of this directly on the Pi over SSH/FTP if you so wish.  Set Up EmulationStation on PC   Download the portable Emulationstation by @herb_fargus  Watch the video first  Download the file  Install/unzip it where you want it. I have it on F:/ Drive, so the path is F:\\emulationstation  Download  this  zip file. Within it are 3 folders: 'gb', 'nes' and 'snes'. Within each folder are 15 blank .txt files, each named after a game on that system. These files have also had their extensions changed to something that ES will see as a rom.  These are not real roms. They are blank text files that have been renamed to look like roms.  Emulationstation sees these as real games. You won't be able to play them (since they are really just blank text files), but they will scrape with the built in Emulationstation scraper. They are also extremely small, so you don't have to worry about your test-bed getting too big.  Copy those folders into F:\\emulationstation\\.emulationstation\\roms   Emulationstation should now be set up with 45 (fake) games on 3 Systems, and ready for you to use.  Double click  Launch Portable (Windowed).bat  to start Emulationstation.", 
            "title": "Setup"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#creating-a-theme", 
            "text": "We're going to make the theme straight in the Portable Emulationstation's theme folder. This makes things a lot easier, because you can view a change straight away without having to move files each time.  I have installed the portable Emulationstation on F:\\ Drive, so the path to my themes folder is F:\\emulationstation\\.emulationstation\\themes.  First,  download the full  Spare  theme from GitHub , so you have the images and fonts you need, and also so you have something to reference.  We'll start by setting up a simple file structure, with folders for the 3 console systems; Gameboy (gb), Nintendo Entertainment System (nes) and Super Nintendo Entertainment System (snes).   Within the themes folder make a folder called 'spare'.   Within the 'spare' folder make a new file called  spare.xml .    Within the 'spare' folder make folders called 'nes', 'snes', 'gb' and '_inc'.   Within each of 'nes', 'snes', 'gb' make a new file called  theme.xml .   Also copy the system images from the downloaded file into the system folders    '_inc' is your includes folder where you will hold your fonts and theme images. You can call it anything you like. Some people use \"art\", others use \"common\". I like \"_inc\", and the underscore keeps it at the top of the file tree.   Within '_inc' create 2 folders, called 'fonts' and 'images'. Copy the fonts and images from the downloaded file into their respective folders.   Your folder structure should now look like this:   Now onto the code.   Open  spare.xml  and add these lines:  !--\ntheme name:     Spare\nversion:        1.0\nauthor:         Matt Kennedy\nemail:          \nwebsite:        \nlicense:        creative commons CC-BY-NC-SA\nbased on:        Carbon  by Eric Hettervik\n--  theme \n\n     formatVersion 4 /formatVersion \n\n     view name= system /view \n     view name= basic /view \n     view name= detailed /view  /theme    When you are making your own theme you would obviously change the 'theme name' and 'author' fields to suit.    The theme details at the top just tell anyone looking who made the theme.  Anything within  !-- x --  is a comment, visible to humans who read the code, but invisible to Emulationstation.   The  theme /theme  fields tell Emulationstation that the code within is for a theme.  The  formatVersion 4 /formatVersion  sets the theme version. I don't really know much about this, just that most themes use version 3, but if you want to allow for the Child-Friendly version of ES, you need to use version 4.  view name=\"x\" /view  governs what happens in each of those views.   Save  spare.xml   Open  spare/gb/theme.xml  and add these lines:  theme \n\n     formatVersion 4 /formatVersion \n     include ./../spare.xml /include \n\n     view name= system /view \n     view name= basic /view \n     view name= detailed /view  /theme   Notice it's almost identical to  spare.xml , except for a few things. You don't need to specify any theme details, because we are using this line:  include ./../spare.xml /include  That line means, find a file up one level from here, called  spare.xml , and include it in this file.  This is handy because it means you can have the bulk of your code in  spare.xml  and just call the file in each  theme.xml  instead of having to put the code in each individual  theme.xml  file.  Save  theme.xml   If you switch Emulationstation to the 'spare' theme now, this is what you should see:   [Blank System View]   [Blank Basic View]   [Blank Detailed View]  What you are seeing are the Emulationstation defaults. We haven't yet told ES how we want anything to look, so for now it's just raw data with very very basic styling.  It's our job as Themers to change that.", 
            "title": "Creating a Theme"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#system-view", 
            "text": "Now let's create the System View.   ['Spare' Theme System View]  Take note of how it differs from the blank theme.   There are now Logos in place of simple folder names.  The white carousel and the grey bar below it haven't changed (unfortunately, they are hardcoded into Emulationstation and for the time being are not themeable).  There is a grey background color behind the carousel.  There is also a repeating background image behind the carousel.  There is a semi-transparent white bar behind the 'Help Menu' text in the footer.  The 'Help Menu' now has a different color and different font.   Open  spare.xml  We'll start simple. Let's change the background color.  Expand  view name=\"system\" /view  so it looks like this:  view name= system  /view   Now we add some  Elements  to the View. To start with we'll change the background color by creating a new Image Element called 'background_color'.  view name= system \n     image name= background_color  extra= true /image  /view    The  extra=\"true\"  means that this is a new  Element  being added, not something that is already defined by Emulationstation   We need to add some  Properties  to the Element to tell it what to do. There are 7 Properties accepted by the Image Element. They are:   pos  The position of the image within the screen.  size  The absolute size of the image. Does not maintain aspect ratio. Use either this or  maxSize , not both.  maxSize  The maximum size to stretch an image. Maintains aspect ratio. Use either this or  size , not both.  origin  The origin point of the image. Default is top-left.  path  The relative path to the image file.  tile  If the image repeats or not.  color  A color overlay, allowing you to change the color and opacity of the image.  Uses 8 digit Hex values. The first 6 digits represent the Hex color code with the last 2 digits controlling the opacity.    If you want a more detailed explaination of Element Properties you can read  this section  of the Emulationstation Themes documention.   The first thing we'll do is set the path to the image:   You should already have 'bg_color.png' in your images folder. If not, grab it from the full  Spare  theme you downloaded earlier and place it in the  spare/_inc/images  folder. This image is a simple, white 32 x 32px PNG.  Add the line: path ./_inc/images/bg_color.png /path \nto image name=\"background_color\" extra=\"true\" /image \nso it looks like this:   image name= background_color  extra= true \n     path ./_inc/images/bg_color.png /path  /image    Here we are telling ES to look for an image called  bg_color.png  within a folder called  images  that sits within a folder called  _inc  that sits at  root  level.   Now we tell the Image where we want it to sit and how big we want it to be. We want it to start at the top left of the screen and stretch all the way to the bottom right. For that we need the  origin ,  pos  and  size  Properties.    origin 0 0 /origin  tells ES that the image originates at X position = 0 (left) and Y position = 0 (top).    pos 0 0 /pos  tells ES to place the  origin  of the image in X position = 0 (left) and Y position = 0 (top).    size 1 1 /size  tells ES the stretch the image 100% along the X-axis (horizontal) and 100% along the Y-axis (vertical).    Put it all together and it looks like this:  image name= background_color  extra= true \n     path ./_inc/images/bg_white.png /path \n     origin 0 0 /origin \n     pos 0 0 /pos \n     size 1 1 /size  /image   If you refresh the ES theme now you wouldn't see anything different, because the background was already white.   Note: If you want to see any changes you have made to your theme files, first save the file, then within ES switch to any other theme and then back to your theme. From now on I will refer to this as \"refresh the theme\".   This is where the  color  Property comes into play. You can use this Property to change the white PNG to any color you want using  Hex color codes . There are many online  color picker tools  you can use to get your Hex color codes, just remember they need to be 6 numbers/letters to work correctly.  If we want to change our background color to Red, we add this line to the 'background_color' Element:  color FF0000 /color  Other randomly chosen colors:   color 70D6F3 /color  = Light Blue  color 229C29 /color  = Dark Green  color FF7700 /color  = Orange  color CF1F97 /color  = Purple   I'm just going to choose a lightish grey color so it stands out a little, but not too much. Your 'background_color' Element should now look like this:  image name= background_color  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0 0 /pos \n     size 1 1 /size \n     color d4d4d4 /color  /image   And if you refresh ES, you'll now see a light grey background behind the Carousel.  It should look like this:    Now for the  Background Pattern    'bg_pattern.png' should already be in your  spare/_inc/images  folder.    Duplicate the 'background_color' Element and change it so it looks like this:    image name= background_pattern  extra= true \n     path ./_inc/images/bg_pattern.png /path \n     origin 0.5 0.5 /origin \n     pos 0.5 0.5 /pos \n     size 1 1 /size \n     color aeaeae /color \n     tile true /tile  /image   What we've done here is:   Renamed the Element to 'background_pattern'.  Changed the  path  to point to the 'bg_pattern.png' image.  Changed the  origin  to be the center of the image instead of the left-top.  Changed the  pos  to be the center of the screen instead of the left-top.  Changed the  color  to be a darker grey.  Added the line  tile true /tile . This line tells ES to repeat the image over the space instead of stretching it out.    Changing the  origin  and  pos  isn't strictly necessary, but I think it looks better with most patterns, so they start from the center of the screen instead of the left-top. As usual, it's up to the individual Themer which they prefer.   It should look like this:    Help Menu Background  This is the background that covers the Help menu items in the bottom left of the screen.   Again, duplicate the 'background_color' Element and change it so it looks like this:   image name= background_help  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 1 /origin \n     pos 0 1 /pos \n     size 1 0.070 /size \n     color FFFFFF99 /color  /image   What we've done here is:   Renamed the Element to 'background_help'.  Changed the  path  to point to the 'bg_help.png' image.  Changed the  origin  to be the left-bottom of the image instead of the left-top.  Changed the  pos  to be the left-bottom of the screen instead of the left-top.  Changed the  size  from '1 1' to '1 0.070'. What this means is, we still want the image to stretch the full width of the screen, but we only want it to be 7% of the screen height.  Told the background to be white  FFFFFF , but we also added  99  to the end of the  color  to give it a slight transparency.  FF  is fully opaque and  00  is completely transparent.   It should look like this:    Help Menu Font  We're going to change the Font used in this theme to Roboto Light (and a little Roboto Bold), and also change the color of the Font.  Add these lines to  spare.xml  under  background_help :  helpsystem name= help \n     textColor 000000 /textColor \n     iconColor 000000 /iconColor \n     fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n     fontSize 0.03 /fontSize  /helpsystem   This changes:   Text and icon color to black.  Font from default to Roboto Light.  Font size.   It should look like this:   Save  spare.xml   We're nearly done with the  System View . All that remains is to add the System  Logos  to the Carousel.  Open  spare/gb/theme.xml  Expand  view name=\"system\" /view  and insert the following line:  image name= logo \n     path ./logo.png /path  /image   So it looks like this:  view name= system \n     image name= logo \n         path ./system.svg /path \n     /image  /view   This tells ES to look in the same folder for an image called  system.svg  and to use it as the image for the Carousel in the System View.  Save  theme.xml  Do this for both the  nes  and  snes  folders as well.   Refresh ES and have a look at the  System View . It should now look like this:", 
            "title": "System View"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#basic-view", 
            "text": "The Basic View should look like this:   As you can see, the background color, background pattern and Help menu are the same as the System View. That means we can use the same code for both.  Open  spare.xml . It should look like this:  !--\ntheme name:     Spare\nversion:        1.0\nauthor:         Matt Kennedy\nemail:          \nwebsite:        \nlicense:        creative commons CC-BY-NC-SA\nbased on:        Carbon  by Eric Hettervik\n--  theme \n\n     formatVersion 4 /formatVersion \n\n     view name= system \n         image name= background_color  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0 0 /pos \n             size 1 1 /size \n             color d4d4d4 /color \n         /image \n\n         image name= background_pattern  extra= true \n             path ./_inc/images/bg_pattern.png /path \n             origin 0.5 0.5 /origin \n             pos 0.5 0.5 /pos \n             size 1 1 /size \n             color aeaeae /color \n             tile true /tile \n         /image \n\n         image name= background_help  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 1 /origin \n             pos 0 1 /pos \n             size 1 0.070 /size \n             color FFFFFF99 /color \n         /image \n\n         helpsystem name= help \n             textColor 000000 /textColor \n             iconColor 000000 /iconColor \n             fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n             fontSize 0.03 /fontSize \n         /helpsystem \n     /view \n     view name= basic /view \n     view name= detailed /view  /theme   Now, we could just copy all the  image  Elements and paste them into  view name=\"basic\" /view , but there is an easier way.  Change: view name=\"system\" \nto view name=\"system, basic, detailed\"  Done. Now, instead of saying that the following code is just for the System View, it's also for the Basic View and Detailed View. How easy was that? This trick will come in handy a lot later on.  Now we just need to style the System Logo and the Gamelist.   System Logo  For the  System Logo , we're going to use the same trick as above. Open  spare/gb/theme.xml  and change: view name=\"system\" \nto view name=\"system, basic, detailed\"  That means anything within that  view  will apply to all 3 views.  The Basic View should now look like this:   Save `theme.xml'   Back in  spare.xml  we are going to create a semi-transparent white background box in the header to match the one in the footer (behind the Help menu).  Expand  view name=\"basic\" /view  and insert the following:  image name= background_logo  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0 0 /pos \n     size 1 0.18 /size \n     color FFFFFF99 /color  /image   This places a white box across the top of the screen that is 100% of the screen in width and 18% of the screen in height:    At this point I like to bring in  Helper Boxes . These are just semi-transparent colored boxes that I use to work out where an Element will sit on the screen. I'm going to use one to place the Logo.  image name= logo_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0.5 0.5 /origin \n     pos 0.5 0.09 /pos \n     size 0.4 0.16 /size \n     color ff0000aa /color  /image    origin 0.5 0.5 /origin  sets the Origin Point to the center of the box.  pos 0.5 0.09 /pos  puts the Origin Point of the box at 50% of the screen width, and at 9% of the screen height.  size 0.4 0.16 /size  means the box is 40% wide and 16% high.  color ff0000aa /color  gives the box a transparent red color.   Like this:  Now we can place the logo inside that box:  image name= logo \n     origin 0.5 0.5 /origin \n     pos 0.5 0.09 /pos \n     maxSize 0.4 0.16 /maxSize  /image   Notice we are setting the  origin  and  pos  the same as \"logo_helper\". Instead of  size  we have used  maxSize , but kept the numbers the same. If we used  size  the logo would stretch to fill the box, lose aspect ratio and look weird. Using  maxSize  forces the image to maintain aspect ratio. It will grow until either the sides or top/bottom hit the edge and then stop.    We'll use another Helper Box to get the right spacing for the Gamelist:  image name= gamelist_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.05 0.2 /pos \n     size 0.9 0.71 /size \n     color ff0000aa /color  /image    Now we know the size for the Gamelist:  textlist name= gamelist \n     selectorColor 000000 /selectorColor \n     selectedColor FFFFFF /selectedColor \n     primaryColor 000000 /primaryColor \n     secondaryColor 888888 /secondaryColor \n     fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n     pos 0.05 0.2 /pos \n     size 0.9 0.71 /size \n     fontSize 0.04 /fontSize  /textlist    selectorColor  is the color of the bar that shows which game is selected. Set here to black.  selectedColor  is the color of the text of the selected game. Set here to white.  primaryColor  is the main text color of the Gamelist. Set here to black.  secondaryColor  is the color of any folders in your Gamelist. Set here to a mid-point grey.     All that is left is to remove the Helper Boxes.  Delete the  image name=\"logo_helper\" extra=\"true\"  Element to remove the red box in the header.  Instead of deleting  image name=\"gamelist_helper\" extra=\"true\" , we can use it as the white background:   Rename it from \"gamelist_helper\" to \"background_gamelist\".  Change  color ff0000aa /color  to  color FFFFFF99 /color .   You should now be the owner of a shiny new Basic View:", 
            "title": "Basic View"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#detailed-view", 
            "text": "Now for the Big One; the  Detailed View . This one isn't too bad mostly, but the metadata can be a real hassle to order so it looks nice. Each part of the metadata has to be done individually... but we'll jump off that bridge when we come to it.  This is what we want to end up with:   However, it starts off looking like this:    Remember we have already styled the Logo, the Background and the Help menu.    Open  spare.xml .  We're going to start by placing a bunch of Helper boxes to block out where we want everything.    You can use an image editing program to mock this up beforehand, and this is where the ES Theme Helper comes in very handy.  Or you can just sort of freehand it. Add a box, check its shape, move it, resize it, check it again. Keep doing that until you are happy with it, and then add another box (this was the way I made this theme).   Add this code to  view name=\"detailed\" /view :  image name= gamelist_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.01 0.02 /pos \n     size 0.35 0.89 /size \n     color DC143C44 /color  /image  image name= image_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.37 0.02 /pos \n     size 0.35 0.62 /size \n     color 4169E144 /color  /image  image name= metadata_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.73 0.02 /pos \n     size 0.26 0.62 /size \n     color 00C5CD44 /color  /image  image name= desc_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.37 0.66 /pos \n     size 0.62 0.25 /size \n     color EEC90044 /color  /image   Which makes it look like this:   These colored boxes will eventually be the semi-transparent white boxes that go behind the content, but for now we make them colored so they are easier to see.   Now we want to add in some more Helper boxes within these, so the content will have some padding:  image name= logo_helper  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0.5 0.5 /origin \n     pos 0.186 0.14 /pos \n     size 0.33 0.19 /size \n     color 8B636C44 /color  /image  image name= gamelist_helper_2  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.02 0.25 /pos \n     size 0.33 0.64 /size \n     color 8B636C44 /color  /image  image name= image_helper_2  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0.5 0.5 /origin \n     pos 0.545 0.33 /pos \n     size 0.33 0.58 /size \n     color 0000EE44 /color  /image  image name= metadata_helper_2  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.74 0.04 /pos \n     size 0.24 0.58 /size \n     color 00868B44 /color  /image  image name= desc_helper_2  extra= true \n     path ./_inc/images/bg_color.png /path \n     origin 0 0 /origin \n     pos 0.38 0.68 /pos \n     size 0.60 0.21 /size \n     color CDAD0044 /color  /image     Notice \"logo_helper\" and \"image_helper_2\" both have  origin 0.5 0.5 /origin . This is because we want the images to be aligned from the very center of their Helper box. It takes a bit more work to get these aligned properly, but it looks better once they are.   Now it's just a matter of moving each piece of metadata into its correct place.   Move the Logo:  image name= logo \n     origin 0.5 0.5 /origin \n     pos 0.186 0.14 /pos \n     maxSize 0.33 0.19 /maxSize  /image     Now the Image:  image name= md_image \n     origin 0.5 0.5 /origin \n     pos 0.545 0.33 /pos \n     maxSize 0.33 0.58 /maxSize  /image     The Gamelist:  textlist name= gamelist \n     selectorColor 000000 /selectorColor \n     selectedColor FFFFFF /selectedColor \n     primaryColor 000000 /primaryColor \n     secondaryColor 888888 /secondaryColor \n     fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n     pos 0.02 0.25 /pos \n     size 0.33 0.64 /size \n     fontSize 0.04 /fontSize \n     horizontalMargin 0.01 /horizontalMargin  /textlist     The Description:  text name= md_description \n     pos 0.38 0.68 /pos \n     size 0.60 0.21 /size \n     color 000000 /color \n     fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n     fontSize 0.026 /fontSize \n     alignment left /alignment \n     forceUppercase 0 /forceUppercase \n     lineSpacing 1.6 /lineSpacing  /text     Now... the fun fun part. The metadata. So far everything has been pretty simple. Logos, gamelists, images, etc are all big things that you can place without too much thought. Metadata is different.  Metadata is split up into 8 main sections (I'm not counting Image and Description in this list), and each of those sections has both a Label and a Value.   md_lbl_rating, md_rating  md_lbl_releasedate, md_releasedate  md_lbl_developer, md_developer  md_lbl_publisher, md_publisher  md_lbl_genre, md_genre  md_lbl_players, md_players  md_lbl_lastplayed, md_lastplayed  md_lbl_playcount, md_playcount   To make things more annoying,  md_releasedate  and  md_lastplayed  are both  datetime  fields instead of just plain  text  fields, so there are certain things the can't do, like be center aligned.  This is the code I used to place my metadata (this is long):  text name= md_lbl_rating, md_lbl_releasedate, md_lbl_developer, md_lbl_publisher, md_lbl_genre, md_lbl_players, md_lbl_lastplayed, md_lbl_playcount \n     color 000000 /color \n     forceUppercase 1 /forceUppercase \n     fontPath ./_inc/fonts/Roboto-Medium.ttf /fontPath \n     fontSize 0.02 /fontSize \n     size 0.24 0.01 /size  /text  text name= md_developer, md_publisher, md_genre, md_players, md_playcount \n     color 000000 /color \n     forceUppercase 0 /forceUppercase \n     fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n     fontSize 0.024 /fontSize \n     size 0.23 0.02 /size  /text  datetime name= md_releasedate, md_lastplayed \n     color 000000 /color \n     forceUppercase 0 /forceUppercase \n     fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n     fontSize 0.024 /fontSize \n     size 0.23 0.02 /size  /datetime \n\n     image name= metadata_helper_3  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.04 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_rating \n             pos 0.74 0.04 /pos \n         /text \n\n     image name= metadata_helper_4  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.07 /pos \n         size 0.23 0.04 /size \n         color 5bb80044 /color \n     /image \n         rating name= md_rating \n             pos 0.75 0.07 /pos \n             size 0.23 0.03 /size \n             filledPath ./_inc/images/star_full.png /filledPath \n             unfilledPath ./_inc/images/star_hollow.png /unfilledPath \n         /rating \n\n     image name= metadata_helper_5  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.12 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_players \n             pos 0.74 0.12 /pos \n         /text \n\n     image name= metadata_helper_6  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.14 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         text name= md_players \n             pos 0.75 0.14 /pos \n         /text \n\n     image name= metadata_helper_7  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.18 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_genre \n             pos 0.74 0.18 /pos \n         /text \n\n     image name= metadata_helper_8  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.20 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         text name= md_genre \n             pos 0.75 0.20 /pos \n         /text \n\n     image name= metadata_helper_9  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.24 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_developer \n             pos 0.74 0.24 /pos \n         /text \n\n     image name= metadata_helper_10  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.26 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         text name= md_developer \n             pos 0.75 0.26 /pos \n         /text \n\n     image name= metadata_helper_11  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.30 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_publisher \n             pos 0.74 0.30 /pos \n         /text \n\n     image name= metadata_helper_12  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.32 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         text name= md_publisher \n             pos 0.75 0.32 /pos \n         /text \n\n     image name= metadata_helper_13  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.36 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_releasedate \n             pos 0.74 0.36 /pos \n         /text \n\n     image name= metadata_helper_14  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.38 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         datetime name= md_releasedate \n             pos 0.75 0.38 /pos \n         /datetime \n\n     image name= metadata_helper_15  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.42 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_playcount \n             pos 0.74 0.42 /pos \n         /text \n\n     image name= metadata_helper_16  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.44 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         text name= md_playcount \n             pos 0.75 0.44 /pos \n         /text \n\n     image name= metadata_helper_17  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.74 0.48 /pos \n         size 0.24 0.02 /size \n         color 5bb80044 /color \n     /image \n         text name= md_lbl_lastplayed \n             pos 0.74 0.48 /pos \n         /text \n\n     image name= metadata_helper_18  extra= true \n         path ./_inc/images/bg_color.png /path \n         origin 0 0 /origin \n         pos 0.75 0.50 /pos \n         size 0.23 0.03 /size \n         color 5bb80044 /color \n     /image \n         datetime name= md_lastplayed \n             pos 0.75 0.50 /pos \n         /datetime   That comes out looking like this:   Note how I used more Helper boxes for each piece of metadata? This was a long process of trail and error. Originally the font and spacing were too big so they took up too much room. I shrunk them down and now they don't take up enough room. I consoled myself that at least now there is room for the Child-Friendly icons (once I figure out how they work) because I didn't want to do the metadata again.   Now just remove the second layer of padding Helpers, and change the main helper boxes color to  FFFFFF99 . I also renamed the white Helper boxes to \"background_\" because they are now backgrounds rather than helpers.  You're all done. Congratulations!   This is my complete  spare.xml :  !--\ntheme name:     Spare\nversion:        1.0\nauthor:         Matt Kennedy\nemail:          \nwebsite:        \nlicense:        creative commons CC-BY-NC-SA\nbased on:        Carbon  by Eric Hettervik\n--  theme \n\n     formatVersion 4 /formatVersion \n\n     view name= system, basic, detailed \n\n         image name= background_color  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0 0 /pos \n             size 1 1 /size \n             color d4d4d4 /color \n         /image \n\n         image name= background_pattern  extra= true \n             path ./_inc/images/bg_pattern.png /path \n             origin 0.5 0.5 /origin \n             pos 0.5 0.5 /pos \n             size 1 1 /size \n             color aeaeae /color \n             tile true /tile \n         /image \n\n         image name= background_help  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 1 /origin \n             pos 0 1 /pos \n             size 1 0.070 /size \n             color FFFFFF99 /color \n         /image \n\n         helpsystem name= help \n             textColor 000000 /textColor \n             iconColor 000000 /iconColor \n             fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n             fontSize 0.03 /fontSize \n         /helpsystem \n\n     /view \n\n     view name= basic \n\n         image name= background_logo  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0 0 /pos \n             size 1 0.18 /size \n             color FFFFFF99 /color \n         /image \n\n             image name= logo \n                 origin 0.5 0.5 /origin \n                 pos 0.5 0.09 /pos \n                 maxSize 0.4 0.16 /maxSize \n             /image \n\n         image name= background_gamelist  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0.05 0.2 /pos \n             size 0.9 0.71 /size \n             color FFFFFF99 /color \n         /image \n\n             textlist name= gamelist \n                 selectorColor 000000 /selectorColor \n                 selectedColor FFFFFF /selectedColor \n                 primaryColor 000000 /primaryColor \n                 secondaryColor 888888 /secondaryColor \n                 fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n                 pos 0.05 0.2 /pos \n                 size 0.9 0.71 /size \n                 fontSize 0.04 /fontSize \n             /textlist \n\n     /view \n\n     view name= detailed \n\n         image name= background_logo_gamelist  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0.01 0.02 /pos \n             size 0.35 0.89 /size \n             color FFFFFF99 /color \n         /image \n\n             image name= logo \n                 origin 0.5 0.5 /origin \n                 pos 0.186 0.14 /pos \n                 maxSize 0.33 0.19 /maxSize \n             /image \n\n             textlist name= gamelist \n                 selectorColor 000000 /selectorColor \n                 selectedColor FFFFFF /selectedColor \n                 primaryColor 000000 /primaryColor \n                 secondaryColor 888888 /secondaryColor \n                 fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n                 pos 0.02 0.25 /pos \n                 size 0.33 0.64 /size \n                 fontSize 0.04 /fontSize \n                 horizontalMargin 0.01 /horizontalMargin \n             /textlist \n\n         image name= background_image  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0.37 0.02 /pos \n             size 0.35 0.62 /size \n             color FFFFFF99 /color \n         /image \n\n             image name= md_image \n                 origin 0.5 0.5 /origin \n                 pos 0.545 0.33 /pos \n                 maxSize 0.33 0.58 /maxSize \n             /image \n\n         image name= background_metadata  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0.73 0.02 /pos \n             size 0.26 0.62 /size \n             color FFFFFF99 /color \n         /image \n\n             text name= md_lbl_rating, md_lbl_releasedate, md_lbl_developer, md_lbl_publisher, md_lbl_genre, md_lbl_players, md_lbl_lastplayed, md_lbl_playcount \n                 color 000000 /color \n                 forceUppercase 1 /forceUppercase \n                 fontPath ./_inc/fonts/Roboto-Medium.ttf /fontPath \n                 fontSize 0.02 /fontSize \n                 size 0.24 0.01 /size \n             /text \n\n             text name= md_developer, md_publisher, md_genre, md_players, md_playcount \n                 color 000000 /color \n                 forceUppercase 0 /forceUppercase \n                 fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n                 fontSize 0.024 /fontSize \n                 size 0.23 0.02 /size \n             /text \n             datetime name= md_releasedate, md_lastplayed \n                 color 000000 /color \n                 forceUppercase 0 /forceUppercase \n                 fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n                 fontSize 0.024 /fontSize \n                 size 0.23 0.02 /size \n             /datetime \n\n                 text name= md_lbl_rating \n                     pos 0.74 0.04 /pos \n                 /text \n                 rating name= md_rating \n                     pos 0.75 0.07 /pos \n                     size 0.23 0.03 /size \n                     filledPath ./_inc/images/star_full.png /filledPath \n                     unfilledPath ./_inc/images/star_hollow.png /unfilledPath \n                 /rating \n\n                 text name= md_lbl_players \n                     pos 0.74 0.12 /pos \n                 /text \n                 text name= md_players \n                     pos 0.75 0.14 /pos \n                 /text \n\n                 text name= md_lbl_genre \n                     pos 0.74 0.18 /pos \n                 /text \n                 text name= md_genre \n                     pos 0.75 0.20 /pos \n                 /text \n\n                 text name= md_lbl_developer \n                     pos 0.74 0.24 /pos \n                 /text \n                 text name= md_developer \n                     pos 0.75 0.26 /pos \n                 /text \n\n                 text name= md_lbl_publisher \n                     pos 0.74 0.30 /pos \n                 /text \n                 text name= md_publisher \n                     pos 0.75 0.32 /pos \n                 /text \n\n                 text name= md_lbl_releasedate \n                     pos 0.74 0.36 /pos \n                 /text \n                 datetime name= md_releasedate \n                     pos 0.75 0.38 /pos \n                 /datetime \n\n                 text name= md_lbl_playcount \n                     pos 0.74 0.42 /pos \n                 /text \n                 text name= md_playcount \n                     pos 0.75 0.44 /pos \n                 /text \n\n                 text name= md_lbl_lastplayed \n                     pos 0.74 0.48 /pos \n                 /text \n                 datetime name= md_lastplayed \n                     pos 0.75 0.50 /pos \n                 /datetime \n\n         image name= background_description  extra= true \n             path ./_inc/images/bg_color.png /path \n             origin 0 0 /origin \n             pos 0.37 0.66 /pos \n             size 0.62 0.25 /size \n             color FFFFFF99 /color \n         /image \n\n             text name= md_description \n                 pos 0.38 0.68 /pos \n                 size 0.60 0.21 /size \n                 color 000000 /color \n                 fontPath ./_inc/fonts/Roboto-Light.ttf /fontPath \n                 fontSize 0.026 /fontSize \n                 alignment left /alignment \n                 forceUppercase 0 /forceUppercase \n                 lineSpacing 1.6 /lineSpacing \n             /text \n\n     /view  /theme   And my complete  theme.xml , which is identical in each system folder:  theme \n\n     formatVersion 4 /formatVersion \n     include ./../spare.xml /include \n\n     view name= system, basic, detailed \n\n         image name= logo \n             path ./system.svg /path \n         /image \n\n     /view  /theme", 
            "title": "Detailed View"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#the-end", 
            "text": "Congratulations to those that made it this far. It's been a heck of a journey. You now have everything you need to make your own themes. If I've missed something, or glossed over it, or I just didn't explain it very well, just let me know in the comments and I'll do my best to rectify it.", 
            "title": "The End"
        }, 
        {
            "location": "/Creating-Your-Own-EmulationStation-Theme/#important-links", 
            "text": "The full  Spare  theme on GitHub:  es-theme-spare  Fake \"games\" zip file from my DropBox  fake_games.zip  Portable Emulationstation by @herb_fargus:  Watch the video first  Download the file  The ES Theme Helper by @Rookervik:  Get it from @Rookervik's DropBox here  Official Emulationstation Themes documention:  GitHub Docs  The full album of images used in this tutorial:  Imgur  My other theme:  MetaPixel", 
            "title": "Important Links"
        }, 
        {
            "location": "/Manual-Installation/", 
            "text": "Install Raspbian\n\n\nThis guide is a manual process to recreate the stock SD image RetroPie released on the \nRetroPie Website\n for the Raspberry Pi. If you aren't comfortable with the terminal you would be wise to just use the RetroPie SD image provided. \n\n\nIf you are trying to follow this guide because you want the PIXEL desktop environment, you can already install it on the stock RetroPie SD image by following the guide \nhere\n\n\nRetroPie can also be installed on most debian based distros, a guide for installing RetroPie on Ubuntu on a PC can be found \nhere\n\n\nThe RetroPie SD image is built on top of Raspbian lite (Raspbian without the PIXEL desktop environment) RetroPie can also be installed on top of the full Raspbian but you can't run Retropie and PIXEL at the same time, you will need to logout of the PIXEL desktop environment in order to run emulationstation and the emulators RetroPie installs. \n\n\nYou can download a fresh Raspbian Image from \nhere\n. The Raspbian image can be installed the same way as the RetroPie image as described \nhere\n). \n\n\nRaspbian now automatically expands the filesystem so that step is no longer necessary.\n\n\nYou can check your free disk space with\n\n\n    df -h\n\n\n\n\n/dev/root is your main partition. Then, I would recommend to update and upgrade the existing APT packages with\n\n\n    sudo apt-get update \n sudo apt-get upgrade\n\n\n\n\nVerify Locale Settings\n\n\nMost of the install scripts will attempt to install a variety of packages and libraries that each emulator requires. These installations will fail if your system locale settings are invalid. You can easily verify this by executing \nlocale\n command. A valid locale will return values set for all options, such as in the example below.\n\n\nLANG=en_US.UTF-8\nLANGUAGE=en_US:en\nLC_CTYPE=\nen_US.UTF-8\n\nLC_NUMERIC=\nen_US.UTF-8\n\nLC_TIME=\nen_US.UTF-8\n\nLC_COLLATE=\nen_US.UTF-8\n\nLC_MONETARY=\nen_US.UTF-8\n\nLC_MESSAGES=\nen_US.UTF-8\n\nLC_PAPER=\nen_US.UTF-8\n\nLC_NAME=\nen_US.UTF-8\n\nLC_ADDRESS=\nen_US.UTF-8\n\nLC_TELEPHONE=\nen_US.UTF-8\n\nLC_MEASUREMENT=\nen_US.UTF-8\n\nLC_IDENTIFICATION=\nen_US.UTF-8\n\nLC_ALL=en_US.UTF-8\n\n\n\n\nIf any of the above configuration lines are unset (particularly LANG, LANGUAGE, and LC_ALL), you should set them before installing RetroPie. The easiest way to set each item is to use the \nupdate-locale\n command, such as \n$ sudo update-locale LC_ALL=\"en_US.UTF-8\"\n.\n\n\nUsers can also set the local through the \nraspi-config\n tool.\n\n\nInstall RetroPie\n\n\nAfter that, we install the needed packages for the RetroPie setup script:\n\n\n    sudo apt-get install git lsb-release\n\n\n\n\nThen we download the latest RetroPie setup script with\n\n\n    cd\n    git clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git\n\n\n\n\nThe script is executed with\n\n\n    cd RetroPie-Setup\n    chmod +x retropie_setup.sh\n    sudo ./retropie_setup.sh\n\n\n\n\nThe screen should look like this then:\n\n\n\n\nFull Install\n\n\nManage Packages \n Quick Install\n\n\nThis will install the core and main packages which are equivalent to what is provided with the RetroPie SD image.\n\n\nNow, you have to copy your rom files into the ROMs directory. If you followed the steps above the main directory for all ROMs is ~/RetroPie/roms (or /home/pi/RetroPie/roms, which is the same here). In this directory there is a subdirectory for every emulated system, e.g., nes, snes, megadrive. Attention has to be taken for the extensions of the ROM files. All the information needed for each system is detailed in this wiki (see wiki home page or sidebar for systems)\n\n\nEmulationStation can be run from the terminal by typing \nemulationstation\n in the terminal \n\n\nPartial Install\n\n\nSay you don't want to bloat your system with all of RetroPie- you also have the option to only install the emulators you want. \n\n\nYou will want to start by installing the core packages.\n\n\nCore Packages\n\n\nThe core components needed for RetroPie to function are:\n- \nRetroArch:\n Frontend for the libretro api, necessary for most emulators to run.\n- \nEmulationStation:\n Frontend for sorting and launching all of your games.\n- \nRetroPie Menu:\n Menu in emulationstation for simpler configuration of your system.\n- \nRuncommand:\n The runcommand launch menu that assists launching your games with proper configurations see related wiki page \nHERE\n.\n\n\nMain / Optional / Experimental\n\n\nEmulators can be installed and updated individually from the Main, Optional, and Experimental packages.\n\n\nSamba Roms\n\n\nIf you want to use samba shares you can set them up from the setup/tools option of the retropie setup script.\n\n\nBoot to emulationstation\n\n\nFollow the steps here: https://github.com/RetroPie/RetroPie-Setup/wiki/FAQ#how-do-i-boot-to-the-desktop-or-kodi\n\n\nFurther Optimizations:\n\n\nOn Debian Jessie add \nconsoleblank=0\n to the existing line in \n/boot/cmdline.txt\n (with a space before it so it's an additional parameter). This prevents the screenblanker kicking in. With it, runcommand dialog is always displayed.\n\nThere is also a gui option in RetroPie-Setup -\n Configuration / Tools -\n Raspbian Tools to disable the blanker, but it doesn't work in Jessie due to a Debian bug.", 
            "title": "Raspbian"
        }, 
        {
            "location": "/Manual-Installation/#install-raspbian", 
            "text": "This guide is a manual process to recreate the stock SD image RetroPie released on the  RetroPie Website  for the Raspberry Pi. If you aren't comfortable with the terminal you would be wise to just use the RetroPie SD image provided.   If you are trying to follow this guide because you want the PIXEL desktop environment, you can already install it on the stock RetroPie SD image by following the guide  here  RetroPie can also be installed on most debian based distros, a guide for installing RetroPie on Ubuntu on a PC can be found  here  The RetroPie SD image is built on top of Raspbian lite (Raspbian without the PIXEL desktop environment) RetroPie can also be installed on top of the full Raspbian but you can't run Retropie and PIXEL at the same time, you will need to logout of the PIXEL desktop environment in order to run emulationstation and the emulators RetroPie installs.   You can download a fresh Raspbian Image from  here . The Raspbian image can be installed the same way as the RetroPie image as described  here ).   Raspbian now automatically expands the filesystem so that step is no longer necessary.  You can check your free disk space with      df -h  /dev/root is your main partition. Then, I would recommend to update and upgrade the existing APT packages with      sudo apt-get update   sudo apt-get upgrade", 
            "title": "Install Raspbian"
        }, 
        {
            "location": "/Manual-Installation/#verify-locale-settings", 
            "text": "Most of the install scripts will attempt to install a variety of packages and libraries that each emulator requires. These installations will fail if your system locale settings are invalid. You can easily verify this by executing  locale  command. A valid locale will return values set for all options, such as in the example below.  LANG=en_US.UTF-8\nLANGUAGE=en_US:en\nLC_CTYPE= en_US.UTF-8 \nLC_NUMERIC= en_US.UTF-8 \nLC_TIME= en_US.UTF-8 \nLC_COLLATE= en_US.UTF-8 \nLC_MONETARY= en_US.UTF-8 \nLC_MESSAGES= en_US.UTF-8 \nLC_PAPER= en_US.UTF-8 \nLC_NAME= en_US.UTF-8 \nLC_ADDRESS= en_US.UTF-8 \nLC_TELEPHONE= en_US.UTF-8 \nLC_MEASUREMENT= en_US.UTF-8 \nLC_IDENTIFICATION= en_US.UTF-8 \nLC_ALL=en_US.UTF-8  If any of the above configuration lines are unset (particularly LANG, LANGUAGE, and LC_ALL), you should set them before installing RetroPie. The easiest way to set each item is to use the  update-locale  command, such as  $ sudo update-locale LC_ALL=\"en_US.UTF-8\" .  Users can also set the local through the  raspi-config  tool.", 
            "title": "Verify Locale Settings"
        }, 
        {
            "location": "/Manual-Installation/#install-retropie", 
            "text": "After that, we install the needed packages for the RetroPie setup script:      sudo apt-get install git lsb-release  Then we download the latest RetroPie setup script with      cd\n    git clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git  The script is executed with      cd RetroPie-Setup\n    chmod +x retropie_setup.sh\n    sudo ./retropie_setup.sh  The screen should look like this then:", 
            "title": "Install RetroPie"
        }, 
        {
            "location": "/Manual-Installation/#full-install", 
            "text": "Manage Packages   Quick Install  This will install the core and main packages which are equivalent to what is provided with the RetroPie SD image.  Now, you have to copy your rom files into the ROMs directory. If you followed the steps above the main directory for all ROMs is ~/RetroPie/roms (or /home/pi/RetroPie/roms, which is the same here). In this directory there is a subdirectory for every emulated system, e.g., nes, snes, megadrive. Attention has to be taken for the extensions of the ROM files. All the information needed for each system is detailed in this wiki (see wiki home page or sidebar for systems)  EmulationStation can be run from the terminal by typing  emulationstation  in the terminal", 
            "title": "Full Install"
        }, 
        {
            "location": "/Manual-Installation/#partial-install", 
            "text": "Say you don't want to bloat your system with all of RetroPie- you also have the option to only install the emulators you want.   You will want to start by installing the core packages.", 
            "title": "Partial Install"
        }, 
        {
            "location": "/Manual-Installation/#core-packages", 
            "text": "The core components needed for RetroPie to function are:\n-  RetroArch:  Frontend for the libretro api, necessary for most emulators to run.\n-  EmulationStation:  Frontend for sorting and launching all of your games.\n-  RetroPie Menu:  Menu in emulationstation for simpler configuration of your system.\n-  Runcommand:  The runcommand launch menu that assists launching your games with proper configurations see related wiki page  HERE .", 
            "title": "Core Packages"
        }, 
        {
            "location": "/Manual-Installation/#main-optional-experimental", 
            "text": "Emulators can be installed and updated individually from the Main, Optional, and Experimental packages.", 
            "title": "Main / Optional / Experimental"
        }, 
        {
            "location": "/Manual-Installation/#samba-roms", 
            "text": "If you want to use samba shares you can set them up from the setup/tools option of the retropie setup script.", 
            "title": "Samba Roms"
        }, 
        {
            "location": "/Manual-Installation/#boot-to-emulationstation", 
            "text": "Follow the steps here: https://github.com/RetroPie/RetroPie-Setup/wiki/FAQ#how-do-i-boot-to-the-desktop-or-kodi", 
            "title": "Boot to emulationstation"
        }, 
        {
            "location": "/Manual-Installation/#further-optimizations", 
            "text": "On Debian Jessie add  consoleblank=0  to the existing line in  /boot/cmdline.txt  (with a space before it so it's an additional parameter). This prevents the screenblanker kicking in. With it, runcommand dialog is always displayed. \nThere is also a gui option in RetroPie-Setup -  Configuration / Tools -  Raspbian Tools to disable the blanker, but it doesn't work in Jessie due to a Debian bug.", 
            "title": "Further Optimizations:"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/", 
            "text": "Retropie - Ubuntu 16.04 LTS x86 Flavor\n\n\nDescription\n\n\nA guide to build the RetroPie setup on Ubuntu 16.04 LTS x86 and related distros.\n\n\nTested with an Intel NUC Kit NUC5CPYH\n\n\nSections\n\n\n\n\nSection 1: Install Ubuntu 16.04 LTS\n\n\nSection 2: Setup Retropie\n\n\nSection 2.1: Download\n\n\nSection 2.2: Installation\n\n\nSection 2.3: Configuration\n\n\n\n\n\n\nSection 3: FAQs\n\n\nSection 3.1: Emulationstation hangs if shutdown/restart was selected\n\n\nSection 3.2: Cannot install PS3 driver\n  \n\n\nSection 3.3: Screen blanks after some minutes\n\n\nSection 3.4: Ubuntu does not autologin\n\n\nSection 3.5: How to setup a splashscreen?\n\n\nSection 3.6: No audio\n\n\nSection 3.7: My NUC or Intel Baytrail/Braswell powered device hangs (Ubuntu 15.10)\n\n\nSection 3.8: No HDMI audio (Ubuntu 16.04)\n\n\nSection 3.9: Xbox360 Controller mappings not working correctly\n\n\nSection 3.10: How do I map controls to Dolphin\n\n\nSection 3.11: Start+Select does not exit Dolphin\n\n\nSection 3.12: SteamOS hack to allow installation\n\n\n\n\n\n\n\n\n\n\nSection 1: Install Ubuntu 16.04 LTS or a related Debian based distro such as Linux Mint 17 and 18.\n\n\nDownload and install Ubuntu 16.04 LTS. ISO image can be used to create a bootable DVD or a USB stick.\nhttp://www.ubuntu.com/download/desktop\n\n\nTo run RetroPie-Setup user must be a member of group root/admin.\n\n\nSection 2: Setup RetroPie\n\n\nSection 2.1: Download\n\n\nUpdate and upgrade the existing APT packages:\n\n\n    sudo apt-get update \n sudo apt-get upgrade\n\n\n\n\nInstall the needed packages for the RetroPie setup script:\n\n\n    sudo apt-get install -y git dialog\n\n\n\n\nDownload the latest RetroPie setup script:\n\n\n    git clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git\n\n\n\n\nEnter the folder with the setup script:\n\n\n    cd RetroPie-Setup\n\n\n\n\nThe script is executed with:\n\n\n    sudo ./retropie_setup.sh\n\n\n\n\nThe screen should look like/similar this at this point:\n\n\n\n\nSection 2.2: Installation\n\n\nBasic Install\n\n\nThis will install the main packages which are equivalent to what is provided with the RetroPie SD image. Note that this will be the 32 bit version of RetroPie. That means that some emulators such as Daphne (Dragon's Lair) will not work out of the box on this version. That is because Daphne and a few other emulators only have a 64 bit version released for use while this install is for the 32 bit cpu family.\n\n\nNow, you have to copy your rom files into the correct associated rom directories. If you followed the steps above the main directory for all roms is ~/RetroPie/roms (or /home/pi/RetroPie/roms, which is the same here). In this directory there is a sub-directory for every supported emulated system, e.g., NES, SNES, Sega Megadrive, etc. \n\n\nAttention has to be taken for the extensions of the rom files. Some emulators use .zip while some use a custom file extension associated with the emulator in question. For example the Atari 2600 emulator may use .a26, .bin, and .rom.\n\n\nAll the information needed for each system is detailed in this wiki. See the wiki home page or sidebar for systems.\n\n\nSection 2.3: Configuration\n\n\nEmulationStation can be run from the terminal by typing \nemulationstation\n in the terminal.\n\n\nYou can go into Setup / Configuration and enable autostart as you like.\n\n\nSection 3: FAQs\n\n\nSection 3.1: Emulationstation hangs if shutdown/restart was selected\n\n\nIt is not possible to restart/shutdown if a sudo requests an password. To disable sudo password request add the line \n$user ALL=(ALL) NOPASSWD:ALL\n at the end of \n/etc/sudoers\n. Replace \n$user\nwith the name of your current user.\n\n\nSection 3.2: Cannot install PS3 driver\n\n\nUbuntu has an builtin PS3 bluetooth driver. There is no need to install sixad. Make your bluetooth dongle discoverable. Connect your controller over usb. Now open \"bluetooth system settings/add device\". Select PS3 controller and click ok. Your controller should pair now if you press PS button.\n\n\nsidenote: https://retropie.org.uk/forum/topic/2736/ubuntu-16-04-install-genuine-ps3-controller-issue\n\n\nSection 3.3: Screen blanks after some minutes\n\n\nOpen Ubuntu system settings menu disable screensaver and screen lock timeouts.  \n\n\nSection 3.4: Ubuntu does not autologin\n\n\nOpen Ubuntu system settings menu and select user accounts. Enable autologin for current user.    \n\n\nSection 3.5: How to setup a splashscreen?\n\n\nUse Plymouth to setup a splash screen:\nhttps://wiki.ubuntu.com/Plymouth\n\n\nSection 3.6: No audio\n\n\nOpen Ubuntu system settings menu and select right audio output device.  \n\n\nSection 3.7: My NUC or Intel Baytrail/Braswell powered device hangs (Ubuntu 15.10)\n\n\nThe default kernel 4.1 of Ubuntu 15.10 tends to hang. It is a know bug:\nhttps://bugs.freedesktop.org/show_bug.cgi?id=91629\n\n\nUpdate to higher kernel version solves this problem:\nhttp://sourcedigit.com/18333-how-to-install-linux-kernel-4-3-3-on-ubuntu-15-10-ubuntu-15-04/\n\n\nSection 3.8: No HDMI audio (Ubuntu 16.04)\n\n\nUbuntu 16.04 uses Pulseaudio 8 which has issues with HDMI if you suspend your device or change display resolutions at runtime. This problem will be solved with Ubuntu 16.10 and Pulseaudio 9. Mupen64plus runs a fullscreen resolution of 640x480. If your default resolution differs there will be a resolution switch and Pulseaudio will set another audio device. You can disable Pulseaudio auto output selection. Open /etc/pulse/default.pa and comment out the line:\n\n\n#load-module module-switch-on-port-available\n\n\n\n\nhttps://bugs.freedesktop.org/show_bug.cgi?id=93946#c36\n\n\nSection 3.9: Xbox360 Controller mappings not working correctly\n\n\nThe X86 version of Retropie install does nto have the xboxdrv installed correctly.  Please launch Retropie-Setup Manage Packacges - Drivers and install xbox drv and remap your inputs. \n\n\nSection 3.10: How do I map controls to Dolphin\n\n\nDolphin controls must currently be mapped via the GUI. You will need to drop down into terminal mode press F4 on your keyboard if you are currently in emulation station, hit the unity button and search for terminal.  Click to launch. \nChange to the Dolphin directory\n\n\ncd /opt/retropie/emulators/bin/dolphin-emu \nLaunch dolphin emu\n./dolphin-emu \n\n\n\n\nFrom there there graphical client will launch and you can bind your controller in the Dolphin Interface as well as change settings.\n\n\nSection 3.11: Start+Select does not exit Dolphin\n\n\nDolphin is not a libretro emulator. Currently exit for Dolphin is hard mapped to Alt + F4 \nYou can manually exit via your keyboard, and come back to emulation station.\nTo map a button on your controller to exit Dolphin you will need to launch via the gui method above. \nOnce in the menu navigate to Hotkey Behavior.\n\nSwitch the device indicator to your controller\nselect the exit function and map a button like select to this function.\nYou will also need to configure in the graphics window to always force window on top and to hide mouse/cursor\n\n\nNow enter back into emulationstation mode and launch a dolphin game from the gamecube menu\npress x when the game is starting\nSelect Dolphin-Gui instead of dolphin as the runcommand default emulator.\nLaunch game\nYou will now be able to exit back to emulationstation with that button you mapped. \n\n\nSection 3.12: SteamOS hack to allow installation\n\n\nWhile SteamOS is not based on Ubuntu 16.04 it is based on Debian 8 which is supported.\nCurrently you can install it and it will set everything up properly. EmulationStation has issues launching\nroms just like through a manual installation. However the samba share setup and all other parts of RetroPie\nappear to function normally.\n\n\nTo start follow the same instructions of doing a git clone of the RetroPie repo. Then you have to edit\n\n\n  RetroPie-Setup/scriptmodules/system.sh\n\n\n\nIn the get_os_version() function the work-around is to change:\n\n\n        error=\"Unsupported OS\"\n        ;;\nesac\n\n\n\nTo\n\n\n        __os_debian_ver=\"8\"\n        ;;\nesac\n\n\n\nThis will obviously override any platform checking done by the script and is very hacky, but it will let the retropie setup continue properly until actual support exists", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#retropie-ubuntu-1604-lts-x86-flavor", 
            "text": "", 
            "title": "Retropie - Ubuntu 16.04 LTS x86 Flavor"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#description", 
            "text": "A guide to build the RetroPie setup on Ubuntu 16.04 LTS x86 and related distros.  Tested with an Intel NUC Kit NUC5CPYH", 
            "title": "Description"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#sections", 
            "text": "Section 1: Install Ubuntu 16.04 LTS  Section 2: Setup Retropie  Section 2.1: Download  Section 2.2: Installation  Section 2.3: Configuration    Section 3: FAQs  Section 3.1: Emulationstation hangs if shutdown/restart was selected  Section 3.2: Cannot install PS3 driver     Section 3.3: Screen blanks after some minutes  Section 3.4: Ubuntu does not autologin  Section 3.5: How to setup a splashscreen?  Section 3.6: No audio  Section 3.7: My NUC or Intel Baytrail/Braswell powered device hangs (Ubuntu 15.10)  Section 3.8: No HDMI audio (Ubuntu 16.04)  Section 3.9: Xbox360 Controller mappings not working correctly  Section 3.10: How do I map controls to Dolphin  Section 3.11: Start+Select does not exit Dolphin  Section 3.12: SteamOS hack to allow installation", 
            "title": "Sections"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-1-install-ubuntu-1604-lts-or-a-related-debian-based-distro-such-as-linux-mint-17-and-18", 
            "text": "Download and install Ubuntu 16.04 LTS. ISO image can be used to create a bootable DVD or a USB stick.\nhttp://www.ubuntu.com/download/desktop  To run RetroPie-Setup user must be a member of group root/admin.", 
            "title": "Section 1: Install Ubuntu 16.04 LTS or a related Debian based distro such as Linux Mint 17 and 18."
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-2-setup-retropie", 
            "text": "", 
            "title": "Section 2: Setup RetroPie"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-21-download", 
            "text": "Update and upgrade the existing APT packages:      sudo apt-get update   sudo apt-get upgrade  Install the needed packages for the RetroPie setup script:      sudo apt-get install -y git dialog  Download the latest RetroPie setup script:      git clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git  Enter the folder with the setup script:      cd RetroPie-Setup  The script is executed with:      sudo ./retropie_setup.sh  The screen should look like/similar this at this point:", 
            "title": "Section 2.1: Download"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-22-installation", 
            "text": "Basic Install  This will install the main packages which are equivalent to what is provided with the RetroPie SD image. Note that this will be the 32 bit version of RetroPie. That means that some emulators such as Daphne (Dragon's Lair) will not work out of the box on this version. That is because Daphne and a few other emulators only have a 64 bit version released for use while this install is for the 32 bit cpu family.  Now, you have to copy your rom files into the correct associated rom directories. If you followed the steps above the main directory for all roms is ~/RetroPie/roms (or /home/pi/RetroPie/roms, which is the same here). In this directory there is a sub-directory for every supported emulated system, e.g., NES, SNES, Sega Megadrive, etc.   Attention has to be taken for the extensions of the rom files. Some emulators use .zip while some use a custom file extension associated with the emulator in question. For example the Atari 2600 emulator may use .a26, .bin, and .rom.  All the information needed for each system is detailed in this wiki. See the wiki home page or sidebar for systems.", 
            "title": "Section 2.2: Installation"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-23-configuration", 
            "text": "EmulationStation can be run from the terminal by typing  emulationstation  in the terminal.  You can go into Setup / Configuration and enable autostart as you like.", 
            "title": "Section 2.3: Configuration"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-3-faqs", 
            "text": "", 
            "title": "Section 3: FAQs"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-31-emulationstation-hangs-if-shutdownrestart-was-selected", 
            "text": "It is not possible to restart/shutdown if a sudo requests an password. To disable sudo password request add the line  $user ALL=(ALL) NOPASSWD:ALL  at the end of  /etc/sudoers . Replace  $user with the name of your current user.", 
            "title": "Section 3.1: Emulationstation hangs if shutdown/restart was selected"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-32-cannot-install-ps3-driver", 
            "text": "Ubuntu has an builtin PS3 bluetooth driver. There is no need to install sixad. Make your bluetooth dongle discoverable. Connect your controller over usb. Now open \"bluetooth system settings/add device\". Select PS3 controller and click ok. Your controller should pair now if you press PS button.  sidenote: https://retropie.org.uk/forum/topic/2736/ubuntu-16-04-install-genuine-ps3-controller-issue", 
            "title": "Section 3.2: Cannot install PS3 driver"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-33-screen-blanks-after-some-minutes", 
            "text": "Open Ubuntu system settings menu disable screensaver and screen lock timeouts.", 
            "title": "Section 3.3: Screen blanks after some minutes"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-34-ubuntu-does-not-autologin", 
            "text": "Open Ubuntu system settings menu and select user accounts. Enable autologin for current user.", 
            "title": "Section 3.4: Ubuntu does not autologin"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-35-how-to-setup-a-splashscreen", 
            "text": "Use Plymouth to setup a splash screen:\nhttps://wiki.ubuntu.com/Plymouth", 
            "title": "Section 3.5: How to setup a splashscreen?"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-36-no-audio", 
            "text": "Open Ubuntu system settings menu and select right audio output device.", 
            "title": "Section 3.6: No audio"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-37-my-nuc-or-intel-baytrailbraswell-powered-device-hangs-ubuntu-1510", 
            "text": "The default kernel 4.1 of Ubuntu 15.10 tends to hang. It is a know bug:\nhttps://bugs.freedesktop.org/show_bug.cgi?id=91629  Update to higher kernel version solves this problem:\nhttp://sourcedigit.com/18333-how-to-install-linux-kernel-4-3-3-on-ubuntu-15-10-ubuntu-15-04/", 
            "title": "Section 3.7: My NUC or Intel Baytrail/Braswell powered device hangs (Ubuntu 15.10)"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-38-no-hdmi-audio-ubuntu-1604", 
            "text": "Ubuntu 16.04 uses Pulseaudio 8 which has issues with HDMI if you suspend your device or change display resolutions at runtime. This problem will be solved with Ubuntu 16.10 and Pulseaudio 9. Mupen64plus runs a fullscreen resolution of 640x480. If your default resolution differs there will be a resolution switch and Pulseaudio will set another audio device. You can disable Pulseaudio auto output selection. Open /etc/pulse/default.pa and comment out the line:  #load-module module-switch-on-port-available  https://bugs.freedesktop.org/show_bug.cgi?id=93946#c36", 
            "title": "Section 3.8: No HDMI audio (Ubuntu 16.04)"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-39-xbox360-controller-mappings-not-working-correctly", 
            "text": "The X86 version of Retropie install does nto have the xboxdrv installed correctly.  Please launch Retropie-Setup Manage Packacges - Drivers and install xbox drv and remap your inputs.", 
            "title": "Section 3.9: Xbox360 Controller mappings not working correctly"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-310-how-do-i-map-controls-to-dolphin", 
            "text": "Dolphin controls must currently be mapped via the GUI. You will need to drop down into terminal mode press F4 on your keyboard if you are currently in emulation station, hit the unity button and search for terminal.  Click to launch. \nChange to the Dolphin directory  cd /opt/retropie/emulators/bin/dolphin-emu \nLaunch dolphin emu\n./dolphin-emu   From there there graphical client will launch and you can bind your controller in the Dolphin Interface as well as change settings.", 
            "title": "Section 3.10: How do I map controls to Dolphin"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-311-startselect-does-not-exit-dolphin", 
            "text": "Dolphin is not a libretro emulator. Currently exit for Dolphin is hard mapped to Alt + F4 \nYou can manually exit via your keyboard, and come back to emulation station.\nTo map a button on your controller to exit Dolphin you will need to launch via the gui method above. \nOnce in the menu navigate to Hotkey Behavior. \nSwitch the device indicator to your controller\nselect the exit function and map a button like select to this function.\nYou will also need to configure in the graphics window to always force window on top and to hide mouse/cursor  Now enter back into emulationstation mode and launch a dolphin game from the gamecube menu\npress x when the game is starting\nSelect Dolphin-Gui instead of dolphin as the runcommand default emulator.\nLaunch game\nYou will now be able to exit back to emulationstation with that button you mapped.", 
            "title": "Section 3.11: Start+Select does not exit Dolphin"
        }, 
        {
            "location": "/RetroPie-Ubuntu-16.04-LTS-x86-Flavor/#section-312-steamos-hack-to-allow-installation", 
            "text": "While SteamOS is not based on Ubuntu 16.04 it is based on Debian 8 which is supported.\nCurrently you can install it and it will set everything up properly. EmulationStation has issues launching\nroms just like through a manual installation. However the samba share setup and all other parts of RetroPie\nappear to function normally.  To start follow the same instructions of doing a git clone of the RetroPie repo. Then you have to edit    RetroPie-Setup/scriptmodules/system.sh  In the get_os_version() function the work-around is to change:          error=\"Unsupported OS\"\n        ;;\nesac  To          __os_debian_ver=\"8\"\n        ;;\nesac  This will obviously override any platform checking done by the script and is very hacky, but it will let the retropie setup continue properly until actual support exists", 
            "title": "Section 3.12: SteamOS hack to allow installation"
        }, 
        {
            "location": "/Odroid/", 
            "text": "Odroid C1/C1+\n\n\nThis is a guide on how to build RetroPie on the Odroid C1/C1+. This is assuming you are starting with a prebuilt image of Ubuntu from HardKernel's Website:\n\n\nDownload Ubuntu Image for Odroid:\n\n\nhttp://odroid.com/dokuwiki/doku.php?id=en:c1_release_linux_ubuntu\n\n\nDirect Link \nHere\n\n\nExtract the .xz file with a program like \n7zip\n\n\nWrite the .img file to your SD card or EMMC module with something like \nWin32DiskImager\n\n\nUnlike the RetroPie SD Image, the Odroid image will autoexpand the filesystem so there is no need for that step here.\n\n\nInstall RetroPie:\n\n\nOptional preliminary steps:\n\n\nsudo apt-get update \n sudo apt-get upgrade\n\nsudo apt-get install -y git\n\n\n\n\n\nInstalling the RetroPie Setup Script:\n\n\ncd\ngit clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git\n\n\n\n\nRun the Setup Script:\n\n\ncd RetroPie-Setup\nsudo ./retropie_setup.sh\n\n\n\n\nNote\n if you have issues while compiling modules and it freezes up on you, then you need to tell it to only compile with one core by running the setup script with this:\n\n\nsudo MAKEFLAGS=\n-j1\n ./retropie_setup.sh\n\n\n\n\n\nInstalling Modules\n\n\nAll modules can be installed from the RetroPie Setup Script. First and foremost the two main packages you need in order for the majority of your system to run are RetroArch and EmulationStation:\n\n\nInstalling EmulationStation:\n\n\n\n\nOption 5: Install EmulationStation\n\n\n\n\nKilling X \nsudo service lightdm stop\n\n\nopen new terminal \nctrl+alt+F1\n\n\nInstall EmulationStation Theme\n\n\n\n\nOption 3: Install Themes\n\n\n\n\nInstalling RetroArch:\n\n\n\n\nOption 5: Install RetroArch\n\n\n\n\nInstalling Emulators:\n\n\n\n\nOption 5: Choose your emulators\n\n\n\n\nAdvanced Configuration\n\n\nAutoStart EmulationStation\n\n\n\n\nOption 3: Autostart EmulationStation \n\n\n\n\nRom Transfer\n\n\n\n\nOption 3: Enable USBRomService\n\n\n\n\nSamba Shares\n\n\n\n\nOption 3: Enable Samba Shares\n\n\n\n\nBoot to Console:\n\n\nsudo -s\n\nsudo echo \nmanual\n \n /etc/init/lightdm.override\n\n\n\n\n\nTo start lightdm on command:\n\n\nsudo start lightdm\n\n\n\n\nTo restore your system so that lightdm is always started on boot:\n\n\nsudo rm /etc/init/lightdm.override\n\n\n\n\nDisable Screen Blanking in Console:\n\n\nsudo nano /etc/kbd/config\n\n\n\n\ncomment out\n\n\nBLANK_TIME\nPOWERDOWN_TIME", 
            "title": "Odroid"
        }, 
        {
            "location": "/Odroid/#odroid-c1c1", 
            "text": "This is a guide on how to build RetroPie on the Odroid C1/C1+. This is assuming you are starting with a prebuilt image of Ubuntu from HardKernel's Website:", 
            "title": "Odroid C1/C1+"
        }, 
        {
            "location": "/Odroid/#download-ubuntu-image-for-odroid", 
            "text": "http://odroid.com/dokuwiki/doku.php?id=en:c1_release_linux_ubuntu  Direct Link  Here  Extract the .xz file with a program like  7zip  Write the .img file to your SD card or EMMC module with something like  Win32DiskImager  Unlike the RetroPie SD Image, the Odroid image will autoexpand the filesystem so there is no need for that step here.", 
            "title": "Download Ubuntu Image for Odroid:"
        }, 
        {
            "location": "/Odroid/#install-retropie", 
            "text": "Optional preliminary steps:  sudo apt-get update   sudo apt-get upgrade\n\nsudo apt-get install -y git  Installing the RetroPie Setup Script:  cd\ngit clone --depth=1 https://github.com/RetroPie/RetroPie-Setup.git  Run the Setup Script:  cd RetroPie-Setup\nsudo ./retropie_setup.sh  Note  if you have issues while compiling modules and it freezes up on you, then you need to tell it to only compile with one core by running the setup script with this:  sudo MAKEFLAGS= -j1  ./retropie_setup.sh", 
            "title": "Install RetroPie:"
        }, 
        {
            "location": "/Odroid/#installing-modules", 
            "text": "All modules can be installed from the RetroPie Setup Script. First and foremost the two main packages you need in order for the majority of your system to run are RetroArch and EmulationStation:", 
            "title": "Installing Modules"
        }, 
        {
            "location": "/Odroid/#installing-emulationstation", 
            "text": "Option 5: Install EmulationStation   Killing X  sudo service lightdm stop  open new terminal  ctrl+alt+F1", 
            "title": "Installing EmulationStation:"
        }, 
        {
            "location": "/Odroid/#install-emulationstation-theme", 
            "text": "Option 3: Install Themes", 
            "title": "Install EmulationStation Theme"
        }, 
        {
            "location": "/Odroid/#installing-retroarch", 
            "text": "Option 5: Install RetroArch", 
            "title": "Installing RetroArch:"
        }, 
        {
            "location": "/Odroid/#installing-emulators", 
            "text": "Option 5: Choose your emulators", 
            "title": "Installing Emulators:"
        }, 
        {
            "location": "/Odroid/#advanced-configuration", 
            "text": "", 
            "title": "Advanced Configuration"
        }, 
        {
            "location": "/Odroid/#autostart-emulationstation", 
            "text": "Option 3: Autostart EmulationStation", 
            "title": "AutoStart EmulationStation"
        }, 
        {
            "location": "/Odroid/#rom-transfer", 
            "text": "Option 3: Enable USBRomService", 
            "title": "Rom Transfer"
        }, 
        {
            "location": "/Odroid/#samba-shares", 
            "text": "Option 3: Enable Samba Shares", 
            "title": "Samba Shares"
        }, 
        {
            "location": "/Odroid/#boot-to-console", 
            "text": "sudo -s\n\nsudo echo  manual    /etc/init/lightdm.override  To start lightdm on command:  sudo start lightdm  To restore your system so that lightdm is always started on boot:  sudo rm /etc/init/lightdm.override", 
            "title": "Boot to Console:"
        }, 
        {
            "location": "/Odroid/#disable-screen-blanking-in-console", 
            "text": "sudo nano /etc/kbd/config  comment out  BLANK_TIME\nPOWERDOWN_TIME", 
            "title": "Disable Screen Blanking in Console:"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/", 
            "text": "Retropie - Arch Linux Flavor\n\n\nThis tutorial was written by r4 (http://www.raspberrypi.org/phpBB3/viewtopic.php?f=78\nt=46013) and is now adapted to work with AUR4 and \napacman\n script.\n\n\nDescription\n\n\nA guide to build the retropie setup on Arch Linux. This guide is not all encompassing. It is merely a basic setup to build a similar environment offered on the official Retropie install script.\n\n\nSections\n\n\n\n\nSection 1: AUR tools\n\n\nSection 2: Install retroarch:\n\n\nSection 2.1. Configuration\n\n\n\n\n\n\nSection 3: Install Emulators\n\n\nSection 4: Install ROMs\n\n\nSection 5: Install EmulationStation:\n\n\n5.1 Configuration\n\n\n5.2 Themes\n\n\n5.3 Scraper\n\n\n\n\n\n\nSection 6: Launch EmulationStation at login\n\n\nSection 7: Auto login at boot\n\n\n\n\n\n\nSection 1: AUR tools\n\n\nInstall \napacman\n\n\nwget https://aur.archlinux.org/cgit/aur.git/snapshot/apacman.tar.gz\ntar xzf apacman.tar.gz\ncd apacman\nmakepkg -si\n\n\n\n\nIf makepkg reports an error, make sure you have base-devel installed:\n\n\npacman -Sv base-devel\n\n\n\n\nSection 2: Install retroarch:\n\n\nFirst we need a special build of sdl2 to make Retroarch and EmulationStation work the best with RPi/RPi2. Then next we can proceed on installing retroarch.\n\n\napacman -S sdl2-rbp-bin\napacman -S retroarch-rbp-git\n\n\n\n\nSection 2.1. Configuration\n\n\nCopy skeleton configuration file located at /etc/retroarch.cfg to ~/.retroarch.cfg\n\n\ncp /etc/retroarch.cfg ~/.retroarch.cfg\n\n\n\n\nWith your working joystick, configure your controller with the following command.\n\n\nretroarch-joyconfig \n ~/.retroarch.cfg\n\n\n\n\nNote: Ensuring your joystick is working will not be covered in this guide as this falls out of scope and there are plenty of other resources to help with this.\n\n\nConsult https://wiki.archlinux.org/index.php/RetroArch for more information.\n\n\nSection 3: Install Emulators\n\n\nThere are several emulators for retroarch. You can get a list of them by issuing the command below. Install whatever is necessary.\n\n\napacman -Ss libretro\n\n\n\n\nNote: Some emulators may not work or may require manual building by downloading the associated tarball and issuing the command:\n\n\nmakepkg -Acsi\n\n\n\n\nSection 4: Install ROMs\n\n\nMake directory and install ROMs to ~/roms/\n.\n\n\nExample:\n\n\nmkdir -p ~/roms/snes\ncp /path/to/roms/* ~/roms/snes/\n\n\n\n\nSection 5: Install EmulationStation:\n\n\nEmulationStation is found in the AUR.\n\n\napacman -S emulationstation-git\n\n\n\n\n5.1 Configuration\n\n\nTaken from https://github.com/Aloshi/EmulationStation.\n\n\n~/.emulationstation/es_systems.cfg: When first run, an example systems configuration file will be created at $HOME/.emulationstation/es_systems.cfg. This example has some comments explaining how to write the configuration file, and an example RetroArch launch command. See the \"Writing an es_systems.cfg\" section for more information.\n\n\n~/.emulationstation/es_input.cfg: When you first start EmulationStation, you will be prompted to configure any input devices you wish to use. The process is thus:\n\n\nPress a button on any device you wish to use. This includes the keyboard. If you are unable to configure a device, hold a button on the first device to continue to step 2.\n\n\nPress the displayed input for each device in sequence. You will be prompted for Up, Down, Left, Right, A (Select), B (Back), Menu, Select (fast select), PageUp, and PageDown. If your controller doesn't have enough buttons to map PageUp/PageDown, it will be skipped.\n\n\nYour config will be saved to ~/.emulationstation/es_input.cfg. If you wish to reconfigure, just delete this file.\n\n\nNOTE: If ~/.emulationstation/es_input.cfg is present but does not contain any available joysticks or a keyboard, an emergency default keyboard mapping will be provided.\n\n\nAs long as ES hasn't frozen, you can always press F4 to close the application.\n\n\n5.2 Themes\n\n\nWith this you'll get the Simple theme, one of the most complete themes out there.\n\n\nwget http://blog.nilsbyte.de/download/emulationstation-theme-simple-v1-4/\nmkdir -p ~/.emulationstation/themes\nunzip es_theme_simple_v1.4.zip -d ~/.emulationstation/themes\n\n\n\n\nConsult http://emulationstation.org/forum/index.php?board=6.0 for more information.\n\n\n5.3 Scraper\n\n\nThe ES-Scraper project is no more compatible with Emulation Station since \nes_systems.cfg\n now is an XML file.\n\n\nSection 6: Launch EmulationStation at login\n\n\nIssue the command below to ensure EmulationStation starts at login.\n\n\necho 'emulationstation' \n ~/.bash_profile\n\n\n\n\nor if you're using ZSH\n\n\necho 'emulationstation' \n ~/.zlogin\n\n\n\n\nNote: The single quotes around the string being echoed are important!\n\n\nSection 7: Auto login at boot\n\n\nTaken from https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console.\n\n\nsystemctl edit getty@tty1\n\n\n\n\nand then write/paste this inside\n\n\n[Service]\nType=simple\nExecStart=\nExecStart=-/sbin/agetty --autologin \nusername\n --noclear %I 38400 linux\n\n\n\n\nsave the file and reboot.\n\n\n\n\nNow you should have a working environment similar to what retropie offers but in Arch Linux. Enjoy! :)", 
            "title": "Arch Linux"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#retropie-arch-linux-flavor", 
            "text": "This tutorial was written by r4 (http://www.raspberrypi.org/phpBB3/viewtopic.php?f=78 t=46013) and is now adapted to work with AUR4 and  apacman  script.", 
            "title": "Retropie - Arch Linux Flavor"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#description", 
            "text": "A guide to build the retropie setup on Arch Linux. This guide is not all encompassing. It is merely a basic setup to build a similar environment offered on the official Retropie install script.", 
            "title": "Description"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#sections", 
            "text": "Section 1: AUR tools  Section 2: Install retroarch:  Section 2.1. Configuration    Section 3: Install Emulators  Section 4: Install ROMs  Section 5: Install EmulationStation:  5.1 Configuration  5.2 Themes  5.3 Scraper    Section 6: Launch EmulationStation at login  Section 7: Auto login at boot", 
            "title": "Sections"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-1-aur-tools", 
            "text": "Install  apacman  wget https://aur.archlinux.org/cgit/aur.git/snapshot/apacman.tar.gz\ntar xzf apacman.tar.gz\ncd apacman\nmakepkg -si  If makepkg reports an error, make sure you have base-devel installed:  pacman -Sv base-devel", 
            "title": "Section 1: AUR tools"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-2-install-retroarch", 
            "text": "First we need a special build of sdl2 to make Retroarch and EmulationStation work the best with RPi/RPi2. Then next we can proceed on installing retroarch.  apacman -S sdl2-rbp-bin\napacman -S retroarch-rbp-git", 
            "title": "Section 2: Install retroarch:"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-21-configuration", 
            "text": "Copy skeleton configuration file located at /etc/retroarch.cfg to ~/.retroarch.cfg  cp /etc/retroarch.cfg ~/.retroarch.cfg  With your working joystick, configure your controller with the following command.  retroarch-joyconfig   ~/.retroarch.cfg  Note: Ensuring your joystick is working will not be covered in this guide as this falls out of scope and there are plenty of other resources to help with this.  Consult https://wiki.archlinux.org/index.php/RetroArch for more information.", 
            "title": "Section 2.1. Configuration"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-3-install-emulators", 
            "text": "There are several emulators for retroarch. You can get a list of them by issuing the command below. Install whatever is necessary.  apacman -Ss libretro  Note: Some emulators may not work or may require manual building by downloading the associated tarball and issuing the command:  makepkg -Acsi", 
            "title": "Section 3: Install Emulators"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-4-install-roms", 
            "text": "Make directory and install ROMs to ~/roms/ .  Example:  mkdir -p ~/roms/snes\ncp /path/to/roms/* ~/roms/snes/", 
            "title": "Section 4: Install ROMs"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-5-install-emulationstation", 
            "text": "EmulationStation is found in the AUR.  apacman -S emulationstation-git", 
            "title": "Section 5: Install EmulationStation:"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#51-configuration", 
            "text": "Taken from https://github.com/Aloshi/EmulationStation.  ~/.emulationstation/es_systems.cfg: When first run, an example systems configuration file will be created at $HOME/.emulationstation/es_systems.cfg. This example has some comments explaining how to write the configuration file, and an example RetroArch launch command. See the \"Writing an es_systems.cfg\" section for more information.  ~/.emulationstation/es_input.cfg: When you first start EmulationStation, you will be prompted to configure any input devices you wish to use. The process is thus:  Press a button on any device you wish to use. This includes the keyboard. If you are unable to configure a device, hold a button on the first device to continue to step 2.  Press the displayed input for each device in sequence. You will be prompted for Up, Down, Left, Right, A (Select), B (Back), Menu, Select (fast select), PageUp, and PageDown. If your controller doesn't have enough buttons to map PageUp/PageDown, it will be skipped.  Your config will be saved to ~/.emulationstation/es_input.cfg. If you wish to reconfigure, just delete this file.  NOTE: If ~/.emulationstation/es_input.cfg is present but does not contain any available joysticks or a keyboard, an emergency default keyboard mapping will be provided.  As long as ES hasn't frozen, you can always press F4 to close the application.", 
            "title": "5.1 Configuration"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#52-themes", 
            "text": "With this you'll get the Simple theme, one of the most complete themes out there.  wget http://blog.nilsbyte.de/download/emulationstation-theme-simple-v1-4/\nmkdir -p ~/.emulationstation/themes\nunzip es_theme_simple_v1.4.zip -d ~/.emulationstation/themes  Consult http://emulationstation.org/forum/index.php?board=6.0 for more information.", 
            "title": "5.2 Themes"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#53-scraper", 
            "text": "The ES-Scraper project is no more compatible with Emulation Station since  es_systems.cfg  now is an XML file.", 
            "title": "5.3 Scraper"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-6-launch-emulationstation-at-login", 
            "text": "Issue the command below to ensure EmulationStation starts at login.  echo 'emulationstation'   ~/.bash_profile  or if you're using ZSH  echo 'emulationstation'   ~/.zlogin  Note: The single quotes around the string being echoed are important!", 
            "title": "Section 6: Launch EmulationStation at login"
        }, 
        {
            "location": "/RetroPie-Arch-Linux-Flavor/#section-7-auto-login-at-boot", 
            "text": "Taken from https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console.  systemctl edit getty@tty1  and then write/paste this inside  [Service]\nType=simple\nExecStart=\nExecStart=-/sbin/agetty --autologin  username  --noclear %I 38400 linux  save the file and reboot.   Now you should have a working environment similar to what retropie offers but in Arch Linux. Enjoy! :)", 
            "title": "Section 7: Auto login at boot"
        }, 
        {
            "location": "/RetroPie-install-for-OSMC-with-external-memory-USB-Drive/", 
            "text": "Installation\n\n\nIf you're like me you have a tiny SDCard in your RPi running OSMC, but now you want to play some roms, if you try to install full RetroPie you will run out of space and OSMC will panic and die with no space left.\n\n\nSo I decided to do a few easy quick mods to make it install to a USB Drive plugged in to a connected power USB hub.\n\n\nIf you want to update an older installation, please uninstall the old version first via the script:\n\n\nPlugin your USB Drive to the RPi, Format it EXT4\n\n\nSSH into your OSMC installation.\n\n\nYou will lose all your data on your USB Drive if you do this!!!\n\n\nFind your USB Drive with:\n    lsblk\n\n\nMMCBLK0 is normally your SDCard (Do not kill this one).\n\n\nMy USB Drive was SDA (8GB). \n\n\numount /dev/sda\n\nfdisk /dev/sda\n\n\n\nDelete all partitions with:\n\n\nd\n\n\n\nPress partition numbers until all removed.\n\n\nWrite partition table.\n\n\nw\n\n\n\nThen quit\n\n\nq\n\n\n\nFormat our usb drive with EXT4 (Linux File System).\n\n\nmkfs.ext4 /dev/sda -L RETROPIE\n\n\n\nRename our drive label RETROPIE (If you forget to label your drive in the last step)\n\n\ne2label /dev/sda RETROPIE\n\n\n\nRemove the USB Drive from the port and reinsert it. It should now be remounted under /media/RETROPIE/\n\n\nDownload the installation script to your OSMC home directory:\n\n\ncd /home/osmc\nwget https://raw.githubusercontent.com/mcobit/retrosmc/master/install-retrosmc.sh\n\n\n\nMake it executable by running:\n\n\nchmod +x install-retrosmc.sh\n\n\n\nThen run it:\n\n\n./install-retrosmc.sh\n\n\n\nClick install Retrosmc \n\n\nAfter it finishes downloading the setup scripts (ie you see the options menu) click cancel until you are back to the cli.\n\n\ncd ~/RetroPie-Setup\n\nnano retropie_packages.sh\n\n#main retropie install location\nrootdir=\"/opt/retropie\"\nmodify this line to:\nrootdir=\"/media/RETROPIE/retropie\"\n\n\n\nSave:\n    Press ctrl x\n    Press y\n    Press \n\n\n../install-retrosmc.sh\n\n\n\nClick install Retrosmc again.\n\n\nOnce you get to the second menu select \"Binary-based installation (recommended)\" when the RetroPie-Setup script pops up and press enter.\n\n\nAfter the RetroPie-Setup script finished the installation, press Enter for all windows, mentioning DATA and BIOS files for the emulators. When back at the main RetroPie menu, choose \"Cancel\"!\n\n\nInstall the Launcher Addon, you will find your shortcut in the Programaddons in kodi.\n\n\nYou can exit the menu by choosing Cancel at the bottom after every task.\n\n\nnano /home/osmc/RetroPie/scripts/retropie.sh\n\n\n\nChange:\n\n\nes_bin=\"/opt/retropie/supplementary/emulationstation/emulationstation\"\n\n\n\nTo:\n    es_bin=\"/media/RETROPIE/retropie/supplementary/emulationstation/emulationstation\"\n\n\nSave:\nPress ctrl x\nPress y\nPress \nEnter\n\n\n\n\nLet's move the roms folder to the Flash Drive as well now and make a soft system link to it.\n\n\ncd ../RetroPie\nmv roms roms2\n\nmkdir /media/RETROPIE/roms\n\nsudo apt-get install rsync\n\nrsync roms2 /media/RETROPIE/roms\n\nln -s /media/RETROPIE/roms roms\n\n\n\nOriginal install documentation see there for more help with issues: https://discourse.osmc.tv/t/howto-retrosmc-retrogaming-on-osmc/6671", 
            "title": "OSMC"
        }, 
        {
            "location": "/FAQ/", 
            "text": "Why do some emulators not show up?\n\n\nWhy can't I SSH as root anymore?\n\n\nWhere did the desktop go?\n\n\nWhy does shut down and reboot take ages?\n\n\nHow do I hide the boot text?\n\n\nHow do I boot to the desktop or Kodi\n\n\nHow do I remove the black borders\n\n\nHow do I change which buttons to press to exit an emulator with a controller?\n\n\nDoes Super Mario All Stars work?\n\n\nHow do I extend the available space when upgrading to a larger SD card\n\n\nHow would I start from command line, say, the SNES emulator by itself?\n\n\nIs there another way to set up the gamepad for use, e.g., within the snes emulator?\n\n\nThe PSX emulator reports no BIOS found. What do I do?\n\n\nWhich memory split should I use?\n\n\nWhy aren't my in-game saves working properly?\n\n\nWhy Can't I Insert Coins in Arcade Emulators?\n\n\n\n\nWhy do some emulators not show up?\n\n\nThe RetroPie SD image only ships with the most common emulators, if a system you want is missing you first need to make sure that emulator is installed. The details for installing additional emulators is explained on the \nfirst installation page\n\n\nIf the system still doesn't show up in Emulation Station, only emulators with ROMs inside its respective folder will show up in the EmulationStation GUI (given that the specific emulator is installed). For example, for the Nintendo 64 emulator to show up, you must have at least one ROM in the \n~/RetroPie/roms/n64/\n folder. For ROM types supported by each emulator, go to the wiki page for that specific system/emulator. \n\n\nWhy can't I SSH as root anymore?\n\n\nThe root password is disabled by default (as is the case for Raspbian and many other linux distros). \n\n\nbefore setting a root password, the following must be edited\n\n\nsudo nano /etc/ssh/sshd_config\n\n\nlook for \n\n\nPermitRootLogin without-password\n\n\nchange it to\n\n\nPermitRootLogin yes\n\n\nthen ctrl+x to save, \n\n\nnext set your root password:\n\n\nsudo passwd root\n\n\n\n\n\nrestart your Pi to register your changes\n\n\nsee these posts for more details:\n\n\nhttps://www.raspberrypi.org/documentation/linux/usage/root.md\n\n\nhttp://elinux.org/R-Pi_Troubleshooting#I_don.27t_know_the_root_password\n\n\nWhere did the desktop go?\n\n\nThe PIXEL (formerly LXDE) desktop environment was removed from the RetroPie image to keep it smaller.\n\n\nIt can easily be installed from the \nRetroPie Setup Script\n\n\nin \nConfiguration / Tools \n Raspbiantools \n Install Pixel Desktop Environment\n\n\nafter installation it will be accessible from the ports menu of emulationstation or can be called from the command line with \nstartx\n\n\n\n\nYou can also install it manually with:\n\n\nsudo apt-get install --no-install-recommends lxde\nsudo apt-get install xorg raspberrypi-ui-mods rpi-chromium-mods\n\n\n\n\nAnd then you can access it from the terminal by typing in\n\n\nstartx\n\n\nAfter installation your pi will boot into the desktop environment, you can change the behaviour to boot into emulationstation by selecting the autostart option for emulationstation from the configuration/tools section of the setup script, or you can set the autologin to console option from the boot options of the raspi-config menu.\n\n\nNote that failing to run startx after the installation may prevent other XWindow-based applications from starting (e.g. Micropolis port), so do launch the desktop after installation to ensure that it is fully set up.\n\n\nNote that you cannot run PIXEL and Retropie at the same time. You will need to log out of PIXEL completely to start EmulationStation\n\n\nWhy does shut down and reboot take ages?\n\n\nPrevious to RetroPie 3.4, there was an issue whereby EmulationStation was terminated on reboot/shut down, rather than shut down 'cleanly'. This has now been fixed, so every time you reboot/shut down EmulationStation rewrites all metadata about your roms, so that play counts, last-played dates, etc., are saved. This has the side-effect of the causing the whole process to take longer, relative to how many ROMs you have. MAME/FBA ROMs can often form the bulk of libraries, so it might be helpful to remove clones by \nrebuilding your set with a custom parent-only DAT\n.\n\n\nAn option has been added starting with RetroPie 3.7 to decide whether or not you want metadata saved on exit.\n\n\n\n\n\n\n\n\n\nSave Metadata On Exit:\n If on, it will read and write all the info for your roms which can lead to long boot and shutdown times if you have large romsets. If you turn it off it will not write those changes which means it also will not write how many times you've played a game, any new game scrapes, etc. This is on by default.\n\n\n\n\n\n\nParse Gamelists Only:\n If on, it will only read the roms you have scraped, so if you add any new roms it will not look for them unless you turn this back off. it is off by default.\n\n\n\n\n\n\nHow do I hide the boot text?\n\n\nNOTE that you should be comfortable with editing files in Linux as any wrong edits on the following file can break your boot sequence requiring a reimage of your SD card!\n\n\nsudo nano /boot/cmdline.txt\n\n\nchange \nconsole=tty1\n to \nconsole=tty3\n \n\n\nIf not present add \nquiet loglevel=3 plymouth.enable=0 logo.nologo\n at the end (note that recent RetroPie images include \nquiet loglevel=3 by default\n)\n\n\nmake sure it is all on the same line!!!\n \n\n\nThe logo.nologo option is what turns off the raspberries on boot.\n\n\nYou can also disable the rainbow splash at the beginning (not to be confused with the underpowered rainbow square the appears in the top right corner of your screen indicating you have an insufficient power supply)\n\n\nAdd \ndisable_splash=1\n in \n/boot/config.txt\n\n\nAs of 01/10/2016 the latest set of Raspbian updates causes boot text to be displayed again\n. To restore default RetroPie image behaviour you need to add \nplymouth.enable=0\n - future RetroPie images will include this by default.\n\n\nHow do I boot to the desktop or Kodi\n\n\nIn retropie setup script\nConfiguration / tools\nautostart\n\n\n\n\n\n\nStart EmulationStation at Boot:\n Boots into EmulationStation.\n\n\nStart Kodi at Boot:\n Boots into Kodi- if you exit Kodi you will be returned to EmulationStation.\n\n\nManually Edit /opt/retropie/configs/autostart.sh:\n you can manually add other programs to start on boot.\n\n\nBoot to text console (autologin):\n Boots into the terminal.\n\n\nBoot to Desktop:\n If you have a desktop environment installed like LXDE this will boot into the desktop.\n\n\n\n\nHow do I remove the black borders?\n\n\nDepending on the resolution of your television you may get black borders around your tv. You can full the whole expanse of your screen by editing the overscan settings. Exit to the terminal with F4 or access your pi over \nSSH\n\n\nsudo nano /boot/config.txt\n\n\n\n\nuncomment (i.e. delete the \n#\n preceding the line) \n\n\n#disable_overscan=1\n\n\n\n\nto\n\n\ndisable_overscan=1\n\n\n\n\nsave with \nctrl+x\n \n\n\nthen reboot. If it doesn't work then try messing with some of the other \noverscan\n settings manually \n\n\nHow do I change which buttons to press to exit an emulator with a controller?\n\n\nHotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. The following defaults are set automatically the first time you set up your controller from emulationstation.\n\n\nDefault joypad hotkeys:\n\n\n\n\n\n\n\n\nHotkeys\n\n\nAction\n\n\nCode Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect\n\n\nHotkey\n\n\ninput_enable_hotkey = \"6\"\n\n\n\n\n\n\n\n\n\n\nSelect+Start\n\n\nExit\n\n\ninput_exit_emulator_btn = \"7\"\n\n\n\n\n\n\n\n\n\n\nSelect+Right Shoulder\n\n\nSave\n\n\ninput_save_state_btn = \"5\"\n\n\n\n\n\n\n\n\n\n\nSelect+Left Shoulder\n\n\nLoad\n\n\ninput_load_state_btn = \"4\"\n\n\n\n\n\n\n\n\n\n\nSelect+Right\n\n\nInput State Slot Increase\n\n\ninput_state_slot_increase_btn = \"h0right\"\n\n\n\n\n\n\n\n\n\n\nSelect+Left\n\n\nInput State Slot Decrease\n\n\ninput_state_slot_decrease_btn = \"h0left\"\n\n\n\n\n\n\n\n\n\n\nSelect+X\n\n\nRGUI Menu\n\n\ninput_menu_toggle_btn = \"3\"\n\n\n\n\n\n\n\n\n\n\nSelect+B\n\n\nReset\n\n\ninput_reset_btn = \"0\"\n\n\n\n\n\n\n\n\n\n\n\n\nYou can adapt the above code example and choose the button number to your desired button for each hotkey function in the retroarch.cfg files for most systems (at least all the emulators that are part of RetroArch) \n\n\nYou can change it per controller with your autoconfig file here \n\n\n/opt/retropie/configs/all/retroarch-joypads/yourgamepad.cfg\n\n\n\n\nYou can Hardcode it globally for all systems here:\n\n\n/opt/retropie/configs/all/retroarch.cfg \n\n\n\n\nor set it by system\n\n\n/opt/retropie/configs/SYSTEMNAME/retroarch.cfg\n\n\n\n\nSee \nHERE\n for more information on custom controller configs\n\n\nDoes Super Mario All Stars work?\n\n\nThe ROM does work with PocketSnes (RetroArch) and lr-snes9x-next.\n\n\nFrom http://blog.petrockblock.com/2012/07/22/retropie-setup-an-initialization-script-for-retroarch-on-the-raspberry-pi/#comment-818063235:\n\n\n\n\nI found out that after the selection of a game, the control goes over to the second controller! This seems to be somehow a speciality of the All-Stars ROM. But at least, it is playable :-)\n\n\n\n\nAlternatively, if you only have one controller (or play alone) you can do the following:\n\n\nFrom http://www.raspberrypi.org/forums/viewtopic.php?f=78\nt=79083\n\n\n\n\nI managed to figure out a fix so the controls work in Super Mario All-Stars and also doesn't break other games (Mario Kart, Super Bomberman etc). This problem has been bugging me for ages and I had to figure out a way to play this game for nostalgia sake. This fix will unfortunately mean player two controls wont work for other games (but I play alone anyway and this is for people with one controller). Simply post this in your blank retroarch.cfg in the snes folder. P.S Remember to change the button numbers/axis for you own controller.\n\n\n\n\nHow do I extend the available space when upgrading to a larger SD card\n\n\n\n\nNavigate to the command line interface by either hitting F4 in EmulationStation or using the main menu to exit\n\n\n\n\nType in the following command: \nsudo raspi-config\n\n\n\n\n\n\nSelect option \"1. Expand Filesystem\"\n\n\n\n\nReboot your Raspberry Pi\n\n\n\n\nHow would I start from command line, say, the SNES emulator by itself?\n\n\nYou can run a SNES rom by calling \n\n\nretroarch -L /opt/retropie/libretrocores/lr-pocketsnes/libretro.so /home/pi/RetroPie/roms/snes/nameofyourrom.smc\n\n\n\n\nIf you'd like keyboard configurations to work add\n\n\n--config /opt/retropie/configs/all/retroarch.cfg\n\n\n\n\nIs there another way to set up the gamepad for use, e.g., within the snes emulator?\n\n\nFollow the RetroArch-Configuration guide:\n\n\nhttps://github.com/petrockblog/RetroPie-Setup/wiki/RetroArch-Configuration\n\n\nThe PSX emulator reports no BIOS found. What do I do?\n\n\nEnsure the bios file(s) is/are all lowercase and put them in\n\n\n/home/pi/RetroPie/BIOS\n\n\n\n\nMore information about PSX BIOS files can be found on the \nPSX page\n.\n\n\nWhich memory split should I use?\n\n\nUsing the raspi-config or rpi-update script, one can change the RAM splitting for the Raspberry Pi. Depending on your hardware setup you might have to change your splitting.\n\n\nFrom \nToadKing\n:\n\n\n\n\nIf you're on 224/32, you can't run it (i.e., RetroArch) on a HD display. You'll have to use the 192/64 split at least.\n\n\n\n\nA Raspberry Pi B/B+/2 is highly recommended. The GPU should have at least 256MB RAM. If you have a Raspberry Pi A/A+  it is not possible to scrape games and use system themes. \n\n\nWhy aren't my in-game saves working properly?\n\n\nAll retroarch emulators use the same method to save to your .srm or SRAM. The default behavior is to only write to your srm file upon a clean exit back to emulationstation. This is done by default with the exit hotkey start+select. If the game happens to completely freeze or crash, it's likely that you will lose in-game progress even after saving.\n\n\nBesides using save states, one optional method you can use to prevent this accidental loss in progress is the autosave_interval setting. This setting can be changed in \n/opt/retropie/configs/all/retroarch.cfg\n\neither with the terminal, Configure Retroarch / Launch RetroArch RGUI under \nsettings-\nsaving\n, or Edit RetroPie/RetroArch configurations under \nManually edit Retroarch configurations\n. Once autosave_interval is set to equal a number of seconds, retroarch will automatically write your save data to the srm file every interval of that number of seconds.\n\n\nWhy Can't I Insert Coins in Arcade Emulators?\n\n\nIt's the Select button in RetroArch. By default, it's right shift. Note that this issue should now be fixed.\n\n\nSometimes there are conflicts between the hotkeys and insert coin buttons so they need to be swapped manually in the retroarch.cfg in order for the select key to insert coins properly. The hotkey button was originally intended to be an unused button but some controllers like snes controllers don't have extra buttons.\n\n\nFor example you can switch the hotkey button to a button that you don't use:\n\n\nso in mame retroarch.cfg\n\n\n/opt/retropie/configs/mame-mame4all/retroarch.cfg\n\n\n\n\nyou could add \n\n\ninput_enable_hotkey_btn = 5\n\n\n\n\nwhich would make the hotkey the left bumper (on my controller- may be a different button for yours) then the select key should work for inserting coins. but in the future in order to exit mame I would then have to press left bumper+start as i changed my hotkey to the left bumper. \n\n\nYou can do the same thing for fba-libretro\n\n\n/opt/retropie/configs/fba/retroarch.cfg\n\n\n\n\nAnother simple workaround is to use player 2's select key to insert coins but it may not work for some games.\n\n\nRelated post\n\nhttp://blog.petrockblock.com/forums/topic/fba-retroarch-core-coin-controls/#post-93014", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#why-do-some-emulators-not-show-up", 
            "text": "The RetroPie SD image only ships with the most common emulators, if a system you want is missing you first need to make sure that emulator is installed. The details for installing additional emulators is explained on the  first installation page  If the system still doesn't show up in Emulation Station, only emulators with ROMs inside its respective folder will show up in the EmulationStation GUI (given that the specific emulator is installed). For example, for the Nintendo 64 emulator to show up, you must have at least one ROM in the  ~/RetroPie/roms/n64/  folder. For ROM types supported by each emulator, go to the wiki page for that specific system/emulator.", 
            "title": "Why do some emulators not show up?"
        }, 
        {
            "location": "/FAQ/#why-cant-i-ssh-as-root-anymore", 
            "text": "The root password is disabled by default (as is the case for Raspbian and many other linux distros).   before setting a root password, the following must be edited  sudo nano /etc/ssh/sshd_config  look for   PermitRootLogin without-password  change it to  PermitRootLogin yes  then ctrl+x to save,   next set your root password:  sudo passwd root  restart your Pi to register your changes  see these posts for more details:  https://www.raspberrypi.org/documentation/linux/usage/root.md  http://elinux.org/R-Pi_Troubleshooting#I_don.27t_know_the_root_password", 
            "title": "Why can't I SSH as root anymore?"
        }, 
        {
            "location": "/FAQ/#where-did-the-desktop-go", 
            "text": "The PIXEL (formerly LXDE) desktop environment was removed from the RetroPie image to keep it smaller.  It can easily be installed from the  RetroPie Setup Script  in  Configuration / Tools   Raspbiantools   Install Pixel Desktop Environment  after installation it will be accessible from the ports menu of emulationstation or can be called from the command line with  startx   You can also install it manually with:  sudo apt-get install --no-install-recommends lxde\nsudo apt-get install xorg raspberrypi-ui-mods rpi-chromium-mods  And then you can access it from the terminal by typing in  startx  After installation your pi will boot into the desktop environment, you can change the behaviour to boot into emulationstation by selecting the autostart option for emulationstation from the configuration/tools section of the setup script, or you can set the autologin to console option from the boot options of the raspi-config menu.  Note that failing to run startx after the installation may prevent other XWindow-based applications from starting (e.g. Micropolis port), so do launch the desktop after installation to ensure that it is fully set up.  Note that you cannot run PIXEL and Retropie at the same time. You will need to log out of PIXEL completely to start EmulationStation", 
            "title": "Where did the desktop go?"
        }, 
        {
            "location": "/FAQ/#why-does-shut-down-and-reboot-take-ages", 
            "text": "Previous to RetroPie 3.4, there was an issue whereby EmulationStation was terminated on reboot/shut down, rather than shut down 'cleanly'. This has now been fixed, so every time you reboot/shut down EmulationStation rewrites all metadata about your roms, so that play counts, last-played dates, etc., are saved. This has the side-effect of the causing the whole process to take longer, relative to how many ROMs you have. MAME/FBA ROMs can often form the bulk of libraries, so it might be helpful to remove clones by  rebuilding your set with a custom parent-only DAT .  An option has been added starting with RetroPie 3.7 to decide whether or not you want metadata saved on exit.     Save Metadata On Exit:  If on, it will read and write all the info for your roms which can lead to long boot and shutdown times if you have large romsets. If you turn it off it will not write those changes which means it also will not write how many times you've played a game, any new game scrapes, etc. This is on by default.    Parse Gamelists Only:  If on, it will only read the roms you have scraped, so if you add any new roms it will not look for them unless you turn this back off. it is off by default.", 
            "title": "Why does shut down and reboot take ages?"
        }, 
        {
            "location": "/FAQ/#how-do-i-hide-the-boot-text", 
            "text": "NOTE that you should be comfortable with editing files in Linux as any wrong edits on the following file can break your boot sequence requiring a reimage of your SD card!  sudo nano /boot/cmdline.txt  change  console=tty1  to  console=tty3    If not present add  quiet loglevel=3 plymouth.enable=0 logo.nologo  at the end (note that recent RetroPie images include  quiet loglevel=3 by default )  make sure it is all on the same line!!!    The logo.nologo option is what turns off the raspberries on boot.  You can also disable the rainbow splash at the beginning (not to be confused with the underpowered rainbow square the appears in the top right corner of your screen indicating you have an insufficient power supply)  Add  disable_splash=1  in  /boot/config.txt  As of 01/10/2016 the latest set of Raspbian updates causes boot text to be displayed again . To restore default RetroPie image behaviour you need to add  plymouth.enable=0  - future RetroPie images will include this by default.", 
            "title": "How do I hide the boot text?"
        }, 
        {
            "location": "/FAQ/#how-do-i-boot-to-the-desktop-or-kodi", 
            "text": "In retropie setup script Configuration / tools autostart    Start EmulationStation at Boot:  Boots into EmulationStation.  Start Kodi at Boot:  Boots into Kodi- if you exit Kodi you will be returned to EmulationStation.  Manually Edit /opt/retropie/configs/autostart.sh:  you can manually add other programs to start on boot.  Boot to text console (autologin):  Boots into the terminal.  Boot to Desktop:  If you have a desktop environment installed like LXDE this will boot into the desktop.", 
            "title": "How do I boot to the desktop or Kodi"
        }, 
        {
            "location": "/FAQ/#how-do-i-remove-the-black-borders", 
            "text": "Depending on the resolution of your television you may get black borders around your tv. You can full the whole expanse of your screen by editing the overscan settings. Exit to the terminal with F4 or access your pi over  SSH  sudo nano /boot/config.txt  uncomment (i.e. delete the  #  preceding the line)   #disable_overscan=1  to  disable_overscan=1  save with  ctrl+x    then reboot. If it doesn't work then try messing with some of the other  overscan  settings manually", 
            "title": "How do I remove the black borders?"
        }, 
        {
            "location": "/FAQ/#how-do-i-change-which-buttons-to-press-to-exit-an-emulator-with-a-controller", 
            "text": "Hotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. The following defaults are set automatically the first time you set up your controller from emulationstation.", 
            "title": "How do I change which buttons to press to exit an emulator with a controller?"
        }, 
        {
            "location": "/FAQ/#default-joypad-hotkeys", 
            "text": "Hotkeys  Action  Code Example        Select  Hotkey  input_enable_hotkey = \"6\"      Select+Start  Exit  input_exit_emulator_btn = \"7\"      Select+Right Shoulder  Save  input_save_state_btn = \"5\"      Select+Left Shoulder  Load  input_load_state_btn = \"4\"      Select+Right  Input State Slot Increase  input_state_slot_increase_btn = \"h0right\"      Select+Left  Input State Slot Decrease  input_state_slot_decrease_btn = \"h0left\"      Select+X  RGUI Menu  input_menu_toggle_btn = \"3\"      Select+B  Reset  input_reset_btn = \"0\"       You can adapt the above code example and choose the button number to your desired button for each hotkey function in the retroarch.cfg files for most systems (at least all the emulators that are part of RetroArch)   You can change it per controller with your autoconfig file here   /opt/retropie/configs/all/retroarch-joypads/yourgamepad.cfg  You can Hardcode it globally for all systems here:  /opt/retropie/configs/all/retroarch.cfg   or set it by system  /opt/retropie/configs/SYSTEMNAME/retroarch.cfg  See  HERE  for more information on custom controller configs", 
            "title": "Default joypad hotkeys:"
        }, 
        {
            "location": "/FAQ/#does-super-mario-all-stars-work", 
            "text": "The ROM does work with PocketSnes (RetroArch) and lr-snes9x-next.  From http://blog.petrockblock.com/2012/07/22/retropie-setup-an-initialization-script-for-retroarch-on-the-raspberry-pi/#comment-818063235:   I found out that after the selection of a game, the control goes over to the second controller! This seems to be somehow a speciality of the All-Stars ROM. But at least, it is playable :-)   Alternatively, if you only have one controller (or play alone) you can do the following:  From http://www.raspberrypi.org/forums/viewtopic.php?f=78 t=79083   I managed to figure out a fix so the controls work in Super Mario All-Stars and also doesn't break other games (Mario Kart, Super Bomberman etc). This problem has been bugging me for ages and I had to figure out a way to play this game for nostalgia sake. This fix will unfortunately mean player two controls wont work for other games (but I play alone anyway and this is for people with one controller). Simply post this in your blank retroarch.cfg in the snes folder. P.S Remember to change the button numbers/axis for you own controller.", 
            "title": "Does Super Mario All Stars work?"
        }, 
        {
            "location": "/FAQ/#how-do-i-extend-the-available-space-when-upgrading-to-a-larger-sd-card", 
            "text": "Navigate to the command line interface by either hitting F4 in EmulationStation or using the main menu to exit   Type in the following command:  sudo raspi-config    Select option \"1. Expand Filesystem\"   Reboot your Raspberry Pi", 
            "title": "How do I extend the available space when upgrading to a larger SD card"
        }, 
        {
            "location": "/FAQ/#how-would-i-start-from-command-line-say-the-snes-emulator-by-itself", 
            "text": "You can run a SNES rom by calling   retroarch -L /opt/retropie/libretrocores/lr-pocketsnes/libretro.so /home/pi/RetroPie/roms/snes/nameofyourrom.smc  If you'd like keyboard configurations to work add  --config /opt/retropie/configs/all/retroarch.cfg", 
            "title": "How would I start from command line, say, the SNES emulator by itself?"
        }, 
        {
            "location": "/FAQ/#is-there-another-way-to-set-up-the-gamepad-for-use-eg-within-the-snes-emulator", 
            "text": "Follow the RetroArch-Configuration guide:  https://github.com/petrockblog/RetroPie-Setup/wiki/RetroArch-Configuration", 
            "title": "Is there another way to set up the gamepad for use, e.g., within the snes emulator?"
        }, 
        {
            "location": "/FAQ/#the-psx-emulator-reports-no-bios-found-what-do-i-do", 
            "text": "Ensure the bios file(s) is/are all lowercase and put them in  /home/pi/RetroPie/BIOS  More information about PSX BIOS files can be found on the  PSX page .", 
            "title": "The PSX emulator reports no BIOS found. What do I do?"
        }, 
        {
            "location": "/FAQ/#which-memory-split-should-i-use", 
            "text": "Using the raspi-config or rpi-update script, one can change the RAM splitting for the Raspberry Pi. Depending on your hardware setup you might have to change your splitting.  From  ToadKing :   If you're on 224/32, you can't run it (i.e., RetroArch) on a HD display. You'll have to use the 192/64 split at least.   A Raspberry Pi B/B+/2 is highly recommended. The GPU should have at least 256MB RAM. If you have a Raspberry Pi A/A+  it is not possible to scrape games and use system themes.", 
            "title": "Which memory split should I use?"
        }, 
        {
            "location": "/FAQ/#why-arent-my-in-game-saves-working-properly", 
            "text": "All retroarch emulators use the same method to save to your .srm or SRAM. The default behavior is to only write to your srm file upon a clean exit back to emulationstation. This is done by default with the exit hotkey start+select. If the game happens to completely freeze or crash, it's likely that you will lose in-game progress even after saving.  Besides using save states, one optional method you can use to prevent this accidental loss in progress is the autosave_interval setting. This setting can be changed in  /opt/retropie/configs/all/retroarch.cfg \neither with the terminal, Configure Retroarch / Launch RetroArch RGUI under  settings- saving , or Edit RetroPie/RetroArch configurations under  Manually edit Retroarch configurations . Once autosave_interval is set to equal a number of seconds, retroarch will automatically write your save data to the srm file every interval of that number of seconds.", 
            "title": "Why aren't my in-game saves working properly?"
        }, 
        {
            "location": "/FAQ/#why-cant-i-insert-coins-in-arcade-emulators", 
            "text": "It's the Select button in RetroArch. By default, it's right shift. Note that this issue should now be fixed.  Sometimes there are conflicts between the hotkeys and insert coin buttons so they need to be swapped manually in the retroarch.cfg in order for the select key to insert coins properly. The hotkey button was originally intended to be an unused button but some controllers like snes controllers don't have extra buttons.  For example you can switch the hotkey button to a button that you don't use:  so in mame retroarch.cfg  /opt/retropie/configs/mame-mame4all/retroarch.cfg  you could add   input_enable_hotkey_btn = 5  which would make the hotkey the left bumper (on my controller- may be a different button for yours) then the select key should work for inserting coins. but in the future in order to exit mame I would then have to press left bumper+start as i changed my hotkey to the left bumper.   You can do the same thing for fba-libretro  /opt/retropie/configs/fba/retroarch.cfg  Another simple workaround is to use player 2's select key to insert coins but it may not work for some games.  Related post \nhttp://blog.petrockblock.com/forums/topic/fba-retroarch-core-coin-controls/#post-93014", 
            "title": "Why Can't I Insert Coins in Arcade Emulators?"
        }, 
        {
            "location": "/Sound-Issues/", 
            "text": ":exclamation: If you want to know how to get USB Audio set up \nclick here\n.\n\n\n\n\nSound still is a problem child with the Raspberry Pi. Currently, there does not seem to be a best solution for all the sound issues. General information about sound issues can be found at http://elinux.org/R-Pi_Troubleshooting#Sound.\n\n\nFirst and foremost try forcing hdmi by adding the following to \n/boot/config.txt\n then restarting the Raspberry Pi:\n\n\nhdmi_drive=2\n\n\n\n\nThis place re-cites some posts (or parts of them) from different forum threads that might increase the sound quality:\n\n\n\n\nUpdate the retroarch.cfg file with audio_out_rate = 44100\nUsing that config the ALSA sound coming from the headphone jack is a lot clearer and has a lot less static.\n\n\n\n\nUsers Configurations\n\n\nYou can post your configuration here to give other people an idea about what kind of audio they can expect with certain settings. Interesting parameters might be \n\n HDMI/analog\n\n ARM frequency\n\n emulator core\n\n eventually parameters set in /etc/retroarch.cfg\n* perceived audio quality, problems\n\n\n\n\nFrom \npuncrathod\n:\n\n\n\n\nI managed to get perfect sound with retroarch+pocketsnes core by defining sdl as the audio backend with 44100 samplerate. However I never managed to get the thing run faster than 70% speed during actual gameplay.\nI tested it with lostvikings and when you pause the game the game runs fullspeed and the sound is perfect. But while playing the speed goes below 80% and the sound and music gets this echoing sound. I'll see if I can make it run at full speed by a little overclock and some addinational video settings.\n\n\n\n\n\n\nThe only /boot/config.txt setting I had was sdtv_mode=2 \"I have a pal tv that I use for the pi\"\nI did try increasing the cpu_freq to 900 and core_freq to 450 and that helped a little but still were not getting full speed.\n\n\nThe only settings i changed in the /etc/retroarch.cfg was  \naudio_out_rate=44100\naudio_driver=sdl\n\n\n\n\n\n(alsa works perfect too if the game is running at full speed but even with 1% drop in speed and starts making a static noise)\n\n\nI'm running a fresh rasbian installed from http://archive.raspbian.org/installer/rpi_installer_08-19-12.zip with nothing more extra installed than retroarch+pocketsnes+sdl and the libraries needed to run them. I don't have DE installed and run everything from the console\n\n\nI realize that the sdl audio is a bit slower than alsa and makes the snes run even slower but atleast it doesn't turn the audio into a garbled mess when the emulator doesn't run at full speed.\n\n\n\n\n\n\n\n\n\n\nA post on the Raspberry Pi forums with a list basic troubleshooting options for getting the Pi to play a test sound file.\n\n\nAnother potentially helpful post about configuring ALSA.\n\n\n\n\nDGEN sound configuration (according to \nthis post\n):\n\n\n\n\nif anyone has sound issues with DGen - try changing the int_soundrate to 44100\n\n\nworked for me.\n\n\n\n\n\n\nEmulation is faster when disabling rewind in retroarch.cfg\n\n\n\n\nI use a TV Monitor with HDMI input for video and audio. I went to the Raspberry Pi configuration menu and chose \u201cforce audio out of HDMI\u201d. Also did the same thing through the \u201cConfigure Audio Settings\u201d option on the Retropie main menu in Emulation Station and it did not work.\n\n\nI had to go into the \n/boot/config.txt\n Raspberry PI config file and add in the following lines\u2026\n\n\n  # forces HDMI mode\n  hdmi_drive=2\n\n  # Pretends all audio formats are supported by display, allowing passthrough of DTS/AC even when not reported as supported.\n  hdmi_force_edid_audio=1\n\n\n\nI didn't change any other sound parameters in the config files. \n\n\n\n\nWhite Noise Fix\n\n\nTo remove hiss or static or white noise when using the 3.5mm headphone jack:\n\n\n\n\nRun at the command line: \nsudo nano /boot/config.txt\n and insert at the bottom of the file: \ndisable_audio_dither=1\n\n\nturn up Retropie volume to 100% in the settings menu in the program.\n\n\nget an inline volume control: http://www.amazon.com/Koss-155954-VC20-Volume-Control/dp/B00001P4XH/ref=pd_bxgy_23_img_y\n\n\nAnother option is to set audio_pwm_mode=2 in the same config - this is a new audio driver that should significantly improve the sound quality - see https://www.raspberrypi.org/forums/viewtopic.php?f=29\nt=136445\n\n\n\n\nUSB Audio\n\n\nThere's a lot of \nold\n documentation on how to set this up.  To fix this, especially if you are using a \nUSB Audio\n dongle in leu of the Raspberry Pi's scratchy 3.5 mm audio jack. (Blame the manufacturer of that part. Hopefully the foundation will fix it when the next Pi comes out.)\n\n\nSo instead of using one of those large shield with the RCA jacks on it, a small \nUSB Audio Dongle\n and a few commands.\n\n\n\n\nAt startup, press \nF4\n to exit EmulationStation and go to the console.\n\n\nAssuiming the USB Audio dongle is plugged in, type \nlsusb\n, and look for some device with \"C-Media Electronics, Inc. Audio Adapter\" in it.\n\n\nNot a necessary step but one that you should note. Type, \namixer\n.  You'll see the default bcm2835 set up. Our device is not set up yet. Knowing about this command is still helpful.\n\n\nFind our card number.  More than likely, the \"C-Media USB Headphone Set\" will be set to \nCard 1\n.  You will need to remember this number for the next step.\n\n\n\n\nUse \nnano\n to create \n/etc/asound.conf\n with this content.  Press \nCtrl\n+\nX\n followed by \nY\n when finished.  Replace the card number in the code below with the correct card number if it is other than \n1\n.\n\n\npcm.!default {\n type hw card 1\n}\nctl.!default {\n type hw card 1\n}\n\n\n\n\n\n\nsudo reboot\n.  When EmulationStation or a video game is played, you will start to notice sound.\n\n\n\n\n\n\nIf you want to test stereo, \nF4\n again to do a speaker test using \nspeaker-test -c2 hw:Set,0\n where \n-c2\n indicates the number of channels. If you have just one speaker, use \n-c1\n instead.  You should hear a hiss in each speaker separately.  This test will go on continuously until you press \nCtrl\n+\nC\n.\n\n\n\n\n\n\n\n\n:warning: \nNote:\n There is a pitfall with these instructions, and that is I (@jrcharney) don't know what will happen if you plug this into HDMI later.  If anybody knows, append that information to this section.", 
            "title": "Sound Issues"
        }, 
        {
            "location": "/Sound-Issues/#users-configurations", 
            "text": "You can post your configuration here to give other people an idea about what kind of audio they can expect with certain settings. Interesting parameters might be   HDMI/analog  ARM frequency  emulator core  eventually parameters set in /etc/retroarch.cfg\n* perceived audio quality, problems   From  puncrathod :   I managed to get perfect sound with retroarch+pocketsnes core by defining sdl as the audio backend with 44100 samplerate. However I never managed to get the thing run faster than 70% speed during actual gameplay.\nI tested it with lostvikings and when you pause the game the game runs fullspeed and the sound is perfect. But while playing the speed goes below 80% and the sound and music gets this echoing sound. I'll see if I can make it run at full speed by a little overclock and some addinational video settings.    The only /boot/config.txt setting I had was sdtv_mode=2 \"I have a pal tv that I use for the pi\"\nI did try increasing the cpu_freq to 900 and core_freq to 450 and that helped a little but still were not getting full speed.  The only settings i changed in the /etc/retroarch.cfg was   audio_out_rate=44100\naudio_driver=sdl   (alsa works perfect too if the game is running at full speed but even with 1% drop in speed and starts making a static noise)  I'm running a fresh rasbian installed from http://archive.raspbian.org/installer/rpi_installer_08-19-12.zip with nothing more extra installed than retroarch+pocketsnes+sdl and the libraries needed to run them. I don't have DE installed and run everything from the console  I realize that the sdl audio is a bit slower than alsa and makes the snes run even slower but atleast it doesn't turn the audio into a garbled mess when the emulator doesn't run at full speed.      A post on the Raspberry Pi forums with a list basic troubleshooting options for getting the Pi to play a test sound file.  Another potentially helpful post about configuring ALSA.   DGEN sound configuration (according to  this post ):   if anyone has sound issues with DGen - try changing the int_soundrate to 44100  worked for me.    Emulation is faster when disabling rewind in retroarch.cfg   I use a TV Monitor with HDMI input for video and audio. I went to the Raspberry Pi configuration menu and chose \u201cforce audio out of HDMI\u201d. Also did the same thing through the \u201cConfigure Audio Settings\u201d option on the Retropie main menu in Emulation Station and it did not work.  I had to go into the  /boot/config.txt  Raspberry PI config file and add in the following lines\u2026    # forces HDMI mode\n  hdmi_drive=2\n\n  # Pretends all audio formats are supported by display, allowing passthrough of DTS/AC even when not reported as supported.\n  hdmi_force_edid_audio=1  I didn't change any other sound parameters in the config files.", 
            "title": "Users Configurations"
        }, 
        {
            "location": "/Sound-Issues/#white-noise-fix", 
            "text": "To remove hiss or static or white noise when using the 3.5mm headphone jack:   Run at the command line:  sudo nano /boot/config.txt  and insert at the bottom of the file:  disable_audio_dither=1  turn up Retropie volume to 100% in the settings menu in the program.  get an inline volume control: http://www.amazon.com/Koss-155954-VC20-Volume-Control/dp/B00001P4XH/ref=pd_bxgy_23_img_y  Another option is to set audio_pwm_mode=2 in the same config - this is a new audio driver that should significantly improve the sound quality - see https://www.raspberrypi.org/forums/viewtopic.php?f=29 t=136445", 
            "title": "White Noise Fix"
        }, 
        {
            "location": "/Sound-Issues/#usb-audio", 
            "text": "There's a lot of  old  documentation on how to set this up.  To fix this, especially if you are using a  USB Audio  dongle in leu of the Raspberry Pi's scratchy 3.5 mm audio jack. (Blame the manufacturer of that part. Hopefully the foundation will fix it when the next Pi comes out.)  So instead of using one of those large shield with the RCA jacks on it, a small  USB Audio Dongle  and a few commands.   At startup, press  F4  to exit EmulationStation and go to the console.  Assuiming the USB Audio dongle is plugged in, type  lsusb , and look for some device with \"C-Media Electronics, Inc. Audio Adapter\" in it.  Not a necessary step but one that you should note. Type,  amixer .  You'll see the default bcm2835 set up. Our device is not set up yet. Knowing about this command is still helpful.  Find our card number.  More than likely, the \"C-Media USB Headphone Set\" will be set to  Card 1 .  You will need to remember this number for the next step.   Use  nano  to create  /etc/asound.conf  with this content.  Press  Ctrl + X  followed by  Y  when finished.  Replace the card number in the code below with the correct card number if it is other than  1 .  pcm.!default {\n type hw card 1\n}\nctl.!default {\n type hw card 1\n}    sudo reboot .  When EmulationStation or a video game is played, you will start to notice sound.    If you want to test stereo,  F4  again to do a speaker test using  speaker-test -c2 hw:Set,0  where  -c2  indicates the number of channels. If you have just one speaker, use  -c1  instead.  You should hear a hiss in each speaker separately.  This test will go on continuously until you press  Ctrl + C .     :warning:  Note:  There is a pitfall with these instructions, and that is I (@jrcharney) don't know what will happen if you plug this into HDMI later.  If anybody knows, append that information to this section.", 
            "title": "USB Audio"
        }, 
        {
            "location": "/Speed-Issues/", 
            "text": "Systems from fastest to slowest:\n\n\n\n\nRaspberry Pi 3\n\n\nRaspberry Pi 2\n\n\nRaspberry Pi Zero\n\n\nRaspberry Pi 1\n\n\n\n\nHow much faster depends on the specific game and emulator you are interested in.\n\n\nMost SNES, Mega Drive, GameBoy Advance, and simpler emulators should run at full speed of close on a Pi 2.\n\n\nSpecific System Observations\n\n\nArcade (MAME/FBA)\n\n\nSpeed depends greatly on the game and the emulator version.\n\n\nCertain games are just known for being really slow, like Mortal Kombat or NBA Jam.\n\n\nCertain versions of the emulators run some ROMs very fast, other versions run the same game very slowly. Earlier/later isn't always better, try different emulator versions to see which performs best for the ROM in question.\n\n\nSome games will never achieve playable speeds.\n\n\nSNES\n\n\nSome games, especially SuperFX and SA-1 games, will be slow on a stock speed Pi 1, but are generally playable on a Pi 3.\n\n\nSome graphic effects in some games can cause lag when displaying specific screens, but the game will be playable overall.\n\n\nPlayStation, N64, Dreamcast, PSP\n\n\nDue to limited processing power and/or lack of emulator efficiency, some games will never achieve playable speeds.\n\n\nConfiguration Improvements\n\n\nRetroArch emulators (lr- cores)\n\n\nEdit \n/opt/retropie/configs/all/retroarch.cfg\n and set:\n\n\n# Use threaded video driver\nvideo_threaded = true\n\n# Smoothens picture with bilinear filtering\nvideo_smooth = false\n\n# Audio driver backend.\naudio_driver = alsathread\n\n# Enable rewinding\nrewind_enable = false\n\n# May reduce latency at cost of higher risk of stuttering\n# Probably not recommended for Pi Zero\nvideo_frame_delay = 5\n\n\n\n\nThe Video Hard Sync settings don't actually have any effect, as this is not available on the Pi, there is no benefit from having them set or unset:\n\n\nvideo_hard_sync = true\nvideo_hard_sync_frames = 3\n\n\n\n\nResolution\n\n\nTry to decrease the Render Resolution or Framebuffer Resolution in the runcommand menu, displayed just before a game starts.\n\n\nDecreasing the screen size the emulator has to calculate can lead to an overall speed increase.\n\n\nTV\n\n\nEnsure you're using your TV's native resolution to prevent any overhead due to upscaling. Most modern HD TVs can display at 1080p (1920x1080) and 720p (1280x720) without issue.\n\n\nEnable \nGame Mode\n in the TV settings for the input used for the Pi. This disables some image processing (smoothing, etc) which makes movies look better, but which introduces latency when playing games.\n\n\nOverclocking\n\n\nWith RetroPie Setup Script\n\n\nIn the menu \nSetup\n you can find the options for changing the ARM and SDRAM frequencies.\n\n\nChanges require a reboot to take effect.\n\n\nWith raspi-config\n\n\nYou can overclock \nwithout voiding the warranty\n with the official \nraspi-config\n script.\n\n\nIt can be started with:\n\n\nsudo raspi-config\n\n\n\n\nConsiderations\n\n\nHeavily overclocked systems (and even regular Pi) would probably have their lifespan increased by using a heatsink.\n\n\nKits are available cheap on eBay and Amazon, the bigger the heatsink the better.\n\n\nCases with fans are also available, with the fan usually powered by the 5V GPIO pins.\n\n\nReferences\n\n\n\n\nOverclocking thread on the official Raspberry Pi forum\n\n\nShowcase of older emulator versions on Raspberry Pi 1\n\n\nToadKing\n\n\nChadP\n\n\nComparison of cooling methods", 
            "title": "Speed Issues"
        }, 
        {
            "location": "/Speed-Issues/#specific-system-observations", 
            "text": "", 
            "title": "Specific System Observations"
        }, 
        {
            "location": "/Speed-Issues/#arcade-mamefba", 
            "text": "Speed depends greatly on the game and the emulator version.  Certain games are just known for being really slow, like Mortal Kombat or NBA Jam.  Certain versions of the emulators run some ROMs very fast, other versions run the same game very slowly. Earlier/later isn't always better, try different emulator versions to see which performs best for the ROM in question.  Some games will never achieve playable speeds.", 
            "title": "Arcade (MAME/FBA)"
        }, 
        {
            "location": "/Speed-Issues/#snes", 
            "text": "Some games, especially SuperFX and SA-1 games, will be slow on a stock speed Pi 1, but are generally playable on a Pi 3.  Some graphic effects in some games can cause lag when displaying specific screens, but the game will be playable overall.", 
            "title": "SNES"
        }, 
        {
            "location": "/Speed-Issues/#playstation-n64-dreamcast-psp", 
            "text": "Due to limited processing power and/or lack of emulator efficiency, some games will never achieve playable speeds.", 
            "title": "PlayStation, N64, Dreamcast, PSP"
        }, 
        {
            "location": "/Speed-Issues/#configuration-improvements", 
            "text": "", 
            "title": "Configuration Improvements"
        }, 
        {
            "location": "/Speed-Issues/#retroarch-emulators-lr-cores", 
            "text": "Edit  /opt/retropie/configs/all/retroarch.cfg  and set:  # Use threaded video driver\nvideo_threaded = true\n\n# Smoothens picture with bilinear filtering\nvideo_smooth = false\n\n# Audio driver backend.\naudio_driver = alsathread\n\n# Enable rewinding\nrewind_enable = false\n\n# May reduce latency at cost of higher risk of stuttering\n# Probably not recommended for Pi Zero\nvideo_frame_delay = 5  The Video Hard Sync settings don't actually have any effect, as this is not available on the Pi, there is no benefit from having them set or unset:  video_hard_sync = true\nvideo_hard_sync_frames = 3", 
            "title": "RetroArch emulators (lr- cores)"
        }, 
        {
            "location": "/Speed-Issues/#resolution", 
            "text": "Try to decrease the Render Resolution or Framebuffer Resolution in the runcommand menu, displayed just before a game starts.  Decreasing the screen size the emulator has to calculate can lead to an overall speed increase.", 
            "title": "Resolution"
        }, 
        {
            "location": "/Speed-Issues/#tv", 
            "text": "Ensure you're using your TV's native resolution to prevent any overhead due to upscaling. Most modern HD TVs can display at 1080p (1920x1080) and 720p (1280x720) without issue.  Enable  Game Mode  in the TV settings for the input used for the Pi. This disables some image processing (smoothing, etc) which makes movies look better, but which introduces latency when playing games.", 
            "title": "TV"
        }, 
        {
            "location": "/Speed-Issues/#overclocking", 
            "text": "", 
            "title": "Overclocking"
        }, 
        {
            "location": "/Speed-Issues/#with-retropie-setup-script", 
            "text": "In the menu  Setup  you can find the options for changing the ARM and SDRAM frequencies.  Changes require a reboot to take effect.", 
            "title": "With RetroPie Setup Script"
        }, 
        {
            "location": "/Speed-Issues/#with-raspi-config", 
            "text": "You can overclock  without voiding the warranty  with the official  raspi-config  script.  It can be started with:  sudo raspi-config", 
            "title": "With raspi-config"
        }, 
        {
            "location": "/Speed-Issues/#considerations", 
            "text": "Heavily overclocked systems (and even regular Pi) would probably have their lifespan increased by using a heatsink.  Kits are available cheap on eBay and Amazon, the bigger the heatsink the better.  Cases with fans are also available, with the fan usually powered by the 5V GPIO pins.", 
            "title": "Considerations"
        }, 
        {
            "location": "/Speed-Issues/#references", 
            "text": "Overclocking thread on the official Raspberry Pi forum  Showcase of older emulator versions on Raspberry Pi 1  ToadKing  ChadP  Comparison of cooling methods", 
            "title": "References"
        }, 
        {
            "location": "/Video-Issues/", 
            "text": "From \nhere\n:\n\n\nSetting\n\n\ndisable_overscan=1\n\n\n\n\nin \n/boot/config.txt\n might solve video problems for certain setups (removes black bars around the edges). If you have installed from NOOBS, there might be 4 other lines relating to overscan directions in the config.txt, such as \noverscan_left\n, \noverscan_top\n, etc. You should deactivate these lines by placing a \n#\n as the first character on these lines. Note that for NOOBS installations, there might be duplicates of these lines at the bottom of the file.\n\n\nAlso, setting\n\n\nhdmi_drive=2\n\n\n\n\nseems to solve issues related to HDMI in some cases.\n\n\nCan't change Resolution\n\n\nIf you have had to use \n\n\nhdmi_safe=1\n\n\n\n\nto make your pi display on your display, you will only be able to get 640x480 resolution. To fix this you need to use these settings to allow different resolutions.\n\n\nhdmi_force_hotplug=1\nhdmi_drive=2\n\n\n\n\nand then set \n\n\nhdmi_group=1\nhdmi_mode=16\n\n\n\n\nto force a resolution (those settings are for 1080p 60hz). More options can be found at: http://elinux.org/RPiconfig#Video_mode_options\n\n\nAn example of a forced 4:3 ratio at 1024x768\n\n\nhdmi_drive=2\nhdmi_force_hotplug=1 \nhdmi_group=2 \nhdmi_mode=16", 
            "title": "Video Issues"
        }, 
        {
            "location": "/Video-Issues/#cant-change-resolution", 
            "text": "If you have had to use   hdmi_safe=1  to make your pi display on your display, you will only be able to get 640x480 resolution. To fix this you need to use these settings to allow different resolutions.  hdmi_force_hotplug=1\nhdmi_drive=2  and then set   hdmi_group=1\nhdmi_mode=16  to force a resolution (those settings are for 1080p 60hz). More options can be found at: http://elinux.org/RPiconfig#Video_mode_options  An example of a forced 4:3 ratio at 1024x768  hdmi_drive=2\nhdmi_force_hotplug=1 \nhdmi_group=2 \nhdmi_mode=16", 
            "title": "Can't change Resolution"
        }, 
        {
            "location": "/Building-RetroPie-Archives/", 
            "text": "To build binary archives of individual modules you can follow these steps:\n\n\nGet sources, compile, install, configure and archive the package\n\n\nsudo ./retropie_packages.sh builder module \nMODULEID/MODULENAME\n\n\n\n\n\nYou can configure, for which platform you want to build an archive by using the \n__platform\n variable. To build a module and a corresponding archive, e.g., for the Raspberry Pi 2, you use these command:\n\n\nsudo ./retropie_packages.sh builder module \nMODULEID/MODULENAME\n\nsudo ./retropie_packages.sh builder module \nMODULEID/MODULENAME\n\n\n\n\n\nYou can build binary archives of sections with\n\n\nsudo ./retropie_packages.sh builder section \nSECTIONNAME (eg core/opt/main/exp)\n\n\n\n\n\nBinary archives will end up in \n~/RetroPie_Setup/tmp/archives", 
            "title": "Building RetroPie Archives"
        }, 
        {
            "location": "/Convert-RetroPie-SD-Card-Image-to-NOOBS-Image/", 
            "text": "NOOBS\n is an easy way to set up an SD card for a Raspberry Pi. It has the added benefit of making it easy to set up the Pi to boot multiple operating systems. Here's how to convert a RetroPie SD Card image to a NOOBS-compatible image.\n\n\nThese instructions are largely based on the instructions for creating a custom OS image on \nthe NOOBS GitHub repository\n\n\nYou will need read access to all partitions of the flashed SD card. While RPi's instructions imply they can be followed directly from the Pi itself, you may be able to find plugins for your primary computer's operating system to allow read access to the ext-formatted partition of the SD card. This will allow you to use the full power of your computer to create the compressed disk image and probably save you hours.\n\n\nFor OS X users, \nhere is a tutorial for mounting the filesystem\n, and you can install the \ntar\n and \nxz\n commands using \nHomebrew\n.\n\n\n\n\nDownload the latest RetroPie image\n and \nflash an SD card (or other volume) with it\n\n\nDownload the latest NOOBS release.\n You will need the full NOOBS download (not NOOBS Lite) since we will be using the included Raspbian image as a base.\n\n\nWhile that downloads, write down the full sizes of the two partitions on the RetroPie SD card ('boot' and 'retropie' as of this writing). You will need them later. (OS X users: type \ndiskutil list\n at the command line to get this easily.) (Linux users: type \ndf -h\n in the terminal.)\n\n\nCreate the \n.tar\n file of the main RetroPie filesystem (the 'retropie' partition). From the command line on your primary computer, navigate to where the 'retropie' partition is mounted (on OS X, try \ncd /Volumes/retropie\n). The command is \nsudo tar -cvpf ~/Desktop/retropie.tar ./*\n and this will create the \nretropie.tar\n file on your desktop.\n\n\nWrite down the size of \nretropie.tar\n.\n\n\nNavigate to your desktop (or wherever you saved the tarball) with \ncd ~/Desktop/\n and compress the tarball with the command \nxz -9 -e -v retropie.tar\n. This will take some time.\n\n\nNow we need to do the same thing to the 'boot' partition, but \ntar\n apparently doesn't like FAT-formatted volumes. So... Copy the contents of the 'boot' partition to a folder on your hard drive. I used \n~/Desktop/rpi/boot\n.\n\n\nFrom the command line, navigate to the 'boot' folder you just created. The command is \nsudo tar -cvpf ~/Desktop/boot.tar ./*\n and this will create the \nboot.tar\n file on your desktop.\n\n\nWrite down the size of \nboot.tar\n.\n\n\nNavigate to your desktop (or wherever you saved the tarball) with \ncd ~/Desktop/\n and compress the tarball with the command \nxz -9 -e -v boot.tar\n. This won't take long, not nearly as long as the 'retropie' tarball.\n\n\nHopefully NOOBS has finished downloading by now. Unzip it, and open up the 'os' folder. Duplicate the 'Raspbian' folder and rename it 'RetroPie'.\n\n\nOpen up 'partitions.json' in your favorite (or second-favorite) text editor and make the following changes:\n\n\nChange the \nlabel\n on the \nroot\n partition to read \nretropie\n.\n\n\nChange the value for \nparition_size_nominal\n for both \nboot\n and \nretropie\n to be the values from step 3 in megabytes. Since this is used by NOOBS to determine how much space will be on the SD card after install, it's better to round up than down. (Ex: a 59.8 MB partition would have a value of 60. A 1.9 GB partition would have a value of around 2000.) \n\n\nChange the value for \nuncompressed_tarball_size\n to be the values from step 5 and 9\n\n\n\n\n\n\nThrow out 'flavours.json'. We don't need it.\n\n\nOpen 'os.json' in whatever text editor is handy and make the following changes:\n\n\nChange \nname\n to \nRetroPie\n\n\nChange whatever else you want. At the very least you should probably change \nurl\n to \nhttp://blog.petrockblock.com/retropie/\n to provide proper credit to the awesome people who put this project together!\n\n\n\n\n\n\nRename 'Raspbian.png' to 'RetroPie.png' and replace it with an appropriate icon.\n\n\nReplace any or all of the files in the 'slides_vga' folder with approporiate images. These will be shown during the install process.\n\n\nReplace the 'boot.tar.xz' and 'root.tar.xz' with the 'retropie.tar.xz' and 'boot.tar.xz' files you created in steps 6 and 10.\n\n\nFormat and prepare an SD card as described in the \nNOOBS Setup Guide\n. RetroPie should be available as an option in the OS list next to Raspbian.\n\n\nProfit!\n\n\n\n\nOptionally: 20. If the boot process is halting at the resizing of the ext4 partition, delete \"/etc/profile.d/01-expand.sh\" on the ext4 partition. NOOBS already resized the partition.\n\n\n\n\nuse command line : sudo rm 01_expand.sh\n\n\nIf the 01-expand.sh file isn't yet in this directory, just delete the bash_completion.sh \nwith this command line : sudo rm bash_completion.sh", 
            "title": "Convert RetroPie SD Card Image to NOOBS Image"
        }, 
        {
            "location": "/Shell-Style-Guide/", 
            "text": "RetroPie-Setup Script Code Style Guide Snippets\n\n\n\n\n\n\n\nIntroduction\n\n\nFeatures and Bugs\n\n\nCommand Substitution\n\n\nTest and Square Braces\n\n\nTesting Strings\n\n\n\n\n\n\nNaming Conventions\n\n\nFunction Names\n\n\nVariable Names\n\n\nConstants and Environment Variable Names\n\n\nRead-only variables\n\n\nUse Local Variables\n\n\n\n\n\n\nComments\n\n\nFunction Comments\n\n\nImplementation Comments\n\n\n\n\n\n\nFormatting\n\n\nIndentation\n\n\nPipelines\n\n\nBraces\n\n\n\n\n\n\nConclusion\n\n\n\n\n\n\n\nIntroduction\n\n\nThis document describes the style guide that has to be used used for the devlopment of the RetroPie-Setup Script sources. This guide is adapted from the \nGoogle Shell Style Guide\n.\n\n\nFeatures and Bugs\n\n\nCommand Substitution\n\n\nUse $(command) instead of backticks.\n\n\nNested backticks require escaping the inner ones with . The $(command) format doesn't change when nested and is easier to read.\n\n\nExample:\n\n\n# This is preferred:\nvar=\n$(command \n$(command1)\n)\n\n\n# This is not:\nvar=\n`command \\`command1\\``\n\n\n\n\n\nTest and Square Braces\n\n\n[[ ... ]] is preferred over [, test and /usr/bin/[.\n[[ ... ]] reduces errors as no pathname expansion or word splitting takes place between [[ and ]] and [[ ... ]] allows for regular expression matching where [ ... ] does not.\n\n\n# This ensures the string on the left is made up of characters in the\n# alnum character class followed by the string name.\n# Note that the RHS should not be quoted here.\n# For the gory details, see\n# E14 at http://tiswww.case.edu/php/chet/bash/FAQ\nif [[ \nfilename\n =~ ^[[:alnum:]]+name ]]; then\necho \nMatch\n\nfi\n\n# This matches the exact pattern \nf*\n (Does not match in this case)\nif [[ \nfilename\n == \nf*\n ]]; then\necho \nMatch\n\nfi\n\n# This gives a \ntoo many arguments\n error as f* is expanded to the\n# contents of the current directory\nif [ \nfilename\n == f* ]; then\necho \nMatch\n\nfi\n\n\n\n\nTesting Strings\n\n\nUse quotes rather than filler characters where possible.\nBash is smart enough to deal with an empty string in a test. So, given that the code is much easier to read, use tests for empty/non-empty strings or empty strings rather than filler characters.\n\n\n# Do this:\nif [[ \n${my_var}\n == \nsome_string\n ]]; then\ndo_something\nfi\n\n# -z (string length is zero) and -n (string length is not zero) are\n# preferred over testing for an empty string\nif [[ -z \n${my_var}\n ]]; then\ndo_something\nfi\n\n# This is OK (ensure quotes on the empty side), but not preferred:\nif [[ \n${my_var}\n == \n ]]; then\ndo_something\nfi\n\n# Not this:\nif [[ \n${my_var}X\n == \nsome_stringX\n ]]; then\ndo_something\nfi\n\n\n\n\nTo avoid confusion about what you're testing for, explicitly use -z or -n.\n\n\n# Use this\nif [[ -n \n${my_var}\n ]]; then\ndo_something\nfi\n\n# Instead of this as errors can occur if ${my_var} expands to a test\n# flag\nif [[ \n${my_var}\n ]]; then\ndo_something\nfi\n\n\n\n\nNaming Conventions\n\n\nFunction Names\n\n\nFunctions should start with a non-capital letter and have a capital letter for each new word. No underscores. Parentheses are required after the function name.\n\n\nThe only exception to this rule is when defining interface functions for the RetroPie-Setup Script modules.\n\n\nFor example:\n\n\nfunction depends_retroarch() {  % OK, module interface function\n...\n}\n\nfunction sources_retroarch() {  % OK, module interface function\n...\n}\n\nfunction build_retroarch() {  % OK, module interface function\n...\n}\n\nfunction install_retroarch() {  % OK, module interface function\n...\n}\n\nfunction ensureSystemretroconfig {  % OK\n...\n}\n\nfunction ensure_another_Systemretroconfig {  % NOT OK, no module interface function\n...\n}\n\nfunction configure_retroarch() {  % OK, module interface function\n...\n}\n\n\n\n\nVariable Names\n\n\nThe names of variables are generally all lowercase and can use underscores if needed.\n\n\nConstants and Environment Variable Names\n\n\nAll caps, separated with underscores, declared at the top of the file.\nConstants and anything exported to the environment should be capitalized.\n\n\n# Constant\nreadonly PATH_TO_FILES='/some/path'\n\n# Both constant and environment\ndeclare -xr ORACLE_SID='PROD'\nSome things become constant at their first setting (for example, via getopts). Thus, it's OK to set a constant in getopts or based on a condition, but it should be made readonly immediately afterwards. Note that declare doesn't operate on global variables within functions, so readonly or export is recommended instead.\n\nVERBOSE='false'\nwhile getopts 'v' flag; do\ncase \n${flag}\n in\nv) VERBOSE='true' ;;\nesac\ndone\nreadonly VERBOSE\n\n\n\n\nRead-only variables\n\n\nUse readonly or declare -r to ensure they're read only.\nAs globals are widely used in shell, it's important to catch errors when working with them. When you declare a variable that is meant to be read-only, make this explicit.\n\n\nzip_version=\n$(dpkg --status zip | grep Version: | cut -d ' ' -f 2)\n\nif [[ -z \n${zip_version}\n ]]; then\n    error_message\nelse\n    readonly zip_version\nfi\n\n\n\n\nUse Local Variables\n\n\nDeclare function-specific variables with local. Declaration and assignment should be on different lines.\nEnsure that local variables are only seen inside a function and its children by using local when declaring them. This avoids polluting the global name space and inadvertently setting variables that may have significance outside the function.\n\n\nDeclaration and assignment must be separate statements when the assignment value is provided by a command substitution; as the 'local' builtin does not propagate the exit code from the command substitution.\n\n\nmy_func2() {\n    local name=\n$1\n\n\n    # Separate lines for declaration and assignment:\n    local my_var\n    my_var=\n$(my_func)\n || return\n\n    # DO NOT do this: $? contains the exit code of 'local', not my_func\n    local my_var=\n$(my_func)\n\n    [[ $? -eq 0 ]] || return\n\n    ...\n}\n\n\n\n\nComments\n\n\nFunction Comments\n\n\nAny function that is not both obvious and short must be commented. Any function in a library must be commented regardless of length or complexity.\nIt should be possible for someone else to learn how to use your program or to use a function in your library by reading the comments (and self-help, if provided) without reading the code.\n\n\nAll function comments should contain:\n\n\nDescription of the function\nGlobal variables used and modified\nArguments taken\nReturned values other than the default exit status of the last command run\nExample:\n\n\n#!/bin/bash\n#\n# Perform hot backups of Oracle databases.\n\nexport PATH='/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin'\n\n#######################################\n# Cleanup files from the backup dir\n# Globals:\n#   BACKUP_DIR\n#   ORACLE_SID\n# Arguments:\n#   None\n# Returns:\n#   None\n#######################################\ncleanup() {\n    ...\n}\n\n\n\n\nImplementation Comments\n\n\nComment tricky, non-obvious, interesting or important parts of your code.\n\n\nFormatting\n\n\nIndentation\n\n\nIndent 4 spaces. No tabs.\n\n\nUse blank lines between blocks to improve readability. Indentation is two spaces. Whatever you do, don't use tabs. For existing files, stay faithful to the existing indentation.\n\n\nPipelines\n\n\nPipelines should be split one per line if they don't all fit on one line.\nIf a pipeline all fits on one line, it should be on one line.\n\n\nIf not, it should be split at one pipe segment per line with the pipe on the newline and a 2 space indent for the next section of the pipe. This applies to a chain of commands combined using '|' as well as to logical compounds using '||' and '\n'.\n\n\nExample:\n\n\n# All fits on one line\ncommand1 | command2\n\n# Long commands\ncommand1 \\\n| command2 \\\n| command3 \\\n| command4\n\n\n\n\nBraces\n\n\nThe open parenthesis is always on the same line as the function name. The closing parenthesis is always on a separate line.\n\n\nFor example:\n\n\nfunction ensureSystemretroconfig {  % OK\n...\n}\n\nfunction ensureSystemretroconfig\n{  % NOT OK\n...\n}\n\n\n\n\nConclusion\n\n\nUse common sense and BE CONSISTENT.", 
            "title": "Shell Style Guide"
        }, 
        {
            "location": "/Shell-Style-Guide/#retropie-setup-script-code-style-guide-snippets", 
            "text": "Introduction  Features and Bugs  Command Substitution  Test and Square Braces  Testing Strings    Naming Conventions  Function Names  Variable Names  Constants and Environment Variable Names  Read-only variables  Use Local Variables    Comments  Function Comments  Implementation Comments    Formatting  Indentation  Pipelines  Braces    Conclusion", 
            "title": "RetroPie-Setup Script Code Style Guide Snippets"
        }, 
        {
            "location": "/Shell-Style-Guide/#introduction", 
            "text": "This document describes the style guide that has to be used used for the devlopment of the RetroPie-Setup Script sources. This guide is adapted from the  Google Shell Style Guide .", 
            "title": "Introduction"
        }, 
        {
            "location": "/Shell-Style-Guide/#features-and-bugs", 
            "text": "", 
            "title": "Features and Bugs"
        }, 
        {
            "location": "/Shell-Style-Guide/#command-substitution", 
            "text": "Use $(command) instead of backticks.  Nested backticks require escaping the inner ones with . The $(command) format doesn't change when nested and is easier to read.  Example:  # This is preferred:\nvar= $(command  $(command1) ) \n\n# This is not:\nvar= `command \\`command1\\``", 
            "title": "Command Substitution"
        }, 
        {
            "location": "/Shell-Style-Guide/#test-and-square-braces", 
            "text": "[[ ... ]] is preferred over [, test and /usr/bin/[.\n[[ ... ]] reduces errors as no pathname expansion or word splitting takes place between [[ and ]] and [[ ... ]] allows for regular expression matching where [ ... ] does not.  # This ensures the string on the left is made up of characters in the\n# alnum character class followed by the string name.\n# Note that the RHS should not be quoted here.\n# For the gory details, see\n# E14 at http://tiswww.case.edu/php/chet/bash/FAQ\nif [[  filename  =~ ^[[:alnum:]]+name ]]; then\necho  Match \nfi\n\n# This matches the exact pattern  f*  (Does not match in this case)\nif [[  filename  ==  f*  ]]; then\necho  Match \nfi\n\n# This gives a  too many arguments  error as f* is expanded to the\n# contents of the current directory\nif [  filename  == f* ]; then\necho  Match \nfi", 
            "title": "Test and Square Braces"
        }, 
        {
            "location": "/Shell-Style-Guide/#testing-strings", 
            "text": "Use quotes rather than filler characters where possible.\nBash is smart enough to deal with an empty string in a test. So, given that the code is much easier to read, use tests for empty/non-empty strings or empty strings rather than filler characters.  # Do this:\nif [[  ${my_var}  ==  some_string  ]]; then\ndo_something\nfi\n\n# -z (string length is zero) and -n (string length is not zero) are\n# preferred over testing for an empty string\nif [[ -z  ${my_var}  ]]; then\ndo_something\nfi\n\n# This is OK (ensure quotes on the empty side), but not preferred:\nif [[  ${my_var}  ==   ]]; then\ndo_something\nfi\n\n# Not this:\nif [[  ${my_var}X  ==  some_stringX  ]]; then\ndo_something\nfi  To avoid confusion about what you're testing for, explicitly use -z or -n.  # Use this\nif [[ -n  ${my_var}  ]]; then\ndo_something\nfi\n\n# Instead of this as errors can occur if ${my_var} expands to a test\n# flag\nif [[  ${my_var}  ]]; then\ndo_something\nfi", 
            "title": "Testing Strings"
        }, 
        {
            "location": "/Shell-Style-Guide/#naming-conventions", 
            "text": "", 
            "title": "Naming Conventions"
        }, 
        {
            "location": "/Shell-Style-Guide/#function-names", 
            "text": "Functions should start with a non-capital letter and have a capital letter for each new word. No underscores. Parentheses are required after the function name.  The only exception to this rule is when defining interface functions for the RetroPie-Setup Script modules.  For example:  function depends_retroarch() {  % OK, module interface function\n...\n}\n\nfunction sources_retroarch() {  % OK, module interface function\n...\n}\n\nfunction build_retroarch() {  % OK, module interface function\n...\n}\n\nfunction install_retroarch() {  % OK, module interface function\n...\n}\n\nfunction ensureSystemretroconfig {  % OK\n...\n}\n\nfunction ensure_another_Systemretroconfig {  % NOT OK, no module interface function\n...\n}\n\nfunction configure_retroarch() {  % OK, module interface function\n...\n}", 
            "title": "Function Names"
        }, 
        {
            "location": "/Shell-Style-Guide/#variable-names", 
            "text": "The names of variables are generally all lowercase and can use underscores if needed.", 
            "title": "Variable Names"
        }, 
        {
            "location": "/Shell-Style-Guide/#constants-and-environment-variable-names", 
            "text": "All caps, separated with underscores, declared at the top of the file.\nConstants and anything exported to the environment should be capitalized.  # Constant\nreadonly PATH_TO_FILES='/some/path'\n\n# Both constant and environment\ndeclare -xr ORACLE_SID='PROD'\nSome things become constant at their first setting (for example, via getopts). Thus, it's OK to set a constant in getopts or based on a condition, but it should be made readonly immediately afterwards. Note that declare doesn't operate on global variables within functions, so readonly or export is recommended instead.\n\nVERBOSE='false'\nwhile getopts 'v' flag; do\ncase  ${flag}  in\nv) VERBOSE='true' ;;\nesac\ndone\nreadonly VERBOSE", 
            "title": "Constants and Environment Variable Names"
        }, 
        {
            "location": "/Shell-Style-Guide/#read-only-variables", 
            "text": "Use readonly or declare -r to ensure they're read only.\nAs globals are widely used in shell, it's important to catch errors when working with them. When you declare a variable that is meant to be read-only, make this explicit.  zip_version= $(dpkg --status zip | grep Version: | cut -d ' ' -f 2) \nif [[ -z  ${zip_version}  ]]; then\n    error_message\nelse\n    readonly zip_version\nfi", 
            "title": "Read-only variables"
        }, 
        {
            "location": "/Shell-Style-Guide/#use-local-variables", 
            "text": "Declare function-specific variables with local. Declaration and assignment should be on different lines.\nEnsure that local variables are only seen inside a function and its children by using local when declaring them. This avoids polluting the global name space and inadvertently setting variables that may have significance outside the function.  Declaration and assignment must be separate statements when the assignment value is provided by a command substitution; as the 'local' builtin does not propagate the exit code from the command substitution.  my_func2() {\n    local name= $1 \n\n    # Separate lines for declaration and assignment:\n    local my_var\n    my_var= $(my_func)  || return\n\n    # DO NOT do this: $? contains the exit code of 'local', not my_func\n    local my_var= $(my_func) \n    [[ $? -eq 0 ]] || return\n\n    ...\n}", 
            "title": "Use Local Variables"
        }, 
        {
            "location": "/Shell-Style-Guide/#comments", 
            "text": "", 
            "title": "Comments"
        }, 
        {
            "location": "/Shell-Style-Guide/#function-comments", 
            "text": "Any function that is not both obvious and short must be commented. Any function in a library must be commented regardless of length or complexity.\nIt should be possible for someone else to learn how to use your program or to use a function in your library by reading the comments (and self-help, if provided) without reading the code.  All function comments should contain:  Description of the function\nGlobal variables used and modified\nArguments taken\nReturned values other than the default exit status of the last command run\nExample:  #!/bin/bash\n#\n# Perform hot backups of Oracle databases.\n\nexport PATH='/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin'\n\n#######################################\n# Cleanup files from the backup dir\n# Globals:\n#   BACKUP_DIR\n#   ORACLE_SID\n# Arguments:\n#   None\n# Returns:\n#   None\n#######################################\ncleanup() {\n    ...\n}", 
            "title": "Function Comments"
        }, 
        {
            "location": "/Shell-Style-Guide/#implementation-comments", 
            "text": "Comment tricky, non-obvious, interesting or important parts of your code.", 
            "title": "Implementation Comments"
        }, 
        {
            "location": "/Shell-Style-Guide/#formatting", 
            "text": "", 
            "title": "Formatting"
        }, 
        {
            "location": "/Shell-Style-Guide/#indentation", 
            "text": "Indent 4 spaces. No tabs.  Use blank lines between blocks to improve readability. Indentation is two spaces. Whatever you do, don't use tabs. For existing files, stay faithful to the existing indentation.", 
            "title": "Indentation"
        }, 
        {
            "location": "/Shell-Style-Guide/#pipelines", 
            "text": "Pipelines should be split one per line if they don't all fit on one line.\nIf a pipeline all fits on one line, it should be on one line.  If not, it should be split at one pipe segment per line with the pipe on the newline and a 2 space indent for the next section of the pipe. This applies to a chain of commands combined using '|' as well as to logical compounds using '||' and ' '.  Example:  # All fits on one line\ncommand1 | command2\n\n# Long commands\ncommand1 \\\n| command2 \\\n| command3 \\\n| command4", 
            "title": "Pipelines"
        }, 
        {
            "location": "/Shell-Style-Guide/#braces", 
            "text": "The open parenthesis is always on the same line as the function name. The closing parenthesis is always on a separate line.  For example:  function ensureSystemretroconfig {  % OK\n...\n}\n\nfunction ensureSystemretroconfig\n{  % NOT OK\n...\n}", 
            "title": "Braces"
        }, 
        {
            "location": "/Shell-Style-Guide/#conclusion", 
            "text": "Use common sense and BE CONSISTENT.", 
            "title": "Conclusion"
        }
    ]
}